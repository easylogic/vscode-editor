/*!
 * 
 * /* 
 *  * MIT License
 *  * 
 *  * Copyright (c) 2019 jinho park (cyberuls@gmail.com, easylogic)
 *  * 
 *  * Permission is hereby granted, free of charge, to any person obtaining a copy
 *  * of this software and associated documentation files (the "Software"), to deal
 *  * in the Software without restriction, including without limitation the rights
 *  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 *  * copies of the Software, and to permit persons to whom the Software is
 *  * furnished to do so, subject to the following conditions:
 *  * 
 *  * The above copyright notice and this permission notice shall be included in all
 *  * copies or substantial portions of the Software.
 *  * 
 *  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 *  * SOFTWARE.
 *  * /
 * 
 */
window["EasyLogic"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 164);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeEventChecker", function() { return makeEventChecker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECK_DOM_EVENT_PATTERN", function() { return CHECK_DOM_EVENT_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECK_LOAD_PATTERN", function() { return CHECK_LOAD_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECK_BIND_PATTERN", function() { return CHECK_BIND_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECK_SUBSCRIBE_PATTERN", function() { return CHECK_SUBSCRIBE_PATTERN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PIPE", function() { return PIPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EVENT", function() { return EVENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMAND", function() { return COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ON", function() { return ON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NAME_SAPARATOR", function() { return NAME_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECK_SAPARATOR", function() { return CHECK_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOM_EVENT_SAPARATOR", function() { return DOM_EVENT_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOAD_SAPARATOR", function() { return LOAD_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BIND_SAPARATOR", function() { return BIND_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBSCRIBE_SAPARATOR", function() { return SUBSCRIBE_SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SAPARATOR", function() { return SAPARATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHECKER", function() { return CHECKER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AFTER", function() { return AFTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BEFORE", function() { return BEFORE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IF", function() { return IF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEY", function() { return KEY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARROW_UP", function() { return ARROW_UP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARROW_DOWN", function() { return ARROW_DOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARROW_LEFT", function() { return ARROW_LEFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARROW_RIGHT", function() { return ARROW_RIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ENTER", function() { return ENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SPACE", function() { return SPACE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ESCAPE", function() { return ESCAPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALT", function() { return ALT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHIFT", function() { return SHIFT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "META", function() { return META; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTROL", function() { return CONTROL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELF", function() { return SELF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LEFT_BUTTON", function() { return LEFT_BUTTON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIT", function() { return FIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PASSIVE", function() { return PASSIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMDIFF", function() { return DOMDIFF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEBOUNCE", function() { return DEBOUNCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DELAY", function() { return DELAY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "D1000", function() { return D1000; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THROTTLE", function() { return THROTTLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALL_TRIGGER", function() { return ALL_TRIGGER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CAPTURE", function() { return CAPTURE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOVE", function() { return MOVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "END", function() { return END; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PREVENT", function() { return PREVENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STOP", function() { return STOP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBSCRIBE", function() { return SUBSCRIBE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBSCRIBE_ALL", function() { return SUBSCRIBE_ALL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM", function() { return CUSTOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CLICK", function() { return CLICK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOUBLECLICK", function() { return DOUBLECLICK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEDOWN", function() { return MOUSEDOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEUP", function() { return MOUSEUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEMOVE", function() { return MOUSEMOVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEOVER", function() { return MOUSEOVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEOUT", function() { return MOUSEOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSEENTER", function() { return MOUSEENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOUSELEAVE", function() { return MOUSELEAVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCHSTART", function() { return TOUCHSTART; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCHMOVE", function() { return TOUCHMOVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOUCHEND", function() { return TOUCHEND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEYDOWN", function() { return KEYDOWN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEYUP", function() { return KEYUP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KEYPRESS", function() { return KEYPRESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAG", function() { return DRAG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGSTART", function() { return DRAGSTART; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DROP", function() { return DROP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGOVER", function() { return DRAGOVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGENTER", function() { return DRAGENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGLEAVE", function() { return DRAGLEAVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGEXIT", function() { return DRAGEXIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGOUT", function() { return DRAGOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAGEND", function() { return DRAGEND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CONTEXTMENU", function() { return CONTEXTMENU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHANGE", function() { return CHANGE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INPUT", function() { return INPUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUS", function() { return FOCUS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUSIN", function() { return FOCUSIN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOCUSOUT", function() { return FOCUSOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BLUR", function() { return BLUR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PASTE", function() { return PASTE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RESIZE", function() { return RESIZE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SCROLL", function() { return SCROLL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SUBMIT", function() { return SUBMIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTERSTART", function() { return POINTERSTART; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTEROVER", function() { return POINTEROVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTERENTER", function() { return POINTERENTER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTEROUT", function() { return POINTEROUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTERMOVE", function() { return POINTERMOVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "POINTEREND", function() { return POINTEREND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHANGEINPUT", function() { return CHANGEINPUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WHEEL", function() { return WHEEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANIMATIONSTART", function() { return ANIMATIONSTART; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANIMATIONEND", function() { return ANIMATIONEND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANIMATIONITERATION", function() { return ANIMATIONITERATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSITIONSTART", function() { return TRANSITIONSTART; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSITIONEND", function() { return TRANSITIONEND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSITIONRUN", function() { return TRANSITIONRUN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSITIONCANCEL", function() { return TRANSITIONCANCEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOUBLETAB", function() { return DOUBLETAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOAD", function() { return LOAD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createRef", function() { return createRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getRef", function() { return getRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BIND_CHECK_FUNCTION", function() { return BIND_CHECK_FUNCTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BIND_CHECK_DEFAULT_FUNCTION", function() { return BIND_CHECK_DEFAULT_FUNCTION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BIND", function() { return BIND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "normalizeWheelEvent", function() { return normalizeWheelEvent; });
/* harmony import */ var _functions_math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);

var makeEventChecker = function makeEventChecker(value) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CHECK_SAPARATOR;
  return " ".concat(split, " ").concat(value);
}; // event name regular expression

var CHECK_DOM_EVENT_PATTERN = /^domevent (.*)/gi;
var CHECK_LOAD_PATTERN = /^load (.*)/gi;
var CHECK_BIND_PATTERN = /^bind (.*)/gi;
var CHECK_SUBSCRIBE_PATTERN = /^subscribe (.*)/gi;
var MULTI_PREFIX = "ME@";
var SPLITTER = "|";
var PIPE = function PIPE() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.join(SPLITTER);
};
var EVENT = function EVENT() {
  return MULTI_PREFIX + PIPE.apply(void 0, arguments);
};
var COMMAND = EVENT;
var ON = EVENT;
var NAME_SAPARATOR = ":";
var CHECK_SAPARATOR = "|";
var DOM_EVENT_SAPARATOR = "domevent ";
var LOAD_SAPARATOR = "load ";
var BIND_SAPARATOR = "bind ";
var SUBSCRIBE_SAPARATOR = "subscribe ";
var SAPARATOR = ' ';
var refManager = {};

var DOM_EVENT_MAKE = function DOM_EVENT_MAKE() {
  for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    keys[_key2] = arguments[_key2];
  }

  var key = keys.join(NAME_SAPARATOR);
  return function () {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    return DOM_EVENT_SAPARATOR + [key].concat(args).join(SAPARATOR);
  };
};

var SUBSCRIBE_EVENT_MAKE = function SUBSCRIBE_EVENT_MAKE() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }

  return SUBSCRIBE_SAPARATOR + args.join(CHECK_SAPARATOR);
}; // Predefined CHECKER


var CHECKER = function CHECKER(value) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CHECK_SAPARATOR;
  return makeEventChecker(value, split);
};
var AFTER = function AFTER(value) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CHECK_SAPARATOR;
  return makeEventChecker("after(".concat(value, ")"), split);
};
var BEFORE = function BEFORE(value) {
  var split = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CHECK_SAPARATOR;
  return makeEventChecker("before(".concat(value, ")"), split);
};
var IF = CHECKER;
var KEY = CHECKER;
var ARROW_UP = CHECKER('ArrowUp');
var ARROW_DOWN = CHECKER('ArrowDown');
var ARROW_LEFT = CHECKER('ArrowLeft');
var ARROW_RIGHT = CHECKER('ArrowRight');
var ENTER = CHECKER('Enter');
var SPACE = CHECKER('Space');
var ESCAPE = CHECKER('Escape');
var ALT = CHECKER("isAltKey");
var SHIFT = CHECKER("isShiftKey");
var META = CHECKER("isMetaKey");
var CONTROL = CHECKER("isCtrlKey");
var SELF = CHECKER("self");
var LEFT_BUTTON = CHECKER("isMouseLeftButton");
var FIT = CHECKER("fit");
var PASSIVE = CHECKER("passive");
var DOMDIFF = CHECKER('domdiff'); // event config method

var DEBOUNCE = function DEBOUNCE() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  return CHECKER("debounce(".concat(t, ")"));
};
var DELAY = function DELAY() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
  return CHECKER("delay(".concat(t, ")"));
};
var D1000 = DEBOUNCE(1000);
var THROTTLE = function THROTTLE() {
  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
  return CHECKER("throttle(".concat(t, ")"));
};
var ALL_TRIGGER = CHECKER("allTrigger()");
var CAPTURE = CHECKER("capture()"); // event config method
// before method
// after method

var MOVE = function MOVE() {
  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "move";
  return AFTER("bodyMouseMove ".concat(method));
};
var END = function END() {
  var method = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "end";
  return AFTER("bodyMouseUp ".concat(method));
};
var PREVENT = AFTER("preventDefault");
var STOP = AFTER("stopPropagation");
var SUBSCRIBE = SUBSCRIBE_EVENT_MAKE;
var SUBSCRIBE_ALL = function SUBSCRIBE_ALL() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }

  return SUBSCRIBE_EVENT_MAKE.apply(void 0, args.concat([ALL_TRIGGER]));
};
var CUSTOM = DOM_EVENT_MAKE;
var CLICK = DOM_EVENT_MAKE("click");
var DOUBLECLICK = DOM_EVENT_MAKE("dblclick");
var MOUSEDOWN = DOM_EVENT_MAKE("mousedown");
var MOUSEUP = DOM_EVENT_MAKE("mouseup");
var MOUSEMOVE = DOM_EVENT_MAKE("mousemove");
var MOUSEOVER = DOM_EVENT_MAKE("mouseover");
var MOUSEOUT = DOM_EVENT_MAKE("mouseout");
var MOUSEENTER = DOM_EVENT_MAKE("mouseenter");
var MOUSELEAVE = DOM_EVENT_MAKE("mouseleave");
var TOUCHSTART = DOM_EVENT_MAKE("touchstart");
var TOUCHMOVE = DOM_EVENT_MAKE("touchmove");
var TOUCHEND = DOM_EVENT_MAKE("touchend");
var KEYDOWN = DOM_EVENT_MAKE("keydown");
var KEYUP = DOM_EVENT_MAKE("keyup");
var KEYPRESS = DOM_EVENT_MAKE("keypress");
var DRAG = DOM_EVENT_MAKE("drag");
var DRAGSTART = DOM_EVENT_MAKE("dragstart");
var DROP = DOM_EVENT_MAKE("drop");
var DRAGOVER = DOM_EVENT_MAKE("dragover");
var DRAGENTER = DOM_EVENT_MAKE("dragenter");
var DRAGLEAVE = DOM_EVENT_MAKE("dragleave");
var DRAGEXIT = DOM_EVENT_MAKE("dragexit");
var DRAGOUT = DOM_EVENT_MAKE("dragout");
var DRAGEND = DOM_EVENT_MAKE("dragend");
var CONTEXTMENU = DOM_EVENT_MAKE("contextmenu");
var CHANGE = DOM_EVENT_MAKE("change");
var INPUT = DOM_EVENT_MAKE("input");
var FOCUS = DOM_EVENT_MAKE("focus");
var FOCUSIN = DOM_EVENT_MAKE("focusin");
var FOCUSOUT = DOM_EVENT_MAKE("focusout");
var BLUR = DOM_EVENT_MAKE("blur");
var PASTE = DOM_EVENT_MAKE("paste");
var RESIZE = DOM_EVENT_MAKE("resize");
var SCROLL = DOM_EVENT_MAKE("scroll");
var SUBMIT = DOM_EVENT_MAKE("submit"); // pointerstart 의 경우 drag 를 위한 시작점이기 때문에  left button 만 허용한다. 
// context 메뉴나 wheel 은 허용하지 않는다. 

var POINTERSTART = function POINTERSTART() {
  return CUSTOM("pointerdown").apply(void 0, arguments) + LEFT_BUTTON;
}; // 

var POINTEROVER = CUSTOM("pointerover");
var POINTERENTER = CUSTOM("pointerenter");
var POINTEROUT = CUSTOM("pointerout");
var POINTERMOVE = CUSTOM("pointermove");
var POINTEREND = CUSTOM("pointerup");
var CHANGEINPUT = CUSTOM("change", "input");
var WHEEL = CUSTOM("wheel", "mousewheel", "DOMMouseScroll");
var ANIMATIONSTART = DOM_EVENT_MAKE('animationstart');
var ANIMATIONEND = DOM_EVENT_MAKE('animationend');
var ANIMATIONITERATION = DOM_EVENT_MAKE('animationiteration');
var TRANSITIONSTART = DOM_EVENT_MAKE('transitionstart');
var TRANSITIONEND = DOM_EVENT_MAKE('transitionend');
var TRANSITIONRUN = DOM_EVENT_MAKE('transitionrun');
var TRANSITIONCANCEL = DOM_EVENT_MAKE('transitioncancel');
var DOUBLETAB = CUSTOM('doubletab'); // Predefined LOADER

var LOAD = function LOAD() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "$el";
  return LOAD_SAPARATOR + value;
};
var createRef = function createRef(value) {
  if (value === '') return '';
  var id = Object(_functions_math__WEBPACK_IMPORTED_MODULE_0__["uuid"])();
  refManager[id] = value;
  return id;
};
var getRef = function getRef(id) {
  return refManager[id] || '';
};
var BIND_CHECK_FUNCTION = function BIND_CHECK_FUNCTION(field) {
  return function () {
    return this.prevState[field] != this.state[field];
  };
};
var BIND_CHECK_DEFAULT_FUNCTION = function BIND_CHECK_DEFAULT_FUNCTION() {
  return true;
};
var BIND = function BIND() {
  var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "$el";
  var checkFieldOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return BIND_SAPARATOR + value + (checkFieldOrCallback ? CHECK_SAPARATOR + createRef(checkFieldOrCallback) : '');
};
function normalizeWheelEvent(e) {
  var dx = e.deltaX;
  var dy = e.deltaY;

  if (dx === 0 && e.shiftKey) {
    var _ref = [dx, dy];
    dy = _ref[0];
    dx = _ref[1];
  }

  if (e.deltaMode === WheelEvent.DOM_DELTA_LINE) {
    dy *= 8;
  } else if (e.deltaMode === WheelEvent.DOM_DELTA_PAGE) {
    dy *= 24;
  }

  return [limit(dx, 24), limit(dy, 24), 0];
}

function limit(delta, maxDelta) {
  return Math.sign(delta) * Math.min(maxDelta, Math.abs(delta));
}

/* harmony default export */ __webpack_exports__["default"] = ({
  addDomEvent: function addDomEvent(dom, eventName, callback) {
    var useCapture = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

    if (dom) {
      dom.addEventListener(eventName, callback, useCapture);
    }
  },
  removeDomEvent: function removeDomEvent(dom, eventName, callback) {
    if (dom) {
      dom.removeEventListener(eventName, callback);
    }
  },
  pos: function pos(e) {
    if (e.touches && e.touches[0]) {
      return e.touches[0];
    }

    return e;
  },
  posXY: function posXY(e) {
    var pos = this.pos(e);
    return {
      x: pos.pageX,
      y: pos.pageY
    };
  }
});

/***/ }),
/* 2 */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Position; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Length; });
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);




var _stringToPercent = {
  center: 50,
  top: 0,
  left: 0,
  right: 100,
  bottom: 100
};
var Position = function Position() {
  _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Position);
};
Position.CENTER = "center";
Position.TOP = "top";
Position.RIGHT = "right";
Position.LEFT = "left";
Position.BOTTOM = "bottom";
var REG_CSS_UNIT = /([\d.]+)(px|pt|fr|r?em|deg|vh|vw|m?s|%|g?rad|turn)/gi;
var Length = /*#__PURE__*/function () {
  function Length() {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    var unit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Length);

    /**
     * @property {number} value 
     */
    this.value = value;

    if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNumber"])(this.value) && isNaN(this.value)) {
      throw new Error('NaN is not able to set');
    }

    this.unit = unit;
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_0___default()(Length, [{
    key: Symbol.toPrimitive,
    value: function value(hint) {
      if (hint == "number") {
        return this.value;
      }

      return this.toString();
    }
  }, {
    key: "toString",
    value: function toString() {
      switch (this.unit) {
        case 'string':
        case 'number':
          return this.value + '';

        case 'var':
          return "var(--".concat(this.value, ")");

        case 'calc':
          return "calc(".concat(this.value, ")");

        default:
          return this.value + this.unit;
      }
    }
  }, {
    key: "isUnitType",
    value: function isUnitType(unit) {
      return this.unit === unit;
    }
  }, {
    key: "isCalc",
    value: function isCalc() {
      return this.isUnitType('calc');
    }
  }, {
    key: "isFr",
    value: function isFr() {
      return this.isUnitType('fr');
    }
  }, {
    key: "isPercent",
    value: function isPercent() {
      return this.isUnitType('%');
    }
  }, {
    key: "isPx",
    value: function isPx() {
      return this.isUnitType('px');
    }
  }, {
    key: "isEm",
    value: function isEm() {
      return this.isUnitType('em');
    }
  }, {
    key: "isDeg",
    value: function isDeg() {
      return this.isUnitType('deg');
    }
  }, {
    key: "isRad",
    value: function isRad() {
      return this.isUnitType('rad');
    }
  }, {
    key: "isTurn",
    value: function isTurn() {
      return this.isUnitType('turn');
    }
  }, {
    key: "isSecond",
    value: function isSecond() {
      return this.isUnitType('s');
    }
  }, {
    key: "isMs",
    value: function isMs() {
      return this.isUnitType('ms');
    }
  }, {
    key: "isNumber",
    value: function isNumber() {
      return this.isUnitType('number');
    }
  }, {
    key: "isString",
    value: function isString() {
      return this.isUnitType('');
    }
  }, {
    key: "isVar",
    value: function isVar() {
      return this.isUnitType('--');
    }
  }, {
    key: "isNaN",
    value: function (_isNaN) {
      function isNaN() {
        return _isNaN.apply(this, arguments);
      }

      isNaN.toString = function () {
        return _isNaN.toString();
      };

      return isNaN;
    }(function () {
      return Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNumber"])(this.value) && isNaN(this.value);
    })
  }, {
    key: "set",
    value: function set(value) {
      this.value = value;
      return this;
    }
  }, {
    key: "add",
    value: function add(obj) {
      this.value += +obj;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(obj) {
      return this.add(-1 * obj);
    }
  }, {
    key: "mul",
    value: function mul(obj) {
      this.value *= +obj;
      return this;
    }
  }, {
    key: "div",
    value: function div(obj) {
      this.value /= +obj;
      return this;
    }
  }, {
    key: "mod",
    value: function mod(obj) {
      this.value %= +obj;
      return this;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new Length(this.value, this.unit);
    }
  }, {
    key: "getUnitName",
    value: function getUnitName() {
      return this.unit === "%" ? "percent" : this.unit;
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.toString(); // { value: this.value, unit: this.unit };
    }
    /**
     * unit 이 '%' 타입일 때 x/100 를 구한다. 
     * 
     * @param {Number} maxValue 
     */

  }, {
    key: "rate",
    value: function rate() {
      var maxValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;
      return this.value / maxValue;
    }
  }, {
    key: "stringToPercent",
    value: function stringToPercent() {
      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(_stringToPercent[this.value])) {
        return Length.percent(_stringToPercent[this.value]);
      }

      return Length.percent(0);
    }
  }, {
    key: "stringToEm",
    value: function stringToEm(maxValue) {
      return this.stringToPercent().toEm(maxValue);
    }
  }, {
    key: "stringToPx",
    value: function stringToPx(maxValue) {
      return this.stringToPercent().toPx(maxValue);
    }
  }, {
    key: "toPercent",
    value: function toPercent(maxValue) {
      var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

      if (this.isPercent()) {
        return this.clone();
      } else if (this.isPx()) {
        return Length.percent(this.value * 100 / maxValue);
      } else if (this.isEm()) {
        return Length.percent(this.value * fontSize * 100 / maxValue);
      } else if (this.isString()) {
        return this.stringToPercent(maxValue);
      } else if (this.isDeg()) {
        return Length.percent(this.value / 360 * 100);
      }
    }
  }, {
    key: "toEm",
    value: function toEm(maxValue) {
      var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

      if (this.isPercent()) {
        return Length.em(this.value / 100 * maxValue / fontSize);
      } else if (this.isPx()) {
        return Length.em(this.value / fontSize);
      } else if (this.isEm()) {
        return this.clone();
      } else if (this.isString()) {
        return this.stringToEm(maxValue);
      }
    }
  }, {
    key: "toPx",
    value: function toPx(maxValue) {
      var fontSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;

      if (this.isPercent()) {
        return Length.px(this.value / 100 * maxValue);
      } else if (this.isPx()) {
        return this.clone();
      } else if (this.isEm()) {
        return Length.px(this.value / 100 * maxValue / 16);
      } else if (this.isString()) {
        return this.stringToPx(maxValue);
      }
    }
  }, {
    key: "toDeg",
    value: function toDeg() {
      if (this.isDeg()) {
        return this.clone();
      } else if (this.isTurn()) {
        return Length.deg(this.value * 360);
      } else if (this.isRad()) {
        return Length.deg(this.value * (180 / Math.PI));
      }
    }
  }, {
    key: "toTurn",
    value: function toTurn() {
      if (this.isTurn()) {
        return this.clone();
      } else if (this.isDeg()) {
        return Length.turn(this.value / 360);
      }
    }
  }, {
    key: "toSecond",
    value: function toSecond() {
      if (this.isSecond()) {
        return this;
      } else if (this.isMs()) {
        return Length.second(this.value / 1000);
      }
    }
  }, {
    key: "toMs",
    value: function toMs() {
      if (this.isSecond()) {
        return Length.ms(this.value * 1000);
      } else if (this.isMs()) {
        return this;
      }
    }
  }, {
    key: "to",
    value: function to(unit, maxValue) {
      var fontSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 16;

      if (unit === "px") {
        return this.toPx(maxValue, fontSize);
      } else if (unit === "%" || unit === "percent") {
        return this.toPercent(maxValue, fontSize);
      } else if (unit === "em") {
        return this.toEm(maxValue, fontSize);
      } else if (unit === "deg") {
        return this.toDeg();
      } else if (unit === "turn") {
        return this.toTurn();
      }
    }
  }, {
    key: "toUnit",
    value: function toUnit(unit) {
      return new Length(this.value, unit);
    }
  }, {
    key: "calculate",
    value: function calculate(type, dist) {
      var func = this[type];

      if (func) {
        return func.call(this, dist);
      }

      return this;
    }
  }, {
    key: "includes",
    value: function includes() {
      for (var _len = arguments.length, arr = new Array(_len), _key = 0; _key < _len; _key++) {
        arr[_key] = arguments[_key];
      }

      return arr.includes(this.value);
    }
  }, {
    key: "round",
    value: function round(k) {
      return new Length(Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_3__["round"])(this.value, k), this.unit);
    }
  }, {
    key: "floor",
    value: function floor() {
      return new Length(Math.floor(this.value), this.unit);
    }
  }, {
    key: "equals",
    value: function equals(t) {
      return this.is(t.value) && this.isUnitType(t.unit);
    }
  }, {
    key: "is",
    value: function is(value) {
      return this.value === value;
    }
  }, {
    key: "clamp",
    value: function clamp(min, max) {
      return new Length(Math.max(min, Math.min(max, this.value)), this.unit);
    }
  }], [{
    key: "min",
    value: function min() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var min = args.shift();

      for (var i = 0, len = args.length; i < len; i++) {
        if (min.value > args[i].value) {
          min = args[i];
        }
      }

      return min;
    }
  }, {
    key: "max",
    value: function max() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var max = args.shift();

      for (var i = 0, len = args.length; i < len; i++) {
        if (max.value < args[i].value) {
          max = args[i];
        }
      }

      return max;
    }
  }, {
    key: "string",
    value: function string(value) {
      return new Length(value + "", "");
    }
  }, {
    key: "number",
    value: function number(value) {
      return new Length(+value, 'number');
    }
  }, {
    key: "px",
    value: function px(value) {
      return new Length(+value, "px");
    }
  }, {
    key: "em",
    value: function em(value) {
      return new Length(+value, "em");
    }
  }, {
    key: "percent",
    value: function percent(value) {
      return new Length(+value, "%");
    }
  }, {
    key: "deg",
    value: function deg(value) {
      return new Length(+value, "deg");
    }
  }, {
    key: "rad",
    value: function rad(value) {
      return new Length(+value, "rad");
    }
  }, {
    key: "turn",
    value: function turn(value) {
      return new Length(+value, "turn");
    }
  }, {
    key: "fr",
    value: function fr(value) {
      return new Length(+value, "fr");
    }
  }, {
    key: "second",
    value: function second(value) {
      return new Length(+value, 's');
    }
  }, {
    key: "ms",
    value: function ms(value) {
      return new Length(+value, 'ms');
    }
  }, {
    key: "var",
    value: function _var(value) {
      return new Length(value + '', '--');
    }
  }, {
    key: "z",
    value: function z() {
      return Length.px(0);
    }
    /**
     * return calc()  css fuction string
     *
     * Length.calc(`${Length.percent(100)} - ${Length.px(10)}`)
     *
     * @param {*} str
     */

  }, {
    key: "calc",
    value: function calc(str) {
      return new Length(str, "calc");
    }
  }, {
    key: "parse",
    value: function parse(obj) {
      obj = obj || Length.number(0);

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isString"])(obj)) {
        obj = obj.trim();
        var arr = obj.replace(REG_CSS_UNIT, "$1 $2").split(" ");
        var isNumberString = +arr[0] == arr[0];

        if (isNumberString) {
          return new Length(+arr[0], arr[1]);
        } else {
          return new Length(arr[0]);
        }
      }

      if (obj instanceof Length) {
        return obj;
      } else if (obj.unit) {
        if (obj.unit == "%" || obj.unit == "percent") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.percent)) {
            value = obj.percent;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.percent(value);
        } else if (obj.unit == "px") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.px)) {
            value = obj.px;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.px(value);
        } else if (obj.unit == "em") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.em)) {
            value = obj.em;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.em(value);
        } else if (obj.unit == "deg") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.deg)) {
            value = obj.deg;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.deg(value);
        } else if (obj.unit == "turn") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.deg)) {
            value = obj.turn;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.turn(value);
        } else if (obj.unit == "s") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.second)) {
            value = obj.second;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.second(value);
        } else if (obj.unit == "ms") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.ms)) {
            value = obj.ms;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.ms(value);
        } else if (obj.unit == "number") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.number(value);
        } else if (obj.unit == "--") {
          var value = 0;

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length["var"](value);
        } else if (obj.unit === "" || obj.unit === "string") {
          var value = "";

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.str)) {
            value = obj.str;
          } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isNotUndefined"])(obj.value)) {
            value = obj.value;
          }

          return Length.string(value);
        }
      }

      return Length.string(obj);
    }
  }]);

  return Length;
}();
Length.auto = Length.string("auto");

/***/ }),
/* 4 */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(152);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(110)["default"];

var assertThisInitialized = __webpack_require__(153);

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "collectProps", function() { return collectProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyEach", function() { return keyEach; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyMap", function() { return keyMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyMapJoin", function() { return keyMapJoin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "get", function() { return get; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultValue", function() { return defaultValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isUndefined", function() { return isUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNotUndefined", function() { return isNotUndefined; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isBoolean", function() { return isBoolean; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNotString", function() { return isNotString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumber", function() { return isNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isZero", function() { return isZero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNotZero", function() { return isNotZero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clone", function() { return clone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cleanObject", function() { return cleanObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineKeyArray", function() { return combineKeyArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return repeat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomItem", function() { return randomItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "html", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSS_TO_STRING", function() { return CSS_TO_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STRING_TO_CSS", function() { return STRING_TO_CSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OBJECT_TO_PROPERTY", function() { return OBJECT_TO_PROPERTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OBJECT_TO_CLASS", function() { return OBJECT_TO_CLASS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TAG_TO_STRING", function() { return TAG_TO_STRING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapjoin", function() { return mapjoin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayEquals", function() { return isArrayEquals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitMethodByKeyword", function() { return splitMethodByKeyword; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "curveToPath", function() { return curveToPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "curveToPointLine", function() { return curveToPointLine; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(46);
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(110);
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _create__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(53);
/* harmony import */ var _bezier__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(24);






var _HTML_TAG;



/**
 * property 수집하기
 * 상위 클래스의 모든 property 를 수집해서 리턴한다.
 * 
 * @param {Object} root  상속관계에 있는 인스턴스 
 * @param {Object} expectMethod 제외될 필드 리스트 { [field]: true }
 * @returns {string[]} 나의 상위 모든 메소드를 수집해서 리턴한다. 
 */

function collectProps(root) {
  var expectMethod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var p = root.__proto__;
  var results = [];

  do {
    var _isObject = p instanceof Object;

    if (_isObject === false) {
      break;
    }

    var names = Object.getOwnPropertyNames(p).filter(function (name) {
      return root && isFunction(root[name]) && !expectMethod[name];
    });
    results.push.apply(results, names);
    p = p.__proto__;
  } while (p);

  return results;
}
function debounce(callback) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (delay === 0) {
    return callback;
  }

  var t = undefined;
  return function ($1, $2, $3, $4, $5) {
    if (t) {
      clearTimeout(t);
    }

    t = setTimeout(function () {
      callback($1, $2, $3, $4, $5);
    }, delay || 300);
  };
}
function throttle(callback, delay) {
  var t = undefined;
  return function ($1, $2, $3, $4, $5) {
    if (!t) {
      t = setTimeout(function () {
        callback($1, $2, $3, $4, $5);
        t = null;
      }, delay || 300);
    }
  };
}
function keyEach(obj, callback) {
  Object.keys(obj).forEach(function (key, index) {
    callback(key, obj[key], index);
  });
}
function keyMap(obj, callback) {
  return Object.keys(obj).map(function (key, index) {
    return callback(key, obj[key], index);
  });
}
function keyMapJoin(obj, callback) {
  var joinString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return keyMap(obj, callback).join(joinString);
}
function get(obj, key, callback) {
  var returnValue = defaultValue(obj[key], key);

  if (isFunction(callback)) {
    return callback(returnValue);
  }

  return returnValue;
}
function defaultValue(value, defaultValue) {
  return typeof value == 'undefined' ? defaultValue : value;
}
function isUndefined(value) {
  return typeof value == 'undefined' || value === null;
}
function isNotUndefined(value) {
  return isUndefined(value) === false;
}
function isArray(value) {
  return Array.isArray(value);
}
function isBoolean(value) {
  return typeof value == 'boolean';
}
function isString(value) {
  return typeof value == 'string';
}
function isNotString(value) {
  return isString(value) === false;
}
function isObject(value) {
  return _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_4___default()(value) == 'object' && !isArray(value) && !isNumber(value) && !isString(value) && value !== null;
}
function isFunction(value) {
  return typeof value == 'function';
}
function isNumber(value) {
  return typeof value == 'number';
}
function isZero(num) {
  return num === 0;
}
function isNotZero(num) {
  return !isZero(num);
}
function clone(obj) {
  if (isUndefined(obj)) return undefined;
  return JSON.parse(JSON.stringify(obj));
}
function cleanObject(obj) {
  var realObject = {};
  Object.keys(obj).filter(function (key) {
    return !!obj[key];
  }).forEach(function (key) {
    realObject[key] = obj[key];
  });
  return realObject;
}
function combineKeyArray(obj) {
  Object.keys(obj).forEach(function (key) {
    if (Array.isArray(obj[key])) {
      obj[key] = obj[key].join(', ');
    }
  });
  return obj;
}
function repeat(count) {
  return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(Array(count));
}
function randomItem() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args[Object(_create__WEBPACK_IMPORTED_MODULE_5__["randomNumber"])(0, args.length - 1)];
}
var short_tag_regexp = /\<(\w*)([^\>]*)\/\>/gim;
var HTML_TAG = (_HTML_TAG = {
  'image': true,
  'input': true,
  'br': true,
  'path': true,
  'line': true,
  'circle': true,
  'rect': true
}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(_HTML_TAG, "path", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(_HTML_TAG, 'polygon', true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(_HTML_TAG, 'polyline', true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(_HTML_TAG, 'use', true), _HTML_TAG);
var html = function html(strings) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var results = strings.map(function (it, index) {
    var results = args[index] || '';

    if (isFunction(results)) {
      results = results();
    }

    if (!isArray(results)) {
      results = [results];
    }

    results = results.join('');
    return it + results;
  }).join('');
  results = results.replace(short_tag_regexp, function (match, p1) {
    if (HTML_TAG[p1.toLowerCase()]) {
      return match;
    } else {
      return match.replace('/>', "></".concat(p1, ">"));
    }
  });
  return results;
};
function CSS_TO_STRING(style) {
  var postfix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var newStyle = style || {};
  return Object.keys(newStyle).filter(function (key) {
    return isNotUndefined(newStyle[key]);
  }).map(function (key) {
    return "".concat(key, ": ").concat(newStyle[key]);
  }).join(";" + postfix);
}
function STRING_TO_CSS() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var splitChar = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ';';
  var keySplitChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ':';
  str = str + "";
  var style = {};
  if (str === '') return style;
  str.split(splitChar).forEach(function (it) {
    var _it$split$map = it.split(keySplitChar).map(function (it) {
      return it.trim();
    }),
        _it$split$map2 = _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_1___default()(_it$split$map),
        key = _it$split$map2[0],
        value = _it$split$map2.slice(1);

    if (key != '') {
      style[key] = value.join(keySplitChar);
    }
  });
  return style;
}
function OBJECT_TO_PROPERTY(obj) {
  return Object.keys(obj).map(function (key) {
    if (key === 'class') {
      if (isObject(obj[key])) {
        return "".concat(key, "=\"").concat(OBJECT_TO_CLASS(obj[key]), "\"");
      }
    }

    if (isBoolean(obj[key]) || isUndefined(obj[key]) || obj[key] === 'undefined') {
      if (obj[key]) {
        return key;
      } else {
        return '';
      }
    }

    return "".concat(key, "=\"").concat(obj[key], "\"");
  }).join(' ');
}
function OBJECT_TO_CLASS(obj) {
  return Object.keys(obj).filter(function (k) {
    return obj[k];
  }).map(function (key) {
    return key;
  }).join(' ');
}
function TAG_TO_STRING(str) {
  return str.replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
}
function mapjoin(arr, callback) {
  var joinString = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  return arr.map(callback).join(joinString);
}
function isArrayEquals(A, B) {
  var s = new Set([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(A), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_3___default()(B)));
  return s.size === A.length && s.size === B.length;
}
/**
 * 전체 문자열에서 특정 키워드 함수를 사용하는 패턴을 찾아 리턴해준다. 
 * 
 * @param {string[]} arr 
 * @param {string} keyword 
 */

var splitMethodByKeyword = function splitMethodByKeyword(arr, keyword) {
  var filterKeys = arr.filter(function (code) {
    return code.indexOf("".concat(keyword, "(")) > -1;
  });
  var filterMaps = filterKeys.map(function (code) {
    var _code$split$1$split$ = code.split("".concat(keyword, "("))[1].split(")")[0].trim().split(" "),
        _code$split$1$split$2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_code$split$1$split$, 2),
        target = _code$split$1$split$2[0],
        param = _code$split$1$split$2[1];

    return {
      target: target,
      param: param
    };
  });
  return [filterKeys, filterMaps];
};
var curveToPath = function curveToPath(timingFunction) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
  var currentBezier = Object(_bezier__WEBPACK_IMPORTED_MODULE_6__[/* getPredefinedCubicBezier */ "k"])(timingFunction);
  return "\n        M0 ".concat(width, " \n        C \n        ").concat(currentBezier[0] * width, " ").concat(currentBezier[1] == 0 ? height : (1 - currentBezier[1]) * height, ",\n        ").concat(currentBezier[2] * width, " ").concat(currentBezier[3] == 1 ? 0 : (1 - currentBezier[3]) * height, ",\n        ").concat(width, " 0\n    ");
};
var curveToPointLine = function curveToPointLine(timingFunction) {
  var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 30;
  var currentBezier = Object(_bezier__WEBPACK_IMPORTED_MODULE_6__[/* getPredefinedCubicBezier */ "k"])(timingFunction);
  return "\n        M 0 ".concat(width, " \n        L ").concat(currentBezier[0] * width, " ").concat(currentBezier[1] == 0 ? height : (1 - currentBezier[1]) * height, "\n        M ").concat(width, " 0\n        L ").concat(currentBezier[2] * width, " ").concat(currentBezier[3] == 1 ? 0 : (1 - currentBezier[3]) * height, "\n    ");
};

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return registElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return retriveElement; });
var map = {};
function registElement() {
  var classes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  Object.keys(classes).forEach(function (key) {
    if (map[key]) {
      console.warn("".concat(key, " element is duplicated."));
      return;
    }

    map[key] = classes[key];
  });
}
function retriveElement(className) {
  return map[className];
}

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

var superPropBase = __webpack_require__(157);

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    module.exports = _get = Reflect.get;
    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _get = function _get(target, property, receiver) {
      var base = superPropBase(target, property);
      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _get(target, property, receiver || target);
}

module.exports = _get;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./src/el/editor/icon/_icon_template.js
function _icon_template(tpl, opt) {
  var defaultOpts = Object.assign({
    width: 24,
    height: 24
  }, opt);
  return (
    /*html*/
    "\n        <svg \n            xmlns=\"http://www.w3.org/2000/svg\" \n            width=\"".concat(defaultOpts.width, "\" \n            height=\"").concat(defaultOpts.height, "\" \n            viewBox=\"0 0 24 24\">").concat(tpl, "</svg>")
  );
}
// CONCATENATED MODULE: ./src/el/editor/icon/chevron_right.js

/* harmony default export */ var chevron_right = (_icon_template("\n    <path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6-6-6z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/create_folder.js

/* harmony default export */ var create_folder = (_icon_template("\n    <path d=\"M22 6H12l-2-2H2v16h20V6zm-3 8h-3v3h-2v-3h-3v-2h3V9h2v3h3v2z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/add_box.js

/* harmony default export */ var add_box = (_icon_template("<path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/visible.js

/* harmony default export */ var visible = (_icon_template("<path d=\"M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/remove.js

/* harmony default export */ var remove = (_icon_template("<path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/copy.js

/* harmony default export */ var copy = (_icon_template("<path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/lock.js

/* harmony default export */ var lock = (_icon_template("<path d=\"M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/undo.js

/* harmony default export */ var undo = (_icon_template("<path d=\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/redo.js

/* harmony default export */ var redo = (_icon_template("<path d=\"M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/save.js

/* harmony default export */ var save = (_icon_template("<path d=\"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"/><path fill=\"none\" d=\"M0 0h24v24H0z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/export.js

/* harmony default export */ var icon_export = (_icon_template("<path d=\"M9 3L5 6.99h3V14h2V6.99h3L9 3zm7 14.01V10h-2v7.01h-3L15 21l4-3.99h-3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/add.js

/* harmony default export */ var add = (_icon_template("<path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/add_note.js

/* harmony default export */ var add_note = (_icon_template("<path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 14h-3v3h-2v-3H8v-2h3v-3h2v3h3v2zm-3-7V3.5L18.5 9H13z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/publish.js

/* harmony default export */ var publish = (_icon_template("<path d=\"M5 4v2h14V4H5zm0 10h4v6h6v-6h4l-7-7-7 7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/folder.js

/* harmony default export */ var folder = (_icon_template("<path d=\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/artboard.js

/* harmony default export */ var artboard = (_icon_template("<path d=\"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/image.js

/* harmony default export */ var icon_image = (_icon_template("<path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/setting.js

/* harmony default export */ var setting = (_icon_template("<path d=\"M15.95 10.78c.03-.25.05-.51.05-.78s-.02-.53-.06-.78l1.69-1.32c.15-.12.19-.34.1-.51l-1.6-2.77c-.1-.18-.31-.24-.49-.18l-1.99.8c-.42-.32-.86-.58-1.35-.78L12 2.34c-.03-.2-.2-.34-.4-.34H8.4c-.2 0-.36.14-.39.34l-.3 2.12c-.49.2-.94.47-1.35.78l-1.99-.8c-.18-.07-.39 0-.49.18l-1.6 2.77c-.1.18-.06.39.1.51l1.69 1.32c-.04.25-.07.52-.07.78s.02.53.06.78L2.37 12.1c-.15.12-.19.34-.1.51l1.6 2.77c.1.18.31.24.49.18l1.99-.8c.42.32.86.58 1.35.78l.3 2.12c.04.2.2.34.4.34h3.2c.2 0 .37-.14.39-.34l.3-2.12c.49-.2.94-.47 1.35-.78l1.99.8c.18.07.39 0 .49-.18l1.6-2.77c.1-.18.06-.39-.1-.51l-1.67-1.32zM10 13c-1.65 0-3-1.35-3-3s1.35-3 3-3 3 1.35 3 3-1.35 3-3 3z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/remove2.js

/* harmony default export */ var remove2 = (_icon_template("<path d=\"M19 13H5v-2h14v2z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/repeat.js

/* harmony default export */ var repeat = (_icon_template("<path d=\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/screen.js

/* harmony default export */ var screen = (_icon_template("<path d=\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/arrowRight.js

/* harmony default export */ var arrowRight = (_icon_template("<path d=\"M10 17l5-5-5-5v10z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/check.js

/* harmony default export */ var check = (_icon_template("<path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/border_all.js

/* harmony default export */ var border_all = (_icon_template("<path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-1 16H6c-.55 0-1-.45-1-1V6c0-.55.45-1 1-1h12c.55 0 1 .45 1 1v12c0 .55-.45 1-1 1z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/border_inner.js

/* harmony default export */ var border_inner = (_icon_template("<path d=\"M3 5v3c0 .55.45 1 1 1s1-.45 1-1V6c0-.55.45-1 1-1h2c.55 0 1-.45 1-1s-.45-1-1-1H5c-1.1 0-2 .9-2 2zm1 10c-.55 0-1 .45-1 1v3c0 1.1.9 2 2 2h3c.55 0 1-.45 1-1s-.45-1-1-1H6c-.55 0-1-.45-1-1v-2c0-.55-.45-1-1-1zm15 3c0 .55-.45 1-1 1h-2c-.55 0-1 .45-1 1s.45 1 1 1h3c1.1 0 2-.9 2-2v-3c0-.55-.45-1-1-1s-1 .45-1 1v2zm0-15h-3c-.55 0-1 .45-1 1s.45 1 1 1h2c.55 0 1 .45 1 1v2c0 .55.45 1 1 1s1-.45 1-1V5c0-1.1-.9-2-2-2z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/paint.js

/* harmony default export */ var paint = (_icon_template("<path d=\"M18 4V3c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V6h1v4H9v11c0 .55.45 1 1 1h2c.55 0 1-.45 1-1v-9h8V4h-3z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/title.js

/* harmony default export */ var title = (_icon_template("<path d=\"M5 4v3h5.5v12h3V7H19V4z\"/>"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/timer.js

/* harmony default export */ var timer = (_icon_template("<path d=\"M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/chevron_left.js

/* harmony default export */ var chevron_left = (_icon_template("<path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/input.js

/* harmony default export */ var input = (_icon_template("<path d=\"M21 3.01H3c-1.1 0-2 .9-2 2V9h2V4.99h18v14.03H3V15H1v4.01c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98v-14c0-1.11-.9-2-2-2zM11 16l4-4-4-4v3H1v2h10v3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/filter.js

/* harmony default export */ var filter = (_icon_template("<path d=\"M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/play.js

/* harmony default export */ var play = (_icon_template("<path d=\"M8 5v14l11-7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/pause.js

/* harmony default export */ var pause = (_icon_template("<path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/autorenew.js

/* harmony default export */ var autorenew = (_icon_template("<path d=\"M12 6v3l4-4-4-4v3c-4.42 0-8 3.58-8 8 0 1.57.46 3.03 1.24 4.26L6.7 14.8c-.45-.83-.7-1.79-.7-2.8 0-3.31 2.69-6 6-6zm6.76 1.74L17.3 9.2c.44.84.7 1.79.7 2.8 0 3.31-2.69 6-6 6v-3l-4 4 4 4v-3c4.42 0 8-3.58 8-8 0-1.57-.46-3.03-1.24-4.26z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/code.js

/* harmony default export */ var code = (_icon_template("<path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/build.js

/* harmony default export */ var build = (_icon_template("<path d=\"M22.7 19l-9.1-9.1c.9-2.3.4-5-1.5-6.9-2-2-5-2.4-7.4-1.3L9 6 6 9 1.6 4.7C.4 7.1.9 10.1 2.9 12.1c1.9 1.9 4.6 2.4 6.9 1.5l9.1 9.1c.4.4 1 .4 1.4 0l2.3-2.3c.5-.4.5-1.1.1-1.4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/close.js

/* harmony default export */ var icon_close = (_icon_template("<path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/gradient.js

/* harmony default export */ var gradient = (_icon_template('<path d="M11 9h2v2h-2zm-2 2h2v2H9zm4 0h2v2h-2zm2-2h2v2h-2zM7 9h2v2H7zm12-6H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 18H7v-2h2v2zm4 0h-2v-2h2v2zm4 0h-2v-2h2v2zm2-7h-2v2h2v2h-2v-2h-2v2h-2v-2h-2v2H9v-2H7v2H5v-2h2v-2H5V5h14v6z"/>'));
// CONCATENATED MODULE: ./src/el/editor/icon/transform.js

/* harmony default export */ var icon_transform = (_icon_template("<path d=\"M22 18v-2H8V4h2L7 1 4 4h2v2H2v2h4v8c0 1.1.9 2 2 2h8v2h-2l3 3 3-3h-2v-2h4zM10 8h6v6h2V8c0-1.1-.9-2-2-2h-6v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/scatter.js

/* harmony default export */ var scatter = (_icon_template("<g fill=\"#010101\"><circle cx=\"7\" cy=\"14\" r=\"3\"/><circle cx=\"11\" cy=\"6\" r=\"3\"/><circle cx=\"16.6\" cy=\"17.6\" r=\"3\"/></g>"));
// CONCATENATED MODULE: ./src/el/editor/icon/shape.js

/* harmony default export */ var shape = (_icon_template("<path d=\"M23 7V1h-6v2H7V1H1v6h2v10H1v6h6v-2h10v2h6v-6h-2V7h2zM3 3h2v2H3V3zm2 18H3v-2h2v2zm12-2H7v-2H5V7h2V5h10v2h2v10h-2v2zm4 2h-2v-2h2v2zM19 5V3h2v2h-2zm-5.27 9h-3.49l-.73 2H7.89l3.4-9h1.4l3.41 9h-1.63l-.74-2zm-3.04-1.26h2.61L12 8.91l-1.31 3.83z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/ballot.js

/* harmony default export */ var ballot = (_icon_template("<clipPath><use xlink:href=\"#a\" overflow=\"visible\"/></clipPath><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M13 9.5h5v-2h-5v2zm0 7h5v-2h-5v2zm6 4.5H5c-1.1 0-2-.9-2-2V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2v14c0 1.1-.9 2-2 2zM6 11h5V6H6v5zm1-4h3v3H7V7zM6 18h5v-5H6v5zm1-4h3v3H7v-3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/add_circle.js

/* harmony default export */ var add_circle = (_icon_template("<path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/lock_open.js

/* harmony default export */ var lock_open = (_icon_template("<path d=\"M12 17c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm6-9h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6h1.9c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm0 12H6V10h12v10z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/outline_image.js

/* harmony default export */ var outline_image = (_icon_template("<path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V5h14v14zm-5.04-6.71l-2.75 3.54-1.96-2.36L6.5 17h11l-3.54-4.71z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/edit.js

/* harmony default export */ var edit = (_icon_template("<path d=\"M3 17.46v3.04c0 .28.22.5.5.5h3.04c.13 0 .26-.05.35-.15L17.81 9.94l-3.75-3.75L3.15 17.1c-.1.1-.15.22-.15.36zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/size.js

/* harmony default export */ var size = (_icon_template("<path d=\"M21 15h2v2h-2v-2zm0-4h2v2h-2v-2zm2 8h-2v2c1 0 2-1 2-2zM13 3h2v2h-2V3zm8 4h2v2h-2V7zm0-4v2h2c0-1-1-2-2-2zM1 7h2v2H1V7zm16-4h2v2h-2V3zm0 16h2v2h-2v-2zM3 3C2 3 1 4 1 5h2V3zm6 0h2v2H9V3zM5 3h2v2H5V3zm-4 8v8c0 1.1.9 2 2 2h12V11H1zm2 8l2.5-3.21 1.79 2.15 2.5-3.22L13 19H3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/color.js

/* harmony default export */ var color = (_icon_template("<path d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_center.js

/* harmony default export */ var align_center = (_icon_template("<path d=\"M7 15v2h10v-2H7zm-4 6h18v-2H3v2zm0-8h18v-2H3v2zm4-6v2h10V7H7zM3 3v2h18V3H3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_justify.js

/* harmony default export */ var align_justify = (_icon_template("<path d=\"M3 21h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18v-2H3v2zm0-4h18V7H3v2zm0-6v2h18V3H3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_left.js

/* harmony default export */ var align_left = (_icon_template("<path d=\"M15 15H3v2h12v-2zm0-8H3v2h12V7zM3 13h18v-2H3v2zm0 8h18v-2H3v2zM3 3v2h18V3H3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_right.js

/* harmony default export */ var align_right = (_icon_template("<path d=\"M3 21h18v-2H3v2zm6-4h12v-2H9v2zm-6-4h18v-2H3v2zm6-4h12V7H9v2zM3 3v2h18V3H3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/list.js

/* harmony default export */ var list = (_icon_template("<path d=\"M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/grid.js

/* harmony default export */ var grid = (_icon_template("<path d=\"M4 11h5V5H4v6zm0 7h5v-6H4v6zm6 0h5v-6h-5v6zm6 0h5v-6h-5v6zm-6-7h5V5h-5v6zm6-6v6h5V5h-5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/expand.js

/* harmony default export */ var expand = (_icon_template("<path d=\"M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/brush.js

/* harmony default export */ var brush = (_icon_template("<path d=\"M7 14c-1.66 0-3 1.34-3 3 0 1.31-1.16 2-2 2 .92 1.22 2.49 2 4 2 2.21 0 4-1.79 4-4 0-1.66-1.34-3-3-3zm13.71-9.37l-1.34-1.34c-.39-.39-1.02-.39-1.41 0L9 12.25 11.75 15l8.96-8.96c.39-.39.39-1.02 0-1.41z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/dahaze.js

/* harmony default export */ var dahaze = (_icon_template("<path d=\"M2 15.5v2h20v-2H2zm0-5v2h20v-2H2zm0-5v2h20v-2H2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/star.js

/* harmony default export */ var star = (_icon_template("<path d=\"M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/polygon.js

/* harmony default export */ var polygon = (_icon_template("<path d=\"M17,15.7V13H19V17L10,21L3,14L7,5H11V7H8.3L5.4,13.6L10.4,18.6L17,15.7M22,5V7H19V10H17V7H14V5H17V2H19V5H22Z\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/cube.js

/* harmony default export */ var cube = (_icon_template("<path d=\"M21 16.5a1 1 0 0 1-.527.881l-7.907 4.443a.996.996 0 0 1-1.132 0l-7.907-4.443A1 1 0 0 1 3 16.5v-9a1 1 0 0 1 .527-.881l7.907-4.443a.995.995 0 0 1 1.132 0l7.907 4.443A1 1 0 0 1 21 7.5v9zM12 4.15L6.042 7.5l5.96 3.35 5.958-3.35-5.958-3.35zM5 15.916l6 3.372V12.58L5 9.209v6.706zm14 0V9.209l-6 3.372v6.707l6-3.373z\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/color_lens.js

/* harmony default export */ var color_lens = (_icon_template("<path d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/circle.js

/* harmony default export */ var circle = (_icon_template("<path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/rect.js

/* harmony default export */ var rect = (_icon_template("<path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/note.js

/* harmony default export */ var note = (_icon_template("<path d=\"M17 10H7v2h10v-2zm2-7h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zm-5-5H7v2h7v-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/skip_next.js

/* harmony default export */ var skip_next = (_icon_template("<path d=\"M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/skip_prev.js

/* harmony default export */ var skip_prev = (_icon_template("<path d=\"M6 6h2v12H6zm3.5 6l8.5 6V6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/fast_forward.js

/* harmony default export */ var fast_forward = (_icon_template("<path d=\"M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/fast_rewind.js

/* harmony default export */ var fast_rewind = (_icon_template("<path d=\"M11 18V6l-8.5 6 8.5 6zm.5-6l8.5 6V6l-8.5 6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/alternate.js

/* harmony default export */ var alternate = (_icon_template("<path d=\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/alternate_reverse.js

/* harmony default export */ var alternate_reverse = (_icon_template("<path d=\"M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/speed.js

/* harmony default export */ var speed = (_icon_template("<path d=\"M20.38 8.57l-1.23 1.85a8 8 0 0 1-.22 7.58H5.07A8 8 0 0 1 15.58 6.85l1.85-1.23A10 10 0 0 0 3.35 19a2 2 0 0 0 1.72 1h13.85a2 2 0 0 0 1.74-1 10 10 0 0 0-.27-10.44zm-9.79 6.84a2 2 0 0 0 2.83 0l5.66-8.49-8.49 5.66a2 2 0 0 0 0 2.83z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/replay.js

/* harmony default export */ var replay = (_icon_template("<defs><path id=\"a\" d=\"M0 0h24v24H0V0z\"/></defs><clipPath id=\"b\"><use xlink:href=\"#a\" overflow=\"visible\"/></clipPath><path d=\"M12 5V1L7 6l5 5V7c3.3 0 6 2.7 6 6s-2.7 6-6 6-6-2.7-6-6H4c0 4.4 3.6 8 8 8s8-3.6 8-8-3.6-8-8-8zm-1.1 11H10v-3.3L9 13v-.7l1.8-.6h.1V16zm4.3-1.8c0 .3 0 .6-.1.8l-.3.6s-.3.3-.5.3-.4.1-.6.1-.4 0-.6-.1-.3-.2-.5-.3-.2-.3-.3-.6-.1-.5-.1-.8v-.7c0-.3 0-.6.1-.8l.3-.6s.3-.3.5-.3.4-.1.6-.1.4 0 .6.1c.2.1.3.2.5.3s.2.3.3.6.1.5.1.8v.7zm-.9-.8v-.5s-.1-.2-.1-.3-.1-.1-.2-.2-.2-.1-.3-.1-.2 0-.3.1l-.2.2s-.1.2-.1.3v2s.1.2.1.3.1.1.2.2.2.1.3.1.2 0 .3-.1l.2-.2s.1-.2.1-.3v-1.5z\" clip-path=\"url(#b)\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/shuffle.js

/* harmony default export */ var shuffle = (_icon_template("<path d=\"M10.59 9.17L5.41 4 4 5.41l5.17 5.17 1.42-1.41zM14.5 4l2.04 2.04L4 18.59 5.41 20 17.96 7.46 20 9.5V4h-5.5zm.33 9.41l-1.41 1.41 3.13 3.13L14.5 20H20v-5.5l-2.04 2.04-3.13-3.13z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/cat.js

/* harmony default export */ var cat = (/*html*/_icon_template("\n<path d=\"M712.4846,631.2673c-8.3777-59.9758-44.6997-121.2822-117.7703-198.7816\n\tc-51.7295-54.8649-72.0865-105.7791-55.8514-139.6883c12.4393-25.9817,42.587-35.8935,65.343-34.1103\n\tc26.3435,2.0661,37.3148,18.5905,41.88,32.0888c6.5847,19.471,2.7829,43.5175-8.4753,53.6029\n\tc-2.4382,2.1843-19.5444,15.6083-31.617,2.486c-16.0995-17.4994,1.3123-34.1181,1.3123-34.1181s25.7198-19.4211,11.5477-34.6431\n\tc-14.1721-15.2219-81.6211,4.7241-73.1766,62.9098c2.102,14.4833,9.8525,35.0453,41.7667,49.9105\n\tc31.3411,14.5985,62.0806,11.5356,84.3365-8.4017c26.8387-24.0431,36.221-68.5172,22.8163-108.1526\n\tc-13.0433-38.5685-45.3375-63.5167-86.387-66.7359c-22.4584-1.7602-45.9053,2.9182-66.0231,13.1776\n\tc-22.1882,11.3155-39.3094,28.5606-49.5124,49.8713c-15.207,31.7608-27.0118,99.5788,64.7797,196.9337\n\tc64.4428,68.3486,97.5892,122.6011,104.3126,170.7358c6.1263,43.8577-32.9753,141.2908-59.1734,141.8642\n\tc-18.2653,0.3997-13.0681-28.0174-11.1219-46.1832c3.4623-32.3166,9.02-64.4668,7.8147-96.946\n\tc-1.7692-47.6774-16.0649-83.7216-38.2463-125.1911c-20.1995-37.7643-37.8974-60.6029-92.5699-111.4463\n\tc-13.4884-12.5438-27.4699-22.5866-44.7675-38.1754c-17.5431-15.8101-21.9685-33.5474-24.195-48.6835\n\tc-4.6472-31.5926,5.266-35.0392,22.933-61.1816c7.51,6.1134,15.132,13.1576,22.5878,21.2593\n\tc0.8908,0.9678,2.1063,1.4586,3.3257,1.4586c1.0938,0,2.1906-0.3947,3.059-1.1939c1.8362-1.6895,1.9548-4.548,0.2647-6.3846\n\tc-8.043-8.7399-16.2394-16.2892-24.29-22.8068c1.0196-1.6815,1.9806-3.3693,2.913-5.06\n\tc11.2809,3.873,22.4781,8.5857,32.8744,14.3263c0.6923,0.3824,1.4415,0.5638,2.1804,0.5638c1.592,0,3.1354-0.8433,3.9596-2.3353\n\tc1.2061-2.1848,0.4133-4.9333-1.7714-6.14c-10.5501-5.8255-21.7927-10.625-33.0861-14.5846\n\tc1.7051-3.6655,3.2152-7.3481,4.5178-11.0449c9.9095,1.0547,20.2559,2.6507,30.8756,4.9542\n\tc2.4407,0.5281,4.8451-1.0193,5.3736-3.4585c0.5285-2.4387-1.0193-4.8446-3.4586-5.3736\n\tc-10.3543-2.2456-20.4231-3.8448-30.0823-4.9431c6.761-25.5357,4.0583-51.5754-8.0207-76.8648\n\tC448.2098,115.8869,474.731,76.8288,466.0513,18c-68.8775,17.9071-87.2624,54.1776-94.1043,50.875\n\tc-7.9472-3.8361-40.5018-11.036-62.952-10.6586c-37.278,0.6267-61.382,7.0395-61.382,7.0395\n\tc-11.2537-14.6686-35.9431-36.6889-90.105-41.2683c2.9433,47.1602,13.4346,82.2557,28.5291,102.9373l-0.7433,2.377\n\tc-11.7879,32.4393-13.5817,62.8858-3.8016,89.6451c-9.0883,1.1019-18.5685,2.7173-28.321,4.9987\n\tc-2.4299,0.5687-3.939,2.9991-3.3708,5.429c0.5687,2.4294,2.9972,3.939,5.429,3.3708c10.3087-2.4115,20.3424-4.0428,29.9266-5.0891\n\tc1.4184,2.9763,2.9836,5.904,4.7147,8.7755c-11.2262,4.119-22.4456,9.1879-32.9296,15.4312\n\tc-2.1445,1.2767-2.8476,4.0498-1.5704,6.1939c0.8453,1.4199,2.3461,2.2073,3.8866,2.2073c0.7859,0,1.5827-0.2054,2.3073-0.6369\n\tc10.5541-6.2849,22.0078-11.3381,33.4798-15.4008c3.3157,4.5403,7.0729,8.9251,11.2576,13.1527\n\tc-5.6694,5.3088-11.3757,11.2216-17,17.8125c-1.6199,1.8979-1.3944,4.7505,0.504,6.3699c0.8507,0.7266,1.8935,1.0816,2.931,1.0816\n\tc1.2767,0,2.5456-0.5383,3.4389-1.5856c5.5062-6.4525,11.1144-12.2327,16.692-17.4078c5.7832,5.4212,11.3758,11.1287,15.514,17.8627\n\tc7.8208,12.7265,8.3216,25.8196,6.7598,40.6753c-3.119,29.6671-13.4278,58.0414-20.0391,87.1301\n\tc-16.8163,73.989-9.0635,132.7513,20.7169,202.5388c8.0053,18.7598,17.5698,36.9144,23.7843,56.341\n\tc10.5081,32.8488,7.8436,88.3559,8.2697,122.8419v2.9318c0,0-19.9931,0.1384-28.4717,6.0748\n\tc-8.2555,5.7802-10.3883,21.931-4.3929,28.6906c6.6872,7.5395,21.6739,10.6397,31.6837,11.8093\n\tc119.664,13.9824,293.6021-2.6707,341.7446-8.3345C701.2023,821.2982,721.1432,693.2562,712.4846,631.2673z M437.2106,66.5267\n\tc-0.1946,33.6617-23.5064,50.7886-23.5064,50.7886c-6.2684-17.19-21.1558-25.3943-21.1558-25.3943\n\tC408.2194,68.8708,437.2106,66.5267,437.2106,66.5267z M201.6607,103.3024c0,0-19.8527-14.6264-20.0184-43.3732\n\tc0,0,24.6894,2.0019,38.035,21.6866C219.6773,81.6158,206.999,88.6223,201.6607,103.3024z M215.969,158.6876\n\tc15.0275-4.1452,27.2506-3.8264,37.1033-1.1182c-15.9193,16.5729-7.4137,31.0502-3.2583,36.286\n\tC221.2402,186.9178,215.969,158.6876,215.969,158.6876z M252.8369,194.4974c13.6546-17.1619,7.1357-30.6827,3.4758-35.9226\n\tc24.8589,8.5877,33.2057,32.5095,33.2057,32.5095C274.4792,195.6167,262.4471,196.221,252.8369,194.4974z M308.1766,232.8661\n\tc-4.1644,0.2111-22.0216-7.8084-21.8634-21.8635c0.1244-11.0539,40.2451-7.8568,42.1652,0\n\tC330.8523,220.7164,312.3411,232.655,308.1766,232.8661z M327.2252,191.0843c0,0,8.7972-25.2037,35.2186-33.1565\n\tc-12.424,19.1432-1.5466,31.7233,3.55,36.1478C356.055,196.2867,343.3752,195.9514,327.2252,191.0843z M369.7458,193.0825\n\tc10.0879-20.4091-1.0878-32.4358-4.9794-35.7968c9.66-2.4378,21.5306-2.5917,36.0081,1.4018\n\tC400.7746,158.6876,395.8536,185.0439,369.7458,193.0825z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/refresh.js

/* harmony default export */ var refresh = (_icon_template("<path d=\"M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/gps_fixed.js

/* harmony default export */ var gps_fixed = (_icon_template("<path d=\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/file_copy.js

/* harmony default export */ var file_copy = (_icon_template("<path d=\"M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm-1 4l6 6v10c0 1.1-.9 2-2 2H7.99C6.89 23 6 22.1 6 21l.01-14c0-1.1.89-2 1.99-2h7zm-1 7h5.5L14 6.5V12z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/archive.js

/* harmony default export */ var archive = (_icon_template("<path d=\"M20.54 5.23l-1.39-1.68C18.88 3.21 18.47 3 18 3H6c-.47 0-.88.21-1.16.55L3.46 5.23C3.17 5.57 3 6.02 3 6.5V19c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V6.5c0-.48-.17-.93-.46-1.27zM12 17.5L6.5 12H10v-2h4v2h3.5L12 17.5zM5.12 5l.81-1h12l.94 1H5.12z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/storage.js

/* harmony default export */ var storage = (_icon_template("<path d=\"M2 20h20v-4H2v4zm2-3h2v2H4v-2zM2 4v4h20V4H2zm4 3H4V5h2v2zm-4 7h20v-4H2v4zm2-3h2v2H4v-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/doc.js

/* harmony default export */ var doc = (_icon_template("<path d=\"M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/flash_on.js

/* harmony default export */ var flash_on = (_icon_template("<path d=\"M7 2v11h3v9l7-12h-4l4-8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/view_list.js

/* harmony default export */ var view_list = (_icon_template("<path d=\"M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/near_me.js

/* harmony default export */ var near_me = (_icon_template("<path d=\"M21 3L3 10.53v.98l6.84 2.65L12.48 21h.98L21 3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/photo.js

/* harmony default export */ var photo = (_icon_template("<path d=\"M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/specular.js

/* harmony default export */ var specular = (_icon_template("<path d=\"M3.55 18.54l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8zM11 22.45h2V19.5h-2v2.95zM4 10.5H1v2h3v-2zm11-4.19V1.5H9v4.81C7.21 7.35 6 9.28 6 11.5c0 3.31 2.69 6 6 6s6-2.69 6-6c0-2.22-1.21-4.15-3-5.19zm5 4.19v2h3v-2h-3zm-2.76 7.66l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/diffuse.js

/* harmony default export */ var diffuse = (_icon_template("<path d=\"M5 14.5h14v-6H5v6zM11 .55V3.5h2V.55h-2zm8.04 2.5l-1.79 1.79 1.41 1.41 1.8-1.79-1.42-1.41zM13 22.45V19.5h-2v2.95h2zm7.45-3.91l-1.8-1.79-1.41 1.41 1.79 1.8 1.42-1.42zM3.55 4.46l1.79 1.79 1.41-1.41-1.79-1.79-1.41 1.41zm1.41 15.49l1.79-1.8-1.41-1.41-1.79 1.79 1.41 1.42z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/palette.js

/* harmony default export */ var palette = (_icon_template("<path d=\"M12 3c-4.97 0-9 4.03-9 9s4.03 9 9 9c.83 0 1.5-.67 1.5-1.5 0-.39-.15-.74-.39-1.01-.23-.26-.38-.61-.38-.99 0-.83.67-1.5 1.5-1.5H16c2.76 0 5-2.24 5-5 0-4.42-4.03-8-9-8zm-5.5 9c-.83 0-1.5-.67-1.5-1.5S5.67 9 6.5 9 8 9.67 8 10.5 7.33 12 6.5 12zm3-4C8.67 8 8 7.33 8 6.5S8.67 5 9.5 5s1.5.67 1.5 1.5S10.33 8 9.5 8zm5 0c-.83 0-1.5-.67-1.5-1.5S13.67 5 14.5 5s1.5.67 1.5 1.5S15.33 8 14.5 8zm3 4c-.83 0-1.5-.67-1.5-1.5S16.67 9 17.5 9s1.5.67 1.5 1.5-.67 1.5-1.5 1.5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/landscape.js

/* harmony default export */ var landscape = (_icon_template("<path d=\"M14 6l-3.75 5 2.85 3.8-1.6 1.2C9.81 13.75 7 10 7 10l-6 8h22L14 6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/blur.js

/* harmony default export */ var icon_blur = (_icon_template("<path d=\"M6 13c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm-3 .5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM6 5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm15 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM14 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-3.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm-11 10c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm7 7c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm0-17c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM10 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 5.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm8 .5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-8c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0-4c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm3 8.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zM14 17c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm0 3.5c-.28 0-.5.22-.5.5s.22.5.5.5.5-.22.5-.5-.22-.5-.5-.5zm-4-12c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0 8.5c-.55 0-1 .45-1 1s.45 1 1 1 1-.45 1-1-.45-1-1-1zm4-4.5c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5zm0-4c-.83 0-1.5.67-1.5 1.5s.67 1.5 1.5 1.5 1.5-.67 1.5-1.5-.67-1.5-1.5-1.5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/blur_linear.js

/* harmony default export */ var blur_linear = (_icon_template("<path d=\"M5 17.5c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 13c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0-4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zM3 21h18v-2H3v2zM5 9.5c.83 0 1.5-.67 1.5-1.5S5.83 6.5 5 6.5 3.5 7.17 3.5 8 4.17 9.5 5 9.5zm0 4c.83 0 1.5-.67 1.5-1.5s-.67-1.5-1.5-1.5-1.5.67-1.5 1.5.67 1.5 1.5 1.5zM9 17c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm8-.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM3 3v2h18V3H3zm14 5.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zm0 4c.28 0 .5-.22.5-.5s-.22-.5-.5-.5-.5.22-.5.5.22.5.5.5zM13 9c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm0 4c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/waves.js

/* harmony default export */ var waves = (_icon_template("<path d=\"M17 16.99c-1.35 0-2.2.42-2.95.8-.65.33-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.38-1.57-.8-2.95-.8s-2.2.42-2.95.8c-.65.33-1.17.6-2.05.6v1.95c1.35 0 2.2-.42 2.95-.8.65-.33 1.17-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.42 2.95-.8c.65-.33 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8v-1.95c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8zm0-4.45c-1.35 0-2.2.43-2.95.8-.65.32-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.38-1.57-.8-2.95-.8s-2.2.43-2.95.8c-.65.32-1.17.6-2.05.6v1.95c1.35 0 2.2-.43 2.95-.8.65-.35 1.15-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.35 1.15-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.58.8 2.95.8v-1.95c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8zm2.95-8.08c-.75-.38-1.58-.8-2.95-.8s-2.2.42-2.95.8c-.65.32-1.18.6-2.05.6-.9 0-1.4-.25-2.05-.6-.75-.37-1.57-.8-2.95-.8s-2.2.42-2.95.8c-.65.33-1.17.6-2.05.6v1.93c1.35 0 2.2-.43 2.95-.8.65-.33 1.17-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.32 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8V5.04c-.9 0-1.4-.25-2.05-.58zM17 8.09c-1.35 0-2.2.43-2.95.8-.65.35-1.15.6-2.05.6s-1.4-.25-2.05-.6c-.75-.38-1.57-.8-2.95-.8s-2.2.43-2.95.8c-.65.35-1.15.6-2.05.6v1.95c1.35 0 2.2-.43 2.95-.8.65-.32 1.18-.6 2.05-.6s1.4.25 2.05.6c.75.38 1.57.8 2.95.8s2.2-.43 2.95-.8c.65-.32 1.18-.6 2.05-.6.9 0 1.4.25 2.05.6.75.38 1.58.8 2.95.8V9.49c-.9 0-1.4-.25-2.05-.6-.75-.38-1.6-.8-2.95-.8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/vintage.js

/* harmony default export */ var vintage = (_icon_template("<path d=\"M18.7 12.4c-.28-.16-.57-.29-.86-.4.29-.11.58-.24.86-.4 1.92-1.11 2.99-3.12 3-5.19-1.79-1.03-4.07-1.11-6 0-.28.16-.54.35-.78.54.05-.31.08-.63.08-.95 0-2.22-1.21-4.15-3-5.19C10.21 1.85 9 3.78 9 6c0 .32.03.64.08.95-.24-.2-.5-.39-.78-.55-1.92-1.11-4.2-1.03-6 0 0 2.07 1.07 4.08 3 5.19.28.16.57.29.86.4-.29.11-.58.24-.86.4-1.92 1.11-2.99 3.12-3 5.19 1.79 1.03 4.07 1.11 6 0 .28-.16.54-.35.78-.54-.05.32-.08.64-.08.96 0 2.22 1.21 4.15 3 5.19 1.79-1.04 3-2.97 3-5.19 0-.32-.03-.64-.08-.95.24.2.5.38.78.54 1.92 1.11 4.2 1.03 6 0-.01-2.07-1.08-4.08-3-5.19zM12 16c-2.21 0-4-1.79-4-4s1.79-4 4-4 4 1.79 4 4-1.79 4-4 4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/looks.js

/* harmony default export */ var looks = (_icon_template("<path d=\"M12 10c-3.86 0-7 3.14-7 7h2c0-2.76 2.24-5 5-5s5 2.24 5 5h2c0-3.86-3.14-7-7-7zm0-4C5.93 6 1 10.93 1 17h2c0-4.96 4.04-9 9-9s9 4.04 9 9h2c0-6.07-4.93-11-11-11z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/opacity.js

/* harmony default export */ var opacity = (_icon_template("<path d=\"M17.66 8L12 2.35 6.34 8C4.78 9.56 4 11.64 4 13.64s.78 4.11 2.34 5.67 3.61 2.35 5.66 2.35 4.1-.79 5.66-2.35S20 15.64 20 13.64 19.22 9.56 17.66 8zM6 14c.01-2 .62-3.27 1.76-4.4L12 5.27l4.24 4.38C17.38 10.77 17.99 12 18 14H6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/shadow.js

/* harmony default export */ var shadow = (_icon_template("<path d=\"M15.96 10.29l-2.75 3.54-1.96-2.36L8.5 15h11l-3.54-4.71zM3 5H1v16c0 1.1.9 2 2 2h16v-2H3V5zm18-4H7c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V3c0-1.1-.9-2-2-2zm0 16H7V3h14v14z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/broken_image.js

/* harmony default export */ var broken_image = (_icon_template("<path d=\"M21 5v6.59l-3-3.01-4 4.01-4-4-4 4-3-3.01V5c0-1.1.9-2 2-2h14c1.1 0 2 .9 2 2zm-3 6.42l3 3.01V19c0 1.1-.9 2-2 2H5c-1.1 0-2-.9-2-2v-6.58l3 2.99 4-4 4 4 4-3.99z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/camera_roll.js

/* harmony default export */ var camera_roll = (_icon_template("<path d=\"M14 5c0-1.1-.9-2-2-2h-1V2c0-.55-.45-1-1-1H6c-.55 0-1 .45-1 1v1H4c-1.1 0-2 .9-2 2v15c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2h8V5h-8zm-2 13h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2zm4 9h-2v-2h2v2zm0-9h-2V7h2v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/view_comfy.js

/* harmony default export */ var view_comfy = (_icon_template("<path d=\"M3 9h4V5H3v4zm0 5h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zM8 9h4V5H8v4zm5-4v4h4V5h-4zm5 9h4v-4h-4v4zM3 19h4v-4H3v4zm5 0h4v-4H8v4zm5 0h4v-4h-4v4zm5 0h4v-4h-4v4zm0-14v4h4V5h-4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/settings_input_component.js

/* harmony default export */ var settings_input_component = (_icon_template("<path d=\"M5 2c0-.55-.45-1-1-1s-1 .45-1 1v4H1v6h6V6H5V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2H9v2zm-8 0c0 1.3.84 2.4 2 2.82V23h2v-4.18C6.16 18.4 7 17.3 7 16v-2H1v2zM21 6V2c0-.55-.45-1-1-1s-1 .45-1 1v4h-2v6h6V6h-2zm-8-4c0-.55-.45-1-1-1s-1 .45-1 1v4H9v6h6V6h-2V2zm4 14c0 1.3.84 2.4 2 2.82V23h2v-4.18c1.16-.41 2-1.51 2-2.82v-2h-6v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/merge.js

/* harmony default export */ var merge = (_icon_template("<path d=\"M17 20.41L18.41 19 15 15.59 13.59 17 17 20.41zM7.5 8H11v5.59L5.59 19 7 20.41l6-6V8h3.5L12 3.5 7.5 8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/texture.js

/* harmony default export */ var texture = (_icon_template("<path d=\"M19.51 3.08L3.08 19.51c.09.34.27.65.51.9.25.24.56.42.9.51L20.93 4.49c-.19-.69-.73-1.23-1.42-1.41zM11.88 3L3 11.88v2.83L14.71 3h-2.83zM5 3c-1.1 0-2 .9-2 2v2l4-4H5zm14 18c.55 0 1.05-.22 1.41-.59.37-.36.59-.86.59-1.41v-2l-4 4h2zm-9.71 0h2.83L21 12.12V9.29L9.29 21z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/account_tree.js

/* harmony default export */ var account_tree = (_icon_template("<path d=\"M22 11V3h-7v3H9V3H2v8h7V8h2v10h4v3h7v-8h-7v3h-2V8h2v3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/format_shapes.js

/* harmony default export */ var format_shapes = (_icon_template("<path d=\"M23 7V1h-6v2H7V1H1v6h2v10H1v6h6v-2h10v2h6v-6h-2V7h2zM3 3h2v2H3V3zm2 18H3v-2h2v2zm12-2H7v-2H5V7h2V5h10v2h2v10h-2v2zm4 2h-2v-2h2v2zM19 5V3h2v2h-2zm-5.27 9h-3.49l-.73 2H7.89l3.4-9h1.4l3.41 9h-1.63l-.74-2zm-3.04-1.26h2.61L12 8.91l-1.31 3.83z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/flip.js

/* harmony default export */ var flip = (_icon_template("<path d=\"M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/flipY.js

/* harmony default export */ var flipY = (_icon_template("<path d=\"M15 21h2v-2h-2v2zm4-12h2V7h-2v2zM3 5v14c0 1.1.9 2 2 2h4v-2H5V5h4V3H5c-1.1 0-2 .9-2 2zm16-2v2h2c0-1.1-.9-2-2-2zm-8 20h2V1h-2v22zm8-6h2v-2h-2v2zM15 5h2V3h-2v2zm4 8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/control_point.js

/* harmony default export */ var control_point = (_icon_template("<path d=\"M13 7h-2v4H7v2h4v4h2v-4h4v-2h-4V7zm-1-5C6.49 2 2 6.49 2 12s4.49 10 10 10 10-4.49 10-10S17.51 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/flip_camera.js

/* harmony default export */ var flip_camera = (_icon_template("\n    <path d=\"M9,12c0,1.66,1.34,3,3,3s3-1.34,3-3s-1.34-3-3-3S9,10.34,9,12z\"/>\n    <path d=\"M8,10V8H5.09C6.47,5.61,9.05,4,12,4c3.72,0,6.85,2.56,7.74,6h2.06c-0.93-4.56-4.96-8-9.8-8C8.73,2,5.82,3.58,4,6.01V4H2v6\n        H8z\"/>\n    <path d=\"M16,14v2h2.91c-1.38,2.39-3.96,4-6.91,4c-3.72,0-6.85-2.56-7.74-6H2.2c0.93,4.56,4.96,8,9.8,8c3.27,0,6.18-1.58,8-4.01V20\n        h2v-6H16z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/device_hub.js

/* harmony default export */ var device_hub = (_icon_template("<path d=\"M17 16l-4-4V8.82C14.16 8.4 15 7.3 15 6c0-1.66-1.34-3-3-3S9 4.34 9 6c0 1.3.84 2.4 2 2.82V12l-4 4H3v5h5v-3.05l4-4.2 4 4.2V21h5v-5h-4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/text_rotate.js

/* harmony default export */ var text_rotate = (_icon_template("<path d=\"M12.75 3h-1.5L6.5 14h2.1l.9-2.2h5l.9 2.2h2.1L12.75 3zm-2.62 7L12 4.98 13.87 10h-3.74zm10.37 8l-3-3v2H5v2h12.5v2l3-3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/cylinder.js

/* harmony default export */ var cylinder = (/*html*/_icon_template("\n<g class=\"cylinder\">\n<path d=\"M 12 0 C 7.636719 0 3 1.226562 3 3.5 L 3 20.5 C 3 22.773438 7.636719 24 12 24 C 16.363281 24 21 22.773438 21 20.5 L 21 3.5 C 21 1.226562 16.363281 0 12 0 Z M 20 19.121094 C 19.921875 19.140625 19.84375 19.171875 19.78125 19.230469 C 19.574219 19.414062 19.554688 19.726562 19.738281 19.933594 C 19.914062 20.128906 20 20.320312 20 20.5 C 20 21.542969 16.957031 23 12 23 C 7.042969 23 4 21.542969 4 20.5 C 4 20.320312 4.085938 20.128906 4.261719 19.933594 C 4.445312 19.726562 4.425781 19.410156 4.21875 19.226562 C 4.15625 19.171875 4.078125 19.140625 4 19.121094 L 4 5.160156 C 5.59375 6.363281 8.863281 7 12 7 C 15.136719 7 18.40625 6.363281 20 5.160156 Z M 12 6 C 7.042969 6 4 4.542969 4 3.5 C 4 2.457031 7.042969 1 12 1 C 16.957031 1 20 2.457031 20 3.5 C 20 4.542969 16.957031 6 12 6 Z M 12 6 \"/>\n</g>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/underline.js

/* harmony default export */ var underline = (_icon_template("<path d=\"M12 17c3.31 0 6-2.69 6-6V3h-2.5v8c0 1.93-1.57 3.5-3.5 3.5S8.5 12.93 8.5 11V3H6v8c0 3.31 2.69 6 6 6zm-7 2v2h14v-2H5z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/strikethrough.js

/* harmony default export */ var strikethrough = (_icon_template("<defs><path id=\"a\" d=\"M0 0h24v24H0V0z\"/></defs><clipPath id=\"b\"><use xlink:href=\"#a\" overflow=\"visible\"/></clipPath><path clip-path=\"url(#b)\" d=\"M7.24 8.75c-.26-.48-.39-1.03-.39-1.67 0-.61.13-1.16.4-1.67.26-.5.63-.93 1.11-1.29.48-.35 1.05-.63 1.7-.83.66-.19 1.39-.29 2.18-.29.81 0 1.54.11 2.21.34.66.22 1.23.54 1.69.94.47.4.83.88 1.08 1.43.25.55.38 1.15.38 1.81h-3.01c0-.31-.05-.59-.15-.85-.09-.27-.24-.49-.44-.68-.2-.19-.45-.33-.75-.44-.3-.1-.66-.16-1.06-.16-.39 0-.74.04-1.03.13-.29.09-.53.21-.72.36-.19.16-.34.34-.44.55-.1.21-.15.43-.15.66 0 .48.25.88.74 1.21.38.25.77.48 1.41.7H7.39c-.05-.08-.11-.17-.15-.25zM21 12v-2H3v2h9.62c.18.07.4.14.55.2.37.17.66.34.87.51.21.17.35.36.43.57.07.2.11.43.11.69 0 .23-.05.45-.14.66-.09.2-.23.38-.42.53-.19.15-.42.26-.71.35-.29.08-.63.13-1.01.13-.43 0-.83-.04-1.18-.13s-.66-.23-.91-.42c-.25-.19-.45-.44-.59-.75-.14-.31-.25-.76-.25-1.21H6.4c0 .55.08 1.13.24 1.58.16.45.37.85.65 1.21.28.35.6.66.98.92.37.26.78.48 1.22.65.44.17.9.3 1.38.39.48.08.96.13 1.44.13.8 0 1.53-.09 2.18-.28s1.21-.45 1.67-.79c.46-.34.82-.77 1.07-1.27s.38-1.07.38-1.71c0-.6-.1-1.14-.31-1.61-.05-.11-.11-.23-.17-.33H21z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/italic.js

/* harmony default export */ var italic = (_icon_template("<path d=\"M10 4v3h2.21l-3.42 8H6v3h8v-3h-2.21l3.42-8H18V4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/local_library.js

/* harmony default export */ var local_library = (_icon_template("<path d=\"M12 11.55C9.64 9.35 6.48 8 3 8v11c3.48 0 6.64 1.35 9 3.55 2.36-2.19 5.52-3.55 9-3.55V8c-3.48 0-6.64 1.35-9 3.55zM12 8c1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3 1.34 3 3 3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/lens.js

/* harmony default export */ var lens = (_icon_template("<path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/flag.js

/* harmony default export */ var flag = (_icon_template("<path d=\"M14.4 6L14 4H5v17h2v-7h5.6l.4 2h7V6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/left.js

/* harmony default export */ var left = (/*html*/_icon_template("<path d=\"M2,4 L2,20Z M6,10 L16,10 L16,14 L6,14Z\" stroke-width=\"1\" />"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/center.js

/* harmony default export */ var center = (/*html*/_icon_template("\n    <path d=\"M12,4 L12,20Z M6,10 L18,10 L18,14 L6,14Z\" stroke-width=\"1\" />\n"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/right.js

/* harmony default export */ var right = (/*html*/_icon_template("<path d=\"M20,4 L20,20Z M6,10 L16,10 L16,14 L6,14Z\" stroke-width=\"1\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/top.js

/* harmony default export */ var icon_top = (/*html*/_icon_template("<path d=\"M4,4 L20,4Z M10,8 L10,16 L14,16 L14,8Z\" stroke-width=\"1\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/bottom.js

/* harmony default export */ var bottom = (/*html*/_icon_template("<path d=\"M4,20 L20,20Z M10,8 L10,16 L14,16 L14,8Z\" stroke-width=\"1\" />"));
// CONCATENATED MODULE: ./src/el/editor/icon/middle.js

/* harmony default export */ var middle = (/*html*/_icon_template("<path d=\"M4,12 L20,12Z M10,8 L10,16 L14,16 L14,8Z\" stroke-width=\"1\" />"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/same_width.js

/* harmony default export */ var same_width = (/*html*/_icon_template("\n    <path d=\"M20,4 L20,20Z M2,4 L2,20Z M6,10 L16,10 L16,14 L6,14Z\" stroke-width=\"1\" />\n"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/same_height.js

/* harmony default export */ var same_height = (/*html*/_icon_template("\n    <path d=\"M4,4 L20,4Z M4,20 L20,20Z M10,8 L10,16 L14,16 L14,8Z\" stroke-width=\"1\" />\n"));
;
// CONCATENATED MODULE: ./src/el/editor/icon/local_movie.js

/* harmony default export */ var local_movie = (/*html*/_icon_template("<path d=\"M18 3v2h-2V3H8v2H6V3H4v18h2v-2h2v2h8v-2h2v2h2V3h-2zM8 17H6v-2h2v2zm0-4H6v-2h2v2zm0-4H6V7h2v2zm10 8h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2V7h2v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/keyboard.js

/* harmony default export */ var keyboard = (_icon_template("<path d=\"M20 5H4c-1.1 0-1.99.9-1.99 2L2 17c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm-9 3h2v2h-2V8zm0 3h2v2h-2v-2zM8 8h2v2H8V8zm0 3h2v2H8v-2zm-1 2H5v-2h2v2zm0-3H5V8h2v2zm9 7H8v-2h8v2zm0-4h-2v-2h2v2zm0-3h-2V8h2v2zm3 3h-2v-2h2v2zm0-3h-2V8h2v2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/apps.js

/* harmony default export */ var apps = (_icon_template("<path d=\"M4 8h4V4H4v4zm6 12h4v-4h-4v4zm-6 0h4v-4H4v4zm0-6h4v-4H4v4zm6 0h4v-4h-4v4zm6-10v4h4V4h-4zm-6 4h4V4h-4v4zm6 6h4v-4h-4v4zm0 6h4v-4h-4v4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/outline_rect.js

/* harmony default export */ var outline_rect = (/*html*/_icon_template("<path d=\"M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/outline_circle.js

/* harmony default export */ var outline_circle = (/*html*/_icon_template("<path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/launch.js

/* harmony default export */ var launch = (/*html*/_icon_template("\n        <path d=\"M19 19H5V5h7V3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2v-7h-2v7zM14 3v2h3.59l-9.83 9.83 1.41 1.41L19 6.41V10h2V3h-7z\"/>\n    "));
// CONCATENATED MODULE: ./src/el/editor/icon/pentool.js

/* harmony default export */ var pentool = (/*html*/_icon_template("\n    <g transform=\"translate(4.000003875248012, 4.000001937624006)\">\n        <path stroke=\"currentColor\" d=\"M 7.501491970838878 -0.0000015572448855733659Q 14.336036333057622 7.389304433496911 15.674208571053226 11.025537025755131Q 17.012380809048864 14.661769618013372 12.854180922821438 14.544928811787997L 12.854180922821438 16.99999278410904L 3.2146550430021494 16.99999278410904L 3.2146550430021494 14.544928811787997Q -0.8480130988910353 14.661769618013372 0.22369613306813782 11.025537025755131Q 1.295405365027311 7.389304433496911 7.501491970838878 -0.0000015572448855733659Z M 7.501491970838878 -0.0000015572448855733659M 7.043097362212707 10.615180199186797L 7.043097362212707 2.029497238417552Q 2.4235653311211847 7.389304433496911 1.2143202542326725 11.099378313047254Q 0.22369613306813782 14.380813978493594 4.269842778971384 13.709709450113499L 4.269842778971384 16.233605781316655L 11.751764459057853 16.233605781316655L 11.751764459057853 13.709709450113499Q 15.84146041516868 14.140123940309786 14.670231046646997 10.775846698306177Q 14.195747591990225 9.593976493057127 8.077664264490855 2.029497238417552L 8.077664264490855 10.615180199186797L 7.043097362212707 10.615180199186797Z\"/>\n    </g>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/video.js

/* harmony default export */ var video = (/*html*/_icon_template("\n        <path d=\"M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l4 4v-11l-4 4z\"/>\n    "));
// CONCATENATED MODULE: ./src/el/editor/icon/volume_down.js

/* harmony default export */ var volume_down = (/*html*/_icon_template("\n        <path d=\"M18.5 12c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM5 9v6h4l5 5V4L9 9H5z\"/>\n    "));
// CONCATENATED MODULE: ./src/el/editor/icon/volume_up.js

/* harmony default export */ var volume_up = (/*html*/_icon_template("\n    <path d=\"M3 9v6h4l5 5V4L7 9H3zm13.5 3c0-1.77-1.02-3.29-2.5-4.03v8.05c1.48-.73 2.5-2.25 2.5-4.02zM14 3.23v2.06c2.89.86 5 3.54 5 6.71s-2.11 5.85-5 6.71v2.06c4.01-.91 7-4.49 7-8.77s-2.99-7.86-7-8.77z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/volume_off.js

/* harmony default export */ var volume_off = (/*html*/_icon_template("\n    <path d=\"M16.5 12c0-1.77-1.02-3.29-2.5-4.03v2.21l2.45 2.45c.03-.2.05-.41.05-.63zm2.5 0c0 .94-.2 1.82-.54 2.64l1.51 1.51C20.63 14.91 21 13.5 21 12c0-4.28-2.99-7.86-7-8.77v2.06c2.89.86 5 3.54 5 6.71zM4.27 3L3 4.27 7.73 9H3v6h4l5 5v-6.73l4.25 4.25c-.67.52-1.42.93-2.25 1.18v2.06c1.38-.31 2.63-.95 3.69-1.81L19.73 21 21 19.73l-9-9L4.27 3zM12 4L9.91 6.09 12 8.18V4z\"/>\n"));
// CONCATENATED MODULE: ./src/el/editor/icon/arrowLeft.js

/* harmony default export */ var arrowLeft = (_icon_template("<path d=\"M14 7l-5 5 5 5V7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/group.js

/* harmony default export */ var group = (/*html*/_icon_template("\n        <path d=\"M3 5h2V3c-1.1 0-2 .9-2 2zm0 8h2v-2H3v2zm4 8h2v-2H7v2zM3 9h2V7H3v2zm10-6h-2v2h2V3zm6 0v2h2c0-1.1-.9-2-2-2zM5 21v-2H3c0 1.1.9 2 2 2zm-2-4h2v-2H3v2zM9 3H7v2h2V3zm2 18h2v-2h-2v2zm8-8h2v-2h-2v2zm0 8c1.1 0 2-.9 2-2h-2v2zm0-12h2V7h-2v2zm0 8h2v-2h-2v2zm-4 4h2v-2h-2v2zm0-16h2V3h-2v2zM7 17h10V7H7v10zm2-8h6v6H9V9z\"/>\n    "));
// CONCATENATED MODULE: ./src/el/editor/icon/arrow_right.js

/* harmony default export */ var arrow_right = (_icon_template("<path d=\"M10 17l5-5-5-5v10z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/layers.js

/* harmony default export */ var icon_layers = (_icon_template("<path d=\"M11.99 18.54l-7.37-5.73L3 14.07l9 7 9-7-1.63-1.27-7.38 5.74zM12 16l7.36-5.73L21 9l-9-7-9 7 1.63 1.27L12 16z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_horizontal_center.js

/* harmony default export */ var align_horizontal_center = (_icon_template("<polygon points=\"11,2 13,2 13,7 21,7 21,10 13,10 13,14 18,14 18,17 13,17 13,22 11,22 11,17 6,17 6,14 11,14 11,10 3,10 3,7 11,7\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_horizontal_left.js

/* harmony default export */ var align_horizontal_left = (_icon_template("<path d=\"M4,22H2V2h2V22z M22,7H6v3h16V7z M16,14H6v3h10V14z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_horizontal_right.js

/* harmony default export */ var align_horizontal_right = (_icon_template("<path d=\"M20,2h2v20h-2V2z M2,10h16V7H2V10z M8,17h10v-3H8V17z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_vertical_bottom.js

/* harmony default export */ var align_vertical_bottom = (_icon_template("<path d=\"M22,22H2v-2h20V22z M10,2H7v16h3V2z M17,8h-3v10h3V8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_vertical_center.js

/* harmony default export */ var align_vertical_center = (_icon_template("<polygon points=\"22,11 17,11 17,6 14,6 14,11 10,11 10,3 7,3 7,11 1.84,11 1.84,13 7,13 7,21 10,21 10,13 14,13 14,18 17,18 17,13 22,13\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/align_vertical_top.js

/* harmony default export */ var align_vertical_top = (_icon_template("<path d=\"M22,2v2H2V2H22z M7,22h3V6H7V22z M14,16h3V6h-3V16z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/swap_horiz.js

/* harmony default export */ var swap_horiz = (_icon_template("<path d=\"M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/rotate_left.js

/* harmony default export */ var rotate_left = (_icon_template("<path d=\"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/open_in_full.js

/* harmony default export */ var open_in_full = (function () {
  var transform = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  return (
    /*html*/
    _icon_template("<polygon points=\"21,11 21,3 13,3 16.29,6.29 6.29,16.29 3,13 3,21 11,21 7.71,17.71 17.71,7.71\" transform='".concat(transform, "' stroke='white' stroke-width=\"0.5\" />"), {
      width: 20,
      height: 20
    })
  );
});
// CONCATENATED MODULE: ./src/el/editor/icon/rotate.js

/* harmony default export */ var rotate = (/*html*/_icon_template("\n        <path d=\"M7.11 8.53L5.7 7.11C4.8 8.27 4.24 9.61 4.07 11h2.02c.14-.87.49-1.72 1.02-2.47zM6.09 13H4.07c.17 1.39.72 2.73 1.62 3.89l1.41-1.42c-.52-.75-.87-1.59-1.01-2.47zm1.01 5.32c1.16.9 2.51 1.44 3.9 1.61V17.9c-.87-.15-1.71-.49-2.46-1.03L7.1 18.32zM13 4.07V1L8.45 5.55 13 10V6.09c2.84.48 5 2.94 5 5.91s-2.16 5.43-5 5.91v2.02c3.95-.49 7-3.85 7-7.93s-3.05-7.44-7-7.93z\" stroke='white' stroke-width=\"0.5\" />\n    "));
// CONCATENATED MODULE: ./src/el/editor/icon/vertical_distribute.js

/* harmony default export */ var vertical_distribute = (_icon_template("<path d=\"M22,2v2H2V2H22z M7,10.5v3h10v-3H7z M2,20v2h20v-2H2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/horizontal_distribute.js

/* harmony default export */ var horizontal_distribute = (_icon_template("<path d=\"M4,22H2V2h2V22z M22,2h-2v20h2V2z M13.5,7h-3v10h3V7z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/delete_forever.js

/* harmony default export */ var delete_forever = (_icon_template("<path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm2.46-7.12l1.41-1.41L12 12.59l2.12-2.12 1.41 1.41L13.41 14l2.12 2.12-1.41 1.41L12 15.41l-2.12 2.12-1.41-1.41L10.59 14l-2.13-2.12zM15.5 4l-1-1h-5l-1 1H5v2h14V4z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/horizontal_rule.js

/* harmony default export */ var horizontal_rule = (_icon_template("<rect fill-rule=\"evenodd\" height=\"2\" width=\"16\" x=\"4\" y=\"11\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/navigation.js

/* harmony default export */ var navigation = (_icon_template("<path d=\"M12 2L4.5 20.29l.71.71L12 18l6.79 3 .71-.71z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/web.js

/* harmony default export */ var web = (_icon_template("<path d=\"M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-5 14H4v-4h11v4zm0-5H4V9h11v4zm5 5h-4V9h4v9z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/auto_awesome.js

/* harmony default export */ var auto_awesome = (_icon_template("<path d=\"M19 9l1.25-2.75L23 5l-2.75-1.25L19 1l-1.25 2.75L15 5l2.75 1.25L19 9zm-7.5.5L9 4 6.5 9.5 1 12l5.5 2.5L9 20l2.5-5.5L17 12l-5.5-2.5zM19 15l-1.25 2.75L15 19l2.75 1.25L19 23l1.25-2.75L23 19l-2.75-1.25L19 15z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/chart.js

/* harmony default export */ var chart = (_icon_template("<path d=\"M9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4zm2.5 2.1h-15V5h15v14.1zm0-16.1h-15c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h15c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/line_chart.js

/* harmony default export */ var line_chart = (_icon_template("<path d=\"M3.5 18.49l6-6.01 4 4L22 6.92l-1.41-1.41-7.09 7.97-4-4L2 16.99z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/bar_chart.js

/* harmony default export */ var bar_chart = (_icon_template("<path d=\"M5 9.2h3V19H5zM10.6 5h2.8v14h-2.8zm5.6 8H19v6h-2.8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/plugin.js

/* harmony default export */ var icon_plugin = (_icon_template("<path d=\"M3 3h8v8H3zm10 0h8v8h-8zM3 13h8v8H3zm15 0h-2v3h-3v2h3v3h2v-3h3v-2h-3z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/straighten.js

/* harmony default export */ var straighten = (_icon_template("<path d=\"M21 6H3c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h18c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2zm0 10H3V8h2v4h2V8h2v4h2V8h2v4h2V8h2v4h2V8h2v8z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/left_hide.js

/* harmony default export */ var left_hide = (_icon_template("<path d=\"M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/right_hide.js

/* harmony default export */ var right_hide = (_icon_template("<path d=\"M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z\"/>"));
// CONCATENATED MODULE: ./src/el/editor/icon/icon.js


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




































































































































































var alias = {
  fullscreen: border_inner
};
/* harmony default export */ var icon = __webpack_exports__["a"] = (_objectSpread(_objectSpread({}, alias), {}, {
  left_hide: left_hide,
  right_hide: right_hide,
  bar_chart: bar_chart,
  straighten: straighten,
  plugin: icon_plugin,
  chart: chart,
  line_chart: line_chart,
  auto_awesome: auto_awesome,
  web: web,
  navigation: navigation,
  delete_forever: delete_forever,
  horizontal_rule: horizontal_rule,
  open_in_full: open_in_full,
  rotate: rotate,
  align_horizontal_center: align_horizontal_center,
  align_horizontal_left: align_horizontal_left,
  align_horizontal_right: align_horizontal_right,
  align_vertical_bottom: align_vertical_bottom,
  align_vertical_center: align_vertical_center,
  align_vertical_top: align_vertical_top,
  vertical_distribute: vertical_distribute,
  horizontal_distribute: horizontal_distribute,
  rotate_left: rotate_left,
  swap_horiz: swap_horiz,
  arrow_right: arrow_right,
  group: group,
  volume_down: volume_down,
  arrowLeft: arrowLeft,
  volume_up: volume_up,
  volume_off: volume_off,
  pentool: pentool,
  launch: launch,
  apps: apps,
  outline_rect: outline_rect,
  outline_circle: outline_circle,
  keyboard: keyboard,
  local_movie: local_movie,
  same_height: same_height,
  same_width: same_width,
  layers: icon_layers,
  middle: middle,
  bottom: bottom,
  top: icon_top,
  right: right,
  center: center,
  left: left,
  flag: flag,
  lens: lens,
  local_library: local_library,
  italic: italic,
  strikethrough: strikethrough,
  underline: underline,
  cylinder: cylinder,
  text_rotate: text_rotate,
  device_hub: device_hub,
  control_point: control_point,
  flip_camera: flip_camera,
  flipY: flipY,
  flip: flip,
  account_tree: account_tree,
  format_shapes: format_shapes,
  merge: merge,
  texture: texture,
  settings_input_component: settings_input_component,
  view_comfy: view_comfy,
  camera_roll: camera_roll,
  broken_image: broken_image,
  shadow: shadow,
  opacity: opacity,
  looks: looks,
  vintage: vintage,
  waves: waves,
  blur_linear: blur_linear,
  blur: icon_blur,
  landscape: landscape,
  palette: palette,
  diffuse: diffuse,
  specular: specular,
  photo: photo,
  near_me: near_me,
  view_list: view_list,
  flash_on: flash_on,
  doc: doc,
  storage: storage,
  archive: archive,
  file_copy: file_copy,
  gps_fixed: gps_fixed,
  refresh: refresh,
  cat: cat,
  shuffle: shuffle,
  replay: replay,
  speed: speed,
  alternate_reverse: alternate_reverse,
  alternate: alternate,
  note: note,
  rect: rect,
  circle: circle,
  color_lens: color_lens,
  cube: cube,
  polygon: polygon,
  star: star,
  dahaze: dahaze,
  brush: brush,
  expand: expand,
  list: list,
  grid: grid,
  align_center: align_center,
  align_justify: align_justify,
  align_left: align_left,
  align_right: align_right,
  color: color,
  size: size,
  edit: edit,
  outline_image: outline_image,
  ballot: ballot,
  shape: shape,
  scatter: scatter,
  transform: icon_transform,
  gradient: gradient,
  close: icon_close,
  build: build,
  code: code,
  autorenew: autorenew,
  play: play,
  pause: pause,
  skip_next: skip_next,
  skip_prev: skip_prev,
  fast_forward: fast_forward,
  fast_rewind: fast_rewind,
  filter: filter,
  input: input,
  timer: timer,
  title: title,
  paint: paint,
  border_all: border_all,
  border_inner: border_inner,
  check: check,
  video: video,
  arrowRight: arrowRight,
  screen: screen,
  repeat: repeat,
  remove2: remove2,
  setting: setting,
  image: icon_image,
  artboard: artboard,
  folder: folder,
  publish: publish,
  add_note: add_note,
  add: add,
  save: save,
  "export": icon_export,
  redo: redo,
  undo: undo,
  lock: lock,
  lock_open: lock_open,
  remove: remove,
  copy: copy,
  visible: visible,
  add_box: add_box,
  add_circle: add_circle,
  create_folder: create_folder,
  chevron_right: chevron_right,
  chevron_left: chevron_left
}));

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* reexport */ mat4_namespaceObject; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* reexport */ quat_namespaceObject; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* reexport */ vec2_namespaceObject; });
__webpack_require__.d(__webpack_exports__, "d", function() { return /* reexport */ vec3_namespaceObject; });

// UNUSED EXPORTS: glMatrix, mat2, mat2d, mat3, quat2, vec4

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/mat4.js
var mat4_namespaceObject = {};
__webpack_require__.r(mat4_namespaceObject);
__webpack_require__.d(mat4_namespaceObject, "create", function() { return create; });
__webpack_require__.d(mat4_namespaceObject, "clone", function() { return clone; });
__webpack_require__.d(mat4_namespaceObject, "copy", function() { return copy; });
__webpack_require__.d(mat4_namespaceObject, "fromValues", function() { return fromValues; });
__webpack_require__.d(mat4_namespaceObject, "set", function() { return set; });
__webpack_require__.d(mat4_namespaceObject, "identity", function() { return identity; });
__webpack_require__.d(mat4_namespaceObject, "transpose", function() { return transpose; });
__webpack_require__.d(mat4_namespaceObject, "invert", function() { return invert; });
__webpack_require__.d(mat4_namespaceObject, "adjoint", function() { return adjoint; });
__webpack_require__.d(mat4_namespaceObject, "determinant", function() { return determinant; });
__webpack_require__.d(mat4_namespaceObject, "multiply", function() { return multiply; });
__webpack_require__.d(mat4_namespaceObject, "translate", function() { return translate; });
__webpack_require__.d(mat4_namespaceObject, "scale", function() { return mat4_scale; });
__webpack_require__.d(mat4_namespaceObject, "rotate", function() { return rotate; });
__webpack_require__.d(mat4_namespaceObject, "rotateX", function() { return rotateX; });
__webpack_require__.d(mat4_namespaceObject, "rotateY", function() { return rotateY; });
__webpack_require__.d(mat4_namespaceObject, "rotateZ", function() { return rotateZ; });
__webpack_require__.d(mat4_namespaceObject, "fromTranslation", function() { return fromTranslation; });
__webpack_require__.d(mat4_namespaceObject, "fromScaling", function() { return fromScaling; });
__webpack_require__.d(mat4_namespaceObject, "fromRotation", function() { return fromRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromXRotation", function() { return fromXRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromYRotation", function() { return fromYRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromZRotation", function() { return fromZRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslation", function() { return fromRotationTranslation; });
__webpack_require__.d(mat4_namespaceObject, "fromQuat2", function() { return fromQuat2; });
__webpack_require__.d(mat4_namespaceObject, "getTranslation", function() { return getTranslation; });
__webpack_require__.d(mat4_namespaceObject, "getScaling", function() { return getScaling; });
__webpack_require__.d(mat4_namespaceObject, "getRotation", function() { return getRotation; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScale", function() { return fromRotationTranslationScale; });
__webpack_require__.d(mat4_namespaceObject, "fromRotationTranslationScaleOrigin", function() { return fromRotationTranslationScaleOrigin; });
__webpack_require__.d(mat4_namespaceObject, "fromQuat", function() { return fromQuat; });
__webpack_require__.d(mat4_namespaceObject, "frustum", function() { return frustum; });
__webpack_require__.d(mat4_namespaceObject, "perspective", function() { return perspective; });
__webpack_require__.d(mat4_namespaceObject, "perspectiveFromFieldOfView", function() { return perspectiveFromFieldOfView; });
__webpack_require__.d(mat4_namespaceObject, "ortho", function() { return ortho; });
__webpack_require__.d(mat4_namespaceObject, "lookAt", function() { return lookAt; });
__webpack_require__.d(mat4_namespaceObject, "targetTo", function() { return targetTo; });
__webpack_require__.d(mat4_namespaceObject, "str", function() { return str; });
__webpack_require__.d(mat4_namespaceObject, "frob", function() { return frob; });
__webpack_require__.d(mat4_namespaceObject, "add", function() { return add; });
__webpack_require__.d(mat4_namespaceObject, "subtract", function() { return subtract; });
__webpack_require__.d(mat4_namespaceObject, "multiplyScalar", function() { return multiplyScalar; });
__webpack_require__.d(mat4_namespaceObject, "multiplyScalarAndAdd", function() { return multiplyScalarAndAdd; });
__webpack_require__.d(mat4_namespaceObject, "exactEquals", function() { return exactEquals; });
__webpack_require__.d(mat4_namespaceObject, "equals", function() { return mat4_equals; });
__webpack_require__.d(mat4_namespaceObject, "mul", function() { return mul; });
__webpack_require__.d(mat4_namespaceObject, "sub", function() { return sub; });

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec3.js
var vec3_namespaceObject = {};
__webpack_require__.r(vec3_namespaceObject);
__webpack_require__.d(vec3_namespaceObject, "create", function() { return vec3_create; });
__webpack_require__.d(vec3_namespaceObject, "clone", function() { return vec3_clone; });
__webpack_require__.d(vec3_namespaceObject, "length", function() { return vec3_length; });
__webpack_require__.d(vec3_namespaceObject, "fromValues", function() { return vec3_fromValues; });
__webpack_require__.d(vec3_namespaceObject, "copy", function() { return vec3_copy; });
__webpack_require__.d(vec3_namespaceObject, "set", function() { return vec3_set; });
__webpack_require__.d(vec3_namespaceObject, "add", function() { return vec3_add; });
__webpack_require__.d(vec3_namespaceObject, "subtract", function() { return vec3_subtract; });
__webpack_require__.d(vec3_namespaceObject, "multiply", function() { return vec3_multiply; });
__webpack_require__.d(vec3_namespaceObject, "divide", function() { return divide; });
__webpack_require__.d(vec3_namespaceObject, "ceil", function() { return ceil; });
__webpack_require__.d(vec3_namespaceObject, "floor", function() { return floor; });
__webpack_require__.d(vec3_namespaceObject, "min", function() { return min; });
__webpack_require__.d(vec3_namespaceObject, "max", function() { return max; });
__webpack_require__.d(vec3_namespaceObject, "round", function() { return round; });
__webpack_require__.d(vec3_namespaceObject, "scale", function() { return vec3_scale; });
__webpack_require__.d(vec3_namespaceObject, "scaleAndAdd", function() { return scaleAndAdd; });
__webpack_require__.d(vec3_namespaceObject, "distance", function() { return distance; });
__webpack_require__.d(vec3_namespaceObject, "squaredDistance", function() { return squaredDistance; });
__webpack_require__.d(vec3_namespaceObject, "squaredLength", function() { return squaredLength; });
__webpack_require__.d(vec3_namespaceObject, "negate", function() { return negate; });
__webpack_require__.d(vec3_namespaceObject, "inverse", function() { return inverse; });
__webpack_require__.d(vec3_namespaceObject, "normalize", function() { return normalize; });
__webpack_require__.d(vec3_namespaceObject, "dot", function() { return vec3_dot; });
__webpack_require__.d(vec3_namespaceObject, "cross", function() { return cross; });
__webpack_require__.d(vec3_namespaceObject, "lerp", function() { return lerp; });
__webpack_require__.d(vec3_namespaceObject, "hermite", function() { return hermite; });
__webpack_require__.d(vec3_namespaceObject, "bezier", function() { return bezier; });
__webpack_require__.d(vec3_namespaceObject, "random", function() { return random; });
__webpack_require__.d(vec3_namespaceObject, "transformMat4", function() { return transformMat4; });
__webpack_require__.d(vec3_namespaceObject, "transformMat3", function() { return transformMat3; });
__webpack_require__.d(vec3_namespaceObject, "transformQuat", function() { return transformQuat; });
__webpack_require__.d(vec3_namespaceObject, "rotateX", function() { return vec3_rotateX; });
__webpack_require__.d(vec3_namespaceObject, "rotateY", function() { return vec3_rotateY; });
__webpack_require__.d(vec3_namespaceObject, "rotateZ", function() { return vec3_rotateZ; });
__webpack_require__.d(vec3_namespaceObject, "angle", function() { return angle; });
__webpack_require__.d(vec3_namespaceObject, "zero", function() { return zero; });
__webpack_require__.d(vec3_namespaceObject, "str", function() { return vec3_str; });
__webpack_require__.d(vec3_namespaceObject, "exactEquals", function() { return vec3_exactEquals; });
__webpack_require__.d(vec3_namespaceObject, "equals", function() { return vec3_equals; });
__webpack_require__.d(vec3_namespaceObject, "sub", function() { return vec3_sub; });
__webpack_require__.d(vec3_namespaceObject, "mul", function() { return vec3_mul; });
__webpack_require__.d(vec3_namespaceObject, "div", function() { return div; });
__webpack_require__.d(vec3_namespaceObject, "dist", function() { return dist; });
__webpack_require__.d(vec3_namespaceObject, "sqrDist", function() { return sqrDist; });
__webpack_require__.d(vec3_namespaceObject, "len", function() { return vec3_len; });
__webpack_require__.d(vec3_namespaceObject, "sqrLen", function() { return sqrLen; });
__webpack_require__.d(vec3_namespaceObject, "forEach", function() { return forEach; });

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/quat.js
var quat_namespaceObject = {};
__webpack_require__.r(quat_namespaceObject);
__webpack_require__.d(quat_namespaceObject, "create", function() { return quat_create; });
__webpack_require__.d(quat_namespaceObject, "identity", function() { return quat_identity; });
__webpack_require__.d(quat_namespaceObject, "setAxisAngle", function() { return setAxisAngle; });
__webpack_require__.d(quat_namespaceObject, "getAxisAngle", function() { return getAxisAngle; });
__webpack_require__.d(quat_namespaceObject, "getAngle", function() { return getAngle; });
__webpack_require__.d(quat_namespaceObject, "multiply", function() { return quat_multiply; });
__webpack_require__.d(quat_namespaceObject, "rotateX", function() { return quat_rotateX; });
__webpack_require__.d(quat_namespaceObject, "rotateY", function() { return quat_rotateY; });
__webpack_require__.d(quat_namespaceObject, "rotateZ", function() { return quat_rotateZ; });
__webpack_require__.d(quat_namespaceObject, "calculateW", function() { return calculateW; });
__webpack_require__.d(quat_namespaceObject, "exp", function() { return exp; });
__webpack_require__.d(quat_namespaceObject, "ln", function() { return ln; });
__webpack_require__.d(quat_namespaceObject, "pow", function() { return pow; });
__webpack_require__.d(quat_namespaceObject, "slerp", function() { return slerp; });
__webpack_require__.d(quat_namespaceObject, "random", function() { return quat_random; });
__webpack_require__.d(quat_namespaceObject, "invert", function() { return quat_invert; });
__webpack_require__.d(quat_namespaceObject, "conjugate", function() { return conjugate; });
__webpack_require__.d(quat_namespaceObject, "fromMat3", function() { return fromMat3; });
__webpack_require__.d(quat_namespaceObject, "fromEuler", function() { return fromEuler; });
__webpack_require__.d(quat_namespaceObject, "str", function() { return quat_str; });
__webpack_require__.d(quat_namespaceObject, "clone", function() { return quat_clone; });
__webpack_require__.d(quat_namespaceObject, "fromValues", function() { return quat_fromValues; });
__webpack_require__.d(quat_namespaceObject, "copy", function() { return quat_copy; });
__webpack_require__.d(quat_namespaceObject, "set", function() { return quat_set; });
__webpack_require__.d(quat_namespaceObject, "add", function() { return quat_add; });
__webpack_require__.d(quat_namespaceObject, "mul", function() { return quat_mul; });
__webpack_require__.d(quat_namespaceObject, "scale", function() { return quat_scale; });
__webpack_require__.d(quat_namespaceObject, "dot", function() { return quat_dot; });
__webpack_require__.d(quat_namespaceObject, "lerp", function() { return quat_lerp; });
__webpack_require__.d(quat_namespaceObject, "length", function() { return quat_length; });
__webpack_require__.d(quat_namespaceObject, "len", function() { return quat_len; });
__webpack_require__.d(quat_namespaceObject, "squaredLength", function() { return quat_squaredLength; });
__webpack_require__.d(quat_namespaceObject, "sqrLen", function() { return quat_sqrLen; });
__webpack_require__.d(quat_namespaceObject, "normalize", function() { return quat_normalize; });
__webpack_require__.d(quat_namespaceObject, "exactEquals", function() { return quat_exactEquals; });
__webpack_require__.d(quat_namespaceObject, "equals", function() { return quat_equals; });
__webpack_require__.d(quat_namespaceObject, "rotationTo", function() { return rotationTo; });
__webpack_require__.d(quat_namespaceObject, "sqlerp", function() { return sqlerp; });
__webpack_require__.d(quat_namespaceObject, "setAxes", function() { return setAxes; });

// NAMESPACE OBJECT: ./node_modules/gl-matrix/esm/vec2.js
var vec2_namespaceObject = {};
__webpack_require__.r(vec2_namespaceObject);
__webpack_require__.d(vec2_namespaceObject, "create", function() { return vec2_create; });
__webpack_require__.d(vec2_namespaceObject, "clone", function() { return vec2_clone; });
__webpack_require__.d(vec2_namespaceObject, "fromValues", function() { return vec2_fromValues; });
__webpack_require__.d(vec2_namespaceObject, "copy", function() { return vec2_copy; });
__webpack_require__.d(vec2_namespaceObject, "set", function() { return vec2_set; });
__webpack_require__.d(vec2_namespaceObject, "add", function() { return vec2_add; });
__webpack_require__.d(vec2_namespaceObject, "subtract", function() { return vec2_subtract; });
__webpack_require__.d(vec2_namespaceObject, "multiply", function() { return vec2_multiply; });
__webpack_require__.d(vec2_namespaceObject, "divide", function() { return vec2_divide; });
__webpack_require__.d(vec2_namespaceObject, "ceil", function() { return vec2_ceil; });
__webpack_require__.d(vec2_namespaceObject, "floor", function() { return vec2_floor; });
__webpack_require__.d(vec2_namespaceObject, "min", function() { return vec2_min; });
__webpack_require__.d(vec2_namespaceObject, "max", function() { return vec2_max; });
__webpack_require__.d(vec2_namespaceObject, "round", function() { return vec2_round; });
__webpack_require__.d(vec2_namespaceObject, "scale", function() { return vec2_scale; });
__webpack_require__.d(vec2_namespaceObject, "scaleAndAdd", function() { return vec2_scaleAndAdd; });
__webpack_require__.d(vec2_namespaceObject, "distance", function() { return vec2_distance; });
__webpack_require__.d(vec2_namespaceObject, "squaredDistance", function() { return vec2_squaredDistance; });
__webpack_require__.d(vec2_namespaceObject, "length", function() { return vec2_length; });
__webpack_require__.d(vec2_namespaceObject, "squaredLength", function() { return vec2_squaredLength; });
__webpack_require__.d(vec2_namespaceObject, "negate", function() { return vec2_negate; });
__webpack_require__.d(vec2_namespaceObject, "inverse", function() { return vec2_inverse; });
__webpack_require__.d(vec2_namespaceObject, "normalize", function() { return vec2_normalize; });
__webpack_require__.d(vec2_namespaceObject, "dot", function() { return vec2_dot; });
__webpack_require__.d(vec2_namespaceObject, "cross", function() { return vec2_cross; });
__webpack_require__.d(vec2_namespaceObject, "lerp", function() { return vec2_lerp; });
__webpack_require__.d(vec2_namespaceObject, "random", function() { return vec2_random; });
__webpack_require__.d(vec2_namespaceObject, "transformMat2", function() { return transformMat2; });
__webpack_require__.d(vec2_namespaceObject, "transformMat2d", function() { return transformMat2d; });
__webpack_require__.d(vec2_namespaceObject, "transformMat3", function() { return vec2_transformMat3; });
__webpack_require__.d(vec2_namespaceObject, "transformMat4", function() { return vec2_transformMat4; });
__webpack_require__.d(vec2_namespaceObject, "rotate", function() { return vec2_rotate; });
__webpack_require__.d(vec2_namespaceObject, "angle", function() { return vec2_angle; });
__webpack_require__.d(vec2_namespaceObject, "zero", function() { return vec2_zero; });
__webpack_require__.d(vec2_namespaceObject, "str", function() { return vec2_str; });
__webpack_require__.d(vec2_namespaceObject, "exactEquals", function() { return vec2_exactEquals; });
__webpack_require__.d(vec2_namespaceObject, "equals", function() { return vec2_equals; });
__webpack_require__.d(vec2_namespaceObject, "len", function() { return vec2_len; });
__webpack_require__.d(vec2_namespaceObject, "sub", function() { return vec2_sub; });
__webpack_require__.d(vec2_namespaceObject, "mul", function() { return vec2_mul; });
__webpack_require__.d(vec2_namespaceObject, "div", function() { return vec2_div; });
__webpack_require__.d(vec2_namespaceObject, "dist", function() { return vec2_dist; });
__webpack_require__.d(vec2_namespaceObject, "sqrDist", function() { return vec2_sqrDist; });
__webpack_require__.d(vec2_namespaceObject, "sqrLen", function() { return vec2_sqrLen; });
__webpack_require__.d(vec2_namespaceObject, "forEach", function() { return vec2_forEach; });

// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/common.js
/**
 * Common utilities
 * @module glMatrix
 */
// Configuration Constants
var EPSILON = 0.000001;
var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
var RANDOM = Math.random;
/**
 * Sets the type of array used when creating new vectors and matrices
 *
 * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array
 */

function setMatrixArrayType(type) {
  ARRAY_TYPE = type;
}
var degree = Math.PI / 180;
/**
 * Convert Degree To Radian
 *
 * @param {Number} a Angle in Degrees
 */

function toRadian(a) {
  return a * degree;
}
/**
 * Tests whether or not the arguments have approximately the same value, within an absolute
 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less
 * than or equal to 1.0, and a relative tolerance is used for larger values)
 *
 * @param {Number} a The first number to test.
 * @param {Number} b The second number to test.
 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
 */

function equals(a, b) {
  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
}
if (!Math.hypot) Math.hypot = function () {
  var y = 0,
      i = arguments.length;

  while (i--) {
    y += arguments[i] * arguments[i];
  }

  return Math.sqrt(y);
};
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat4.js

/**
 * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
 * @module mat4
 */

/**
 * Creates a new identity mat4
 *
 * @returns {mat4} a new 4x4 matrix
 */

function create() {
  var out = new ARRAY_TYPE(16);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[4] = 0;
    out[6] = 0;
    out[7] = 0;
    out[8] = 0;
    out[9] = 0;
    out[11] = 0;
    out[12] = 0;
    out[13] = 0;
    out[14] = 0;
  }

  out[0] = 1;
  out[5] = 1;
  out[10] = 1;
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat4} a matrix to clone
 * @returns {mat4} a new 4x4 matrix
 */

function clone(a) {
  var out = new ARRAY_TYPE(16);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Copy the values from one mat4 to another
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  out[9] = a[9];
  out[10] = a[10];
  out[11] = a[11];
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Create a new mat4 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} A new mat4
 */

function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  var out = new ARRAY_TYPE(16);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set the components of a mat4 to the given values
 *
 * @param {mat4} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m03 Component in column 0, row 3 position (index 3)
 * @param {Number} m10 Component in column 1, row 0 position (index 4)
 * @param {Number} m11 Component in column 1, row 1 position (index 5)
 * @param {Number} m12 Component in column 1, row 2 position (index 6)
 * @param {Number} m13 Component in column 1, row 3 position (index 7)
 * @param {Number} m20 Component in column 2, row 0 position (index 8)
 * @param {Number} m21 Component in column 2, row 1 position (index 9)
 * @param {Number} m22 Component in column 2, row 2 position (index 10)
 * @param {Number} m23 Component in column 2, row 3 position (index 11)
 * @param {Number} m30 Component in column 3, row 0 position (index 12)
 * @param {Number} m31 Component in column 3, row 1 position (index 13)
 * @param {Number} m32 Component in column 3, row 2 position (index 14)
 * @param {Number} m33 Component in column 3, row 3 position (index 15)
 * @returns {mat4} out
 */

function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m03;
  out[4] = m10;
  out[5] = m11;
  out[6] = m12;
  out[7] = m13;
  out[8] = m20;
  out[9] = m21;
  out[10] = m22;
  out[11] = m23;
  out[12] = m30;
  out[13] = m31;
  out[14] = m32;
  out[15] = m33;
  return out;
}
/**
 * Set a mat4 to the identity matrix
 *
 * @param {mat4} out the receiving matrix
 * @returns {mat4} out
 */

function identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Transpose the values of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a03 = a[3];
    var a12 = a[6],
        a13 = a[7];
    var a23 = a[11];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a01;
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a02;
    out[9] = a12;
    out[11] = a[14];
    out[12] = a03;
    out[13] = a13;
    out[14] = a23;
  } else {
    out[0] = a[0];
    out[1] = a[4];
    out[2] = a[8];
    out[3] = a[12];
    out[4] = a[1];
    out[5] = a[5];
    out[6] = a[9];
    out[7] = a[13];
    out[8] = a[2];
    out[9] = a[6];
    out[10] = a[10];
    out[11] = a[14];
    out[12] = a[3];
    out[13] = a[7];
    out[14] = a[11];
    out[15] = a[15];
  }

  return out;
}
/**
 * Inverts a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat4
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the source matrix
 * @returns {mat4} out
 */

function adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);
  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);
  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);
  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);
  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);
  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);
  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);
  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);
  return out;
}
/**
 * Calculates the determinant of a mat4
 *
 * @param {ReadonlyMat4} a the source matrix
 * @returns {Number} determinant of a
 */

function determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
}
/**
 * Multiplies two mat4s
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15]; // Cache only the current line of the second matrix

  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[4];
  b1 = b[5];
  b2 = b[6];
  b3 = b[7];
  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[8];
  b1 = b[9];
  b2 = b[10];
  b3 = b[11];
  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  b0 = b[12];
  b1 = b[13];
  b2 = b[14];
  b3 = b[15];
  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  return out;
}
/**
 * Translate a mat4 by the given vector
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to translate
 * @param {ReadonlyVec3} v vector to translate by
 * @returns {mat4} out
 */

function translate(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;

  if (a === out) {
    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
  } else {
    a00 = a[0];
    a01 = a[1];
    a02 = a[2];
    a03 = a[3];
    a10 = a[4];
    a11 = a[5];
    a12 = a[6];
    a13 = a[7];
    a20 = a[8];
    a21 = a[9];
    a22 = a[10];
    a23 = a[11];
    out[0] = a00;
    out[1] = a01;
    out[2] = a02;
    out[3] = a03;
    out[4] = a10;
    out[5] = a11;
    out[6] = a12;
    out[7] = a13;
    out[8] = a20;
    out[9] = a21;
    out[10] = a22;
    out[11] = a23;
    out[12] = a00 * x + a10 * y + a20 * z + a[12];
    out[13] = a01 * x + a11 * y + a21 * z + a[13];
    out[14] = a02 * x + a12 * y + a22 * z + a[14];
    out[15] = a03 * x + a13 * y + a23 * z + a[15];
  }

  return out;
}
/**
 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {ReadonlyVec3} v the vec3 to scale the matrix by
 * @returns {mat4} out
 **/

function mat4_scale(out, a, v) {
  var x = v[0],
      y = v[1],
      z = v[2];
  out[0] = a[0] * x;
  out[1] = a[1] * x;
  out[2] = a[2] * x;
  out[3] = a[3] * x;
  out[4] = a[4] * y;
  out[5] = a[5] * y;
  out[6] = a[6] * y;
  out[7] = a[7] * y;
  out[8] = a[8] * z;
  out[9] = a[9] * z;
  out[10] = a[10] * z;
  out[11] = a[11] * z;
  out[12] = a[12];
  out[13] = a[13];
  out[14] = a[14];
  out[15] = a[15];
  return out;
}
/**
 * Rotates a mat4 by the given angle around the given axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function rotate(out, a, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;
  var a00, a01, a02, a03;
  var a10, a11, a12, a13;
  var a20, a21, a22, a23;
  var b00, b01, b02;
  var b10, b11, b12;
  var b20, b21, b22;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c;
  a00 = a[0];
  a01 = a[1];
  a02 = a[2];
  a03 = a[3];
  a10 = a[4];
  a11 = a[5];
  a12 = a[6];
  a13 = a[7];
  a20 = a[8];
  a21 = a[9];
  a22 = a[10];
  a23 = a[11]; // Construct the elements of the rotation matrix

  b00 = x * x * t + c;
  b01 = y * x * t + z * s;
  b02 = z * x * t - y * s;
  b10 = x * y * t - z * s;
  b11 = y * y * t + c;
  b12 = z * y * t + x * s;
  b20 = x * z * t + y * s;
  b21 = y * z * t - x * s;
  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

  out[0] = a00 * b00 + a10 * b01 + a20 * b02;
  out[1] = a01 * b00 + a11 * b01 + a21 * b02;
  out[2] = a02 * b00 + a12 * b01 + a22 * b02;
  out[3] = a03 * b00 + a13 * b01 + a23 * b02;
  out[4] = a00 * b10 + a10 * b11 + a20 * b12;
  out[5] = a01 * b10 + a11 * b11 + a21 * b12;
  out[6] = a02 * b10 + a12 * b11 + a22 * b12;
  out[7] = a03 * b10 + a13 * b11 + a23 * b12;
  out[8] = a00 * b20 + a10 * b21 + a20 * b22;
  out[9] = a01 * b20 + a11 * b21 + a21 * b22;
  out[10] = a02 * b20 + a12 * b21 + a22 * b22;
  out[11] = a03 * b20 + a13 * b21 + a23 * b22;

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  }

  return out;
}
/**
 * Rotates a matrix by the given angle around the X axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateX(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[0] = a[0];
    out[1] = a[1];
    out[2] = a[2];
    out[3] = a[3];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[4] = a10 * c + a20 * s;
  out[5] = a11 * c + a21 * s;
  out[6] = a12 * c + a22 * s;
  out[7] = a13 * c + a23 * s;
  out[8] = a20 * c - a10 * s;
  out[9] = a21 * c - a11 * s;
  out[10] = a22 * c - a12 * s;
  out[11] = a23 * c - a13 * s;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Y axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateY(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a20 = a[8];
  var a21 = a[9];
  var a22 = a[10];
  var a23 = a[11];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged rows
    out[4] = a[4];
    out[5] = a[5];
    out[6] = a[6];
    out[7] = a[7];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c - a20 * s;
  out[1] = a01 * c - a21 * s;
  out[2] = a02 * c - a22 * s;
  out[3] = a03 * c - a23 * s;
  out[8] = a00 * s + a20 * c;
  out[9] = a01 * s + a21 * c;
  out[10] = a02 * s + a22 * c;
  out[11] = a03 * s + a23 * c;
  return out;
}
/**
 * Rotates a matrix by the given angle around the Z axis
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function rotateZ(out, a, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad);
  var a00 = a[0];
  var a01 = a[1];
  var a02 = a[2];
  var a03 = a[3];
  var a10 = a[4];
  var a11 = a[5];
  var a12 = a[6];
  var a13 = a[7];

  if (a !== out) {
    // If the source and destination differ, copy the unchanged last row
    out[8] = a[8];
    out[9] = a[9];
    out[10] = a[10];
    out[11] = a[11];
    out[12] = a[12];
    out[13] = a[13];
    out[14] = a[14];
    out[15] = a[15];
  } // Perform axis-specific matrix multiplication


  out[0] = a00 * c + a10 * s;
  out[1] = a01 * c + a11 * s;
  out[2] = a02 * c + a12 * s;
  out[3] = a03 * c + a13 * s;
  out[4] = a10 * c - a00 * s;
  out[5] = a11 * c - a01 * s;
  out[6] = a12 * c - a02 * s;
  out[7] = a13 * c - a03 * s;
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.scale(dest, dest, vec);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyVec3} v Scaling vector
 * @returns {mat4} out
 */

function fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = v[1];
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = v[2];
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle around a given axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotate(dest, dest, rad, axis);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @param {ReadonlyVec3} axis the axis to rotate around
 * @returns {mat4} out
 */

function fromRotation(out, rad, axis) {
  var x = axis[0],
      y = axis[1],
      z = axis[2];
  var len = Math.hypot(x, y, z);
  var s, c, t;

  if (len < EPSILON) {
    return null;
  }

  len = 1 / len;
  x *= len;
  y *= len;
  z *= len;
  s = Math.sin(rad);
  c = Math.cos(rad);
  t = 1 - c; // Perform rotation-specific matrix multiplication

  out[0] = x * x * t + c;
  out[1] = y * x * t + z * s;
  out[2] = z * x * t - y * s;
  out[3] = 0;
  out[4] = x * y * t - z * s;
  out[5] = y * y * t + c;
  out[6] = z * y * t + x * s;
  out[7] = 0;
  out[8] = x * z * t + y * s;
  out[9] = y * z * t - x * s;
  out[10] = z * z * t + c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the X axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateX(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromXRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = c;
  out[6] = s;
  out[7] = 0;
  out[8] = 0;
  out[9] = -s;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Y axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateY(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromYRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = 0;
  out[2] = -s;
  out[3] = 0;
  out[4] = 0;
  out[5] = 1;
  out[6] = 0;
  out[7] = 0;
  out[8] = s;
  out[9] = 0;
  out[10] = c;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from the given angle around the Z axis
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.rotateZ(dest, dest, rad);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat4} out
 */

function fromZRotation(out, rad) {
  var s = Math.sin(rad);
  var c = Math.cos(rad); // Perform axis-specific matrix multiplication

  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = 0;
  out[4] = -s;
  out[5] = c;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 1;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation and vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @returns {mat4} out
 */

function fromRotationTranslation(out, q, v) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - (yy + zz);
  out[1] = xy + wz;
  out[2] = xz - wy;
  out[3] = 0;
  out[4] = xy - wz;
  out[5] = 1 - (xx + zz);
  out[6] = yz + wx;
  out[7] = 0;
  out[8] = xz + wy;
  out[9] = yz - wx;
  out[10] = 1 - (xx + yy);
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a new mat4 from a dual quat.
 *
 * @param {mat4} out Matrix
 * @param {ReadonlyQuat2} a Dual Quaternion
 * @returns {mat4} mat4 receiving operation result
 */

function fromQuat2(out, a) {
  var translation = new ARRAY_TYPE(3);
  var bx = -a[0],
      by = -a[1],
      bz = -a[2],
      bw = a[3],
      ax = a[4],
      ay = a[5],
      az = a[6],
      aw = a[7];
  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense

  if (magnitude > 0) {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;
  } else {
    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
  }

  fromRotationTranslation(out, a, translation);
  return out;
}
/**
 * Returns the translation vector component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslation,
 *  the returned vector will be the same as the translation vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive translation component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getTranslation(out, mat) {
  out[0] = mat[12];
  out[1] = mat[13];
  out[2] = mat[14];
  return out;
}
/**
 * Returns the scaling factor component of a transformation
 *  matrix. If a matrix is built with fromRotationTranslationScale
 *  with a normalized Quaternion paramter, the returned vector will be
 *  the same as the scaling vector
 *  originally supplied.
 * @param  {vec3} out Vector to receive scaling factor component
 * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {vec3} out
 */

function getScaling(out, mat) {
  var m11 = mat[0];
  var m12 = mat[1];
  var m13 = mat[2];
  var m21 = mat[4];
  var m22 = mat[5];
  var m23 = mat[6];
  var m31 = mat[8];
  var m32 = mat[9];
  var m33 = mat[10];
  out[0] = Math.hypot(m11, m12, m13);
  out[1] = Math.hypot(m21, m22, m23);
  out[2] = Math.hypot(m31, m32, m33);
  return out;
}
/**
 * Returns a quaternion representing the rotational component
 *  of a transformation matrix. If a matrix is built with
 *  fromRotationTranslation, the returned quaternion will be the
 *  same as the quaternion originally supplied.
 * @param {quat} out Quaternion to receive the rotation component
 * @param {ReadonlyMat4} mat Matrix to be decomposed (input)
 * @return {quat} out
 */

function getRotation(out, mat) {
  var scaling = new ARRAY_TYPE(3);
  getScaling(scaling, mat);
  var is1 = 1 / scaling[0];
  var is2 = 1 / scaling[1];
  var is3 = 1 / scaling[2];
  var sm11 = mat[0] * is1;
  var sm12 = mat[1] * is2;
  var sm13 = mat[2] * is3;
  var sm21 = mat[4] * is1;
  var sm22 = mat[5] * is2;
  var sm23 = mat[6] * is3;
  var sm31 = mat[8] * is1;
  var sm32 = mat[9] * is2;
  var sm33 = mat[10] * is3;
  var trace = sm11 + sm22 + sm33;
  var S = 0;

  if (trace > 0) {
    S = Math.sqrt(trace + 1.0) * 2;
    out[3] = 0.25 * S;
    out[0] = (sm23 - sm32) / S;
    out[1] = (sm31 - sm13) / S;
    out[2] = (sm12 - sm21) / S;
  } else if (sm11 > sm22 && sm11 > sm33) {
    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;
    out[3] = (sm23 - sm32) / S;
    out[0] = 0.25 * S;
    out[1] = (sm12 + sm21) / S;
    out[2] = (sm31 + sm13) / S;
  } else if (sm22 > sm33) {
    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;
    out[3] = (sm31 - sm13) / S;
    out[0] = (sm12 + sm21) / S;
    out[1] = 0.25 * S;
    out[2] = (sm23 + sm32) / S;
  } else {
    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;
    out[3] = (sm12 - sm21) / S;
    out[0] = (sm31 + sm13) / S;
    out[1] = (sm23 + sm32) / S;
    out[2] = 0.25 * S;
  }

  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @returns {mat4} out
 */

function fromRotationTranslationScale(out, q, v, s) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  out[0] = (1 - (yy + zz)) * sx;
  out[1] = (xy + wz) * sx;
  out[2] = (xz - wy) * sx;
  out[3] = 0;
  out[4] = (xy - wz) * sy;
  out[5] = (1 - (xx + zz)) * sy;
  out[6] = (yz + wx) * sy;
  out[7] = 0;
  out[8] = (xz + wy) * sz;
  out[9] = (yz - wx) * sz;
  out[10] = (1 - (xx + yy)) * sz;
  out[11] = 0;
  out[12] = v[0];
  out[13] = v[1];
  out[14] = v[2];
  out[15] = 1;
  return out;
}
/**
 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
 * This is equivalent to (but much faster than):
 *
 *     mat4.identity(dest);
 *     mat4.translate(dest, vec);
 *     mat4.translate(dest, origin);
 *     let quatMat = mat4.create();
 *     quat4.toMat4(quat, quatMat);
 *     mat4.multiply(dest, quatMat);
 *     mat4.scale(dest, scale)
 *     mat4.translate(dest, negativeOrigin);
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {quat4} q Rotation quaternion
 * @param {ReadonlyVec3} v Translation vector
 * @param {ReadonlyVec3} s Scaling vector
 * @param {ReadonlyVec3} o The origin vector around which to scale and rotate
 * @returns {mat4} out
 */

function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
  // Quaternion math
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var xy = x * y2;
  var xz = x * z2;
  var yy = y * y2;
  var yz = y * z2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  var sx = s[0];
  var sy = s[1];
  var sz = s[2];
  var ox = o[0];
  var oy = o[1];
  var oz = o[2];
  var out0 = (1 - (yy + zz)) * sx;
  var out1 = (xy + wz) * sx;
  var out2 = (xz - wy) * sx;
  var out4 = (xy - wz) * sy;
  var out5 = (1 - (xx + zz)) * sy;
  var out6 = (yz + wx) * sy;
  var out8 = (xz + wy) * sz;
  var out9 = (yz - wx) * sz;
  var out10 = (1 - (xx + yy)) * sz;
  out[0] = out0;
  out[1] = out1;
  out[2] = out2;
  out[3] = 0;
  out[4] = out4;
  out[5] = out5;
  out[6] = out6;
  out[7] = 0;
  out[8] = out8;
  out[9] = out9;
  out[10] = out10;
  out[11] = 0;
  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
  out[15] = 1;
  return out;
}
/**
 * Calculates a 4x4 matrix from the given quaternion
 *
 * @param {mat4} out mat4 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat4} out
 */

function fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[1] = yx + wz;
  out[2] = zx - wy;
  out[3] = 0;
  out[4] = yx - wz;
  out[5] = 1 - xx - zz;
  out[6] = zy + wx;
  out[7] = 0;
  out[8] = zx + wy;
  out[9] = zy - wx;
  out[10] = 1 - xx - yy;
  out[11] = 0;
  out[12] = 0;
  out[13] = 0;
  out[14] = 0;
  out[15] = 1;
  return out;
}
/**
 * Generates a frustum matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Number} left Left bound of the frustum
 * @param {Number} right Right bound of the frustum
 * @param {Number} bottom Bottom bound of the frustum
 * @param {Number} top Top bound of the frustum
 * @param {Number} near Near bound of the frustum
 * @param {Number} far Far bound of the frustum
 * @returns {mat4} out
 */

function frustum(out, left, right, bottom, top, near, far) {
  var rl = 1 / (right - left);
  var tb = 1 / (top - bottom);
  var nf = 1 / (near - far);
  out[0] = near * 2 * rl;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = near * 2 * tb;
  out[6] = 0;
  out[7] = 0;
  out[8] = (right + left) * rl;
  out[9] = (top + bottom) * tb;
  out[10] = (far + near) * nf;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[14] = far * near * 2 * nf;
  out[15] = 0;
  return out;
}
/**
 * Generates a perspective projection matrix with the given bounds.
 * Passing null/undefined/no value for far will generate infinite projection matrix.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} fovy Vertical field of view in radians
 * @param {number} aspect Aspect ratio. typically viewport width/height
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum, can be null or Infinity
 * @returns {mat4} out
 */

function perspective(out, fovy, aspect, near, far) {
  var f = 1.0 / Math.tan(fovy / 2),
      nf;
  out[0] = f / aspect;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = f;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[11] = -1;
  out[12] = 0;
  out[13] = 0;
  out[15] = 0;

  if (far != null && far !== Infinity) {
    nf = 1 / (near - far);
    out[10] = (far + near) * nf;
    out[14] = 2 * far * near * nf;
  } else {
    out[10] = -1;
    out[14] = -2 * near;
  }

  return out;
}
/**
 * Generates a perspective projection matrix with the given field of view.
 * This is primarily useful for generating projection matrices to be used
 * with the still experiemental WebVR API.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function perspectiveFromFieldOfView(out, fov, near, far) {
  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);
  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);
  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);
  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);
  var xScale = 2.0 / (leftTan + rightTan);
  var yScale = 2.0 / (upTan + downTan);
  out[0] = xScale;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  out[4] = 0.0;
  out[5] = yScale;
  out[6] = 0.0;
  out[7] = 0.0;
  out[8] = -((leftTan - rightTan) * xScale * 0.5);
  out[9] = (upTan - downTan) * yScale * 0.5;
  out[10] = far / (near - far);
  out[11] = -1.0;
  out[12] = 0.0;
  out[13] = 0.0;
  out[14] = far * near / (near - far);
  out[15] = 0.0;
  return out;
}
/**
 * Generates a orthogonal projection matrix with the given bounds
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {number} left Left bound of the frustum
 * @param {number} right Right bound of the frustum
 * @param {number} bottom Bottom bound of the frustum
 * @param {number} top Top bound of the frustum
 * @param {number} near Near bound of the frustum
 * @param {number} far Far bound of the frustum
 * @returns {mat4} out
 */

function ortho(out, left, right, bottom, top, near, far) {
  var lr = 1 / (left - right);
  var bt = 1 / (bottom - top);
  var nf = 1 / (near - far);
  out[0] = -2 * lr;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 0;
  out[5] = -2 * bt;
  out[6] = 0;
  out[7] = 0;
  out[8] = 0;
  out[9] = 0;
  out[10] = 2 * nf;
  out[11] = 0;
  out[12] = (left + right) * lr;
  out[13] = (top + bottom) * bt;
  out[14] = (far + near) * nf;
  out[15] = 1;
  return out;
}
/**
 * Generates a look-at matrix with the given eye position, focal point, and up axis.
 * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function lookAt(out, eye, center, up) {
  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
  var eyex = eye[0];
  var eyey = eye[1];
  var eyez = eye[2];
  var upx = up[0];
  var upy = up[1];
  var upz = up[2];
  var centerx = center[0];
  var centery = center[1];
  var centerz = center[2];

  if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) {
    return identity(out);
  }

  z0 = eyex - centerx;
  z1 = eyey - centery;
  z2 = eyez - centerz;
  len = 1 / Math.hypot(z0, z1, z2);
  z0 *= len;
  z1 *= len;
  z2 *= len;
  x0 = upy * z2 - upz * z1;
  x1 = upz * z0 - upx * z2;
  x2 = upx * z1 - upy * z0;
  len = Math.hypot(x0, x1, x2);

  if (!len) {
    x0 = 0;
    x1 = 0;
    x2 = 0;
  } else {
    len = 1 / len;
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  y0 = z1 * x2 - z2 * x1;
  y1 = z2 * x0 - z0 * x2;
  y2 = z0 * x1 - z1 * x0;
  len = Math.hypot(y0, y1, y2);

  if (!len) {
    y0 = 0;
    y1 = 0;
    y2 = 0;
  } else {
    len = 1 / len;
    y0 *= len;
    y1 *= len;
    y2 *= len;
  }

  out[0] = x0;
  out[1] = y0;
  out[2] = z0;
  out[3] = 0;
  out[4] = x1;
  out[5] = y1;
  out[6] = z1;
  out[7] = 0;
  out[8] = x2;
  out[9] = y2;
  out[10] = z2;
  out[11] = 0;
  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
  out[15] = 1;
  return out;
}
/**
 * Generates a matrix that makes something look at something else.
 *
 * @param {mat4} out mat4 frustum matrix will be written into
 * @param {ReadonlyVec3} eye Position of the viewer
 * @param {ReadonlyVec3} center Point the viewer is looking at
 * @param {ReadonlyVec3} up vec3 pointing up
 * @returns {mat4} out
 */

function targetTo(out, eye, target, up) {
  var eyex = eye[0],
      eyey = eye[1],
      eyez = eye[2],
      upx = up[0],
      upy = up[1],
      upz = up[2];
  var z0 = eyex - target[0],
      z1 = eyey - target[1],
      z2 = eyez - target[2];
  var len = z0 * z0 + z1 * z1 + z2 * z2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    z0 *= len;
    z1 *= len;
    z2 *= len;
  }

  var x0 = upy * z2 - upz * z1,
      x1 = upz * z0 - upx * z2,
      x2 = upx * z1 - upy * z0;
  len = x0 * x0 + x1 * x1 + x2 * x2;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
    x0 *= len;
    x1 *= len;
    x2 *= len;
  }

  out[0] = x0;
  out[1] = x1;
  out[2] = x2;
  out[3] = 0;
  out[4] = z1 * x2 - z2 * x1;
  out[5] = z2 * x0 - z0 * x2;
  out[6] = z0 * x1 - z1 * x0;
  out[7] = 0;
  out[8] = z0;
  out[9] = z1;
  out[10] = z2;
  out[11] = 0;
  out[12] = eyex;
  out[13] = eyey;
  out[14] = eyez;
  out[15] = 1;
  return out;
}
/**
 * Returns a string representation of a mat4
 *
 * @param {ReadonlyMat4} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function str(a) {
  return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")";
}
/**
 * Returns Frobenius norm of a mat4
 *
 * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
}
/**
 * Adds two mat4's
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  out[9] = a[9] + b[9];
  out[10] = a[10] + b[10];
  out[11] = a[11] + b[11];
  out[12] = a[12] + b[12];
  out[13] = a[13] + b[13];
  out[14] = a[14] + b[14];
  out[15] = a[15] + b[15];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @returns {mat4} out
 */

function subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  out[9] = a[9] - b[9];
  out[10] = a[10] - b[10];
  out[11] = a[11] - b[11];
  out[12] = a[12] - b[12];
  out[13] = a[13] - b[13];
  out[14] = a[14] - b[14];
  out[15] = a[15] - b[15];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat4} out the receiving matrix
 * @param {ReadonlyMat4} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat4} out
 */

function multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  out[9] = a[9] * b;
  out[10] = a[10] * b;
  out[11] = a[11] * b;
  out[12] = a[12] * b;
  out[13] = a[13] * b;
  out[14] = a[14] * b;
  out[15] = a[15] * b;
  return out;
}
/**
 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat4} out the receiving vector
 * @param {ReadonlyMat4} a the first operand
 * @param {ReadonlyMat4} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat4} out
 */

function multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  out[9] = a[9] + b[9] * scale;
  out[10] = a[10] + b[10] * scale;
  out[11] = a[11] + b[11] * scale;
  out[12] = a[12] + b[12] * scale;
  out[13] = a[13] + b[13] * scale;
  out[14] = a[14] + b[14] * scale;
  out[15] = a[15] + b[15] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat4} a The first matrix.
 * @param {ReadonlyMat4} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7];
  var a8 = a[8],
      a9 = a[9],
      a10 = a[10],
      a11 = a[11];
  var a12 = a[12],
      a13 = a[13],
      a14 = a[14],
      a15 = a[15];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  var b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7];
  var b8 = b[8],
      b9 = b[9],
      b10 = b[10],
      b11 = b[11];
  var b12 = b[12],
      b13 = b[13],
      b14 = b[14],
      b15 = b[15];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));
}
/**
 * Alias for {@link mat4.multiply}
 * @function
 */

var mul = multiply;
/**
 * Alias for {@link mat4.subtract}
 * @function
 */

var sub = subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/mat3.js

/**
 * 3x3 Matrix
 * @module mat3
 */

/**
 * Creates a new identity mat3
 *
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_create() {
  var out = new ARRAY_TYPE(9);

  if (ARRAY_TYPE != Float32Array) {
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
    out[5] = 0;
    out[6] = 0;
    out[7] = 0;
  }

  out[0] = 1;
  out[4] = 1;
  out[8] = 1;
  return out;
}
/**
 * Copies the upper-left 3x3 values into the given mat3.
 *
 * @param {mat3} out the receiving 3x3 matrix
 * @param {ReadonlyMat4} a   the source 4x4 matrix
 * @returns {mat3} out
 */

function fromMat4(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[4];
  out[4] = a[5];
  out[5] = a[6];
  out[6] = a[8];
  out[7] = a[9];
  out[8] = a[10];
  return out;
}
/**
 * Creates a new mat3 initialized with values from an existing matrix
 *
 * @param {ReadonlyMat3} a matrix to clone
 * @returns {mat3} a new 3x3 matrix
 */

function mat3_clone(a) {
  var out = new ARRAY_TYPE(9);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Copy the values from one mat3 to another
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  out[4] = a[4];
  out[5] = a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Create a new mat3 with the given values
 *
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} A new mat3
 */

function mat3_fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  var out = new ARRAY_TYPE(9);
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set the components of a mat3 to the given values
 *
 * @param {mat3} out the receiving matrix
 * @param {Number} m00 Component in column 0, row 0 position (index 0)
 * @param {Number} m01 Component in column 0, row 1 position (index 1)
 * @param {Number} m02 Component in column 0, row 2 position (index 2)
 * @param {Number} m10 Component in column 1, row 0 position (index 3)
 * @param {Number} m11 Component in column 1, row 1 position (index 4)
 * @param {Number} m12 Component in column 1, row 2 position (index 5)
 * @param {Number} m20 Component in column 2, row 0 position (index 6)
 * @param {Number} m21 Component in column 2, row 1 position (index 7)
 * @param {Number} m22 Component in column 2, row 2 position (index 8)
 * @returns {mat3} out
 */

function mat3_set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
  out[0] = m00;
  out[1] = m01;
  out[2] = m02;
  out[3] = m10;
  out[4] = m11;
  out[5] = m12;
  out[6] = m20;
  out[7] = m21;
  out[8] = m22;
  return out;
}
/**
 * Set a mat3 to the identity matrix
 *
 * @param {mat3} out the receiving matrix
 * @returns {mat3} out
 */

function mat3_identity(out) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Transpose the values of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_transpose(out, a) {
  // If we are transposing ourselves we can skip a few steps but have to cache some values
  if (out === a) {
    var a01 = a[1],
        a02 = a[2],
        a12 = a[5];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a01;
    out[5] = a[7];
    out[6] = a02;
    out[7] = a12;
  } else {
    out[0] = a[0];
    out[1] = a[3];
    out[2] = a[6];
    out[3] = a[1];
    out[4] = a[4];
    out[5] = a[7];
    out[6] = a[2];
    out[7] = a[5];
    out[8] = a[8];
  }

  return out;
}
/**
 * Inverts a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_invert(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b01 = a22 * a11 - a12 * a21;
  var b11 = -a22 * a10 + a12 * a20;
  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant

  var det = a00 * b01 + a01 * b11 + a02 * b21;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = b01 * det;
  out[1] = (-a22 * a01 + a02 * a21) * det;
  out[2] = (a12 * a01 - a02 * a11) * det;
  out[3] = b11 * det;
  out[4] = (a22 * a00 - a02 * a20) * det;
  out[5] = (-a12 * a00 + a02 * a10) * det;
  out[6] = b21 * det;
  out[7] = (-a21 * a00 + a01 * a20) * det;
  out[8] = (a11 * a00 - a01 * a10) * det;
  return out;
}
/**
 * Calculates the adjugate of a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the source matrix
 * @returns {mat3} out
 */

function mat3_adjoint(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  out[0] = a11 * a22 - a12 * a21;
  out[1] = a02 * a21 - a01 * a22;
  out[2] = a01 * a12 - a02 * a11;
  out[3] = a12 * a20 - a10 * a22;
  out[4] = a00 * a22 - a02 * a20;
  out[5] = a02 * a10 - a00 * a12;
  out[6] = a10 * a21 - a11 * a20;
  out[7] = a01 * a20 - a00 * a21;
  out[8] = a00 * a11 - a01 * a10;
  return out;
}
/**
 * Calculates the determinant of a mat3
 *
 * @param {ReadonlyMat3} a the source matrix
 * @returns {Number} determinant of a
 */

function mat3_determinant(a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
}
/**
 * Multiplies two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function mat3_multiply(out, a, b) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2];
  var a10 = a[3],
      a11 = a[4],
      a12 = a[5];
  var a20 = a[6],
      a21 = a[7],
      a22 = a[8];
  var b00 = b[0],
      b01 = b[1],
      b02 = b[2];
  var b10 = b[3],
      b11 = b[4],
      b12 = b[5];
  var b20 = b[6],
      b21 = b[7],
      b22 = b[8];
  out[0] = b00 * a00 + b01 * a10 + b02 * a20;
  out[1] = b00 * a01 + b01 * a11 + b02 * a21;
  out[2] = b00 * a02 + b01 * a12 + b02 * a22;
  out[3] = b10 * a00 + b11 * a10 + b12 * a20;
  out[4] = b10 * a01 + b11 * a11 + b12 * a21;
  out[5] = b10 * a02 + b11 * a12 + b12 * a22;
  out[6] = b20 * a00 + b21 * a10 + b22 * a20;
  out[7] = b20 * a01 + b21 * a11 + b22 * a21;
  out[8] = b20 * a02 + b21 * a12 + b22 * a22;
  return out;
}
/**
 * Translate a mat3 by the given vector
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to translate
 * @param {ReadonlyVec2} v vector to translate by
 * @returns {mat3} out
 */

function mat3_translate(out, a, v) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      x = v[0],
      y = v[1];
  out[0] = a00;
  out[1] = a01;
  out[2] = a02;
  out[3] = a10;
  out[4] = a11;
  out[5] = a12;
  out[6] = x * a00 + y * a10 + a20;
  out[7] = x * a01 + y * a11 + a21;
  out[8] = x * a02 + y * a12 + a22;
  return out;
}
/**
 * Rotates a mat3 by the given angle
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_rotate(out, a, rad) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a10 = a[3],
      a11 = a[4],
      a12 = a[5],
      a20 = a[6],
      a21 = a[7],
      a22 = a[8],
      s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c * a00 + s * a10;
  out[1] = c * a01 + s * a11;
  out[2] = c * a02 + s * a12;
  out[3] = c * a10 - s * a00;
  out[4] = c * a11 - s * a01;
  out[5] = c * a12 - s * a02;
  out[6] = a20;
  out[7] = a21;
  out[8] = a22;
  return out;
}
/**
 * Scales the mat3 by the dimensions in the given vec2
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to rotate
 * @param {ReadonlyVec2} v the vec2 to scale the matrix by
 * @returns {mat3} out
 **/

function mat3_scale(out, a, v) {
  var x = v[0],
      y = v[1];
  out[0] = x * a[0];
  out[1] = x * a[1];
  out[2] = x * a[2];
  out[3] = y * a[3];
  out[4] = y * a[4];
  out[5] = y * a[5];
  out[6] = a[6];
  out[7] = a[7];
  out[8] = a[8];
  return out;
}
/**
 * Creates a matrix from a vector translation
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.translate(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Translation vector
 * @returns {mat3} out
 */

function mat3_fromTranslation(out, v) {
  out[0] = 1;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = 1;
  out[5] = 0;
  out[6] = v[0];
  out[7] = v[1];
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a given angle
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.rotate(dest, dest, rad);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {Number} rad the angle to rotate the matrix by
 * @returns {mat3} out
 */

function mat3_fromRotation(out, rad) {
  var s = Math.sin(rad),
      c = Math.cos(rad);
  out[0] = c;
  out[1] = s;
  out[2] = 0;
  out[3] = -s;
  out[4] = c;
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Creates a matrix from a vector scaling
 * This is equivalent to (but much faster than):
 *
 *     mat3.identity(dest);
 *     mat3.scale(dest, dest, vec);
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyVec2} v Scaling vector
 * @returns {mat3} out
 */

function mat3_fromScaling(out, v) {
  out[0] = v[0];
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = v[1];
  out[5] = 0;
  out[6] = 0;
  out[7] = 0;
  out[8] = 1;
  return out;
}
/**
 * Copies the values from a mat2d into a mat3
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat2d} a the matrix to copy
 * @returns {mat3} out
 **/

function fromMat2d(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = 0;
  out[3] = a[2];
  out[4] = a[3];
  out[5] = 0;
  out[6] = a[4];
  out[7] = a[5];
  out[8] = 1;
  return out;
}
/**
 * Calculates a 3x3 matrix from the given quaternion
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyQuat} q Quaternion to create matrix from
 *
 * @returns {mat3} out
 */

function mat3_fromQuat(out, q) {
  var x = q[0],
      y = q[1],
      z = q[2],
      w = q[3];
  var x2 = x + x;
  var y2 = y + y;
  var z2 = z + z;
  var xx = x * x2;
  var yx = y * x2;
  var yy = y * y2;
  var zx = z * x2;
  var zy = z * y2;
  var zz = z * z2;
  var wx = w * x2;
  var wy = w * y2;
  var wz = w * z2;
  out[0] = 1 - yy - zz;
  out[3] = yx - wz;
  out[6] = zx + wy;
  out[1] = yx + wz;
  out[4] = 1 - xx - zz;
  out[7] = zy - wx;
  out[2] = zx - wy;
  out[5] = zy + wx;
  out[8] = 1 - xx - yy;
  return out;
}
/**
 * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
 *
 * @param {mat3} out mat3 receiving operation result
 * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from
 *
 * @returns {mat3} out
 */

function normalFromMat4(out, a) {
  var a00 = a[0],
      a01 = a[1],
      a02 = a[2],
      a03 = a[3];
  var a10 = a[4],
      a11 = a[5],
      a12 = a[6],
      a13 = a[7];
  var a20 = a[8],
      a21 = a[9],
      a22 = a[10],
      a23 = a[11];
  var a30 = a[12],
      a31 = a[13],
      a32 = a[14],
      a33 = a[15];
  var b00 = a00 * a11 - a01 * a10;
  var b01 = a00 * a12 - a02 * a10;
  var b02 = a00 * a13 - a03 * a10;
  var b03 = a01 * a12 - a02 * a11;
  var b04 = a01 * a13 - a03 * a11;
  var b05 = a02 * a13 - a03 * a12;
  var b06 = a20 * a31 - a21 * a30;
  var b07 = a20 * a32 - a22 * a30;
  var b08 = a20 * a33 - a23 * a30;
  var b09 = a21 * a32 - a22 * a31;
  var b10 = a21 * a33 - a23 * a31;
  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant

  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

  if (!det) {
    return null;
  }

  det = 1.0 / det;
  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
  return out;
}
/**
 * Generates a 2D projection matrix with the given bounds
 *
 * @param {mat3} out mat3 frustum matrix will be written into
 * @param {number} width Width of your gl context
 * @param {number} height Height of gl context
 * @returns {mat3} out
 */

function projection(out, width, height) {
  out[0] = 2 / width;
  out[1] = 0;
  out[2] = 0;
  out[3] = 0;
  out[4] = -2 / height;
  out[5] = 0;
  out[6] = -1;
  out[7] = 1;
  out[8] = 1;
  return out;
}
/**
 * Returns a string representation of a mat3
 *
 * @param {ReadonlyMat3} a matrix to represent as a string
 * @returns {String} string representation of the matrix
 */

function mat3_str(a) {
  return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
}
/**
 * Returns Frobenius norm of a mat3
 *
 * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of
 * @returns {Number} Frobenius norm
 */

function mat3_frob(a) {
  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);
}
/**
 * Adds two mat3's
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function mat3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  out[4] = a[4] + b[4];
  out[5] = a[5] + b[5];
  out[6] = a[6] + b[6];
  out[7] = a[7] + b[7];
  out[8] = a[8] + b[8];
  return out;
}
/**
 * Subtracts matrix b from matrix a
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @returns {mat3} out
 */

function mat3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  out[4] = a[4] - b[4];
  out[5] = a[5] - b[5];
  out[6] = a[6] - b[6];
  out[7] = a[7] - b[7];
  out[8] = a[8] - b[8];
  return out;
}
/**
 * Multiply each element of the matrix by a scalar.
 *
 * @param {mat3} out the receiving matrix
 * @param {ReadonlyMat3} a the matrix to scale
 * @param {Number} b amount to scale the matrix's elements by
 * @returns {mat3} out
 */

function mat3_multiplyScalar(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  out[4] = a[4] * b;
  out[5] = a[5] * b;
  out[6] = a[6] * b;
  out[7] = a[7] * b;
  out[8] = a[8] * b;
  return out;
}
/**
 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
 *
 * @param {mat3} out the receiving vector
 * @param {ReadonlyMat3} a the first operand
 * @param {ReadonlyMat3} b the second operand
 * @param {Number} scale the amount to scale b's elements by before adding
 * @returns {mat3} out
 */

function mat3_multiplyScalarAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  out[4] = a[4] + b[4] * scale;
  out[5] = a[5] + b[5] * scale;
  out[6] = a[6] + b[6] * scale;
  out[7] = a[7] + b[7] * scale;
  out[8] = a[8] + b[8] * scale;
  return out;
}
/**
 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
}
/**
 * Returns whether or not the matrices have approximately the same elements in the same position.
 *
 * @param {ReadonlyMat3} a The first matrix.
 * @param {ReadonlyMat3} b The second matrix.
 * @returns {Boolean} True if the matrices are equal, false otherwise.
 */

function mat3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3],
      a4 = a[4],
      a5 = a[5],
      a6 = a[6],
      a7 = a[7],
      a8 = a[8];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3],
      b4 = b[4],
      b5 = b[5],
      b6 = b[6],
      b7 = b[7],
      b8 = b[8];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
}
/**
 * Alias for {@link mat3.multiply}
 * @function
 */

var mat3_mul = mat3_multiply;
/**
 * Alias for {@link mat3.subtract}
 * @function
 */

var mat3_sub = mat3_subtract;
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec3.js

/**
 * 3 Dimensional Vector
 * @module vec3
 */

/**
 * Creates a new, empty vec3
 *
 * @returns {vec3} a new 3D vector
 */

function vec3_create() {
  var out = new ARRAY_TYPE(3);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  return out;
}
/**
 * Creates a new vec3 initialized with values from an existing vector
 *
 * @param {ReadonlyVec3} a vector to clone
 * @returns {vec3} a new 3D vector
 */

function vec3_clone(a) {
  var out = new ARRAY_TYPE(3);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Calculates the length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec3_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return Math.hypot(x, y, z);
}
/**
 * Creates a new vec3 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} a new 3D vector
 */

function vec3_fromValues(x, y, z) {
  var out = new ARRAY_TYPE(3);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Copy the values from one vec3 to another
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the source vector
 * @returns {vec3} out
 */

function vec3_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  return out;
}
/**
 * Set the components of a vec3 to the given values
 *
 * @param {vec3} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @returns {vec3} out
 */

function vec3_set(out, x, y, z) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  return out;
}
/**
 * Adds two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function vec3_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function vec3_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  return out;
}
/**
 * Multiplies two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function vec3_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  return out;
}
/**
 * Divides two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  return out;
}
/**
 * Math.ceil the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to ceil
 * @returns {vec3} out
 */

function ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  return out;
}
/**
 * Math.floor the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to floor
 * @returns {vec3} out
 */

function floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  return out;
}
/**
 * Returns the minimum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  return out;
}
/**
 * Returns the maximum of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  return out;
}
/**
 * Math.round the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to round
 * @returns {vec3} out
 */

function round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  return out;
}
/**
 * Scales a vec3 by a scalar number
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec3} out
 */

function vec3_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  return out;
}
/**
 * Adds two vec3's after scaling the second operand by a scalar value
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec3} out
 */

function scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} distance between a and b
 */

function distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return Math.hypot(x, y, z);
}
/**
 * Calculates the squared euclidian distance between two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} squared distance between a and b
 */

function squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  return x * x + y * y + z * z;
}
/**
 * Calculates the squared length of a vec3
 *
 * @param {ReadonlyVec3} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  return x * x + y * y + z * z;
}
/**
 * Negates the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to negate
 * @returns {vec3} out
 */

function negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  return out;
}
/**
 * Returns the inverse of the components of a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to invert
 * @returns {vec3} out
 */

function inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  return out;
}
/**
 * Normalize a vec3
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a vector to normalize
 * @returns {vec3} out
 */

function normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var len = x * x + y * y + z * z;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  out[2] = a[2] * len;
  return out;
}
/**
 * Calculates the dot product of two vec3's
 *
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec3_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}
/**
 * Computes the cross product of two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @returns {vec3} out
 */

function cross(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2];
  var bx = b[0],
      by = b[1],
      bz = b[2];
  out[0] = ay * bz - az * by;
  out[1] = az * bx - ax * bz;
  out[2] = ax * by - ay * bx;
  return out;
}
/**
 * Performs a linear interpolation between two vec3's
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  return out;
}
/**
 * Performs a hermite interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function hermite(out, a, b, c, d, t) {
  var factorTimes2 = t * t;
  var factor1 = factorTimes2 * (2 * t - 3) + 1;
  var factor2 = factorTimes2 * (t - 2) + t;
  var factor3 = factorTimes2 * (t - 1);
  var factor4 = factorTimes2 * (3 - 2 * t);
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Performs a bezier interpolation with two control points
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the first operand
 * @param {ReadonlyVec3} b the second operand
 * @param {ReadonlyVec3} c the third operand
 * @param {ReadonlyVec3} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec3} out
 */

function bezier(out, a, b, c, d, t) {
  var inverseFactor = 1 - t;
  var inverseFactorTimesTwo = inverseFactor * inverseFactor;
  var factorTimes2 = t * t;
  var factor1 = inverseFactorTimesTwo * inverseFactor;
  var factor2 = 3 * t * inverseFactorTimesTwo;
  var factor3 = 3 * factorTimes2 * inverseFactor;
  var factor4 = factorTimes2 * t;
  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec3} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec3} out
 */

function random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  var z = RANDOM() * 2.0 - 1.0;
  var zScale = Math.sqrt(1.0 - z * z) * scale;
  out[0] = Math.cos(r) * zScale;
  out[1] = Math.sin(r) * zScale;
  out[2] = z * scale;
  return out;
}
/**
 * Transforms the vec3 with a mat4.
 * 4th vector component is implicitly '1'
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec3} out
 */

function transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var w = m[3] * x + m[7] * y + m[11] * z + m[15];
  w = w || 1.0;
  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
  return out;
}
/**
 * Transforms the vec3 with a mat3.
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyMat3} m the 3x3 matrix to transform with
 * @returns {vec3} out
 */

function transformMat3(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x * m[0] + y * m[3] + z * m[6];
  out[1] = x * m[1] + y * m[4] + z * m[7];
  out[2] = x * m[2] + y * m[5] + z * m[8];
  return out;
}
/**
 * Transforms the vec3 with a quat
 * Can also be used for dual quaternions. (Multiply it with the real part)
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec3} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec3} out
 */

function transformQuat(out, a, q) {
  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3];
  var x = a[0],
      y = a[1],
      z = a[2]; // var qvec = [qx, qy, qz];
  // var uv = vec3.cross([], qvec, a);

  var uvx = qy * z - qz * y,
      uvy = qz * x - qx * z,
      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);

  var uuvx = qy * uvz - qz * uvy,
      uuvy = qz * uvx - qx * uvz,
      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);

  var w2 = qw * 2;
  uvx *= w2;
  uvy *= w2;
  uvz *= w2; // vec3.scale(uuv, uuv, 2);

  uuvx *= 2;
  uuvy *= 2;
  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));

  out[0] = x + uvx + uuvx;
  out[1] = y + uvy + uuvy;
  out[2] = z + uvz + uuvz;
  return out;
}
/**
 * Rotate a 3D vector around the x-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function vec3_rotateX(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0];
  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the y-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function vec3_rotateY(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
  r[1] = p[1];
  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Rotate a 3D vector around the z-axis
 * @param {vec3} out The receiving vec3
 * @param {ReadonlyVec3} a The vec3 point to rotate
 * @param {ReadonlyVec3} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec3} out
 */

function vec3_rotateZ(out, a, b, rad) {
  var p = [],
      r = []; //Translate point to the origin

  p[0] = a[0] - b[0];
  p[1] = a[1] - b[1];
  p[2] = a[2] - b[2]; //perform rotation

  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
  r[2] = p[2]; //translate to correct position

  out[0] = r[0] + b[0];
  out[1] = r[1] + b[1];
  out[2] = r[2] + b[2];
  return out;
}
/**
 * Get the angle between two 3D vectors
 * @param {ReadonlyVec3} a The first operand
 * @param {ReadonlyVec3} b The second operand
 * @returns {Number} The angle in radians
 */

function angle(a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      bx = b[0],
      by = b[1],
      bz = b[2],
      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),
      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),
      mag = mag1 * mag2,
      cosine = mag && vec3_dot(a, b) / mag;
  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec3 to zero
 *
 * @param {vec3} out the receiving vector
 * @returns {vec3} out
 */

function zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec3} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec3_str(a) {
  return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec3} a The first vector.
 * @param {ReadonlyVec3} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec3_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
}
/**
 * Alias for {@link vec3.subtract}
 * @function
 */

var vec3_sub = vec3_subtract;
/**
 * Alias for {@link vec3.multiply}
 * @function
 */

var vec3_mul = vec3_multiply;
/**
 * Alias for {@link vec3.divide}
 * @function
 */

var div = divide;
/**
 * Alias for {@link vec3.distance}
 * @function
 */

var dist = distance;
/**
 * Alias for {@link vec3.squaredDistance}
 * @function
 */

var sqrDist = squaredDistance;
/**
 * Alias for {@link vec3.length}
 * @function
 */

var vec3_len = vec3_length;
/**
 * Alias for {@link vec3.squaredLength}
 * @function
 */

var sqrLen = squaredLength;
/**
 * Perform some operation over an array of vec3s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var forEach = function () {
  var vec = vec3_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 3;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec4.js

/**
 * 4 Dimensional Vector
 * @module vec4
 */

/**
 * Creates a new, empty vec4
 *
 * @returns {vec4} a new 4D vector
 */

function vec4_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
    out[3] = 0;
  }

  return out;
}
/**
 * Creates a new vec4 initialized with values from an existing vector
 *
 * @param {ReadonlyVec4} a vector to clone
 * @returns {vec4} a new 4D vector
 */

function vec4_clone(a) {
  var out = new ARRAY_TYPE(4);
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a new vec4 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} a new 4D vector
 */

function vec4_fromValues(x, y, z, w) {
  var out = new ARRAY_TYPE(4);
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Copy the values from one vec4 to another
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the source vector
 * @returns {vec4} out
 */

function vec4_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  out[2] = a[2];
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to the given values
 *
 * @param {vec4} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {vec4} out
 */

function vec4_set(out, x, y, z, w) {
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = w;
  return out;
}
/**
 * Adds two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  out[2] = a[2] + b[2];
  out[3] = a[3] + b[3];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  out[2] = a[2] - b[2];
  out[3] = a[3] - b[3];
  return out;
}
/**
 * Multiplies two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  out[2] = a[2] * b[2];
  out[3] = a[3] * b[3];
  return out;
}
/**
 * Divides two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  out[2] = a[2] / b[2];
  out[3] = a[3] / b[3];
  return out;
}
/**
 * Math.ceil the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to ceil
 * @returns {vec4} out
 */

function vec4_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  out[2] = Math.ceil(a[2]);
  out[3] = Math.ceil(a[3]);
  return out;
}
/**
 * Math.floor the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to floor
 * @returns {vec4} out
 */

function vec4_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  out[2] = Math.floor(a[2]);
  out[3] = Math.floor(a[3]);
  return out;
}
/**
 * Returns the minimum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  out[2] = Math.min(a[2], b[2]);
  out[3] = Math.min(a[3], b[3]);
  return out;
}
/**
 * Returns the maximum of two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {vec4} out
 */

function vec4_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  out[2] = Math.max(a[2], b[2]);
  out[3] = Math.max(a[3], b[3]);
  return out;
}
/**
 * Math.round the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to round
 * @returns {vec4} out
 */

function vec4_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  out[2] = Math.round(a[2]);
  out[3] = Math.round(a[3]);
  return out;
}
/**
 * Scales a vec4 by a scalar number
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec4} out
 */

function vec4_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  out[2] = a[2] * b;
  out[3] = a[3] * b;
  return out;
}
/**
 * Adds two vec4's after scaling the second operand by a scalar value
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec4} out
 */

function vec4_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  out[2] = a[2] + b[2] * scale;
  out[3] = a[3] + b[3] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} distance between a and b
 */

function vec4_distance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared euclidian distance between two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec4_squaredDistance(a, b) {
  var x = b[0] - a[0];
  var y = b[1] - a[1];
  var z = b[2] - a[2];
  var w = b[3] - a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Calculates the length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec4_length(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return Math.hypot(x, y, z, w);
}
/**
 * Calculates the squared length of a vec4
 *
 * @param {ReadonlyVec4} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec4_squaredLength(a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  return x * x + y * y + z * z + w * w;
}
/**
 * Negates the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to negate
 * @returns {vec4} out
 */

function vec4_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = -a[3];
  return out;
}
/**
 * Returns the inverse of the components of a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to invert
 * @returns {vec4} out
 */

function vec4_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  out[2] = 1.0 / a[2];
  out[3] = 1.0 / a[3];
  return out;
}
/**
 * Normalize a vec4
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a vector to normalize
 * @returns {vec4} out
 */

function vec4_normalize(out, a) {
  var x = a[0];
  var y = a[1];
  var z = a[2];
  var w = a[3];
  var len = x * x + y * y + z * z + w * w;

  if (len > 0) {
    len = 1 / Math.sqrt(len);
  }

  out[0] = x * len;
  out[1] = y * len;
  out[2] = z * len;
  out[3] = w * len;
  return out;
}
/**
 * Calculates the dot product of two vec4's
 *
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec4_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
}
/**
 * Returns the cross-product of three vectors in a 4-dimensional space
 *
 * @param {ReadonlyVec4} result the receiving vector
 * @param {ReadonlyVec4} U the first vector
 * @param {ReadonlyVec4} V the second vector
 * @param {ReadonlyVec4} W the third vector
 * @returns {vec4} result
 */

function vec4_cross(out, u, v, w) {
  var A = v[0] * w[1] - v[1] * w[0],
      B = v[0] * w[2] - v[2] * w[0],
      C = v[0] * w[3] - v[3] * w[0],
      D = v[1] * w[2] - v[2] * w[1],
      E = v[1] * w[3] - v[3] * w[1],
      F = v[2] * w[3] - v[3] * w[2];
  var G = u[0];
  var H = u[1];
  var I = u[2];
  var J = u[3];
  out[0] = H * F - I * E + J * D;
  out[1] = -(G * F) + I * C - J * B;
  out[2] = G * E - H * C + J * A;
  out[3] = -(G * D) + H * B - I * A;
  return out;
}
/**
 * Performs a linear interpolation between two vec4's
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the first operand
 * @param {ReadonlyVec4} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec4} out
 */

function vec4_lerp(out, a, b, t) {
  var ax = a[0];
  var ay = a[1];
  var az = a[2];
  var aw = a[3];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  out[2] = az + t * (b[2] - az);
  out[3] = aw + t * (b[3] - aw);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec4} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec4} out
 */

function vec4_random(out, scale) {
  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a
  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.
  // http://projecteuclid.org/euclid.aoms/1177692644;

  var v1, v2, v3, v4;
  var s1, s2;

  do {
    v1 = RANDOM() * 2 - 1;
    v2 = RANDOM() * 2 - 1;
    s1 = v1 * v1 + v2 * v2;
  } while (s1 >= 1);

  do {
    v3 = RANDOM() * 2 - 1;
    v4 = RANDOM() * 2 - 1;
    s2 = v3 * v3 + v4 * v4;
  } while (s2 >= 1);

  var d = Math.sqrt((1 - s1) / s2);
  out[0] = scale * v1;
  out[1] = scale * v2;
  out[2] = scale * v3 * d;
  out[3] = scale * v4 * d;
  return out;
}
/**
 * Transforms the vec4 with a mat4.
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec4} out
 */

function vec4_transformMat4(out, a, m) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
  return out;
}
/**
 * Transforms the vec4 with a quat
 *
 * @param {vec4} out the receiving vector
 * @param {ReadonlyVec4} a the vector to transform
 * @param {ReadonlyQuat} q quaternion to transform with
 * @returns {vec4} out
 */

function vec4_transformQuat(out, a, q) {
  var x = a[0],
      y = a[1],
      z = a[2];
  var qx = q[0],
      qy = q[1],
      qz = q[2],
      qw = q[3]; // calculate quat * vec

  var ix = qw * x + qy * z - qz * y;
  var iy = qw * y + qz * x - qx * z;
  var iz = qw * z + qx * y - qy * x;
  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat

  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
  out[3] = a[3];
  return out;
}
/**
 * Set the components of a vec4 to zero
 *
 * @param {vec4} out the receiving vector
 * @returns {vec4} out
 */

function vec4_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  out[2] = 0.0;
  out[3] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec4} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec4_str(a) {
  return "vec4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec4} a The first vector.
 * @param {ReadonlyVec4} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec4_equals(a, b) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var b0 = b[0],
      b1 = b[1],
      b2 = b[2],
      b3 = b[3];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));
}
/**
 * Alias for {@link vec4.subtract}
 * @function
 */

var vec4_sub = vec4_subtract;
/**
 * Alias for {@link vec4.multiply}
 * @function
 */

var vec4_mul = vec4_multiply;
/**
 * Alias for {@link vec4.divide}
 * @function
 */

var vec4_div = vec4_divide;
/**
 * Alias for {@link vec4.distance}
 * @function
 */

var vec4_dist = vec4_distance;
/**
 * Alias for {@link vec4.squaredDistance}
 * @function
 */

var vec4_sqrDist = vec4_squaredDistance;
/**
 * Alias for {@link vec4.length}
 * @function
 */

var vec4_len = vec4_length;
/**
 * Alias for {@link vec4.squaredLength}
 * @function
 */

var vec4_sqrLen = vec4_squaredLength;
/**
 * Perform some operation over an array of vec4s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec4_forEach = function () {
  var vec = vec4_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 4;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      vec[2] = a[i + 2];
      vec[3] = a[i + 3];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
      a[i + 2] = vec[2];
      a[i + 3] = vec[3];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/quat.js




/**
 * Quaternion
 * @module quat
 */

/**
 * Creates a new identity quat
 *
 * @returns {quat} a new quaternion
 */

function quat_create() {
  var out = new ARRAY_TYPE(4);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
    out[2] = 0;
  }

  out[3] = 1;
  return out;
}
/**
 * Set a quat to the identity quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_identity(out) {
  out[0] = 0;
  out[1] = 0;
  out[2] = 0;
  out[3] = 1;
  return out;
}
/**
 * Sets a quat from the given angle and rotation axis,
 * then returns it.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyVec3} axis the axis around which to rotate
 * @param {Number} rad the angle in radians
 * @returns {quat} out
 **/

function setAxisAngle(out, axis, rad) {
  rad = rad * 0.5;
  var s = Math.sin(rad);
  out[0] = s * axis[0];
  out[1] = s * axis[1];
  out[2] = s * axis[2];
  out[3] = Math.cos(rad);
  return out;
}
/**
 * Gets the rotation axis and angle for a given
 *  quaternion. If a quaternion is created with
 *  setAxisAngle, this method will return the same
 *  values as providied in the original parameter list
 *  OR functionally equivalent values.
 * Example: The quaternion formed by axis [0, 0, 1] and
 *  angle -90 is the same as the quaternion formed by
 *  [0, 0, 1] and 270. This method favors the latter.
 * @param  {vec3} out_axis  Vector receiving the axis of rotation
 * @param  {ReadonlyQuat} q     Quaternion to be decomposed
 * @return {Number}     Angle, in radians, of the rotation
 */

function getAxisAngle(out_axis, q) {
  var rad = Math.acos(q[3]) * 2.0;
  var s = Math.sin(rad / 2.0);

  if (s > EPSILON) {
    out_axis[0] = q[0] / s;
    out_axis[1] = q[1] / s;
    out_axis[2] = q[2] / s;
  } else {
    // If s is zero, return any axis (no rotation - axis does not matter)
    out_axis[0] = 1;
    out_axis[1] = 0;
    out_axis[2] = 0;
  }

  return rad;
}
/**
 * Gets the angular distance between two unit quaternions
 *
 * @param  {ReadonlyQuat} a     Origin unit quaternion
 * @param  {ReadonlyQuat} b     Destination unit quaternion
 * @return {Number}     Angle, in radians, between the two quaternions
 */

function getAngle(a, b) {
  var dotproduct = quat_dot(a, b);
  return Math.acos(2 * dotproduct * dotproduct - 1);
}
/**
 * Multiplies two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 */

function quat_multiply(out, a, b) {
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  out[0] = ax * bw + aw * bx + ay * bz - az * by;
  out[1] = ay * bw + aw * by + az * bx - ax * bz;
  out[2] = az * bw + aw * bz + ax * by - ay * bx;
  out[3] = aw * bw - ax * bx - ay * by - az * bz;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the X axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateX(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + aw * bx;
  out[1] = ay * bw + az * bx;
  out[2] = az * bw - ay * bx;
  out[3] = aw * bw - ax * bx;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Y axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateY(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var by = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw - az * by;
  out[1] = ay * bw + aw * by;
  out[2] = az * bw + ax * by;
  out[3] = aw * bw - ay * by;
  return out;
}
/**
 * Rotates a quaternion by the given angle about the Z axis
 *
 * @param {quat} out quat receiving operation result
 * @param {ReadonlyQuat} a quat to rotate
 * @param {number} rad angle (in radians) to rotate
 * @returns {quat} out
 */

function quat_rotateZ(out, a, rad) {
  rad *= 0.5;
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bz = Math.sin(rad),
      bw = Math.cos(rad);
  out[0] = ax * bw + ay * bz;
  out[1] = ay * bw - ax * bz;
  out[2] = az * bw + aw * bz;
  out[3] = aw * bw - az * bz;
  return out;
}
/**
 * Calculates the W component of a quat from the X, Y, and Z components.
 * Assumes that quaternion is 1 unit in length.
 * Any existing W component will be ignored.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate W component of
 * @returns {quat} out
 */

function calculateW(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2];
  out[0] = x;
  out[1] = y;
  out[2] = z;
  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
  return out;
}
/**
 * Calculate the exponential of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function exp(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var et = Math.exp(w);
  var s = r > 0 ? et * Math.sin(r) / r : 0;
  out[0] = x * s;
  out[1] = y * s;
  out[2] = z * s;
  out[3] = et * Math.cos(r);
  return out;
}
/**
 * Calculate the natural logarithm of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @returns {quat} out
 */

function ln(out, a) {
  var x = a[0],
      y = a[1],
      z = a[2],
      w = a[3];
  var r = Math.sqrt(x * x + y * y + z * z);
  var t = r > 0 ? Math.atan2(r, w) / r : 0;
  out[0] = x * t;
  out[1] = y * t;
  out[2] = z * t;
  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);
  return out;
}
/**
 * Calculate the scalar power of a unit quaternion.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate the exponential of
 * @param {Number} b amount to scale the quaternion by
 * @returns {quat} out
 */

function pow(out, a, b) {
  ln(out, a);
  quat_scale(out, out, b);
  exp(out, out);
  return out;
}
/**
 * Performs a spherical linear interpolation between two quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

function slerp(out, a, b, t) {
  // benchmarks:
  //    http://jsperf.com/quaternion-slerp-implementations
  var ax = a[0],
      ay = a[1],
      az = a[2],
      aw = a[3];
  var bx = b[0],
      by = b[1],
      bz = b[2],
      bw = b[3];
  var omega, cosom, sinom, scale0, scale1; // calc cosine

  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)

  if (cosom < 0.0) {
    cosom = -cosom;
    bx = -bx;
    by = -by;
    bz = -bz;
    bw = -bw;
  } // calculate coefficients


  if (1.0 - cosom > EPSILON) {
    // standard case (slerp)
    omega = Math.acos(cosom);
    sinom = Math.sin(omega);
    scale0 = Math.sin((1.0 - t) * omega) / sinom;
    scale1 = Math.sin(t * omega) / sinom;
  } else {
    // "from" and "to" quaternions are very close
    //  ... so we can do a linear interpolation
    scale0 = 1.0 - t;
    scale1 = t;
  } // calculate final values


  out[0] = scale0 * ax + scale1 * bx;
  out[1] = scale0 * ay + scale1 * by;
  out[2] = scale0 * az + scale1 * bz;
  out[3] = scale0 * aw + scale1 * bw;
  return out;
}
/**
 * Generates a random unit quaternion
 *
 * @param {quat} out the receiving quaternion
 * @returns {quat} out
 */

function quat_random(out) {
  // Implementation of http://planning.cs.uiuc.edu/node198.html
  // TODO: Calling random 3 times is probably not the fastest solution
  var u1 = RANDOM();
  var u2 = RANDOM();
  var u3 = RANDOM();
  var sqrt1MinusU1 = Math.sqrt(1 - u1);
  var sqrtU1 = Math.sqrt(u1);
  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);
  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);
  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);
  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);
  return out;
}
/**
 * Calculates the inverse of a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate inverse of
 * @returns {quat} out
 */

function quat_invert(out, a) {
  var a0 = a[0],
      a1 = a[1],
      a2 = a[2],
      a3 = a[3];
  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0

  out[0] = -a0 * invDot;
  out[1] = -a1 * invDot;
  out[2] = -a2 * invDot;
  out[3] = a3 * invDot;
  return out;
}
/**
 * Calculates the conjugate of a quat
 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quat to calculate conjugate of
 * @returns {quat} out
 */

function conjugate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  out[2] = -a[2];
  out[3] = a[3];
  return out;
}
/**
 * Creates a quaternion from the given 3x3 rotation matrix.
 *
 * NOTE: The resultant quaternion is not normalized, so you should be sure
 * to renormalize the quaternion yourself where necessary.
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyMat3} m rotation matrix
 * @returns {quat} out
 * @function
 */

function fromMat3(out, m) {
  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
  // article "Quaternion Calculus and Fast Animation".
  var fTrace = m[0] + m[4] + m[8];
  var fRoot;

  if (fTrace > 0.0) {
    // |w| > 1/2, may as well choose w > 1/2
    fRoot = Math.sqrt(fTrace + 1.0); // 2w

    out[3] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot; // 1/(4w)

    out[0] = (m[5] - m[7]) * fRoot;
    out[1] = (m[6] - m[2]) * fRoot;
    out[2] = (m[1] - m[3]) * fRoot;
  } else {
    // |w| <= 1/2
    var i = 0;
    if (m[4] > m[0]) i = 1;
    if (m[8] > m[i * 3 + i]) i = 2;
    var j = (i + 1) % 3;
    var k = (i + 2) % 3;
    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);
    out[i] = 0.5 * fRoot;
    fRoot = 0.5 / fRoot;
    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;
  }

  return out;
}
/**
 * Creates a quaternion from the given euler angle x, y, z.
 *
 * @param {quat} out the receiving quaternion
 * @param {x} Angle to rotate around X axis in degrees.
 * @param {y} Angle to rotate around Y axis in degrees.
 * @param {z} Angle to rotate around Z axis in degrees.
 * @returns {quat} out
 * @function
 */

function fromEuler(out, x, y, z) {
  var halfToRad = 0.5 * Math.PI / 180.0;
  x *= halfToRad;
  y *= halfToRad;
  z *= halfToRad;
  var sx = Math.sin(x);
  var cx = Math.cos(x);
  var sy = Math.sin(y);
  var cy = Math.cos(y);
  var sz = Math.sin(z);
  var cz = Math.cos(z);
  out[0] = sx * cy * cz - cx * sy * sz;
  out[1] = cx * sy * cz + sx * cy * sz;
  out[2] = cx * cy * sz - sx * sy * cz;
  out[3] = cx * cy * cz + sx * sy * sz;
  return out;
}
/**
 * Returns a string representation of a quatenion
 *
 * @param {ReadonlyQuat} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function quat_str(a) {
  return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")";
}
/**
 * Creates a new quat initialized with values from an existing quaternion
 *
 * @param {ReadonlyQuat} a quaternion to clone
 * @returns {quat} a new quaternion
 * @function
 */

var quat_clone = vec4_clone;
/**
 * Creates a new quat initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} a new quaternion
 * @function
 */

var quat_fromValues = vec4_fromValues;
/**
 * Copy the values from one quat to another
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the source quaternion
 * @returns {quat} out
 * @function
 */

var quat_copy = vec4_copy;
/**
 * Set the components of a quat to the given values
 *
 * @param {quat} out the receiving quaternion
 * @param {Number} x X component
 * @param {Number} y Y component
 * @param {Number} z Z component
 * @param {Number} w W component
 * @returns {quat} out
 * @function
 */

var quat_set = vec4_set;
/**
 * Adds two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {quat} out
 * @function
 */

var quat_add = vec4_add;
/**
 * Alias for {@link quat.multiply}
 * @function
 */

var quat_mul = quat_multiply;
/**
 * Scales a quat by a scalar number
 *
 * @param {quat} out the receiving vector
 * @param {ReadonlyQuat} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {quat} out
 * @function
 */

var quat_scale = vec4_scale;
/**
 * Calculates the dot product of two quat's
 *
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @returns {Number} dot product of a and b
 * @function
 */

var quat_dot = vec4_dot;
/**
 * Performs a linear interpolation between two quat's
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 * @function
 */

var quat_lerp = vec4_lerp;
/**
 * Calculates the length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate length of
 * @returns {Number} length of a
 */

var quat_length = vec4_length;
/**
 * Alias for {@link quat.length}
 * @function
 */

var quat_len = quat_length;
/**
 * Calculates the squared length of a quat
 *
 * @param {ReadonlyQuat} a vector to calculate squared length of
 * @returns {Number} squared length of a
 * @function
 */

var quat_squaredLength = vec4_squaredLength;
/**
 * Alias for {@link quat.squaredLength}
 * @function
 */

var quat_sqrLen = quat_squaredLength;
/**
 * Normalize a quat
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a quaternion to normalize
 * @returns {quat} out
 * @function
 */

var quat_normalize = vec4_normalize;
/**
 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyQuat} a The first quaternion.
 * @param {ReadonlyQuat} b The second quaternion.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_exactEquals = vec4_exactEquals;
/**
 * Returns whether or not the quaternions have approximately the same elements in the same position.
 *
 * @param {ReadonlyQuat} a The first vector.
 * @param {ReadonlyQuat} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

var quat_equals = vec4_equals;
/**
 * Sets a quaternion to represent the shortest rotation from one
 * vector to another.
 *
 * Both vectors are assumed to be unit length.
 *
 * @param {quat} out the receiving quaternion.
 * @param {ReadonlyVec3} a the initial vector
 * @param {ReadonlyVec3} b the destination vector
 * @returns {quat} out
 */

var rotationTo = function () {
  var tmpvec3 = vec3_create();
  var xUnitVec3 = vec3_fromValues(1, 0, 0);
  var yUnitVec3 = vec3_fromValues(0, 1, 0);
  return function (out, a, b) {
    var dot = vec3_dot(a, b);

    if (dot < -0.999999) {
      cross(tmpvec3, xUnitVec3, a);
      if (vec3_len(tmpvec3) < 0.000001) cross(tmpvec3, yUnitVec3, a);
      normalize(tmpvec3, tmpvec3);
      setAxisAngle(out, tmpvec3, Math.PI);
      return out;
    } else if (dot > 0.999999) {
      out[0] = 0;
      out[1] = 0;
      out[2] = 0;
      out[3] = 1;
      return out;
    } else {
      cross(tmpvec3, a, b);
      out[0] = tmpvec3[0];
      out[1] = tmpvec3[1];
      out[2] = tmpvec3[2];
      out[3] = 1 + dot;
      return quat_normalize(out, out);
    }
  };
}();
/**
 * Performs a spherical linear interpolation with two control points
 *
 * @param {quat} out the receiving quaternion
 * @param {ReadonlyQuat} a the first operand
 * @param {ReadonlyQuat} b the second operand
 * @param {ReadonlyQuat} c the third operand
 * @param {ReadonlyQuat} d the fourth operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {quat} out
 */

var sqlerp = function () {
  var temp1 = quat_create();
  var temp2 = quat_create();
  return function (out, a, b, c, d, t) {
    slerp(temp1, a, d, t);
    slerp(temp2, b, c, t);
    slerp(out, temp1, temp2, 2 * t * (1 - t));
    return out;
  };
}();
/**
 * Sets the specified quaternion with values corresponding to the given
 * axes. Each axis is a vec3 and is expected to be unit length and
 * perpendicular to all other specified axes.
 *
 * @param {ReadonlyVec3} view  the vector representing the viewing direction
 * @param {ReadonlyVec3} right the vector representing the local "right" direction
 * @param {ReadonlyVec3} up    the vector representing the local "up" direction
 * @returns {quat} out
 */

var setAxes = function () {
  var matr = mat3_create();
  return function (out, view, right, up) {
    matr[0] = right[0];
    matr[3] = right[1];
    matr[6] = right[2];
    matr[1] = up[0];
    matr[4] = up[1];
    matr[7] = up[2];
    matr[2] = -view[0];
    matr[5] = -view[1];
    matr[8] = -view[2];
    return quat_normalize(out, fromMat3(out, matr));
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/vec2.js

/**
 * 2 Dimensional Vector
 * @module vec2
 */

/**
 * Creates a new, empty vec2
 *
 * @returns {vec2} a new 2D vector
 */

function vec2_create() {
  var out = new ARRAY_TYPE(2);

  if (ARRAY_TYPE != Float32Array) {
    out[0] = 0;
    out[1] = 0;
  }

  return out;
}
/**
 * Creates a new vec2 initialized with values from an existing vector
 *
 * @param {ReadonlyVec2} a vector to clone
 * @returns {vec2} a new 2D vector
 */

function vec2_clone(a) {
  var out = new ARRAY_TYPE(2);
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Creates a new vec2 initialized with the given values
 *
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} a new 2D vector
 */

function vec2_fromValues(x, y) {
  var out = new ARRAY_TYPE(2);
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Copy the values from one vec2 to another
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the source vector
 * @returns {vec2} out
 */

function vec2_copy(out, a) {
  out[0] = a[0];
  out[1] = a[1];
  return out;
}
/**
 * Set the components of a vec2 to the given values
 *
 * @param {vec2} out the receiving vector
 * @param {Number} x X component
 * @param {Number} y Y component
 * @returns {vec2} out
 */

function vec2_set(out, x, y) {
  out[0] = x;
  out[1] = y;
  return out;
}
/**
 * Adds two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_add(out, a, b) {
  out[0] = a[0] + b[0];
  out[1] = a[1] + b[1];
  return out;
}
/**
 * Subtracts vector b from vector a
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_subtract(out, a, b) {
  out[0] = a[0] - b[0];
  out[1] = a[1] - b[1];
  return out;
}
/**
 * Multiplies two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_multiply(out, a, b) {
  out[0] = a[0] * b[0];
  out[1] = a[1] * b[1];
  return out;
}
/**
 * Divides two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_divide(out, a, b) {
  out[0] = a[0] / b[0];
  out[1] = a[1] / b[1];
  return out;
}
/**
 * Math.ceil the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to ceil
 * @returns {vec2} out
 */

function vec2_ceil(out, a) {
  out[0] = Math.ceil(a[0]);
  out[1] = Math.ceil(a[1]);
  return out;
}
/**
 * Math.floor the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to floor
 * @returns {vec2} out
 */

function vec2_floor(out, a) {
  out[0] = Math.floor(a[0]);
  out[1] = Math.floor(a[1]);
  return out;
}
/**
 * Returns the minimum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_min(out, a, b) {
  out[0] = Math.min(a[0], b[0]);
  out[1] = Math.min(a[1], b[1]);
  return out;
}
/**
 * Returns the maximum of two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec2} out
 */

function vec2_max(out, a, b) {
  out[0] = Math.max(a[0], b[0]);
  out[1] = Math.max(a[1], b[1]);
  return out;
}
/**
 * Math.round the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to round
 * @returns {vec2} out
 */

function vec2_round(out, a) {
  out[0] = Math.round(a[0]);
  out[1] = Math.round(a[1]);
  return out;
}
/**
 * Scales a vec2 by a scalar number
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to scale
 * @param {Number} b amount to scale the vector by
 * @returns {vec2} out
 */

function vec2_scale(out, a, b) {
  out[0] = a[0] * b;
  out[1] = a[1] * b;
  return out;
}
/**
 * Adds two vec2's after scaling the second operand by a scalar value
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} scale the amount to scale b by before adding
 * @returns {vec2} out
 */

function vec2_scaleAndAdd(out, a, b, scale) {
  out[0] = a[0] + b[0] * scale;
  out[1] = a[1] + b[1] * scale;
  return out;
}
/**
 * Calculates the euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} distance between a and b
 */

function vec2_distance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared euclidian distance between two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} squared distance between a and b
 */

function vec2_squaredDistance(a, b) {
  var x = b[0] - a[0],
      y = b[1] - a[1];
  return x * x + y * y;
}
/**
 * Calculates the length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate length of
 * @returns {Number} length of a
 */

function vec2_length(a) {
  var x = a[0],
      y = a[1];
  return Math.hypot(x, y);
}
/**
 * Calculates the squared length of a vec2
 *
 * @param {ReadonlyVec2} a vector to calculate squared length of
 * @returns {Number} squared length of a
 */

function vec2_squaredLength(a) {
  var x = a[0],
      y = a[1];
  return x * x + y * y;
}
/**
 * Negates the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to negate
 * @returns {vec2} out
 */

function vec2_negate(out, a) {
  out[0] = -a[0];
  out[1] = -a[1];
  return out;
}
/**
 * Returns the inverse of the components of a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to invert
 * @returns {vec2} out
 */

function vec2_inverse(out, a) {
  out[0] = 1.0 / a[0];
  out[1] = 1.0 / a[1];
  return out;
}
/**
 * Normalize a vec2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a vector to normalize
 * @returns {vec2} out
 */

function vec2_normalize(out, a) {
  var x = a[0],
      y = a[1];
  var len = x * x + y * y;

  if (len > 0) {
    //TODO: evaluate use of glm_invsqrt here?
    len = 1 / Math.sqrt(len);
  }

  out[0] = a[0] * len;
  out[1] = a[1] * len;
  return out;
}
/**
 * Calculates the dot product of two vec2's
 *
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {Number} dot product of a and b
 */

function vec2_dot(a, b) {
  return a[0] * b[0] + a[1] * b[1];
}
/**
 * Computes the cross product of two vec2's
 * Note that the cross product must by definition produce a 3D vector
 *
 * @param {vec3} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @returns {vec3} out
 */

function vec2_cross(out, a, b) {
  var z = a[0] * b[1] - a[1] * b[0];
  out[0] = out[1] = 0;
  out[2] = z;
  return out;
}
/**
 * Performs a linear interpolation between two vec2's
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the first operand
 * @param {ReadonlyVec2} b the second operand
 * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
 * @returns {vec2} out
 */

function vec2_lerp(out, a, b, t) {
  var ax = a[0],
      ay = a[1];
  out[0] = ax + t * (b[0] - ax);
  out[1] = ay + t * (b[1] - ay);
  return out;
}
/**
 * Generates a random vector with the given scale
 *
 * @param {vec2} out the receiving vector
 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
 * @returns {vec2} out
 */

function vec2_random(out, scale) {
  scale = scale || 1.0;
  var r = RANDOM() * 2.0 * Math.PI;
  out[0] = Math.cos(r) * scale;
  out[1] = Math.sin(r) * scale;
  return out;
}
/**
 * Transforms the vec2 with a mat2
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y;
  out[1] = m[1] * x + m[3] * y;
  return out;
}
/**
 * Transforms the vec2 with a mat2d
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat2d} m matrix to transform with
 * @returns {vec2} out
 */

function transformMat2d(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[2] * y + m[4];
  out[1] = m[1] * x + m[3] * y + m[5];
  return out;
}
/**
 * Transforms the vec2 with a mat3
 * 3rd vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat3} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat3(out, a, m) {
  var x = a[0],
      y = a[1];
  out[0] = m[0] * x + m[3] * y + m[6];
  out[1] = m[1] * x + m[4] * y + m[7];
  return out;
}
/**
 * Transforms the vec2 with a mat4
 * 3rd vector component is implicitly '0'
 * 4th vector component is implicitly '1'
 *
 * @param {vec2} out the receiving vector
 * @param {ReadonlyVec2} a the vector to transform
 * @param {ReadonlyMat4} m matrix to transform with
 * @returns {vec2} out
 */

function vec2_transformMat4(out, a, m) {
  var x = a[0];
  var y = a[1];
  out[0] = m[0] * x + m[4] * y + m[12];
  out[1] = m[1] * x + m[5] * y + m[13];
  return out;
}
/**
 * Rotate a 2D vector
 * @param {vec2} out The receiving vec2
 * @param {ReadonlyVec2} a The vec2 point to rotate
 * @param {ReadonlyVec2} b The origin of the rotation
 * @param {Number} rad The angle of rotation in radians
 * @returns {vec2} out
 */

function vec2_rotate(out, a, b, rad) {
  //Translate point to the origin
  var p0 = a[0] - b[0],
      p1 = a[1] - b[1],
      sinC = Math.sin(rad),
      cosC = Math.cos(rad); //perform rotation and translate to correct position

  out[0] = p0 * cosC - p1 * sinC + b[0];
  out[1] = p0 * sinC + p1 * cosC + b[1];
  return out;
}
/**
 * Get the angle between two 2D vectors
 * @param {ReadonlyVec2} a The first operand
 * @param {ReadonlyVec2} b The second operand
 * @returns {Number} The angle in radians
 */

function vec2_angle(a, b) {
  var x1 = a[0],
      y1 = a[1],
      x2 = b[0],
      y2 = b[1],
      // mag is the product of the magnitudes of a and b
  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),
      // mag &&.. short circuits if mag == 0
  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1

  return Math.acos(Math.min(Math.max(cosine, -1), 1));
}
/**
 * Set the components of a vec2 to zero
 *
 * @param {vec2} out the receiving vector
 * @returns {vec2} out
 */

function vec2_zero(out) {
  out[0] = 0.0;
  out[1] = 0.0;
  return out;
}
/**
 * Returns a string representation of a vector
 *
 * @param {ReadonlyVec2} a vector to represent as a string
 * @returns {String} string representation of the vector
 */

function vec2_str(a) {
  return "vec2(" + a[0] + ", " + a[1] + ")";
}
/**
 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_exactEquals(a, b) {
  return a[0] === b[0] && a[1] === b[1];
}
/**
 * Returns whether or not the vectors have approximately the same elements in the same position.
 *
 * @param {ReadonlyVec2} a The first vector.
 * @param {ReadonlyVec2} b The second vector.
 * @returns {Boolean} True if the vectors are equal, false otherwise.
 */

function vec2_equals(a, b) {
  var a0 = a[0],
      a1 = a[1];
  var b0 = b[0],
      b1 = b[1];
  return Math.abs(a0 - b0) <= EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
}
/**
 * Alias for {@link vec2.length}
 * @function
 */

var vec2_len = vec2_length;
/**
 * Alias for {@link vec2.subtract}
 * @function
 */

var vec2_sub = vec2_subtract;
/**
 * Alias for {@link vec2.multiply}
 * @function
 */

var vec2_mul = vec2_multiply;
/**
 * Alias for {@link vec2.divide}
 * @function
 */

var vec2_div = vec2_divide;
/**
 * Alias for {@link vec2.distance}
 * @function
 */

var vec2_dist = vec2_distance;
/**
 * Alias for {@link vec2.squaredDistance}
 * @function
 */

var vec2_sqrDist = vec2_squaredDistance;
/**
 * Alias for {@link vec2.squaredLength}
 * @function
 */

var vec2_sqrLen = vec2_squaredLength;
/**
 * Perform some operation over an array of vec2s.
 *
 * @param {Array} a the array of vectors to iterate over
 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
 * @param {Number} offset Number of elements to skip at the beginning of the array
 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
 * @param {Function} fn Function to call for each vector in the array
 * @param {Object} [arg] additional argument to pass to fn
 * @returns {Array} a
 * @function
 */

var vec2_forEach = function () {
  var vec = vec2_create();
  return function (a, stride, offset, count, fn, arg) {
    var i, l;

    if (!stride) {
      stride = 2;
    }

    if (!offset) {
      offset = 0;
    }

    if (count) {
      l = Math.min(count * stride + offset, a.length);
    } else {
      l = a.length;
    }

    for (i = offset; i < l; i += stride) {
      vec[0] = a[i];
      vec[1] = a[i + 1];
      fn(vec, vec, arg);
      a[i] = vec[0];
      a[i + 1] = vec[1];
    }

    return a;
  };
}();
// CONCATENATED MODULE: ./node_modules/gl-matrix/esm/index.js












/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(143);

var iterableToArrayLimit = __webpack_require__(156);

var unsupportedIterableToArray = __webpack_require__(109);

var nonIterableRest = __webpack_require__(144);

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return EditorElement; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28);
/* harmony import */ var el_editor_manager_Editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(61);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var EditorElement = /*#__PURE__*/function (_UIElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(EditorElement, _UIElement);

  var _super = _createSuper(EditorElement);

  function EditorElement() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, EditorElement);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(EditorElement, [{
    key: "$editor",
    get: function get() {
      return el_editor_manager_Editor__WEBPACK_IMPORTED_MODULE_6__[/* Editor */ "b"];
    }
  }, {
    key: "$store",
    get: function get() {
      return this.$editor.store;
    } // editor utility 

    /**
     * i18n 텍스트를 리턴한다. 
     * 
     * @param {string} key 
     * @returns {string} i18n 텍스트 
     */

  }, {
    key: "$i18n",
    value: function $i18n(key) {
      return this.$editor.i18n(key);
    }
  }, {
    key: "$initI18n",
    value: function $initI18n(key) {
      return this.$editor.initI18n(key);
    }
  }, {
    key: "$config",
    get: function get() {
      return this.$editor.config;
    }
    /**
     * @type {SelectionManager} $selection
     */

  }, {
    key: "$selection",
    get: function get() {
      return this.$editor.selection;
    }
    /**
     * @type {ViewportManager} $viewport
     */

  }, {
    key: "$viewport",
    get: function get() {
      return this.$editor.viewport;
    }
    /**
     * @type {SnapManager} $snapManager
     */

  }, {
    key: "$snapManager",
    get: function get() {
      return this.$editor.snapManager;
    }
  }, {
    key: "$timeline",
    get: function get() {
      return this.$editor.timeline;
    }
  }, {
    key: "$history",
    get: function get() {
      return this.$editor.history;
    }
    /**
     * @type {ShortCutManager} $shortcuts
     */

  }, {
    key: "$shortcuts",
    get: function get() {
      return this.$editor.shortcuts;
    }
    /**
     * @type {KeyBoardManager} $keyboardManager
     */

  }, {
    key: "$keyboardManager",
    get: function get() {
      return this.$editor.keyboardManager;
    }
    /**
     * @type {StorageManager} $storageManager
     */

  }, {
    key: "$storageManager",
    get: function get() {
      return this.$editor.storageManager;
    }
  }, {
    key: "$menuManager",
    get: function get() {
      return this.$editor.menuItemManager;
    }
    /**
     * history 가 필요한 커맨드는 command 함수를 사용하자. 
     * 마우스 업 상태에 따라서 자동으로 history 커맨드로 분기해준다. 
     * 기존 emit 과 거의 동일하게 사용할 수 있다.   
     * 
     * @param {string} command 
     * @param {string} description 
     * @param {any[]} args 
     */

  }, {
    key: "command",
    value: function command(_command, description) {
      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      if (this.$editor.isPointerUp) {
        return this.emit.apply(this, ["history.".concat(_command), description].concat(args));
      } else {
        return this.emit.apply(this, [_command].concat(args));
      }
    }
  }, {
    key: "$theme",
    value: function $theme(key) {
      return this.$editor.themeValue(key);
    }
  }]);

  return EditorElement;
}(el_base_UIElement__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"]);

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "round", function() { return /* binding */ round; });
__webpack_require__.d(__webpack_exports__, "degreeToRadian", function() { return /* binding */ degreeToRadian; });
__webpack_require__.d(__webpack_exports__, "div", function() { return /* binding */ div; });
__webpack_require__.d(__webpack_exports__, "radianToDegree", function() { return /* binding */ radianToDegree; });
__webpack_require__.d(__webpack_exports__, "getXInCircle", function() { return /* binding */ getXInCircle; });
__webpack_require__.d(__webpack_exports__, "getYInCircle", function() { return /* binding */ getYInCircle; });
__webpack_require__.d(__webpack_exports__, "getXYInCircle", function() { return /* binding */ getXYInCircle; });
__webpack_require__.d(__webpack_exports__, "getDist", function() { return /* binding */ getDist; });
__webpack_require__.d(__webpack_exports__, "getPointBetweenVerties", function() { return /* binding */ getPointBetweenVerties; });
__webpack_require__.d(__webpack_exports__, "vertiesMap", function() { return /* binding */ vertiesMap; });
__webpack_require__.d(__webpack_exports__, "getVertiesMaxX", function() { return /* binding */ getVertiesMaxX; });
__webpack_require__.d(__webpack_exports__, "getVertiesMaxY", function() { return /* binding */ getVertiesMaxY; });
__webpack_require__.d(__webpack_exports__, "getVertiesMinX", function() { return /* binding */ getVertiesMinX; });
__webpack_require__.d(__webpack_exports__, "getVertiesCenterX", function() { return /* binding */ getVertiesCenterX; });
__webpack_require__.d(__webpack_exports__, "getVertiesMinY", function() { return /* binding */ getVertiesMinY; });
__webpack_require__.d(__webpack_exports__, "getVertiesCenterY", function() { return /* binding */ getVertiesCenterY; });
__webpack_require__.d(__webpack_exports__, "calculateAngle", function() { return /* binding */ calculateAngle; });
__webpack_require__.d(__webpack_exports__, "calculateAngleForVec3", function() { return /* binding */ calculateAngleForVec3; });
__webpack_require__.d(__webpack_exports__, "calculateRotationOriginMat4", function() { return /* binding */ calculateRotationOriginMat4; });
__webpack_require__.d(__webpack_exports__, "calculateMatrix", function() { return /* binding */ calculateMatrix; });
__webpack_require__.d(__webpack_exports__, "calculateMatrixInverse", function() { return /* binding */ calculateMatrixInverse; });
__webpack_require__.d(__webpack_exports__, "calculateAnglePointDistance", function() { return /* binding */ calculateAnglePointDistance; });
__webpack_require__.d(__webpack_exports__, "calculateAngle360", function() { return /* binding */ calculateAngle360; });
__webpack_require__.d(__webpack_exports__, "uuid", function() { return /* binding */ uuid; });
__webpack_require__.d(__webpack_exports__, "uuidShort", function() { return /* binding */ uuidShort; });
__webpack_require__.d(__webpack_exports__, "cubicBezier", function() { return /* binding */ cubicBezier; });
__webpack_require__.d(__webpack_exports__, "getGradientLine", function() { return /* binding */ getGradientLine; });
__webpack_require__.d(__webpack_exports__, "CCW", function() { return /* binding */ CCW; });
__webpack_require__.d(__webpack_exports__, "incircle", function() { return /* binding */ incircle; });
__webpack_require__.d(__webpack_exports__, "initPolygon", function() { return /* binding */ initPolygon; });
__webpack_require__.d(__webpack_exports__, "Deluanay", function() { return /* binding */ Deluanay; });
__webpack_require__.d(__webpack_exports__, "generate_sample_points", function() { return /* binding */ generate_sample_points; });
__webpack_require__.d(__webpack_exports__, "getCenterInTriangle", function() { return /* binding */ getCenterInTriangle; });
__webpack_require__.d(__webpack_exports__, "normalize", function() { return /* binding */ normalize; });
__webpack_require__.d(__webpack_exports__, "isAPointLeftOfVectorOrOnTheLine", function() { return /* binding */ isAPointLeftOfVectorOrOnTheLine; });
__webpack_require__.d(__webpack_exports__, "getConvexHull", function() { return /* binding */ getConvexHull; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/index.js + 7 modules
var esm = __webpack_require__(12);

// EXTERNAL MODULE: ./src/el/base/functions/create.js
var create = __webpack_require__(53);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/base/functions/matrix.js
var Vect3 = {
  create: function create(x, y, z) {
    return {
      x: x || 0,
      y: y || 0,
      z: z || 0
    };
  },
  add: function add(v1, v2) {
    return {
      x: v1.x + v2.x,
      y: v1.y + v2.y,
      z: v1.z + v2.z
    };
  },
  sub: function sub(v1, v2) {
    return {
      x: v1.x - v2.x,
      y: v1.y - v2.y,
      z: v1.z - v2.z
    };
  },
  mul: function mul(v1, v2) {
    return {
      x: v1.x * v2.x,
      y: v1.y * v2.y,
      z: v1.z * v2.z
    };
  },
  div: function div(v1, v2) {
    return {
      x: v1.x / v2.x,
      y: v1.y / v2.y,
      z: v1.z / v2.z
    };
  },
  muls: function muls(v, s) {
    return {
      x: v.x * s,
      y: v.y * s,
      z: v.z * s
    };
  },
  divs: function divs(v, s) {
    return {
      x: v.x / s,
      y: v.y / s,
      z: v.z / s
    };
  },
  len: function len(v) {
    return Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);
  },
  dot: function dot(v1, v2) {
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
  },
  cross2d: function cross2d(v1, v2) {
    return v1.x * v2.y - v1.y * v2.x;
  },
  cross: function cross(v1, v2) {
    return {
      x: v1.y * v2.z - v1.z * v2.y,
      y: v1.z * v2.x - v1.x * v2.z,
      z: v1.x * v2.y - v1.y * v2.x
    };
  },
  normalize: function normalize(v) {
    return Vect3.divs(v, Vect3.len(v));
  },
  ang: function ang(v1, v2) {
    return Math.acos(Vect3.dot(v1, v2) / (Vect3.len(v1) * Vect3.len(v2)));
  },
  copy: function copy(v) {
    return {
      x: v.x,
      y: v.y,
      z: v.z
    };
  },
  equal: function equal(v1, v2) {
    return v1.x === v2.x && v1.y === v2.y && v1.z === v2.z;
  },
  rotate: function rotate(v1, v2) {
    var x1 = v1.x,
        y1 = v1.y,
        z1 = v1.z,
        angleX = v2.x / 2,
        angleY = v2.y / 2,
        angleZ = v2.z / 2,
        cr = Math.cos(angleX),
        cp = Math.cos(angleY),
        cy = Math.cos(angleZ),
        sr = Math.sin(angleX),
        sp = Math.sin(angleY),
        sy = Math.sin(angleZ),
        w = cr * cp * cy + -sr * sp * sy,
        x = sr * cp * cy - -cr * sp * sy,
        y = cr * sp * cy + sr * cp * -sy,
        z = cr * cp * sy - -sr * sp * cy,
        m0 = 1 - 2 * (y * y + z * z),
        m1 = 2 * (x * y + z * w),
        m2 = 2 * (x * z - y * w),
        m4 = 2 * (x * y - z * w),
        m5 = 1 - 2 * (x * x + z * z),
        m6 = 2 * (z * y + x * w),
        m8 = 2 * (x * z + y * w),
        m9 = 2 * (y * z - x * w),
        m10 = 1 - 2 * (x * x + y * y);
    return {
      x: x1 * m0 + y1 * m4 + z1 * m8,
      y: x1 * m1 + y1 * m5 + z1 * m9,
      z: x1 * m2 + y1 * m6 + z1 * m10
    };
  }
};
/* harmony default export */ var matrix = ({
  Vect3: Vect3
});
// CONCATENATED MODULE: ./src/el/base/functions/math.js





function round(n, k) {
  k = Object(func["isUndefined"])(k) ? 1 : k;
  return Math.round(n * k) / k;
}
function degreeToRadian(degrees) {
  return degrees * (Math.PI / 180);
}
function div(num) {
  var divNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return num === 0 ? 0 : num / divNum;
}
/**
 * 
 * convert radian to degree 
 * 
 * @param {*} radian 
 * @returns {Number} 0..360
 */

function radianToDegree(radian) {
  var angle = radian * (180 / Math.PI);

  if (angle < 0) {
    angle = 360 + angle;
  }

  return angle;
}
function getXInCircle(angle, radius) {
  var centerX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return centerX + radius * Math.cos(degreeToRadian(angle));
}
function getYInCircle(angle, radius) {
  var centerY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return centerY + radius * Math.sin(degreeToRadian(angle));
}
function getXYInCircle(angle, radius) {
  var centerX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var centerY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  return {
    x: getXInCircle(angle, radius, centerX),
    y: getYInCircle(angle, radius, centerY)
  };
}
function getDist(x, y) {
  var centerX = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var centerY = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  return esm["c" /* vec2 */].distance([x, y], [centerX, centerY]);
}
/**
 * 
 * start 벡터에서 end 벡터로 이어질 때  
 * end에서 pointDist 만큼의 거리를 이동한 벡터를 구한다. 
 * 
 * @param {vec3} start 
 * @param {vec3} end 
 * @param {number} pointDist 
 */

function getPointBetweenVerties(start, end) {
  var pointDist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  return esm["d" /* vec3 */].lerp([], start, end, 1 + pointDist / esm["d" /* vec3 */].dist(start, end));
}
function vertiesMap(verties, transformView) {
  return verties.map(function (v) {
    return esm["d" /* vec3 */].transformMat4([], v, transformView);
  });
}
function getVertiesMaxX(verties) {
  var maxValue = Number.MIN_SAFE_INTEGER;
  verties.forEach(function (v) {
    maxValue = Math.max(v[0], maxValue);
  });
  return maxValue;
}
function getVertiesMaxY(verties) {
  var maxValue = Number.MIN_SAFE_INTEGER;
  verties.forEach(function (v) {
    maxValue = Math.max(v[1], maxValue);
  });
  return maxValue;
}
function getVertiesMinX(verties) {
  var maxValue = Number.MAX_SAFE_INTEGER;
  verties.forEach(function (v) {
    maxValue = Math.min(v[0], maxValue);
  });
  return maxValue;
}
function getVertiesCenterX(verties) {
  var minX = Number.MAX_SAFE_INTEGER;
  var maxX = Number.MIN_SAFE_INTEGER;
  verties.forEach(function (v) {
    minX = Math.min(v[0], minX);
    maxX = Math.max(v[0], maxX);
  });
  return Math.round((minX + maxX) / 2);
}
function getVertiesMinY(verties) {
  var maxValue = Number.MAX_SAFE_INTEGER;
  verties.forEach(function (v) {
    maxValue = Math.min(v[1], maxValue);
  });
  return maxValue;
}
function getVertiesCenterY(verties) {
  var minY = Number.MAX_SAFE_INTEGER;
  var maxY = Number.MIN_SAFE_INTEGER;
  verties.forEach(function (v) {
    minY = Math.min(v[1], minY);
    maxY = Math.max(v[1], maxY);
  });
  return Math.round((minY + maxY) / 2);
}
function calculateAngle(rx, ry) {
  return radianToDegree(Math.atan2(ry, rx));
}
/**
 * center 를 기준으로 point 에서 dist 만큼 이동한 후 angle 를 구함 
 * 
 * @param {vec3} point 
 * @param {vec3} center 
 * @param {vec3} dist 
 */

function calculateAngleForVec3(point, center, dist) {
  return calculateAnglePointDistance({
    x: point[0],
    y: point[1]
  }, {
    x: center[0],
    y: center[1]
  }, // origin 
  {
    dx: dist[0],
    dy: dist[1]
  });
}
function calculateRotationOriginMat4(angle, origin) {
  var view = esm["a" /* mat4 */].create();
  esm["a" /* mat4 */].translate(view, view, origin); // move origin 

  esm["a" /* mat4 */].rotateZ(view, view, degreeToRadian(angle)); // rotate

  esm["a" /* mat4 */].translate(view, view, esm["d" /* vec3 */].negate([], origin)); // move origin * -1  

  return view;
}
function calculateMatrix() {
  var view = esm["a" /* mat4 */].create();

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  args.forEach(function (v) {
    esm["a" /* mat4 */].multiply(view, view, v);
  });
  return view;
}
function calculateMatrixInverse() {
  return esm["a" /* mat4 */].invert([], calculateMatrix.apply(void 0, arguments));
}
function calculateAnglePointDistance(point, center, dist) {
  var x = point.x - center.x;
  var y = point.y - center.y;
  var angle1 = calculateAngle(x, y);
  var x2 = point.x + dist.dx - center.x;
  var y2 = point.y + dist.dy - center.y;
  var angle = calculateAngle(x2, y2) - angle1;
  return angle;
}
function calculateAngle360(rx, ry) {
  return (calculateAngle(rx, ry) + 180) % 360;
}
var UUID_REG = /[xy]/g;
function uuid() {
  var dt = new Date().getTime();
  var uuid = 'xxx12-xx-34xx'.replace(UUID_REG, function (c) {
    var r = (dt + Math.random() * 16) % 16 | 0;
    dt = Math.floor(dt / 16);
    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
  return uuid;
}
function uuidShort() {
  var dt = new Date().getTime();
  var uuid = 'idxxxxxxx'.replace(UUID_REG, function (c) {
    var r = (dt + Math.random() * 16) % 16 | 0;
    dt = Math.floor(dt / 16);
    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
  return uuid;
}
var bezierCalc = {
  B1: function B1(t) {
    return t * t * t;
  },
  B2: function B2(t) {
    return 3 * t * t * (1 - t);
  },
  B3: function B3(t) {
    return 3 * t * (1 - t) * (1 - t);
  },
  B4: function B4(t) {
    return (1 - t) * (1 - t) * (1 - t);
  }
};
function cubicBezier(x1, y1, x2, y2) {
  var C1 = {
    x: 0,
    y: 0
  };
  var C2 = {
    x: x1,
    y: y1
  };
  var C3 = {
    x: x2,
    y: y2
  };
  var C4 = {
    x: 1,
    y: 1
  };
  return function (progress) {
    // var x = C1.x * bezierCalc.B1(p) + C2.x*bezierCalc.B2(p) + C3.x*bezierCalc.B3(p) + C4.x*bezierCalc.B4(p);
    // var y = C1.y * bezierCalc.B1(progress) + C2.y*bezierCalc.B2(progress) + C3.y*bezierCalc.B3(progress) + C4.y*bezierCalc.B4(progress);
    var y = C2.y * bezierCalc.B2(progress) + C3.y * bezierCalc.B3(progress) + bezierCalc.B4(progress);
    return 1 - y;
  };
}
function getGradientLine(angle, box) {
  var length = Math.abs(box.width * Math.sin(angle)) + Math.abs(box.height * Math.cos(angle));
  var center = {
    x: box.x + box.width / 2,
    y: box.y + box.height / 2
  };
  var yDiff = Math.sin(angle - Math.PI / 2) * length / 2;
  var xDiff = Math.cos(angle - Math.PI / 2) * length / 2;
  return {
    length: length,
    center: center,
    start: {
      x: center.x - xDiff,
      y: center.y - yDiff
    },
    end: {
      x: center.x + xDiff,
      y: center.y + yDiff
    }
  };
} // 외적 구하기 

function CCW(A, B, C) {
  // cross (B - A, C - A)
  if (Object(func["isUndefined"])(C)) {
    return Vect3.cross2d(A, B);
  }

  return Vect3.cross2d(Vect3.sub(B, A), Vect3.sub(C, A));
} // refer to http://www.secmem.org/blog/2019/01/11/Deluanay_Triangulation/

function incircle(a, b, c, d) {
  var ccw = CCW(a, b, c);
  var adx = a.x - d.x;
  var ady = a.y - d.y;
  var bdx = b.x - d.x;
  var bdy = b.y - d.y;
  var cdx = c.x - d.x;
  var cdy = c.y - d.y;
  var bdxcdy = bdx * cdy,
      cdxbdy = cdx * bdy;
  var cdxady = cdx * ady,
      adxcdy = adx * cdy;
  var adxbdy = adx * bdy,
      bdxady = bdx * ady;
  var alift = adx * adx + ady * ady;
  var blift = bdx * bdx + bdy * bdy;
  var clift = cdx * cdx + cdy * cdy;
  var det = alift * (bdxcdy - cdxbdy) + blift * (cdxady - adxcdy) + clift * (adxbdy - bdxady);
  if (ccw > 0) return det >= 0;else return det <= 0;
}
function initPolygon(polygon, x, y) {
  var A = Vect3.create(Math.min(x, y), Math.max(x, y));
  var selectedIndex = -1;

  for (var i = 0, len = polygon.length; i < len; i++) {
    if (Vect3.equal(polygon[i], A)) {
      selectedIndex = i;
      break;
    }
  }

  if (selectedIndex > -1) {
    polygon.splice(selectedIndex, 1);
  } else {
    polygon.push(A);
  }
}

function swap(data, i, j) {
  var temp = data[i];
  data[i] = data[j];
  data[j] = temp;
}

function Deluanay() {
  var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var n = points.length;
  points[n] = Vect3.create(-2e9, -2e9);
  points[n + 1] = Vect3.create(2e9, -2e9);
  points[n + 2] = Vect3.create(0, 2e9);
  var triangle = [Vect3.create(n, n + 1, n + 2)];

  for (var i = 0; i < n; i++) {
    var polygon = [];
    var complete = new Array(triangle.length);

    for (var j = 0; j < triangle.length; j++) {
      if (complete[j]) continue;
      var current = triangle[j];
      if (!current) continue;
      var a = points[current.x];
      var b = points[current.y];
      var c = points[current.z];
      var d = points[i];

      if (incircle(a, b, c, d)) {
        initPolygon(polygon, current.x, current.y);
        initPolygon(polygon, current.y, current.z);
        initPolygon(polygon, current.z, current.x);
        swap(complete, j, triangle.length - 1);
        swap(triangle, j, triangle.length - 1);
        triangle.pop();
        j--;
        continue;
      }

      complete[j] = true;
    }

    polygon.forEach(function (current) {
      var a = points[current.x];
      var b = points[current.y];
      var d = points[i];

      if (CCW(a, b, d) === 0) {// 0 은 평면 
      } else {
        triangle.push(Vect3.create(current.x, current.y, i));
      }
    });
  } // SuperTriangle delete    


  for (var i = 0; i < triangle.length; i++) {
    var current = triangle[i];

    if (current.x >= n || current.y >= n || current.z >= n) {
      swap(triangle, i, triangle.length - 1);
      triangle.pop();
      i--;
      continue;
    }
  }

  return triangle.map(function (current) {
    return {
      a: points[current.x],
      b: points[current.y],
      c: points[current.z]
    };
  });
}
function generate_sample_points(width, height) {
  var xSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
  var ySize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 50;
  var boxSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
  var variance = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
  var func = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : function () {
    return Math.random();
  };
  var points = [];
  var minX = -xSize;
  var maxX = width + xSize;
  var minY = -ySize;
  var maxY = height + ySize;

  for (var x = minX; x < maxX; x += boxSize) {
    for (var y = minY; y < maxY; y += boxSize) {
      var tempX = Math.floor(x + boxSize / 2 * (func() * variance * 2 - variance));
      var tempY = Math.floor(y + boxSize / 2 * (func() * variance * 2 - variance));
      points[points.length] = {
        x: tempX,
        y: tempY
      };
    }
  }

  return points;
}
function getCenterInTriangle(a, b, c) {
  return {
    x: (a.x + b.x + c.x) / 3,
    y: (a.y + b.y + c.y) / 3
  };
}
var splitReg = /[\b\t \,\n]/g;
function normalize(str) {
  return str.trim().split(splitReg).filter(function (it) {
    return it;
  }).map(function (it) {
    return +it;
  });
}
/**
 * where is point in relation to a-b
 * 
 * < 0 -> to the right 
 * = 0 -> on the line 
 * > 0 -> to the left
 * 
 * 
 * @param {vec3} a 
 * @param {vec3} b 
 * @param {vec3} c 
 */

function isAPointLeftOfVectorOrOnTheLine(a, b, p) {
  var determinant = (a[0] - p[0]) * (b[1] - p[1]) - (a[1] - p[1]) * (b[0] - p[0]);
  return determinant;
}
/**
 * 
 * @param {vec3[]} points 
 */

function getConvexHull() {
  var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  if (points.length === 3) return points;
  if (points.length < 3) return null;
  var convexHull = [];
  var startPos = points[0];

  for (var i = 1, len = points.length; i < len; i++) {
    var testPos = points[i]; // 위치 비교, x 로 비교 하고 , 비교가 안되면 y 로 비교한다. 

    if (testPos[0] < startPos[0] || Math.abs(testPos[0] - startPos[0]) < 0.000001 && testPos[1] < startPos[1]) {
      startPos = points[i];
    }
  } // 시작지점 추가 


  convexHull.push(startPos); // points 에서 시작지점 제외 

  points = points.filter(function (it) {
    return it !== startPos;
  });
  var currentPos = convexHull[0];
  var colinearPoints = [];
  var counter = 0;

  var _loop = function _loop() {
    // 처음을 마지막으로 연결 
    if (counter === 2) {
      points.push(convexHull[0]);
    }

    var randomIndex = Object(create["randomNumber"])(0, points.length - 1);
    var nextPos = points[randomIndex];
    var a = currentPos;
    var b = nextPos;

    for (i = 0, len = points.length; i < len; i++) {
      // nextPos 랑 같으면 자리는 넘긴다. 
      if (esm["d" /* vec3 */].equals(points[i], nextPos)) {
        continue;
      }

      var c = points[i];
      var relation = isAPointLeftOfVectorOrOnTheLine(a, b, c);
      var accuracy = 0.00001; // 0에 가까우면 라인에 걸쳐 있는 point 

      if (relation < accuracy && relation > -accuracy) {
        colinearPoints.push(points[i]);
      } // 0  보다 작으면 right , convexHull 에서 nextPos 를 설정 
      else if (relation < 0) {
          nextPos = points[i];
          b = nextPos;
          colinearPoints = [];
        } // left 는 아무 것도 안함. 

    } // 선에 근접한 point 를 가지고 있다면 


    if (colinearPoints.length > 0) {
      colinearPoints.push(nextPos);
      colinearPoints.sort(function (first, second) {
        if (esm["d" /* vec3 */].equals(first, second)) return 0; // 거리가 긴 것을 뒤로 보낸다. 

        return esm["d" /* vec3 */].dist(first, currentPos) > esm["d" /* vec3 */].dist(second, currentPos) ? 1 : -1;
      });
      convexHull.push.apply(convexHull, toConsumableArray_default()(colinearPoints));
      currentPos = colinearPoints[colinearPoints.length - 1]; // 선정된 colinearPoint 를 points 목록에서 삭제 

      points = points.filter(function (it) {
        return colinearPoints.some(function (p) {
          return esm["d" /* vec3 */].equals(it, p);
        }) === false;
      });
      colinearPoints = [];
    } else {
      convexHull.push(nextPos);
      points = points.filter(function (it) {
        return esm["d" /* vec3 */].equals(it, nextPos) === false;
      });
      currentPos = nextPos;
    } // 


    if (esm["d" /* vec3 */].equals(currentPos, convexHull[0])) {
      convexHull.pop();
      return "break";
    }

    counter += 1;
  };

  while (true) {
    var i, len;

    var _ret = _loop();

    if (_ret === "break") break;
  }

  return convexHull;
}

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(154);

var iterableToArray = __webpack_require__(142);

var unsupportedIterableToArray = __webpack_require__(109);

var nonIterableSpread = __webpack_require__(155);

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(158);


/***/ }),
/* 18 */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Dom_Dom; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/base/DomDiff.js
var setBooleanProp = function setBooleanProp(el, name, value) {
  if (value) {
    el.setAttribute(name, name);
    el[name] = value;
  } else {
    el.removeAttribute(name);
    el[name] = value;
  }
};

var setProp = function setProp(el, name, value) {
  if (typeof value === 'boolean') {
    setBooleanProp(el, name, value);
  } else {
    el.setAttribute(name, value);
  }
};

var removeBooleanProp = function removeBooleanProp(node, name) {
  node.removeAttribute(name);
  node[name] = false;
};

var removeUndefinedProp = function removeUndefinedProp(node, name) {
  node.removeAttribute(name);
};

var removeProp = function removeProp(node, name, value) {
  if (typeof value === 'boolean') {
    removeBooleanProp(node, name);
  } else if (name) {
    removeUndefinedProp(node, name);
  }
};

var updateProp = function updateProp(node, name, newValue, oldValue) {
  if (!newValue) {
    removeProp(node, name, oldValue);
  } else if (!oldValue || newValue !== oldValue) {
    setProp(node, name, newValue);
  }
};

var updateProps = function updateProps(node) {
  var newProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var oldProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var keyList = [];
  keyList.push.apply(keyList, Object.keys(newProps));
  keyList.push.apply(keyList, Object.keys(oldProps));
  var props = new Set(keyList);
  props.forEach(function (name) {
    updateProp(node, name, newProps[name], oldProps[name]);
  });
};
/**
 * TEXT_NODE 일 때   둘 다 공백일 때는  비교하지 않는다. 
 * 
 * @param {*} node1 
 * @param {*} node2 
 */


function changed(node1, node2) {
  return node1.nodeType === Node.TEXT_NODE && node1.textContent !== node2.textContent || node1.nodeName !== node2.nodeName;
}

function hasPassed(node1) {
  return node1.nodeType !== Node.TEXT_NODE && (node1.getAttribute('data-domdiff-pass') === 'true' || node1.getAttribute('refClass'));
}

function getProps(attributes) {
  var results = {};
  var len = attributes.length;

  for (var i = 0; i < len; i++) {
    var t = attributes[i];
    results[t.name] = t.value;
  }

  return results;
}

function updateElement(parentElement, oldEl, newEl, i) {
  // console.log(oldEl, newEl);
  if (!oldEl) {
    // console.log('replace');        
    parentElement.appendChild(newEl.cloneNode(true));
  } else if (!newEl) {
    // console.log('replace');        
    parentElement.removeChild(oldEl);
  } else if (hasPassed(oldEl) || hasPassed(newEl)) {// NOOP
    // data-domdiff-pass="true" 일 때는 아무것도 비교하지 않고 끝낸다. 
    // console.log(oldEl, newEl, 'passed');
  } else if (changed(newEl, oldEl)) {
    // console.log('replace');
    parentElement.replaceChild(newEl.cloneNode(true), oldEl);
  } else if (newEl.nodeType !== Node.TEXT_NODE && newEl.nodeType !== Node.COMMENT_NODE && newEl.toString() !== "[object HTMLUnknownElement]") {
    // console.log(newEl);
    updateProps(oldEl, getProps(newEl.attributes), getProps(oldEl.attributes)); // added        

    var oldChildren = children(oldEl);
    var newChildren = children(newEl);
    var max = Math.max(oldChildren.length, newChildren.length);

    for (var i = 0; i < max; i++) {
      updateElement(oldEl, oldChildren[i], newChildren[i], i);
    }
  }
}

var children = function children(el) {
  var element = el.firstChild;

  if (!element) {
    return [];
  }

  var results = [];

  do {
    results.push(element);
    element = element.nextSibling;
  } while (element);

  return results;
};

function DomDiff(A, B) {
  A = A.el || A;
  B = B.el || B;
  var childrenA = children(A);
  var childrenB = children(B);
  var len = Math.max(childrenA.length, childrenB.length);

  for (var i = 0; i < len; i++) {
    updateElement(A, childrenA[i], childrenB[i], i);
  }
}
// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// CONCATENATED MODULE: ./src/el/base/Dom.js








var Dom_Dom = /*#__PURE__*/function () {
  function Dom(tag, className, attr) {
    classCallCheck_default()(this, Dom);

    if (Object(func["isNotString"])(tag)) {
      this.el = tag;
    } else {
      var el = document.createElement(tag);

      if (className) {
        el.className = className;
      }

      attr = attr || {};

      for (var k in attr) {
        el.setAttribute(k, attr[k]);
      }

      this.el = el;
    }
  }

  createClass_default()(Dom, [{
    key: "setAttr",
    value: function setAttr(obj) {
      var _this = this;

      Object.keys(obj).forEach(function (key) {
        _this.attr(key, obj[key]);
      });
      return this;
    }
  }, {
    key: "setAttrNS",
    value: function setAttrNS(obj) {
      var _this2 = this;

      var namespace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'http://www.w3.org/2000/svg';
      Object.keys(obj).forEach(function (key) {
        _this2.attr(key, obj[key], namespace);
      });
      return this;
    }
  }, {
    key: "setProp",
    value: function setProp(obj) {
      var _this3 = this;

      Object.keys(obj).forEach(function (key) {
        // 동일한 값을 갱신하지 않는다. 
        if (_this3.el[key] != obj[key]) {
          _this3.el[key] = obj[key];
        }
      });
      return this;
    }
    /**
     * data-xxx 속성을 관리한다. 
     * 
     * @param {string} key 
     * @param {any} value 
     */

  }, {
    key: "data",
    value: function data(key, value) {
      if (arguments.length === 1) {
        return this.attr('data-' + key);
      } else if (arguments.length === 2) {
        return this.attr('data-' + key, value);
      } //TODO:  data 속성을 모두 {[key]: value} 형태로 리턴하기 


      return this;
    }
    /**
     * Dom attribute 얻기 또는 설정 
     * 
     * get ->  Dom.create(targetElement).attr('key');
     * set -> Dom.create(targetElement).attr('key', value);
     * 
     * @param {string} key 
     * @param {[string]} value 
     */

  }, {
    key: "attr",
    value: function attr(key, value) {
      if (arguments.length == 1) {
        return this.el.getAttribute(key);
      } // 동일한 속성 값이 있다면 변경하지 않는다. 


      if (this.el.getAttribute(key) != value) {
        this.el.setAttribute(key, value);
      }

      return this;
    }
  }, {
    key: "attrNS",
    value: function attrNS(key, value) {
      var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'http://www.w3.org/2000/svg';

      if (arguments.length == 1) {
        return this.el.getAttributeNS(namespace, key);
      } // 동일한 속성 값이 있다면 변경하지 않는다. 


      if (this.el.getAttributeNS(namespace, key) != value) {
        this.el.setAttributeNS(namespace, key, value);
      }

      return this;
    }
  }, {
    key: "attrKeyValue",
    value: function attrKeyValue(keyField) {
      return defineProperty_default()({}, this.el.getAttribute(keyField), this.val());
    }
  }, {
    key: "attrs",
    value: function attrs() {
      var _this4 = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args.map(function (key) {
        return _this4.el.getAttribute(key);
      });
    }
  }, {
    key: "styles",
    value: function styles() {
      var _this5 = this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return args.map(function (key) {
        return _this5.el.style[key];
      });
    }
  }, {
    key: "removeAttr",
    value: function removeAttr(key) {
      this.el.removeAttribute(key);
      return this;
    }
  }, {
    key: "removeStyle",
    value: function removeStyle(key) {
      this.el.style.removeProperty(key);
      return this;
    }
  }, {
    key: "is",
    value: function is(checkElement) {
      return this.el === (checkElement.el || checkElement);
    }
  }, {
    key: "isTag",
    value: function isTag(tag) {
      return this.el.tagName.toLowerCase() === tag.toLowerCase();
    }
  }, {
    key: "closest",
    value: function closest(cls) {
      var temp = this;
      var checkCls = false;

      while (!(checkCls = temp.hasClass(cls))) {
        if (temp.el.parentNode) {
          temp = Dom.create(temp.el.parentNode);
        } else {
          return null;
        }
      }

      if (checkCls) {
        return temp;
      }

      return null;
    }
  }, {
    key: "path",
    value: function path() {
      if (!this.el) return [];
      var $parentNode = this.parent();

      if ($parentNode) {
        return [].concat(toConsumableArray_default()($parentNode.path()), [this]);
      } else {
        return [this];
      }
    }
  }, {
    key: "parent",
    value: function parent() {
      return Dom.create(this.el.parentNode);
    }
  }, {
    key: "hasParent",
    value: function hasParent() {
      return !!this.el.parentNode;
    }
  }, {
    key: "removeClass",
    value: function removeClass() {
      var _this$el$classList;

      (_this$el$classList = this.el.classList).remove.apply(_this$el$classList, arguments);

      return this;
    }
  }, {
    key: "hasClass",
    value: function hasClass(cls) {
      if (!this.el.classList) return false;
      return this.el.classList.contains(cls);
    }
  }, {
    key: "addClass",
    value: function addClass() {
      var _this$el$classList2;

      (_this$el$classList2 = this.el.classList).add.apply(_this$el$classList2, arguments);

      return this;
    }
  }, {
    key: "onlyOneClass",
    value: function onlyOneClass(cls) {
      var parent = this.parent();
      parent.children().forEach(function (it) {
        it.removeClass(cls);
      });
      this.addClass(cls);
    }
  }, {
    key: "toggleClass",
    value: function toggleClass(cls, isForce) {
      this.el.classList.toggle(cls, isForce);
      return this;
    }
  }, {
    key: "html",
    value: function html(_html) {
      if (Object(func["isUndefined"])(_html)) {
        return this.el.innerHTML;
      }

      if (Object(func["isString"])(_html)) {
        this.el.innerHTML = _html;
      } else {
        this.empty().append(_html);
      }

      return this;
    }
  }, {
    key: "htmlDiff",
    value: function htmlDiff(fragment) {
      DomDiff(this, fragment);
    }
  }, {
    key: "updateDiff",
    value: function updateDiff(html) {
      var rootElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
      DomDiff(this, Dom.create(rootElement).html(html));
    }
  }, {
    key: "updateSVGDiff",
    value: function updateSVGDiff(html) {
      var rootElement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
      DomDiff(this, Dom.create(rootElement).html("<svg>".concat(html, "</svg>")).firstChild.firstChild);
    }
  }, {
    key: "find",
    value: function find(selector) {
      return this.el.querySelector(selector);
    }
  }, {
    key: "$",
    value: function $(selector) {
      var node = this.find(selector);
      return node ? Dom.create(node) : null;
    }
  }, {
    key: "findAll",
    value: function findAll(selector) {
      return toConsumableArray_default()(this.el.querySelectorAll(selector));
    }
  }, {
    key: "$$",
    value: function $$(selector) {
      var arr = this.findAll(selector);
      return arr.map(function (node) {
        return Dom.create(node);
      });
    }
  }, {
    key: "empty",
    value: function empty() {
      while (this.el.firstChild) {
        this.el.removeChild(this.el.firstChild);
      }

      return this;
    }
  }, {
    key: "append",
    value: function append(el) {
      if (Object(func["isString"])(el)) {
        this.el.appendChild(document.createTextNode(el));
      } else {
        this.el.appendChild(el.el || el);
      }

      return this;
    }
  }, {
    key: "prepend",
    value: function prepend(el) {
      if (Object(func["isString"])(el)) {
        this.el.prepend(document.createTextNode(el));
      } else {
        this.el.prepend(el.el || el);
      }

      return this;
    }
  }, {
    key: "prependHTML",
    value: function prependHTML(html) {
      var $dom = Dom.create("div").html(html);
      this.prepend($dom.createChildrenFragment());
      return $dom;
    }
  }, {
    key: "appendHTML",
    value: function appendHTML(html) {
      var $dom = Dom.create("div").html(html);
      this.append($dom.createChildrenFragment());
      return $dom;
    }
    /**
     * create document fragment with children dom
     */

  }, {
    key: "createChildrenFragment",
    value: function createChildrenFragment() {
      var list = this.children();
      var fragment = document.createDocumentFragment();
      list.forEach(function ($el) {
        return fragment.appendChild($el.el);
      });
      return fragment;
    }
  }, {
    key: "appendTo",
    value: function appendTo(target) {
      var t = target.el ? target.el : target;
      t.appendChild(this.el);
      return this;
    }
  }, {
    key: "remove",
    value: function remove() {
      if (this.el.parentNode) {
        this.el.parentNode.removeChild(this.el);
      }

      return this;
    }
  }, {
    key: "removeChild",
    value: function removeChild(el) {
      this.el.removeChild(el.el || el);
      return this;
    }
    /**
     * 
     * @param {string} value 
     * @returns {string} 파라미터가 없을 때  textContent 를 리턴한다. 
     */

  }, {
    key: "text",
    value: function text(value) {
      if (Object(func["isUndefined"])(value)) {
        return this.el.textContent;
      } else {
        var tempText = value;

        if (value instanceof Dom) {
          tempText = value.text();
        } // 값의 변경 사항이 없으면 업데이트 하지 않는다. 


        if (this.el.textContent !== tempText) {
          this.el.textContent = tempText;
        }

        return this;
      }
    }
    /**
     *
     * $el.css`
     *  border-color: yellow;
     * `
     *
     * @param {*} key
     * @param {*} value
     */

  }, {
    key: "css",
    value: function css(key, value) {
      if (Object(func["isNotUndefined"])(key) && Object(func["isNotUndefined"])(value)) {
        this.el.style[key] = value;
      } else if (Object(func["isNotUndefined"])(key)) {
        if (Object(func["isString"])(key)) {
          return getComputedStyle(this.el)[key];
        } else {
          Object.assign(this.el.style, key);
        }
      }

      return this;
    }
  }, {
    key: "getComputedStyle",
    value: function (_getComputedStyle) {
      function getComputedStyle() {
        return _getComputedStyle.apply(this, arguments);
      }

      getComputedStyle.toString = function () {
        return _getComputedStyle.toString();
      };

      return getComputedStyle;
    }(function () {
      var css = getComputedStyle(this.el);
      var obj = {};

      for (var _len3 = arguments.length, list = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        list[_key3] = arguments[_key3];
      }

      list.forEach(function (it) {
        obj[it] = css[it];
      });
      return obj;
    })
  }, {
    key: "getStyleList",
    value: function getStyleList() {
      var _this6 = this;

      var style = {};
      var len = this.el.style.length;

      for (var i = 0; i < len; i++) {
        var key = this.el.style[i];
        style[key] = this.el.style[key];
      }

      for (var _len4 = arguments.length, list = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        list[_key4] = arguments[_key4];
      }

      list.forEach(function (key) {
        style[key] = _this6.css(key);
      });
      return style;
    }
  }, {
    key: "cssText",
    value: function cssText(value) {
      if (Object(func["isUndefined"])(value)) {
        return this.el.style.cssText;
      }

      if (value != this.el.tempCssText) {
        this.el.style.cssText = value;
        this.el.tempCssText = value;
      }

      return this;
    }
  }, {
    key: "cssArray",
    value: function cssArray(arr) {
      if (arr[0]) this.el.style[arr[0]] = arr[1];
      if (arr[2]) this.el.style[arr[2]] = arr[3];
      if (arr[4]) this.el.style[arr[4]] = arr[5];
      if (arr[6]) this.el.style[arr[6]] = arr[7];
      if (arr[8]) this.el.style[arr[8]] = arr[9];
      return this;
    }
  }, {
    key: "cssFloat",
    value: function cssFloat(key) {
      return parseFloat(this.css(key));
    }
  }, {
    key: "cssInt",
    value: function cssInt(key) {
      return parseInt(this.css(key));
    }
  }, {
    key: "px",
    value: function px(key, value) {
      return this.css(key, Length["a" /* Length */].px(value));
    }
  }, {
    key: "rect",
    value: function rect() {
      return this.el.getBoundingClientRect();
    }
  }, {
    key: "bbox",
    value: function bbox() {
      return this.el.getBBox();
    }
  }, {
    key: "isSVG",
    value: function isSVG() {
      return this.el.tagName.toUpperCase() === 'SVG';
    }
  }, {
    key: "offsetRect",
    value: function offsetRect() {
      if (this.isSVG()) {
        var parentBox = this.parent().rect();
        var box = this.rect();
        return {
          x: box.x - parentBox.x,
          y: box.y - parentBox.y,
          top: box.x - parentBox.x,
          left: box.y - parentBox.y,
          width: box.width,
          height: box.height
        };
      }

      return {
        x: this.el.offsetLeft,
        y: this.el.offsetTop,
        top: this.el.offsetTop,
        left: this.el.offsetLeft,
        width: this.el.offsetWidth,
        height: this.el.offsetHeight
      };
    }
  }, {
    key: "offset",
    value: function offset() {
      var rect = this.rect();
      var scrollTop = Dom.getScrollTop();
      var scrollLeft = Dom.getScrollLeft();
      return {
        top: rect.top + scrollTop,
        left: rect.left + scrollLeft
      };
    }
  }, {
    key: "offsetLeft",
    value: function offsetLeft() {
      return this.offset().left;
    }
  }, {
    key: "offsetTop",
    value: function offsetTop() {
      return this.offset().top;
    }
  }, {
    key: "position",
    value: function position() {
      if (this.el.style.top) {
        return {
          top: parseFloat(this.css("top")),
          left: parseFloat(this.css("left"))
        };
      } else {
        return this.rect();
      }
    }
  }, {
    key: "size",
    value: function size() {
      return [this.width(), this.height()];
    }
  }, {
    key: "width",
    value: function width() {
      return this.el.offsetWidth || this.rect().width;
    }
  }, {
    key: "contentWidth",
    value: function contentWidth() {
      return this.width() - this.cssFloat("padding-left") - this.cssFloat("padding-right");
    }
  }, {
    key: "height",
    value: function height() {
      return this.el.offsetHeight || this.rect().height;
    }
  }, {
    key: "contentHeight",
    value: function contentHeight() {
      return this.height() - this.cssFloat("padding-top") - this.cssFloat("padding-bottom");
    }
  }, {
    key: "val",
    value: function val(value) {
      if (Object(func["isUndefined"])(value)) {
        return this.el.value;
      } else if (Object(func["isNotUndefined"])(value)) {
        var tempValue = value;

        if (value instanceof Dom) {
          tempValue = value.val();
        }

        this.el.value = tempValue;
      }

      return this;
    }
  }, {
    key: "matches",
    value: function matches(selector) {
      if (this.el) {
        if (!this.el.matches) return null;

        if (this.el.matches(selector)) {
          return this;
        }

        return this.parent().matches(selector);
      }

      return null;
    }
  }, {
    key: "value",
    get: function get() {
      return this.el.value;
    }
  }, {
    key: "naturalWidth",
    get: function get() {
      return this.el.naturalWidth;
    }
  }, {
    key: "naturalHeight",
    get: function get() {
      return this.el.naturalHeight;
    }
  }, {
    key: "files",
    get: function get() {
      return this.el.files ? toConsumableArray_default()(this.el.files) : [];
    }
  }, {
    key: "realVal",
    value: function realVal() {
      switch (this.el.nodeType) {
        case "INPUT":
          var type = this.attr("type");

          if (type == "checkbox" || type == "radio") {
            return this.checked();
          }

        case "SELECT":
        case "TEXTAREA":
          return this.el.value;
      }

      return "";
    }
  }, {
    key: "int",
    value: function int() {
      return parseInt(this.val(), 10);
    }
  }, {
    key: "float",
    value: function float() {
      return parseFloat(this.val());
    }
  }, {
    key: "show",
    value: function show() {
      var displayType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "block";
      this.el.style.display = displayType != "none" ? displayType : "block";
      return this;
    }
  }, {
    key: "hide",
    value: function hide() {
      this.el.style.display = 'none';
      return this;
    }
  }, {
    key: "isHide",
    value: function isHide() {
      return this.el.style.display === "none";
    }
  }, {
    key: "isShow",
    value: function isShow() {
      return !this.isHide();
    }
  }, {
    key: "toggle",
    value: function toggle(isForce) {
      var currentHide = this.isHide();

      if (arguments.length == 1) {
        if (isForce) {
          return this.show();
        } else {
          return this.hide();
        }
      } else {
        if (currentHide) {
          return this.show();
        } else {
          return this.hide();
        }
      }
    }
  }, {
    key: "totalLength",
    get: function get() {
      return this.el.getTotalLength();
    }
  }, {
    key: "scrollIntoView",
    value: function scrollIntoView() {
      this.el.scrollIntoView();
    }
  }, {
    key: "addScrollLeft",
    value: function addScrollLeft(dt) {
      this.el.scrollLeft += dt;
      return this;
    }
  }, {
    key: "addScrollTop",
    value: function addScrollTop(dt) {
      this.el.scrollTop += dt;
      return this;
    }
  }, {
    key: "setScrollTop",
    value: function setScrollTop(scrollTop) {
      this.el.scrollTop = scrollTop;
      return this;
    }
  }, {
    key: "setScrollLeft",
    value: function setScrollLeft(scrollLeft) {
      this.el.scrollLeft = scrollLeft;
      return this;
    }
  }, {
    key: "scrollTop",
    value: function scrollTop() {
      if (this.el === document.body) {
        return Dom.getScrollTop();
      }

      return this.el.scrollTop;
    }
  }, {
    key: "scrollLeft",
    value: function scrollLeft() {
      if (this.el === document.body) {
        return Dom.getScrollLeft();
      }

      return this.el.scrollLeft;
    }
  }, {
    key: "scrollHeight",
    value: function scrollHeight() {
      return this.el.scrollHeight;
    }
  }, {
    key: "scrollWidth",
    value: function scrollWidth() {
      return this.el.scrollWidth;
    }
  }, {
    key: "on",
    value: function on(eventName, callback, opt1, opt2) {
      this.el.addEventListener(eventName, callback, opt1, opt2);
      return this;
    }
  }, {
    key: "off",
    value: function off(eventName, callback) {
      this.el.removeEventListener(eventName, callback);
      return this;
    }
  }, {
    key: "getElement",
    value: function getElement() {
      return this.el;
    }
  }, {
    key: "createChild",
    value: function createChild(tag) {
      var className = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var css = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      var $element = Dom.create(tag, className, attrs);
      $element.css(css);
      this.append($element);
      return $element;
    }
  }, {
    key: "firstChild",
    get: function get() {
      return Dom.create(this.el.firstElementChild);
    }
  }, {
    key: "children",
    value: function children() {
      var element = this.el.firstElementChild;

      if (!element) {
        return [];
      }

      var results = [];

      do {
        results.push(Dom.create(element));
        element = element.nextElementSibling;
      } while (element);

      return results;
    }
  }, {
    key: "childLength",
    value: function childLength() {
      return this.el.children.length;
    }
  }, {
    key: "replace",
    value: function replace(newElement) {
      if (this.el.parentNode) {
        this.el.parentNode.replaceChild(newElement.el || newElement, this.el);
      }

      return this;
    }
  }, {
    key: "replaceChild",
    value: function replaceChild(oldElement, newElement) {
      this.el.replaceChild(newElement.el || newElement, oldElement.el || oldElement);
      return this;
    }
  }, {
    key: "checked",
    value: function checked() {
      var isChecked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (arguments.length == 0) {
        return !!this.el.checked;
      }

      this.el.checked = !!isChecked;
      return this;
    }
  }, {
    key: "click",
    value: function click() {
      this.el.click();
      return this;
    }
  }, {
    key: "focus",
    value: function focus() {
      this.el.focus();
      return this;
    }
  }, {
    key: "select",
    value: function select() {
      // contenteditable 의 경우 selection api 를 사용해서 select() 를 수행한다.
      if (this.attr('contenteditable') === 'true') {
        var range = document.createRange();
        range.selectNodeContents(this.el);
        var sel = window.getSelection();
        sel.removeAllRanges();
        sel.addRange(range);
      } else {
        this.el.select();
      }

      return this;
    }
  }, {
    key: "blur",
    value: function blur() {
      this.el.blur();
      return this;
    } // canvas functions

  }, {
    key: "context",
    value: function context() {
      var contextType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "2d";

      if (!this._initContext) {
        this._initContext = this.el.getContext(contextType);
      }

      return this._initContext;
    }
  }, {
    key: "resize",
    value: function resize(_ref2) {
      var width = _ref2.width,
          height = _ref2.height;
      // support hi-dpi for retina display
      this._initContext = null;
      var ctx = this.context();
      var scale = window.devicePixelRatio || 1;
      this.px("width", +width);
      this.px("height", +height);
      this.el.width = width * scale;
      this.el.height = height * scale;
      ctx.scale(scale, scale);
    }
  }, {
    key: "toDataURL",
    value: function toDataURL() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';
      var quality = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.el.toDataURL(type, quality);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.context().clearRect(0, 0, this.el.width, this.el.height);
    }
  }, {
    key: "update",
    value: function update(callback) {
      this.clear();
      callback.call(this, this);
    }
  }, {
    key: "drawImage",
    value: function drawImage(img) {
      var dx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var dy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var ctx = this.context();
      var scale = window.devicePixelRatio || 1;
      ctx.drawImage(img, dx, dy, img.width, img.height, 0, 0, this.el.width / scale, this.el.height / scale);
    }
  }, {
    key: "drawOption",
    value: function drawOption() {
      var option = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var ctx = this.context();
      Object.assign(ctx, option);
    }
  }, {
    key: "drawLine",
    value: function drawLine(x1, y1, x2, y2) {
      var ctx = this.context();
      ctx.beginPath();
      ctx.moveTo(x1, y1);
      ctx.lineTo(x2, y2);
      ctx.stroke();
      ctx.closePath();
    }
  }, {
    key: "drawPath",
    value: function drawPath() {
      var ctx = this.context();
      ctx.beginPath();

      for (var _len5 = arguments.length, path = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        path[_key5] = arguments[_key5];
      }

      path.forEach(function (p, index) {
        if (index == 0) {
          ctx.moveTo(p[0], p[1]);
        } else {
          ctx.lineTo(p[0], p[1]);
        }
      });
      ctx.stroke();
      ctx.fill();
      ctx.closePath();
    }
  }, {
    key: "drawCircle",
    value: function drawCircle(cx, cy, r) {
      var ctx = this.context();
      ctx.beginPath();
      ctx.arc(cx, cy, r, 0, 2 * Math.PI);
      ctx.stroke();
      ctx.fill();
    }
  }, {
    key: "drawText",
    value: function drawText(x, y, text) {
      this.context().fillText(text, x, y);
    }
    /* utility */

  }, {
    key: "fullscreen",
    value: function fullscreen() {
      var element = this.el;

      if (element.requestFullscreen) {
        element.requestFullscreen();
      } else if (element.wekitRequestFullscreen) {
        element.wekitRequestFullscreen();
      }
    }
  }, {
    key: "toggleFullscreen",
    value: function toggleFullscreen() {
      if (this.el === document.fullscreenElement) {
        document.exitFullscreen();
      } else {
        this.fullscreen();
      }
    }
  }], [{
    key: "create",
    value: function create(tag, className, attr) {
      return new Dom(tag, className, attr);
    }
  }, {
    key: "createByHTML",
    value: function createByHTML(htmlString) {
      var div = Dom.create('div');
      var list = div.html(htmlString).children();

      if (list.length) {
        return Dom.create(list[0].el);
      }

      return null;
    }
  }, {
    key: "getScrollTop",
    value: function getScrollTop() {
      return Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);
    }
  }, {
    key: "getScrollLeft",
    value: function getScrollLeft() {
      return Math.max(window.pageXOffset, document.documentElement.scrollLeft, document.body.scrollLeft);
    }
  }, {
    key: "parse",
    value: function parse(html) {
      var parser = DOMParser();
      return parser.parseFromString(html, "text/htmll");
    }
  }, {
    key: "body",
    value: function body() {
      return Dom.create(document.body);
    }
  }]);

  return Dom;
}();



/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseProperty; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var _property_editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(66);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BaseProperty = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(BaseProperty, _EditorElement);

  var _super = _createSuper(BaseProperty);

  function BaseProperty() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BaseProperty);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BaseProperty, [{
    key: "onToggleShow",
    value: function onToggleShow() {}
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='property ".concat(this.isHideHeader() ? 'no-title' : '', " ").concat(this.getClassName(), " ").concat(this.isFirstShow() ? 'show' : '', "'>\n            ").concat(this.isHideHeader() ? '' :
        /*html*/
        "\n            <div class='property-title ".concat(this.getTitleClassName(), "' ref=\"$title\">\n                <label class=\"").concat(this.hasKeyframe() ? 'has-keyframe' : '', "\"> \n                  ").concat(this.hasKeyframe() ?
        /*html*/
        "\n                      <span class='add-timeline-property' data-property='".concat(this.getKeyframeProperty(), "'></span>\n                    ") : '', " \n                  <span ref='$propertyTitle'>").concat(this.getTitle(), "</span>\n                </label>\n                <span class=\"tools\">").concat(this.getTools(), "</span>\n            </div>"), "\n            <div class='property-body ").concat(this.getBodyClassName(), "'>").concat(this.getBody(), "</div>\n            ").concat(this.getFooter() ? "<div class='property-footer'>".concat(this.getFooter(), "</div>") : '', "\n        </div>\n        ")
      );
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      this.refs.$propertyTitle.text(title);
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return false;
    }
  }, {
    key: "isHideHeader",
    value: function isHideHeader() {
      return false;
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return true;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return '';
    }
  }, {
    key: "getTitleClassName",
    value: function getTitleClassName() {
      return '';
    }
  }, {
    key: "getBodyClassName",
    value: function getBodyClassName() {
      return '';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return '';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return '';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return '';
    }
  }, {
    key: "getFooter",
    value: function getFooter() {
      return '';
    } // [CLICK("$title label")](e) {
    //   var $dom = e.$dt.parent();
    //   var isAddProperty = Dom.create(e.target).hasClass('add-timeline-property')
    //   if ($dom.hasClass("property-title") && isAddProperty === false) {
    //     this.$el.toggleClass("show");
    //     this.onToggleShow();
    //   }
    // }
    // [CLICK("$title .icon")](e) {
    //   var $dom = e.$dt.parent();
    //   if ($dom.hasClass("property-title")) {
    //     this.$el.toggleClass("show");
    //     this.onToggleShow();
    //   }
    // }

  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])('$el .property-body .add-timeline-property') + el_base_Event__WEBPACK_IMPORTED_MODULE_5__["PREVENT"] + el_base_Event__WEBPACK_IMPORTED_MODULE_5__["STOP"],
    value: function value(e) {
      var property = e.$dt.attr('data-property');
      var editor = e.$dt.attr('data-editor');
      this.emit('addTimelineCurrentProperty', {
        property: property,
        editor: editor
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])('$el .property-title .add-timeline-property') + el_base_Event__WEBPACK_IMPORTED_MODULE_5__["PREVENT"] + el_base_Event__WEBPACK_IMPORTED_MODULE_5__["STOP"],
    value: function value(e) {
      var property = e.$dt.attr('data-property');
      var editor = e.$dt.attr('data-editor');
      this.emit('addTimelineCurrentProperty', {
        property: property,
        editor: editor
      });
    }
  }, {
    key: "isPropertyShow",
    value: function isPropertyShow() {
      return this.$el.hasClass("show");
    }
  }, {
    key: "toggle",
    value: function toggle(isShow) {
      this.$el.toggle(isShow);
    }
  }, {
    key: "hide",
    value: function hide() {
      this.$el.hide();
    }
  }, {
    key: "show",
    value: function show() {
      this.$el.show();
    }
  }, {
    key: "onShowTitle",
    value: function onShowTitle(isShow) {}
  }, {
    key: "refreshShowIsNot",
    value: function refreshShowIsNot() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var current = this.$selection.current;

      if (current) {
        if (type.includes(current.itemType)) {
          this.hide();
        } else {
          this.show();
          if (isRefresh) this.refresh();
        }
      } else {// this.show();
      }
    }
  }, {
    key: "refreshShow",
    value: function refreshShow(type) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var current = this.$selection.current;

      if (current) {
        if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__["isFunction"])(type) && type()) {
          this.show();
          if (isRefresh) this.refresh();
        } else {
          if (!Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__["isFunction"])(type) && type.includes(current.itemType)) {
            this.show();
            if (isRefresh) this.refresh();
          } else {
            this.hide();
          }
        }
      } else {
        this.hide();
      }
    }
  }, {
    key: "startInputEditing",
    value: function startInputEditing(input) {
      if (!input) return;
      input.attr('contenteditable', true);
      input.css({
        'background-color': 'white',
        'outline': '1px auto black',
        'color': 'black'
      });
      input.focus();
    }
  }, {
    key: "endInputEditing",
    value: function endInputEditing(input, callback) {
      if (!input) return;
      input.attr('contenteditable', false);
      input.css({
        'background-color': null,
        'outline': null,
        'color': null
      });
      var index = input.attr('data-index');
      callback && callback(index, input.text().trim());
      input.blur();
    }
  }]);

  return BaseProperty;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_8__[/* EditorElement */ "a"]);



/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, "getColorIndexString", function() { return /* binding */ getColorIndexString; });
__webpack_require__.d(__webpack_exports__, "isColor", function() { return /* binding */ isColor; });
__webpack_require__.d(__webpack_exports__, "matches", function() { return /* binding */ parser_matches; });
__webpack_require__.d(__webpack_exports__, "convertMatches", function() { return /* binding */ convertMatches; });
__webpack_require__.d(__webpack_exports__, "convertMatchesArray", function() { return /* binding */ convertMatchesArray; });
__webpack_require__.d(__webpack_exports__, "reverseMatches", function() { return /* binding */ reverseMatches; });
__webpack_require__.d(__webpack_exports__, "trim", function() { return /* binding */ trim; });
__webpack_require__.d(__webpack_exports__, "parse", function() { return /* binding */ parse; });
__webpack_require__.d(__webpack_exports__, "parseGradient", function() { return /* binding */ parseGradient; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./src/el/base/ColorNames.js
var color_names = {
  aliceblue: "rgb(240, 248, 255)",
  antiquewhite: "rgb(250, 235, 215)",
  aqua: "rgb(0, 255, 255)",
  aquamarine: "rgb(127, 255, 212)",
  azure: "rgb(240, 255, 255)",
  beige: "rgb(245, 245, 220)",
  bisque: "rgb(255, 228, 196)",
  black: "rgb(0, 0, 0)",
  blanchedalmond: "rgb(255, 235, 205)",
  blue: "rgb(0, 0, 255)",
  blueviolet: "rgb(138, 43, 226)",
  brown: "rgb(165, 42, 42)",
  burlywood: "rgb(222, 184, 135)",
  cadetblue: "rgb(95, 158, 160)",
  chartreuse: "rgb(127, 255, 0)",
  chocolate: "rgb(210, 105, 30)",
  coral: "rgb(255, 127, 80)",
  cornflowerblue: "rgb(100, 149, 237)",
  cornsilk: "rgb(255, 248, 220)",
  crimson: "rgb(237, 20, 61)",
  cyan: "rgb(0, 255, 255)",
  darkblue: "rgb(0, 0, 139)",
  darkcyan: "rgb(0, 139, 139)",
  darkgoldenrod: "rgb(184, 134, 11)",
  darkgray: "rgb(169, 169, 169)",
  darkgrey: "rgb(169, 169, 169)",
  darkgreen: "rgb(0, 100, 0)",
  darkkhaki: "rgb(189, 183, 107)",
  darkmagenta: "rgb(139, 0, 139)",
  darkolivegreen: "rgb(85, 107, 47)",
  darkorange: "rgb(255, 140, 0)",
  darkorchid: "rgb(153, 50, 204)",
  darkred: "rgb(139, 0, 0)",
  darksalmon: "rgb(233, 150, 122)",
  darkseagreen: "rgb(143, 188, 143)",
  darkslateblue: "rgb(72, 61, 139)",
  darkslategray: "rgb(47, 79, 79)",
  darkslategrey: "rgb(47, 79, 79)",
  darkturquoise: "rgb(0, 206, 209)",
  darkviolet: "rgb(148, 0, 211)",
  deeppink: "rgb(255, 20, 147)",
  deepskyblue: "rgb(0, 191, 255)",
  dimgray: "rgb(105, 105, 105)",
  dimgrey: "rgb(105, 105, 105)",
  dodgerblue: "rgb(30, 144, 255)",
  firebrick: "rgb(178, 34, 34)",
  floralwhite: "rgb(255, 250, 240)",
  forestgreen: "rgb(34, 139, 34)",
  fuchsia: "rgb(255, 0, 255)",
  gainsboro: "rgb(220, 220, 220)",
  ghostwhite: "rgb(248, 248, 255)",
  gold: "rgb(255, 215, 0)",
  goldenrod: "rgb(218, 165, 32)",
  gray: "rgb(128, 128, 128)",
  grey: "rgb(128, 128, 128)",
  green: "rgb(0, 128, 0)",
  greenyellow: "rgb(173, 255, 47)",
  honeydew: "rgb(240, 255, 240)",
  hotpink: "rgb(255, 105, 180)",
  indianred: "rgb(205, 92, 92)",
  indigo: "rgb(75, 0, 130)",
  ivory: "rgb(255, 255, 240)",
  khaki: "rgb(240, 230, 140)",
  lavender: "rgb(230, 230, 250)",
  lavenderblush: "rgb(255, 240, 245)",
  lawngreen: "rgb(124, 252, 0)",
  lemonchiffon: "rgb(255, 250, 205)",
  lightblue: "rgb(173, 216, 230)",
  lightcoral: "rgb(240, 128, 128)",
  lightcyan: "rgb(224, 255, 255)",
  lightgoldenrodyellow: "rgb(250, 250, 210)",
  lightgreen: "rgb(144, 238, 144)",
  lightgray: "rgb(211, 211, 211)",
  lightgrey: "rgb(211, 211, 211)",
  lightpink: "rgb(255, 182, 193)",
  lightsalmon: "rgb(255, 160, 122)",
  lightseagreen: "rgb(32, 178, 170)",
  lightskyblue: "rgb(135, 206, 250)",
  lightslategray: "rgb(119, 136, 153)",
  lightslategrey: "rgb(119, 136, 153)",
  lightsteelblue: "rgb(176, 196, 222)",
  lightyellow: "rgb(255, 255, 224)",
  lime: "rgb(0, 255, 0)",
  limegreen: "rgb(50, 205, 50)",
  linen: "rgb(250, 240, 230)",
  magenta: "rgb(255, 0, 255)",
  maroon: "rgb(128, 0, 0)",
  mediumaquamarine: "rgb(102, 205, 170)",
  mediumblue: "rgb(0, 0, 205)",
  mediumorchid: "rgb(186, 85, 211)",
  mediumpurple: "rgb(147, 112, 219)",
  mediumseagreen: "rgb(60, 179, 113)",
  mediumslateblue: "rgb(123, 104, 238)",
  mediumspringgreen: "rgb(0, 250, 154)",
  mediumturquoise: "rgb(72, 209, 204)",
  mediumvioletred: "rgb(199, 21, 133)",
  midnightblue: "rgb(25, 25, 112)",
  mintcream: "rgb(245, 255, 250)",
  mistyrose: "rgb(255, 228, 225)",
  moccasin: "rgb(255, 228, 181)",
  navajowhite: "rgb(255, 222, 173)",
  navy: "rgb(0, 0, 128)",
  oldlace: "rgb(253, 245, 230)",
  olive: "rgb(128, 128, 0)",
  olivedrab: "rgb(107, 142, 35)",
  orange: "rgb(255, 165, 0)",
  orangered: "rgb(255, 69, 0)",
  orchid: "rgb(218, 112, 214)",
  palegoldenrod: "rgb(238, 232, 170)",
  palegreen: "rgb(152, 251, 152)",
  paleturquoise: "rgb(175, 238, 238)",
  palevioletred: "rgb(219, 112, 147)",
  papayawhip: "rgb(255, 239, 213)",
  peachpuff: "rgb(255, 218, 185)",
  peru: "rgb(205, 133, 63)",
  pink: "rgb(255, 192, 203)",
  plum: "rgb(221, 160, 221)",
  powderblue: "rgb(176, 224, 230)",
  purple: "rgb(128, 0, 128)",
  rebeccapurple: "rgb(102, 51, 153)",
  red: "rgb(255, 0, 0)",
  rosybrown: "rgb(188, 143, 143)",
  royalblue: "rgb(65, 105, 225)",
  saddlebrown: "rgb(139, 69, 19)",
  salmon: "rgb(250, 128, 114)",
  sandybrown: "rgb(244, 164, 96)",
  seagreen: "rgb(46, 139, 87)",
  seashell: "rgb(255, 245, 238)",
  sienna: "rgb(160, 82, 45)",
  silver: "rgb(192, 192, 192)",
  skyblue: "rgb(135, 206, 235)",
  slateblue: "rgb(106, 90, 205)",
  slategray: "rgb(112, 128, 144)",
  slategrey: "rgb(112, 128, 144)",
  snow: "rgb(255, 250, 250)",
  springgreen: "rgb(0, 255, 127)",
  steelblue: "rgb(70, 130, 180)",
  tan: "rgb(210, 180, 140)",
  teal: "rgb(0, 128, 128)",
  thistle: "rgb(216, 191, 216)",
  tomato: "rgb(255, 99, 71)",
  turquoise: "rgb(64, 224, 208)",
  violet: "rgb(238, 130, 238)",
  wheat: "rgb(245, 222, 179)",
  white: "rgb(255, 255, 255)",
  whitesmoke: "rgb(245, 245, 245)",
  yellow: "rgb(255, 255, 0)",
  yellowgreen: "rgb(154, 205, 50)",
  transparent: "rgba(0, 0, 0, 0)",
  currentColor: 'currentColor'
};

function isColorName(name) {
  return !!color_names[name];
}

function getColorByName(name) {
  return color_names[name];
}

/* harmony default export */ var ColorNames = ({
  isColorName: isColorName,
  getColorByName: getColorByName
});
// EXTERNAL MODULE: ./src/el/base/functions/fromRGB.js
var fromRGB = __webpack_require__(49);

// EXTERNAL MODULE: ./src/el/base/functions/fromHSL.js
var fromHSL = __webpack_require__(90);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/base/functions/parser.js



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





var color_regexp = /(#(?:[\da-f]{3}){1,2}|#(?:[\da-f]{8})|rgb\((?:\s*\d{1,3},\s*){2}\d{1,3}\s*\)|rgba\((?:\s*\d{1,3},\s*){3}\d*\.?\d+\s*\)|hsl\(\s*\d{1,3}(?:,\s*\d{1,3}%){2}\s*\)|hsla\(\s*\d{1,3}(?:,\s*\d{1,3}%){2},\s*\d*\.?\d+\s*\)|([\w_\-]+))/gi;
function getColorIndexString(it) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '@';
  return "".concat(prefix).concat(it.startIndex).padEnd(10, '0');
}
function isColor(str) {
  var results = parser_matches(str);
  return !!results.length;
}
function parser_matches(str) {
  var matches = str.match(color_regexp);
  var result = [];

  if (!matches) {
    return result;
  }

  for (var i = 0, len = matches.length; i < len; i++) {
    if (matches[i].indexOf('#') > -1 || matches[i].indexOf('rgb') > -1 || matches[i].indexOf('hsl') > -1) {
      result.push({
        color: matches[i]
      });
    } else {
      var nameColor = ColorNames.getColorByName(matches[i]);

      if (nameColor) {
        result.push({
          color: matches[i],
          nameColor: nameColor
        });
      }
    }
  }

  var pos = {
    next: 0
  };
  result.forEach(function (item) {
    var startIndex = str.indexOf(item.color, pos.next);
    item.startIndex = startIndex;
    item.endIndex = startIndex + item.color.length;
    pos.next = item.endIndex;
  });
  return result;
}
function convertMatches(str) {
  var m = parser_matches(str);
  m.forEach(function (it) {
    str = str.replace(it.color, getColorIndexString(it));
  });
  return {
    str: str,
    matches: m
  };
}
function convertMatchesArray(str) {
  var splitStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';
  var ret = convertMatches(str);
  return ret.str.split(splitStr).map(function (it, index) {
    it = trim(it);

    if (ret.matches[index]) {
      it = it.replace(getColorIndexString(ret.matches[index]), ret.matches[index].color);
    }

    return it;
  });
}
function reverseMatches(str, matches) {
  matches.forEach(function (it) {
    str = str.replace(getColorIndexString(it), it.color);
  });
  return str;
}
var REG_TRIM = /^\s+|\s+$/g;
function trim(str) {
  return str.replace(REG_TRIM, '');
}
/**
 * @method rgb
 *
 * parse string to rgb color
 *
 * 		color.parse("#FF0000") === { r : 255, g : 0, b : 0 }
 * 		color.parse("#FF0000FF") === { r : 255, g : 0, b : 0, a: 1 }
 *
 * 		color.parse("rgb(255, 0, 0)") == { r : 255, g : 0, b :0 }
 * 		color.parse(0xff0000) == { r : 255, g : 0, b : 0 }
 * 		color.parse(0xff000000) == { r : 255, g : 0, b : 0, a: 0 }
 *
 * @param {String} str color string
 * @returns {Object}  rgb object
 */

function parse(str) {
  if (Object(func["isString"])(str)) {
    if (ColorNames.isColorName(str)) {
      str = ColorNames.getColorByName(str);
    }

    if (str.indexOf("rgb(") > -1) {
      var arr = str.replace("rgb(", "").replace(")", "").split(",");

      for (var i = 0, len = arr.length; i < len; i++) {
        arr[i] = parseInt(trim(arr[i]), 10);
      }

      var obj = {
        type: 'rgb',
        r: arr[0],
        g: arr[1],
        b: arr[2],
        a: 1
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromRGB["RGBtoHSL"])(obj));
      return obj;
    } else if (str.indexOf("rgba(") > -1) {
      var arr = str.replace("rgba(", "").replace(")", "").split(",");

      for (var i = 0, len = arr.length; i < len; i++) {
        if (len - 1 == i) {
          arr[i] = parseFloat(trim(arr[i]));
        } else {
          arr[i] = parseInt(trim(arr[i]), 10);
        }
      }

      var obj = {
        type: 'rgb',
        r: arr[0],
        g: arr[1],
        b: arr[2],
        a: arr[3]
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromRGB["RGBtoHSL"])(obj));
      return obj;
    } else if (str.indexOf("hsl(") > -1) {
      var arr = str.replace("hsl(", "").replace(")", "").split(",");

      for (var i = 0, len = arr.length; i < len; i++) {
        arr[i] = parseFloat(trim(arr[i]));
      }

      var obj = {
        type: 'hsl',
        h: arr[0],
        s: arr[1],
        l: arr[2],
        a: 1
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromHSL["HSLtoRGB"])(obj));
      return obj;
    } else if (str.indexOf("hsla(") > -1) {
      var arr = str.replace("hsla(", "").replace(")", "").split(",");

      for (var i = 0, len = arr.length; i < len; i++) {
        if (len - 1 == i) {
          arr[i] = parseFloat(trim(arr[i]));
        } else {
          arr[i] = parseInt(trim(arr[i]), 10);
        }
      }

      var obj = {
        type: 'hsl',
        h: arr[0],
        s: arr[1],
        l: arr[2],
        a: arr[3]
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromHSL["HSLtoRGB"])(obj));
      return obj;
    } else if (str.indexOf("#") == 0) {
      str = str.replace("#", "");
      var arr = [];
      var a = 1;

      if (str.length == 3) {
        for (var i = 0, len = str.length; i < len; i++) {
          var _char = str.substr(i, 1);

          arr.push(parseInt(_char + _char, 16));
        }
      } else if (str.length === 8) {
        for (var i = 0, len = str.length; i < len; i += 2) {
          arr.push(parseInt(str.substr(i, 2), 16));
        }

        a = arr.pop() / 255;
      } else {
        for (var i = 0, len = str.length; i < len; i += 2) {
          arr.push(parseInt(str.substr(i, 2), 16));
        }
      }

      var obj = {
        type: 'hex',
        r: arr[0],
        g: arr[1],
        b: arr[2],
        a: a
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromRGB["RGBtoHSL"])(obj));
      return obj;
    }
  } else if (Object(func["isNumber"])(str)) {
    if (0x000000 <= str && str <= 0xffffff) {
      var r = (str & 0xff0000) >> 16;
      var g = (str & 0x00ff00) >> 8;
      var b = (str & 0x0000ff) >> 0;
      var obj = {
        type: 'hex',
        r: r,
        g: g,
        b: b,
        a: 1
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromRGB["RGBtoHSL"])(obj));
      return obj;
    } else if (0x00000000 <= str && str <= 0xffffffff) {
      var _r = (str & 0xff000000) >> 24;

      var _g = (str & 0x00ff0000) >> 16;

      var _b = (str & 0x0000ff00) >> 8;

      var _a = (str & 0x000000ff) / 255;

      var obj = {
        type: 'hex',
        r: _r,
        g: _g,
        b: _b,
        a: _a
      };
      obj = _objectSpread(_objectSpread({}, obj), Object(fromRGB["RGBtoHSL"])(obj));
      return obj;
    }
  }

  return str;
}
function parseGradient(colors) {
  if (Object(func["isString"])(colors)) {
    colors = convertMatchesArray(colors);
  }

  colors = colors.map(function (it) {
    if (Object(func["isString"])(it)) {
      var ret = convertMatches(it);
      var arr = trim(ret.str).split(' ');

      if (arr[1]) {
        if (arr[1].indexOf('%') > -1) {
          arr[1] = parseFloat(arr[1].replace(/%/, '')) / 100;
        } else {
          arr[1] = parseFloat(arr[1]);
        }
      } else {
        arr[1] = '*';
      }

      arr[0] = reverseMatches(arr[0], ret.matches);
      return arr;
    } else if (Array.isArray(it)) {
      if (!it[1]) {
        it[1] = '*';
      } else if (Object(func["isString"])(it[1])) {
        if (it[1].indexOf('%') > -1) {
          it[1] = parseFloat(it[1].replace(/%/, '')) / 100;
        } else {
          it[1] = +it[1];
        }
      }

      return toConsumableArray_default()(it);
    }
  });
  var count = colors.filter(function (it) {
    return it[1] === '*';
  }).length;

  if (count > 0) {
    var sum = colors.filter(function (it) {
      return it[1] != '*' && it[1] != 1;
    }).map(function (it) {
      return it[1];
    }).reduce(function (total, cur) {
      return total + cur;
    }, 0);
    var dist = (1 - sum) / count;
    colors.forEach(function (it, index) {
      if (it[1] == '*' && index > 0) {
        if (colors.length - 1 == index) {// it[1] = 1 
        } else {
          it[1] = dist;
        }
      }
    });
  }

  return colors;
}

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorStep; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_items_Item__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(35);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_create__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53);
/* harmony import */ var el_base_Color__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(26);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var colorStepIds = 10000000000;

function getColorStepId() {
  return colorStepIds++;
}

var ColorStep = /*#__PURE__*/function (_Item) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(ColorStep, _Item);

  var _super = _createSuper(ColorStep);

  function ColorStep() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ColorStep);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ColorStep, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return {
        id: 'c' + getColorStepId(),
        cut: false,
        percent: 0,
        unit: "%",
        px: 0,
        em: 0,
        color: "rgba(0, 0, 0, 0)",
        prevColorStep: null
      };
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ColorStep.prototype), "toCloneObject", this).call(this)), this.attrs('cut', 'percent', 'unit', 'px', 'em', 'color'));
    }
  }, {
    key: "on",
    value: function on() {
      this.json.cut = true;
    }
  }, {
    key: "off",
    value: function off() {
      this.json.cut = false;
    }
  }, {
    key: "toggle",
    value: function toggle() {
      this.json.cut = !this.json.cut;
    }
  }, {
    key: "getUnit",
    value: function getUnit() {
      return this.json.unit == "%" ? "percent" : this.json.unit;
    }
  }, {
    key: "add",
    value: function add(num) {
      var unit = this.getUnit();
      this.json[unit] += +num;
      return this;
    }
  }, {
    key: "sub",
    value: function sub(num) {
      var unit = this.getUnit();
      this.json[unit] -= +num;
      return this;
    }
  }, {
    key: "mul",
    value: function mul(num) {
      var unit = this.getUnit();
      this.json[unit] *= +num;
      return this;
    }
  }, {
    key: "div",
    value: function div(num) {
      var unit = this.getUnit();
      this.json[unit] /= +num;
      return this;
    }
  }, {
    key: "mod",
    value: function mod(num) {
      var unit = this.getUnit();
      this.json[unit] %= +num;
      return this;
    }
  }, {
    key: "isPx",
    get: function get() {
      return this.json.unit == "px";
    }
  }, {
    key: "isPercent",
    get: function get() {
      return this.json.unit == "%" || this.json.unit === "percent";
    }
  }, {
    key: "isEm",
    get: function get() {
      return this.json.unit == "em";
    }
    /**
     * convert Length instance
     * @return {Length}
     */

  }, {
    key: "toLength",
    value: function toLength(maxValue) {
      // TODO: apply maxValue
      return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.json);
    }
  }, {
    key: "getPrevLength",
    value: function getPrevLength() {
      if (!this.json.prevColorStep) return '';
      return this.json.prevColorStep.toLength();
    }
    /**
     * get color string
     *
     * return {string}
     */

  }, {
    key: "toString",
    value: function toString() {
      var prev = this.json.cut ? this.getPrevLength() : '';
      var color = this.json.color || 'transparent';
      return "".concat(color, " ").concat(prev, " ").concat(this.toLength());
    }
  }, {
    key: "reset",
    value: function reset(json) {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ColorStep.prototype), "reset", this).call(this, json);

      if (this.parent) {
        this.parent.sortColorStep();
      }
    }
  }, {
    key: "setValue",
    value: function setValue(percent, maxValue) {
      if (this.isPx) {
        this.reset({
          px: maxValue * percent / 100
        });
      } else if (this.isPercent) {
        this.reset({
          percent: percent
        });
      } else if (this.isEm) {
        this.reset({
          em: maxValue * percent / 100 / 16
        });
      }
    }
  }], [{
    key: "parse",
    value: function parse(colorStepString) {
      var colorsteps = [];
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["convertMatches"])(colorStepString);
      var arr = results.str.split(' ').filter(function (it) {
        return it.trim();
      });
      var colorIndex = +arr[0].replace("@", "");
      var color = results.matches[colorIndex].color;

      if (arr.length === 1) {
        colorsteps.push(new ColorStep({
          color: color,
          unit: "%",
          percent: 0,
          hasNotUnit: true
        }));
      } else if (arr.length === 2) {
        var len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(arr[1]);
        var data = {
          unit: len.unit
        };

        if (len.isPercent()) {
          data.percent = len.value;
        } else if (len.isPx()) {
          data.px = len.value;
        } else if (len.isEm()) {
          data.em = len.value;
        }

        colorsteps.push(new ColorStep(_objectSpread({
          color: color
        }, data)));
      } else if (arr.length === 3) {
        // 이전 객체와의 값이 지정됐을 때? 
        // cut 속성만 줄까? 
        var _len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(arr[2]);

        var _data = {
          unit: _len.unit
        };

        if (_len.isPercent()) {
          _data.percent = _len.value;
        } else if (_len.isPx()) {
          _data.px = _len.value;
        } else if (_len.isEm()) {
          _data.em = _len.value;
        }

        colorsteps.push(new ColorStep(_objectSpread({
          color: color,
          cut: true
        }, _data)));
      }

      return colorsteps;
    }
  }, {
    key: "createColorStep",
    value: function createColorStep() {
      var maxCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
      var maxValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
      var unitType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '%';
      var colorStepCount = Object(el_base_functions_create__WEBPACK_IMPORTED_MODULE_11__["randomNumber"])(2, maxCount);
      var unitValue = maxValue / colorStepCount;
      var colorsteps = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["repeat"])(colorStepCount).map(function (_, index) {
        return "".concat(el_base_Color__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].random(), " ").concat(index * unitValue).concat(unitType);
      }).join(',');
      return colorsteps;
    }
  }, {
    key: "createRepeatColorStep",
    value: function createRepeatColorStep() {
      var maxCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;
      var unitValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].px(1);
      var colorStepCount = Object(el_base_functions_create__WEBPACK_IMPORTED_MODULE_11__["randomNumber"])(2, maxCount);
      var colorsteps = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["repeat"])(colorStepCount).map(function (_, index) {
        return "".concat(el_base_Color__WEBPACK_IMPORTED_MODULE_12__[/* default */ "a"].random(), " ").concat(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(unitValue).mul(index + 1));
      }).join(',');
      return colorsteps;
    }
  }]);

  return ColorStep;
}(el_editor_items_Item__WEBPACK_IMPORTED_MODULE_7__[/* Item */ "a"]);

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return makeInterpolateNumber; });
function makeInterpolateNumber(layer, property, startNumber, endNumber) {
  var unit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  return function (rate, t) {
    var result = 0;

    if (t === 0) {
      result = startNumber;
    } else if (t === 1) {
      result = endNumber;
    } else {
      result = startNumber + (endNumber - startNumber) * rate;
    }

    if (unit) {
      return result + unit;
    }

    return result;
  };
}

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export predefinedBezier */
/* unused harmony export bezierObj */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return bezierList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return getPredefinedCubicBezier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return formatCubicBezier; });
/* unused harmony export parseCubicBezier */
/* unused harmony export calc */
/* unused harmony export createBezier */
/* unused harmony export createBezierQuard */
/* unused harmony export createBezierLine */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return getCurveDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return getQuardDist; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return recoverBezier; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return recoverBezierQuard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return recoverBezierLine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createBezierForPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getBezierPointOne; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return getBezierPointOneQuard; });
/* unused harmony export getBezierPointOneLine */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return getBezierPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return getBezierPointsQuard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return getBezierPointsLine; });
/* unused harmony export calculateA */
/* unused harmony export calculateB */
/* unused harmony export calculateC */
/* unused harmony export findRootForCurve */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return getCurveBBox; });
/* unused harmony export getQuardCurveBBox */
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(12);
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(15);



var predefinedBezier = {
  'linear': true,
  'ease': true,
  'ease-in': true,
  'ease-out': true,
  'ease-in-out': true
};
var bezierObj = {
  "ease": "cubic-bezier(0.25, 0.1, 0.25, 1)",
  "ease-in": "cubic-bezier(0.42, 0, 1, 1)",
  "ease-out": "cubic-bezier(0, 0, 0.58, 1)"
};
var bezierList = [[0, 0, 1, 1, 'linear', true], [0.25, 0.1, 0.25, 1, 'ease', true], [0.42, 0, 1, 1, 'ease-in', true], [0, 0, 0.58, 1, 'ease-out', true], [0.47, 0, 0.745, 0.715, 'ease-in-sine'], [0.39, 0.575, 0.565, 1, 'ease-out-sine'], [0.445, 0.05, 0.55, 0.95, 'ease-in-out-sine'], [0.55, 0.085, 0.68, 0.53, 'ease-in-quad'], [0.25, 0.46, 0.45, 0.94, 'ease-out-quad'], [0.455, 0.03, 0.515, 0.955, 'ease-in-out-quad'], [0.55, 0.055, 0.675, 0.19, 'ease-in-cubic'], [0.215, 0.61, 0.355, 1, 'ease-out-cubic'], [0.645, 0.045, 0.355, 1, 'ease-in-out-cubic'], [0.895, 0.03, 0.685, 0.22, 'ease-in-quart'], [0.165, 0.84, 0.44, 1, 'ease-out-quart'], [0.77, 0, 0.175, 1, 'ease-in-out-quart'], [0.6, 0.04, 0.98, 0.335, 'ease-in-circ'], [0.075, 0.82, 0.165, 1, 'ease-out-circ'], [0.785, 0.135, 0.15, 0.86, 'ease-in-out-circ'], [0.95, 0.05, 0.795, 0.035, 'ease-in-expo'], [0.19, 1, 0.22, 1, 'ease-out-expo'], [1, 0, 0, 1, 'ease-in-out-expo'], [0.755, 0.05, 0.855, 0.06, 'ease-in-quint'], [0.23, 1, 0.32, 1, 'ease-out-quint'], [0.86, 0, 0.07, 1, 'ease-in-out-quint'], [0.6, -0.28, 0.735, 0.045, 'ease-in-back'], [0.175, 0.885, 0.32, 1.275, 'ease-out-back'], [0.68, -0.55, 0.265, 1.55, 'ease-in-out-back']];
var getPredefinedCubicBezier = function getPredefinedCubicBezier(str) {
  return _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(parseCubicBezier(bezierObj[str] || str));
};
var formatCubicBezier = function formatCubicBezier(arr) {
  arr = arr.map(function (it) {
    return Math.floor(it * 100) / 100;
  });

  for (var i = 0, len = bezierList.length; i < len; i++) {
    var bezier = bezierList[i];

    if (bezier[0] == arr[0] && bezier[1] == arr[1] && bezier[2] == arr[2] && bezier[3] == arr[3] && bezier[5]
    /* is support css timing function name */
    ) {
        return bezier[4]; // timing function name
      }
  }

  return "cubic-bezier( ".concat(arr.filter(function (_, index) {
    return index < 4;
  }).join(','), " )");
};
var parseCubicBezier = function parseCubicBezier(str) {
  if (typeof str == 'string') {
    if (predefinedBezier[str]) {
      return bezierList.filter(function (it) {
        return it[4] === str;
      })[0];
    } else {
      var arr = str.replace("cubic-bezier", "").replace("(", "").replace(")", "").split(",");
      arr = arr.map(function (it) {
        return parseFloat(it.trim());
      });
      return arr;
    }
  }

  return str;
};
var calc = {
  B1: function B1(t) {
    return t * t * t;
  },
  B2: function B2(t) {
    return 3 * t * t * (1 - t);
  },
  B3: function B3(t) {
    return 3 * t * (1 - t) * (1 - t);
  },
  B4: function B4(t) {
    return (1 - t) * (1 - t) * (1 - t);
  }
};
var createBezier = function createBezier(C1, C2, C3, C4) {
  var points = [C1, C2, C3, C4];
  return function (t) {
    return getBezierPointOne(points, t);
  };
};
var createBezierQuard = function createBezierQuard(C1, C2, C3) {
  var points = [C1, C2, C3];
  return function (t) {
    return getBezierPointOneQuard(points, t);
  };
};
var createBezierLine = function createBezierLine(C1, C2) {
  var points = [C1, C2];
  return function (t) {
    return getBezierPointOneLine(points, t);
  };
};

var checkDist = function checkDist(obj, curve, t, x, y) {
  var p = curve(t);
  var dist = Object(_math__WEBPACK_IMPORTED_MODULE_2__["getDist"])(x, y, p.x, p.y);

  if (dist < obj.minDist) {
    obj.minDist = dist;
    obj.minT = t;
  }
};

var getCurveDist = function getCurveDist(sx, sy, cx1, cy1, cx2, cy2, ex, ey) {
  var count = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1000;
  var curve = createBezier({
    x: sx,
    y: sy
  }, {
    x: cx1,
    y: cy1
  }, {
    x: cx2,
    y: cy2
  }, {
    x: ex,
    y: ey
  });
  var total = 0;
  var startPoint = curve(0);

  for (var i = 0; i <= count; i++) {
    var t = i / count;
    var xy = curve(t);
    total += Object(_math__WEBPACK_IMPORTED_MODULE_2__["getDist"])(startPoint.x, startPoint.y, xy.x, xy.y);
    startPoint = xy;
  }

  return total;
};
var getQuardDist = function getQuardDist(sx, sy, cx1, cy1, ex, ey) {
  var count = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1000;
  var curve = createBezierQuard({
    x: sx,
    y: sy
  }, {
    x: cx1,
    y: cy1
  }, {
    x: ex,
    y: ey
  });
  var total = 0;
  var startPoint = curve(0);

  for (var i = 0; i <= count; i++) {
    var t = i / count;
    var xy = curve(t);
    total += Object(_math__WEBPACK_IMPORTED_MODULE_2__["getDist"])(startPoint.x, startPoint.y, xy.x, xy.y);
    startPoint = xy;
  }

  return total;
};

var makeCurveFunction = function makeCurveFunction(curve) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;
  var obj = {
    minDist: Infinity,
    minT: 0
  };
  return function (x, y) {
    for (var i = 0; i <= count; i++) {
      checkDist(obj, curve, i / count, x, y);
    }

    var step = 1 / (count * 2);
    var t = obj.minT;

    for (var i = 0; i < count; i++) {
      checkDist(obj, curve, t - step, x, y);
      checkDist(obj, curve, t + step, x, y);
      step /= 2;
    }

    return obj.minT;
  };
};

var recoverBezier = function recoverBezier(C1, C2, C3, C4) {
  var count = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
  return makeCurveFunction(createBezier(C1, C2, C3, C4), count);
};
var recoverBezierQuard = function recoverBezierQuard(C1, C2, C3) {
  var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 100;
  return makeCurveFunction(createBezierQuard(C1, C2, C3), count);
};
var recoverBezierLine = function recoverBezierLine(C1, C2) {
  var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;
  return makeCurveFunction(createBezierLine(C1, C2), count);
};
var createBezierForPattern = function createBezierForPattern(bezierString) {
  if (bezierString === 'linear') {
    var C1 = {
      x: 0,
      y: 0
    };
    var C2 = {
      x: 1,
      y: 1
    };
    return createBezierLine(C1, C2);
  }

  var bezierList = parseCubicBezier(bezierString);
  var C1 = {
    x: 0,
    y: 0
  };
  var C2 = {
    x: bezierList[0],
    y: bezierList[1]
  };
  var C3 = {
    x: bezierList[2],
    y: bezierList[3]
  };
  var C4 = {
    x: 1,
    y: 1
  };
  return createBezier(C1, C2, C3, C4);
};

var interpolate = function interpolate(p1, p2, t) {
  return {
    x: p1.x + (p2.x - p1.x) * t,
    y: p1.y + (p2.y - p1.y) * t
  };
};

var getBezierPointOne = function getBezierPointOne(points, t) {
  var p0 = interpolate(points[0], points[1], t);
  var p1 = interpolate(points[1], points[2], t);
  var p2 = interpolate(points[2], points[3], t);
  var p3 = interpolate(p0, p1, t);
  var p4 = interpolate(p1, p2, t);
  return interpolate(p3, p4, t);
};
var getBezierPointOneQuard = function getBezierPointOneQuard(points, t) {
  var p0 = interpolate(points[0], points[1], t);
  var p1 = interpolate(points[1], points[2], t);
  return interpolate(p0, p1, t);
};
var getBezierPointOneLine = function getBezierPointOneLine(points, t) {
  return interpolate(points[0], points[1], t);
};
var getBezierPoints = function getBezierPoints(points, t) {
  var p0 = interpolate(points[0], points[1], t);
  var p1 = interpolate(points[1], points[2], t);
  var p2 = interpolate(points[2], points[3], t);
  var p3 = interpolate(p0, p1, t);
  var p4 = interpolate(p1, p2, t);
  var p5 = interpolate(p3, p4, t);
  return {
    first: [points[0], p0, p3, p5],
    second: [p5, p4, p2, points[3]]
  };
};
var getBezierPointsQuard = function getBezierPointsQuard(points, t) {
  var p0 = interpolate(points[0], points[1], t);
  var p1 = interpolate(points[1], points[2], t);
  var p2 = interpolate(p0, p1, t);
  return {
    first: [points[0], p0, p2],
    second: [p2, p1, points[2]]
  };
};
var getBezierPointsLine = function getBezierPointsLine(points, t) {
  var p0 = interpolate(points[0], points[1], t);
  return {
    first: [points[0], p0],
    second: [p0, points[1]]
  };
};
var calculateA = function calculateA(points) {
  // a = 3 * (-p0 + 3*p1 - 3*p2 + p3)
  var a1 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].negate([], points[0]);
  var a2 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [3, 3, 3], points[1]);
  var a3 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [-3, -3, -3], points[2]);
  var a4 = points[3];
  var newP = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], a1, a2), gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], a3, a4));
  return gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [3, 3, 3], newP);
};
var calculateB = function calculateB(points) {
  // b = 6 * (p0 - 2*p1 + p2);
  var b1 = points[0];
  var b2 = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [-2, -2, -2], points[1]);
  var b3 = points[2];
  var newP = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], b1, b2), b3);
  return gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [6, 6, 6], newP);
};
var calculateC = function calculateC(points) {
  // c = 3 * (p1 - p0);
  var newP = gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].add([], points[1], gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].negate([], points[0]));
  return gl_matrix__WEBPACK_IMPORTED_MODULE_1__[/* vec3 */ "d"].multiply([], [3, 3, 3], newP);
};
var findRootForCurve = function findRootForCurve(points) {
  // Vector2 a = 3 * (-p0 + 3*p1 - 3*p2 + p3);
  // Vector2 b = 6 * (p0 - 2*p1 + p2);
  //Vector2 c = 3 * (p1 - p0);
  var a = calculateA(points);
  var b = calculateB(points);
  var c = calculateC(points);
  var roots = []; // x 

  var distX = b[0] * b[0] - 4 * a[0] * c[0];

  if (distX < 0) {// NOOP
  } else if (distX === 0) {
    var rootX = -b[0] / (2 * a[0]);

    if (0 <= rootX && rootX <= 1) {
      roots.push(rootX);
    }
  } else if (distX > 0) {
    var rootX1 = (-b[0] + Math.sqrt(distX)) / (2 * a[0]);
    var rootX2 = (-b[0] - Math.sqrt(distX)) / (2 * a[0]);

    if (0 <= rootX1 && rootX1 <= 1) {
      roots.push(rootX1);
    }

    if (0 <= rootX2 && rootX2 <= 1) {
      roots.push(rootX2);
    }
  } // y 


  var distY = b[1] * b[1] - 4 * a[1] * c[1];

  if (distY < 0) {// NOOP
  } else if (distY === 0) {
    var rootY = -b[1] / (2 * a[1]);

    if (0 <= rootY && rootY <= 1) {
      roots.push(rootY);
    }
  } else if (distY > 0) {
    var rootY1 = (-b[1] + Math.sqrt(distY)) / (2 * a[1]);
    var rootY2 = (-b[1] - Math.sqrt(distY)) / (2 * a[1]);

    if (0 <= rootY1 && rootY1 <= 1) {
      roots.push(rootY1);
    }

    if (0 <= rootY2 && rootY2 <= 1) {
      roots.push(rootY2);
    }
  }

  return roots;
};
/**
 * get bezier curve bounding box 
 * 벡터 배열 넘기기 
 * 
 * @param {vec3[]} points 
 */

var getCurveBBox = function getCurveBBox(points) {
  var roots = findRootForCurve(points);
  var xyPoints = points.map(function (p) {
    return {
      x: p[0],
      y: p[1]
    };
  });
  return roots.map(function (t) {
    var _getBezierPointOne = getBezierPointOne(xyPoints, t),
        x = _getBezierPointOne.x,
        y = _getBezierPointOne.y;

    return [x, y, 0];
  });
};
var getQuardCurveBBox = function getQuardCurveBBox(points) {
  var roots = findRootForQuardCurve(points);
  var xyPoints = points.map(function (p) {
    return {
      x: p[0],
      y: p[1]
    };
  });
  return roots.map(function (t) {
    var _getBezierPointOneQua = getBezierPointOneQuard(xyPoints, t),
        x = _getBezierPointOneQua.x,
        y = _getBezierPointOneQua.y;

    return [x, y, 0];
  });
};

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Point; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);




var Point = /*#__PURE__*/function () {
  function Point() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Point);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Point, null, [{
    key: "isEqual",
    value: function isEqual(a, b, c) {
      if (arguments.length === 2) {
        return a.x === b.x && a.y === b.y;
      } else if (arguments.length === 3) {
        return Point.isEqual(a, b) && Point.isEqual(b, c);
      }
    }
  }, {
    key: "isFirst",
    value: function isFirst(point) {
      return point && point.command == 'M';
    }
  }, {
    key: "DouglasPeuker",
    value: function DouglasPeuker(tolerance, points, start, last) {
      if (last <= start + 1) return;
      var maxdist2 = 0;
      var breakIndex = start;
      var tol2 = tolerance * tolerance; // 임계점 설정 

      var startPoint = points[start];
      var lastPoint = points[last];

      for (var i = start + 1; i < last; i++) {
        // 꼭지점 길이 찾기 
        var dist2 = Point.segmentDistance2(points[i].x, points[i].y, startPoint, lastPoint);
        if (dist2 <= maxdist2) continue;
        breakIndex = i;
        maxdist2 = dist2;
      } // 임계치를 넘어가면 분기 해서 다시 맞추기 


      if (maxdist2 > tol2) {
        points[breakIndex].mark = true; // mark된 것만 점으로 출력 

        Point.DouglasPeuker(tolerance, points, start, breakIndex);
        Point.DouglasPeuker(tolerance, points, breakIndex, last);
      }
    }
  }, {
    key: "simply",
    value: function simply(points, tolerance) {
      if (points.length <= 2) {
        return points;
      }

      points = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["clone"])(points); // 처음과 끝은 무조건 존재하는 걸로 

      points[0].mark = true;
      points[points.length - 1].mark = true; // 간소화 포인트 계산 

      Point.DouglasPeuker(tolerance, points, 0, points.length - 1);
      return points.filter(function (it) {
        return Boolean(it.mark);
      });
    }
  }, {
    key: "segmentDistance2",
    value: function segmentDistance2(x, y, A, B) {
      var dx = B.x - A.x;
      var dy = B.y - A.y;
      var lenAB = dx * dx + dy * dy;
      var du = x - A.x;
      var dv = y - A.y;
      var dot = dx * du + dy * dv;
      if (lenAB === 0) return du * du + dv * dv;
      if (dot <= 0) return du * du + dv * dv;else if (dot >= lenAB) {
        du = x - B.x;
        dv = y - B.y;
        return du * du + dv * dv;
      } else {
        var slash = du * dy - dv * dx;
        return slash * slash / lenAB;
      }
    } // check whether C is in A->C line 
    // 지점의 각도가 맞는지 계산해서 같은 각이면 같이 움직이는 걸로 처리 하자 .

  }, {
    key: "isInLine",
    value: function isInLine(A, B, C) {
      if (A.x === C.x) return B.x === C.x;
      if (A.y === C.y) return B.y === C.y;
      return (A.x - C.x) * (A.y - C.y) === (C.x - B.x) * (C.y - B.y);
    }
  }, {
    key: "isLine",
    value: function isLine(point) {
      return Point.isInLine(point.endPoint, point.startPoint, point, reversePoint);
    }
  }, {
    key: "getReversePoint",
    value: function getReversePoint(start, end) {
      var distX = start.x - end.x;
      var distY = start.y - end.y;
      return {
        x: start.x + distX,
        y: start.y + distY
      };
    }
  }, {
    key: "getIndexPoint",
    value: function getIndexPoint(points, index) {
      return points[index];
    }
  }, {
    key: "getPoint",
    value: function getPoint(points, p0) {
      return points.filter(function (p) {
        return Point.isEqual(p.startPoint, p0);
      })[0];
    }
  }, {
    key: "getIndex",
    value: function getIndex(points, p0) {
      var firstIndex = -1;

      for (var i = 0, len = points.length; i < len; i++) {
        var p = points[i];

        if (Point.isEqual(p.startPoint, p0)) {
          firstIndex = i;
          break;
        }
      }

      return firstIndex;
    }
  }, {
    key: "getPointIndex",
    value: function getPointIndex(points, p0) {
      var firstIndex = -1;

      for (var i = 0, len = points.length; i < len; i++) {
        var p = points[i];

        if (Point.isEqual(p, p0)) {
          firstIndex = i;
          break;
        }
      }

      return firstIndex;
    }
  }, {
    key: "getLastPoint",
    value: function getLastPoint(points, index) {
      if (!points.length) return null;
      var lastIndex = -1;

      for (var i = index + 1, len = points.length; i < len; i++) {
        if (points[i].command === 'M') {
          lastIndex = i - 1;
          break;
        }
      }

      if (lastIndex == -1) {
        lastIndex = points.length - 1;
      }

      if (points[lastIndex] && points[lastIndex].command === 'Z') {
        lastIndex -= 1;
      }

      var point = points[lastIndex];

      if (point) {
        point.index = lastIndex;
      }

      return point;
    }
  }, {
    key: "getFirstPoint",
    value: function getFirstPoint(points, index) {
      var firstIndex = -1;

      for (var i = index - 1; i > 0; i--) {
        if (points[i].command === 'M') {
          firstIndex = i;
          break;
        }
      }

      if (firstIndex === -1) {
        firstIndex = 0;
      }

      var point = points[firstIndex];

      if (point) {
        point.index = firstIndex;
      }

      return point;
    }
  }, {
    key: "getConnectedPoint",
    value: function getConnectedPoint(points, index) {}
  }, {
    key: "getPrevPoint",
    value: function getPrevPoint(points, index) {
      var prevIndex = index - 1;

      if (prevIndex < 0) {
        return Point.getLastPoint(points, index);
      }

      var point = points[prevIndex];

      if (point) {
        point.index = prevIndex;
      }

      return point;
    }
  }, {
    key: "getNextPoint",
    value: function getNextPoint(points, index) {
      var currentPoint = points[index];
      var nextPoint = points[index + 1];

      if (nextPoint) {
        nextPoint.index = index + 1;
      }

      if (currentPoint.connected) {
        nextPoint = Point.getFirstPoint(points, index);
      }

      return nextPoint;
    }
  }, {
    key: "removePoint",
    value: function removePoint(points, pIndex, segment) {
      if (segment === 'startPoint') {
        return points.filter(function (_, index) {
          return index !== pIndex;
        });
      }
    }
  }, {
    key: "splitPoints",
    value: function splitPoints(points) {
      var splitedPointGroup = [];
      var lastPoints = [];
      points.forEach(function (p) {
        if (Point.isFirst(p)) {
          lastPoints = [p];
          splitedPointGroup.push(lastPoints);
        } else {
          lastPoints.push(p);
        }
      });
      return splitedPointGroup;
    }
  }, {
    key: "recoverPoints",
    value: function recoverPoints(pointGroup) {
      var newPoints = []; // group 을 루프를 돈다. 

      pointGroup.forEach(function (points) {
        // group 은 points 리스트이다. 
        points.forEach(function (p, index) {
          // point 중 첫번째는 command 가 M 이다. 
          if (index === 0) {
            p.command = 'M';
            p.originalCommand = 'M';
          }
        });
        newPoints.push.apply(newPoints, points);
      }); // 그런 다음 전체 인덱스를 재조정한다. 

      newPoints.forEach(function (p, index) {
        p.index = index;
      });
      return newPoints;
    }
  }]);

  return Point;
}();



/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// NAMESPACE OBJECT: ./src/el/base/functions/fromCMYK.js
var fromCMYK_namespaceObject = {};
__webpack_require__.r(fromCMYK_namespaceObject);
__webpack_require__.d(fromCMYK_namespaceObject, "CMYKtoRGB", function() { return CMYKtoRGB; });

// NAMESPACE OBJECT: ./src/el/base/functions/fromYCrCb.js
var fromYCrCb_namespaceObject = {};
__webpack_require__.r(fromYCrCb_namespaceObject);
__webpack_require__.d(fromYCrCb_namespaceObject, "YCrCbtoRGB", function() { return YCrCbtoRGB; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./src/el/base/functions/formatter.js
var formatter = __webpack_require__(63);

// EXTERNAL MODULE: ./src/el/base/functions/create.js
var create = __webpack_require__(53);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/base/functions/fromRGB.js
var fromRGB = __webpack_require__(49);

// CONCATENATED MODULE: ./src/el/base/functions/fromCMYK.js
function CMYKtoRGB(c, m, y, k) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        c = _arguments$.c,
        m = _arguments$.m,
        y = _arguments$.y,
        k = _arguments$.k;
  }

  var R = 255 * (1 - c) * (1 - k);
  var G = 255 * (1 - m) * (1 - k);
  var B = 255 * (1 - y) * (1 - k);
  return {
    r: R,
    g: G,
    b: B
  };
}
// EXTERNAL MODULE: ./src/el/base/functions/fromLAB.js
var fromLAB = __webpack_require__(97);

// EXTERNAL MODULE: ./src/el/base/functions/fromHSV.js
var fromHSV = __webpack_require__(98);

// EXTERNAL MODULE: ./src/el/base/functions/fromHSL.js
var fromHSL = __webpack_require__(90);

// CONCATENATED MODULE: ./src/el/base/functions/fromYCrCb.js
function YCrCbtoRGB(y, cr, cb, bit) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        y = _arguments$.y,
        cr = _arguments$.cr,
        cb = _arguments$.cb,
        bit = _arguments$.bit;
    bit = bit || 0;
  }

  var R = y + 1.402 * (cr - bit);
  var G = y - 0.344 * (cb - bit) - 0.714 * (cr - bit);
  var B = y + 1.772 * (cb - bit);
  return {
    r: Math.ceil(R),
    g: Math.ceil(G),
    b: Math.ceil(B)
  };
}
// EXTERNAL MODULE: ./src/el/base/functions/mixin.js
var mixin = __webpack_require__(99);

// EXTERNAL MODULE: ./src/el/base/functions/parser.js + 1 modules
var parser = __webpack_require__(21);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/base/Color.js


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }













/* harmony default export */ var Color = __webpack_exports__["a"] = (_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, create), formatter), math), mixin), parser), fromYCrCb_namespaceObject), fromRGB), fromCMYK_namespaceObject), fromHSV), fromHSL), fromLAB), func));

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MenuItem; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DEFAULT_TITLE = '';
var DEFAULT_ICON = '';
var DEFAULT_CHECKED = false;

var MenuItem = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(MenuItem, _EditorElement);

  var _super = _createSuper(MenuItem);

  function MenuItem() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, MenuItem);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(MenuItem, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <button \n            type=\"button\" \n            class='menu-item ".concat(this.getClassName(), "' \n            data-no-title=\"").concat(this.isHideTitle(), "\" \n            ").concat(this.isHideTitle() ? "data-tooltip=\"".concat(this.getTitle(), "\"") : '', " \n            checked=\"").concat(this.getChecked() ? 'checked' : '', "\"\n            ").concat(this.isDisabled() ? 'disabled' : '', "\n        >\n            <div class=\"icon ").concat(this.getIcon(), "\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"][this.getIconString()] || this.getIconString() || '', "</div>\n            <div class=\"title\">").concat(this.getTitle(), "</div>\n        </button>\n        ")
      );
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return "";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {}
  }, {
    key: "getChecked",
    value: function getChecked() {
      return DEFAULT_CHECKED;
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      return false;
    }
  }, {
    key: "setSelected",
    value: function setSelected(isSelected) {
      this.$el.toggleClass('selected', isSelected);
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return DEFAULT_TITLE;
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return DEFAULT_ICON;
    }
  }, {
    key: "getIconString",
    value: function getIconString() {
      return DEFAULT_ICON;
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return false;
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])(),
    value: function value(e) {
      this.clickButton(e);
    }
  }], [{
    key: "createMenuItem",
    value: function createMenuItem() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return /*#__PURE__*/function (_MenuItem) {
        _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(_class, _MenuItem);

        var _super2 = _createSuper(_class);

        function _class() {
          _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, _class);

          return _super2.apply(this, arguments);
        }

        _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(_class, [{
          key: "getIconString",
          value: function getIconString() {
            return opt.iconString || 'add_box';
          }
        }, {
          key: "getTitle",
          value: function getTitle() {
            return opt.title || "New Item";
          }
        }, {
          key: "isHideTitle",
          value: function isHideTitle() {
            return opt.isHideTitle || true;
          }
        }, {
          key: "clickButton",
          value: function clickButton(e) {
            opt.clickButton(e);
          }
        }]);

        return _class;
      }(MenuItem);
    }
  }]);

  return MenuItem;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_7__[/* EditorElement */ "a"]);



/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toArray.js
var toArray = __webpack_require__(46);
var toArray_default = /*#__PURE__*/__webpack_require__.n(toArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(18);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js
var taggedTemplateLiteral = __webpack_require__(85);
var taggedTemplateLiteral_default = /*#__PURE__*/__webpack_require__.n(taggedTemplateLiteral);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(17);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/types/event.js
var types_event = __webpack_require__(87);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// CONCATENATED MODULE: ./src/el/base/handler/BaseHandler.js




var BaseHandler_BaseHandler = /*#__PURE__*/function () {
  /**
   * 
   * @param {EventMachine} context 
   * @param {*} options 
   */
  function BaseHandler(context) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    classCallCheck_default()(this, BaseHandler);

    this.context = context;
    this.options = options;
  } // 초기화 설정 


  createClass_default()(BaseHandler, [{
    key: "initialize",
    value: function initialize() {} // html 을 로드 할 때 

  }, {
    key: "load",
    value: function load() {} // 새로고침 할 때 

  }, {
    key: "refresh",
    value: function refresh() {} // 화면에 그린 이후에 실행 되는 로직들 

  }, {
    key: "render",
    value: function render() {}
  }, {
    key: "getRef",
    value: function getRef(id) {
      return this.context.getRef(id);
    }
  }, {
    key: "run",
    value: function run() {}
  }, {
    key: "destroy",
    value: function destroy() {}
  }]);

  return BaseHandler;
}();


// CONCATENATED MODULE: ./src/el/base/handler/DomEventHandler.js









function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var scrollBlockingEvents = {
  'touchstart': true,
  'touchmove': true,
  'mousedown': true,
  'mouseup': true,
  'mousemove': true // 'wheel': true,
  // 'mousewheel': true

};
var eventConverts = {
  'doubletab': 'touchend'
};
var customEventNames = {
  'doubletab': true
};

var DomEventHandler_DomEventHandler = /*#__PURE__*/function (_BaseHandler) {
  inherits_default()(DomEventHandler, _BaseHandler);

  var _super = _createSuper(DomEventHandler);

  function DomEventHandler() {
    classCallCheck_default()(this, DomEventHandler);

    return _super.apply(this, arguments);
  }

  createClass_default()(DomEventHandler, [{
    key: "initialize",
    value: function initialize() {
      var _this = this;

      this.destroy();

      if (!this._domEvents) {
        this._domEvents = this.context.filterProps(Event["CHECK_DOM_EVENT_PATTERN"]);
      }

      this._domEvents.forEach(function (key) {
        return _this.parseDomEvent(key);
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.removeEventAll();
    }
  }, {
    key: "removeEventAll",
    value: function removeEventAll() {
      var _this2 = this;

      this.getBindings().forEach(function (obj) {
        _this2.removeDomEvent(obj);
      });
      this.initBindings();
    }
  }, {
    key: "removeDomEvent",
    value: function removeDomEvent(_ref) {
      var eventName = _ref.eventName,
          dom = _ref.dom,
          callback = _ref.callback;
      Event["default"].removeDomEvent(dom, eventName, callback);
    }
  }, {
    key: "getBindings",
    value: function getBindings() {
      if (!this._bindings) {
        this.initBindings();
      }

      return this._bindings;
    }
  }, {
    key: "addBinding",
    value: function addBinding(obj) {
      this.getBindings().push(obj);
    }
  }, {
    key: "initBindings",
    value: function initBindings() {
      this._bindings = [];
    }
  }, {
    key: "matchPath",
    value: function matchPath(el, selector) {
      if (el) {
        if (el.matches(selector)) {
          return el;
        }

        return this.matchPath(el.parentElement, selector);
      }

      return null;
    }
  }, {
    key: "hasDelegate",
    value: function hasDelegate(e, eventObject) {
      return this.matchPath(e.target || e.srcElement, eventObject.delegate);
    }
  }, {
    key: "makeCallback",
    value: function makeCallback(eventObject, callback) {
      if (eventObject.delegate) {
        return this.makeDelegateCallback(eventObject, callback);
      } else {
        return this.makeDefaultCallback(eventObject, callback);
      }
    }
  }, {
    key: "makeDefaultCallback",
    value: function makeDefaultCallback(eventObject, callback) {
      var _this3 = this;

      return function (e) {
        var returnValue = _this3.runEventCallback(e, eventObject, callback);

        if (Object(func["isNotUndefined"])(returnValue)) {
          return returnValue;
        }
      };
    }
  }, {
    key: "makeDelegateCallback",
    value: function makeDelegateCallback(eventObject, callback) {
      var _this4 = this;

      return function (e) {
        var delegateTarget = _this4.hasDelegate(e, eventObject);

        if (delegateTarget) {
          // delegate target 이 있는 경우만 callback 실행
          e.$dt = Dom["a" /* default */].create(delegateTarget);

          var returnValue = _this4.runEventCallback(e, eventObject, callback);

          if (Object(func["isNotUndefined"])(returnValue)) {
            return returnValue;
          }
        }
      };
    }
  }, {
    key: "runEventCallback",
    value: function runEventCallback(e, eventObject, callback) {
      var context = this.context;
      e.xy = Event["default"].posXY(e);

      if (eventObject.beforeMethods.length) {
        eventObject.beforeMethods.every(function (before) {
          return context[before.target].call(context, e, before.param);
        });
      }

      if (this.checkEventType(e, eventObject)) {
        var returnValue = callback(e, e.$dt, e.xy);

        if (returnValue !== false && eventObject.afterMethods.length) {
          eventObject.afterMethods.forEach(function (after) {
            return context[after.target].call(context, e, after.param);
          });
        }

        return returnValue;
      }
    }
  }, {
    key: "checkEventType",
    value: function checkEventType(e, eventObject) {
      var context = this.context; // 특정 keycode 를 가지고 있는지 체크

      var hasKeyCode = true;

      if (eventObject.codes.length) {
        hasKeyCode = (e.code ? eventObject.codes.indexOf(e.code.toLowerCase()) > -1 : false) || (e.key ? eventObject.codes.indexOf(e.key.toLowerCase()) > -1 : false);
      } // 체크 메소드들은 모든 메소드를 다 적용해야한다.


      var isAllCheck = true;

      if (eventObject.checkMethodList.length) {
        isAllCheck = eventObject.checkMethodList.every(function (field) {
          var fieldValue = context[field];

          if (Object(func["isFunction"])(fieldValue) && fieldValue) {
            // check method
            return fieldValue.call(context, e);
          } else if (Object(func["isNotUndefined"])(fieldValue)) {
            // check field value
            return !!fieldValue;
          }

          return true;
        });
      }

      return hasKeyCode && isAllCheck;
    }
  }, {
    key: "getDefaultDomElement",
    value: function getDefaultDomElement(dom) {
      var context = this.context;
      var el;

      if (dom) {
        el = context.refs[dom] || context[dom] || window[dom];
      } else {
        el = context.el || context.$el || context.$root;
      }

      if (el instanceof Dom["a" /* default */]) {
        return el.getElement();
      }

      return el;
    }
  }, {
    key: "getRealEventName",
    value: function getRealEventName(eventName) {
      return eventConverts[eventName] || eventName;
    }
  }, {
    key: "getCustomEventName",
    value: function getCustomEventName(eventName) {
      return customEventNames[eventName] ? eventName : '';
    }
    /**
     * 
     * doubletab -> touchend 로 바뀜 
     * 
     * @param {string} eventName  이벤트 이름 
     * @param {array} checkMethodFilters 매직 필터 목록  
     */

  }, {
    key: "getDefaultEventObject",
    value: function getDefaultEventObject(eventName, checkMethodFilters) {
      var context = this.context;
      var arr = checkMethodFilters; // context 에 속한 변수나 메소드 리스트 체크

      var checkMethodList = arr.filter(function (code) {
        return !!context[code];
      }); // 이벤트 정의 시점에 적용 되어야 하는 것들은 모두 method() 화 해서 정의한다.

      var _splitMethodByKeyword = Object(func["splitMethodByKeyword"])(arr, "after"),
          _splitMethodByKeyword2 = slicedToArray_default()(_splitMethodByKeyword, 2),
          afters = _splitMethodByKeyword2[0],
          afterMethods = _splitMethodByKeyword2[1];

      var _splitMethodByKeyword3 = Object(func["splitMethodByKeyword"])(arr, "before"),
          _splitMethodByKeyword4 = slicedToArray_default()(_splitMethodByKeyword3, 2),
          befores = _splitMethodByKeyword4[0],
          beforeMethods = _splitMethodByKeyword4[1];

      var _splitMethodByKeyword5 = Object(func["splitMethodByKeyword"])(arr, "debounce"),
          _splitMethodByKeyword6 = slicedToArray_default()(_splitMethodByKeyword5, 2),
          debounces = _splitMethodByKeyword6[0],
          debounceMethods = _splitMethodByKeyword6[1];

      var _splitMethodByKeyword7 = Object(func["splitMethodByKeyword"])(arr, "delay"),
          _splitMethodByKeyword8 = slicedToArray_default()(_splitMethodByKeyword7, 2),
          delays = _splitMethodByKeyword8[0],
          delayMethods = _splitMethodByKeyword8[1];

      var _splitMethodByKeyword9 = Object(func["splitMethodByKeyword"])(arr, "throttle"),
          _splitMethodByKeyword10 = slicedToArray_default()(_splitMethodByKeyword9, 2),
          throttles = _splitMethodByKeyword10[0],
          throttleMethods = _splitMethodByKeyword10[1];

      var _splitMethodByKeyword11 = Object(func["splitMethodByKeyword"])(arr, "capture"),
          _splitMethodByKeyword12 = slicedToArray_default()(_splitMethodByKeyword11, 1),
          captures = _splitMethodByKeyword12[0]; // 위의 5개 필터 이외에 있는 코드들은 keycode 로 인식한다.


      var filteredList = [].concat(toConsumableArray_default()(checkMethodList), toConsumableArray_default()(afters), toConsumableArray_default()(befores), toConsumableArray_default()(delays), toConsumableArray_default()(debounces), toConsumableArray_default()(throttles), toConsumableArray_default()(captures));
      var codes = arr.filter(function (code) {
        return filteredList.indexOf(code) === -1;
      }).map(function (code) {
        return code.toLowerCase();
      });
      return {
        eventName: this.getRealEventName(eventName),
        customEventName: this.getCustomEventName(eventName),
        codes: codes,
        captures: captures,
        afterMethods: afterMethods,
        beforeMethods: beforeMethods,
        delayMethods: delayMethods,
        debounceMethods: debounceMethods,
        throttleMethods: throttleMethods,
        checkMethodList: checkMethodList
      };
    }
  }, {
    key: "addDomEvent",
    value: function addDomEvent(eventObject, callback) {
      eventObject.callback = this.makeCallback(eventObject, callback);
      this.addBinding(eventObject);
      var options = !!eventObject.captures.length;

      if (scrollBlockingEvents[eventObject.eventName]) {
        options = {
          passive: true,
          capture: options
        };
      }

      Event["default"].addDomEvent(eventObject.dom, eventObject.eventName, eventObject.callback, options);
    }
  }, {
    key: "makeCustomEventCallback",
    value: function makeCustomEventCallback(eventObject, callback) {
      var _this5 = this;

      if (eventObject.customEventName === 'doubletab') {
        var delay = 300;

        if (eventObject.delayMethods.length) {
          delay = +eventObject.delayMethods[0].target;
        }

        return function () {
          if (!_this5.doubleTab) {
            _this5.doubleTab = {
              time: performance.now()
            };
          } else {
            if (performance.now() - _this5.doubleTab.time < delay) {
              callback.apply(void 0, arguments);
            }

            _this5.doubleTab = null;
          }
        };
      }

      return callback;
    }
  }, {
    key: "bindingDomEvent",
    value: function bindingDomEvent(_ref2, checkMethodFilters, callback) {
      var _ref3 = toArray_default()(_ref2),
          eventName = _ref3[0],
          dom = _ref3[1],
          delegate = _ref3.slice(2);

      var eventObject = this.getDefaultEventObject(eventName, checkMethodFilters);
      eventObject.dom = this.getDefaultDomElement(dom);
      eventObject.delegate = delegate.join(Event["SAPARATOR"]);

      if (eventObject.debounceMethods.length) {
        var debounceTime = +eventObject.debounceMethods[0].target;
        callback = Object(func["debounce"])(callback, debounceTime);
      } else if (eventObject.throttleMethods.length) {
        var throttleTime = +eventObject.throttleMethods[0].target;
        callback = Object(func["throttle"])(callback, throttleTime);
      } // custom event callback 만들기 


      callback = this.makeCustomEventCallback(eventObject, callback);
      this.addDomEvent(eventObject, callback);
    }
  }, {
    key: "getEventNames",
    value: function getEventNames(eventName) {
      var results = [];
      eventName.split(Event["NAME_SAPARATOR"]).forEach(function (e) {
        var arr = e.split(Event["NAME_SAPARATOR"]);
        results.push.apply(results, arr);
      });
      return results;
    }
    /**
     * 이벤트 문자열 파싱하기 
     * 
     * @param {string} key 
     */

  }, {
    key: "parseDomEvent",
    value: function parseDomEvent(key) {
      var context = this.context;
      var checkMethodFilters = key.split(Event["CHECK_SAPARATOR"]).map(function (it) {
        return it.trim();
      });
      var prefix = checkMethodFilters.shift();
      var eventSelectorAndBehave = prefix.split(Event["DOM_EVENT_SAPARATOR"])[1];
      var arr = eventSelectorAndBehave.split(Event["SAPARATOR"]);
      var eventNames = this.getEventNames(arr[0]);
      var callback = context[key].bind(context);

      for (var i = 0, len = eventNames.length; i < len; i++) {
        arr[0] = eventNames[i];
        this.bindingDomEvent(arr, checkMethodFilters, callback);
      }
    }
  }]);

  return DomEventHandler;
}(BaseHandler_BaseHandler);


// CONCATENATED MODULE: ./src/el/base/handler/BindHandler.js










function BindHandler_createSuper(Derived) { var hasNativeReflectConstruct = BindHandler_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BindHandler_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





/**
 * 
 * @param {Dom} $element 
 * @param {string} key 
 * @param {any} value 
 */

var BindHandler_applyElementAttribute = function applyElementAttribute($element, key, value) {
  if (key === 'cssText') {
    /**
     * cssText: 'position:absolute'
     */
    $element.cssText(value);
    return;
  } else if (key === "style") {
    /**
     * style: { key: value }
     */
    if (Object(func["isNotString"])(value)) {
      $element.css(value);
    }

    return;
  } else if (key === "class") {
    //  "class" : [ 'className', 'className' ] 
    //  "class" : { key: true, key: false } 
    //  "class" : 'string-class' 
    if (Object(func["isArray"])(value)) {
      $element.addClass.apply($element, toConsumableArray_default()(value.filter(Boolean)));
    } else if (Object(func["isObject"])(value)) {
      var keys = Object.keys(value);

      for (var i = 0, len = keys.length; i < len; i++) {
        var className = keys[i];
        var hasClass = value[className];
        $element.toggleClass(className, hasClass);
      }
    } else {
      $element.el.className = value;
    }

    return;
  } else if (key === 'callback') {
    if (Object(func["isFunction"])(value)) {
      value();
      return;
    }
  }

  if (Object(func["isUndefined"])(value)) {
    $element.removeAttr(key);
  } else {
    if ($element.el.nodeName === "TEXTAREA" && key === "value") {
      $element.text(value);
    } else if (key === 'text' || key === 'textContent') {
      $element.text(value);
    } else if (key === 'innerHTML' || key === 'html') {
      $element.html(value);
    } else if (key === 'value') {
      $element.val(value);
    } else {
      $element.attr(key, value);
    }
  }
};

var BindHandler_BindHandler = /*#__PURE__*/function (_BaseHandler) {
  inherits_default()(BindHandler, _BaseHandler);

  var _super = BindHandler_createSuper(BindHandler);

  function BindHandler() {
    classCallCheck_default()(this, BindHandler);

    return _super.apply(this, arguments);
  }

  createClass_default()(BindHandler, [{
    key: "load",
    value: function load() {
      this.bindData.apply(this, arguments);
    } // 어떻게 실행하는게 좋을까? 
    // this.runHandle('bind', ...);

  }, {
    key: "bindData",
    value: function bindData() {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (!this._bindMethods) {
        this._bindMethods = this.context.filterProps(Event["CHECK_BIND_PATTERN"]);
      }
      /**
       * BIND 를 해보자.
       * 이시점에 하는게 맞는지는 모르겠지만 일단은 해보자.
       * BIND 는 특정 element 에 html 이 아닌 데이타를 업데이트하기 위한 간단한 로직이다.
       */


      var bindList = this._bindMethods.filter(function (originalCallbackName) {
        if (!args.length) return true;

        var _originalCallbackName = originalCallbackName.split(Event["CHECK_SAPARATOR"]),
            _originalCallbackName2 = slicedToArray_default()(_originalCallbackName, 2),
            callbackName = _originalCallbackName2[0],
            id = _originalCallbackName2[1];

        var _callbackName$split = callbackName.split(' '),
            _callbackName$split2 = slicedToArray_default()(_callbackName$split, 2),
            _ = _callbackName$split2[0],
            $bind = _callbackName$split2[1];

        return args.indexOf($bind) > -1;
      });

      bindList.forEach( /*#__PURE__*/function () {
        var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(callbackName) {
          var bindMethod, _callbackName$split3, _callbackName$split4, id, refObject, refCallback, elName, $element, isBindCheck, results, keys, elementKeyIndex, len, key, value;

          return regenerator_default.a.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  bindMethod = _this.context[callbackName];
                  _callbackName$split3 = callbackName.split(Event["CHECK_SAPARATOR"]), _callbackName$split4 = slicedToArray_default()(_callbackName$split3, 2), callbackName = _callbackName$split4[0], id = _callbackName$split4[1];
                  refObject = _this.getRef(id);
                  refCallback = Event["BIND_CHECK_DEFAULT_FUNCTION"];

                  if (refObject != '' && Object(func["isString"])(refObject)) {
                    refCallback = Object(Event["BIND_CHECK_FUNCTION"])(refObject);
                  } else if (Object(func["isFunction"])(refObject)) {
                    refCallback = refObject;
                  }

                  elName = callbackName.split(Event["BIND_SAPARATOR"])[1];
                  $element = _this.context.refs[elName]; // isBindCheck 는 binding 하기 전에 변화된 지점을 찾아서 업데이트를 제한한다.

                  isBindCheck = Object(func["isFunction"])(refCallback) && refCallback.call(_this.context);

                  if (!($element && isBindCheck)) {
                    _context.next = 16;
                    break;
                  }

                  _context.next = 11;
                  return bindMethod.call.apply(bindMethod, [_this.context].concat(args));

                case 11:
                  results = _context.sent;

                  if (results) {
                    _context.next = 14;
                    break;
                  }

                  return _context.abrupt("return");

                case 14:
                  keys = Object.keys(results);

                  for (elementKeyIndex = 0, len = keys.length; elementKeyIndex < len; elementKeyIndex++) {
                    key = keys[elementKeyIndex];
                    value = results[key];
                    BindHandler_applyElementAttribute($element, key, value);
                  }

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this._bindMethods = undefined;
    }
  }]);

  return BindHandler;
}(BaseHandler_BaseHandler);


// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// CONCATENATED MODULE: ./src/el/base/EventMachine.js









var _expectMethod, _templateObject, _templateObject2;



function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }









var REFERENCE_PROPERTY = "ref";
var TEMP_DIV = Dom["a" /* default */].create("div");
var QUERY_PROPERTY = "[".concat(REFERENCE_PROPERTY, "]");
var REF_CLASS = 'refclass';
var REF_CLASS_PROPERTY = "[".concat(REF_CLASS, "]"); // collectProps 에서 제외될 메소드 목록 

var expectMethod = (_expectMethod = {
  "constructor": true,
  "initState": true,
  "updateData": true
}, defineProperty_default()(_expectMethod, "constructor", true), defineProperty_default()(_expectMethod, "initializeProperty", true), defineProperty_default()(_expectMethod, "created", true), defineProperty_default()(_expectMethod, "getRealEventName", true), defineProperty_default()(_expectMethod, "initializeStoreEvent", true), defineProperty_default()(_expectMethod, "destoryStoreEvent", true), defineProperty_default()(_expectMethod, "destroy", true), defineProperty_default()(_expectMethod, "emit", true), defineProperty_default()(_expectMethod, "trigger", true), defineProperty_default()(_expectMethod, "on", true), defineProperty_default()(_expectMethod, "off", true), defineProperty_default()(_expectMethod, "setState", true), defineProperty_default()(_expectMethod, "_reload", true), defineProperty_default()(_expectMethod, "render", true), defineProperty_default()(_expectMethod, "initialize", true), defineProperty_default()(_expectMethod, "afterRender", true), defineProperty_default()(_expectMethod, "components", true), defineProperty_default()(_expectMethod, "getRef", true), defineProperty_default()(_expectMethod, "parseTemplate", true), defineProperty_default()(_expectMethod, "parseProperty", true), defineProperty_default()(_expectMethod, "parseSourceName", true), defineProperty_default()(_expectMethod, "parseComponent", true), defineProperty_default()(_expectMethod, "clean", true), defineProperty_default()(_expectMethod, "refresh", true), defineProperty_default()(_expectMethod, "load", true), defineProperty_default()(_expectMethod, "bindData", true), defineProperty_default()(_expectMethod, "template", true), defineProperty_default()(_expectMethod, "eachChildren", true), defineProperty_default()(_expectMethod, "destroy", true), defineProperty_default()(_expectMethod, "collectProps", true), defineProperty_default()(_expectMethod, "filterProps", true), defineProperty_default()(_expectMethod, "self", true), defineProperty_default()(_expectMethod, "isAltKey", true), defineProperty_default()(_expectMethod, "isCtrlKey", true), defineProperty_default()(_expectMethod, "isShiftKey", true), defineProperty_default()(_expectMethod, "isMetaKey", true), defineProperty_default()(_expectMethod, "preventDefault", true), defineProperty_default()(_expectMethod, "stopPropagation", true), defineProperty_default()(_expectMethod, "bodyMouseMove", true), defineProperty_default()(_expectMethod, "bodyMouseUp", true), _expectMethod);

var EventMachine_EventMachine = /*#__PURE__*/function () {
  function EventMachine(opt, props) {
    classCallCheck_default()(this, EventMachine);

    this.state = {};
    this.prevState = {};
    this.refs = {};
    this.children = {};
    this._bindings = [];
    this.id = Object(math["uuid"])();
    this.handlers = this.initializeHandler();
    this.initializeProperty(opt, props);
    this.initComponents();
  }
  /**
   * UIElement instance 에 필요한 기본 속성 설정 
   */


  createClass_default()(EventMachine, [{
    key: "initializeProperty",
    value: function initializeProperty(opt) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.opt = opt || {};
      this.parent = this.opt;
      this.props = props;
      this.source = Object(math["uuid"])();
      this.sourceName = this.constructor.name;
    }
  }, {
    key: "initComponents",
    value: function initComponents() {
      // const parentComponents = isFunction(this.parent.components) ? this.parent.components() : this.parent.components;
      this.childComponents = _objectSpread({}, this.components());
    }
  }, {
    key: "initializeHandler",
    value: function initializeHandler() {
      return [new BindHandler_BindHandler(this), new DomEventHandler_DomEventHandler(this)];
    }
    /**
     * state 를 초기화 한것을 리턴한다. 
     * 
     * @protected
     * @returns {Object} 
     */

  }, {
    key: "initState",
    value: function initState() {
      return {};
    }
    /**
     * state 를 변경한다. 
     * 
     * @param {Object} state  새로운 state 
     * @param {Boolean} isLoad  다시 로드 할 것인지 체크 , true 면 state 변경후 다시 로드 
     */

  }, {
    key: "setState",
    value: function setState() {
      var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var isLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.prevState = this.state;
      this.state = Object.assign({}, this.state, state);

      if (isLoad) {
        this.load();
      }
    }
    /**
     * state 에 있는 key 필드의 값을 토글한다. 
     * Boolean 형태의 값만 동작한다. 
     * 
     * @param {string} key 
     * @param {Boolean} isLoad 
     */

  }, {
    key: "toggleState",
    value: function toggleState(key) {
      var isLoad = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.setState(defineProperty_default()({}, key, !this.state[key]), isLoad);
    }
    /**
     * 객체를 다시 그릴 때 사용한다. 
     * 
     * @param {*} props 
     * @protected
     */

  }, {
    key: "_reload",
    value: function _reload(props) {
      this.props = props;
      this.state = {};
      this.setState(this.initState(), false);
      this.refresh(true);
    }
    /**
     * template 을 렌더링 한다. 
     * 
     * @param {Dom|undefined} $container  컴포넌트가 그려질 대상 
     */

  }, {
    key: "render",
    value: function render($container) {
      this.$el = this.parseTemplate(Object(func["html"])(_templateObject || (_templateObject = taggedTemplateLiteral_default()(["\n        ", "\n      "])), this.template()));
      this.refs.$el = this.$el;

      if ($container) {
        $container.append(this.$el);
      } // LOAD 로 정의된 것들을 수행한다. 


      this.load(); // render 이후에 실행될 콜백을 정의한다. 

      this.afterRender();
    }
  }, {
    key: "initialize",
    value: function initialize() {
      this.state = this.initState();
    }
    /**
     * render 이후에 실행될 함수 
     * dom 이 실제로 생성된 이후에 수행할 작업들을 정의한다. 
     * 
     * @protected
     */

  }, {
    key: "afterRender",
    value: function afterRender() {}
    /**
     * 하위에 연결될 객체들을 정의한다 
     * 
     * @protected
     * @returns {Object}
     */

  }, {
    key: "components",
    value: function components() {
      return {};
    }
    /**
     * ref 이름을 가진 Component 를 가지고 온다. 
     * 
     * @param  {any[]} args 
     * @returns {EventMachine}
     */

  }, {
    key: "getRef",
    value: function getRef() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var key = args.join('');
      return this.refs[key];
    }
    /**
     * template() 함수의 결과물을 파싱해서 dom element 를 생성한다. 
     * 
     * @param {string} html 
     * @param {Boolean} [isLoad=false] 
     */

  }, {
    key: "parseTemplate",
    value: function parseTemplate(html, isLoad) {
      //FIXME: html string, element 형태 모두 array 로 받을 수 있도록 해보자. 
      if (Object(func["isArray"])(html)) {
        html = html.join('');
      }

      html = html.trim();
      var list = TEMP_DIV.html(html).children(); /////////////////////////////////

      for (var i = 0, len = list.length; i < len; i++) {
        var $el = list[i];
        var ref = $el.attr(REFERENCE_PROPERTY);

        if (ref) {
          this.refs[ref] = $el;
        }

        var refs = $el.$$(QUERY_PROPERTY);
        var temp = {};

        for (var refsIndex = 0, refsLen = refs.length; refsIndex < refsLen; refsIndex++) {
          var $dom = refs[refsIndex];
          var name = $dom.attr(REFERENCE_PROPERTY);

          if (temp[name]) {
            console.warn("".concat(ref, " is duplicated. - ").concat(this.sourceName), this);
          } else {
            temp[name] = true;
          }

          this.refs[name] = $dom;
        }
      }

      if (!isLoad) {
        return list[0];
      }

      return TEMP_DIV.createChildrenFragment();
    }
  }, {
    key: "parseProperty",
    value: function parseProperty($dom) {
      var props = {}; // parse properties 

      var _iterator = _createForOfIteratorHelper($dom.el.attributes),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var t = _step.value;
          props[t.nodeName] = t.nodeValue;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      if (props['props']) {
        props = _objectSpread(_objectSpread({}, props), Object(Event["getRef"])(props['props']));
      }

      $dom.$$('property').forEach(function ($p) {
        var _$p$attrs = $p.attrs('name', 'value', 'valueType'),
            _$p$attrs2 = slicedToArray_default()(_$p$attrs, 3),
            name = _$p$attrs2[0],
            value = _$p$attrs2[1],
            valueType = _$p$attrs2[2];

        var realValue = value || $p.text();

        if (valueType === 'json') {
          realValue = JSON.parse(realValue);
        }

        props[name] = realValue;
      });
      return props;
    }
  }, {
    key: "parseSourceName",
    value: function parseSourceName(obj) {
      if (obj.parent) {
        return [obj.sourceName].concat(toConsumableArray_default()(this.parseSourceName(obj.parent)));
      }

      return [obj.sourceName];
    }
  }, {
    key: "getEventMachineComponent",
    value: function getEventMachineComponent(refClassName) {
      var EventMachineComponent = Object(registElement["b" /* retriveElement */])(refClassName) || this.childComponents[refClassName];
      return EventMachineComponent;
    }
  }, {
    key: "parseComponent",
    value: function parseComponent() {
      var _this = this;

      var $el = this.$el;
      var targets = $el.$$(REF_CLASS_PROPERTY);
      targets.forEach(function ($dom) {
        var EventMachineComponent = _this.getEventMachineComponent($dom.attr(REF_CLASS));

        if (EventMachineComponent) {
          var props = _this.parseProperty($dom); // create component 


          var refName = $dom.attr(REFERENCE_PROPERTY);
          var instance = null; // 동일한 refName 의 EventMachine 이 존재하면  해당 컴포넌트는 다시 그려진다. 
          // 루트 element 는 변경되지 않는다. 

          if (_this.children[refName]) {
            instance = _this.children[refName];

            instance._reload(props);
          } else {
            // 기존의 refName 이 존재하지 않으면 Component 를 생성해서 element 를 교체한다. 
            instance = new EventMachineComponent(_this, props);
            _this.children[refName || instance.id] = instance;
            instance.render();
          }

          $dom.replace(instance.$el);
        } else {
          $dom.remove();
        }
      });
      Object(func["keyEach"])(this.children, function (key, obj) {
        if (obj && obj.clean()) {
          delete _this.children[key];
        }
      });
    }
  }, {
    key: "clean",
    value: function clean() {
      if (this.$el && !this.$el.hasParent()) {
        Object(func["keyEach"])(this.children, function (key, child) {
          child.clean();
        });
        this.destroy();
        this.$el = null;
        return true;
      }
    }
    /**
     * refresh 는 load 함수들을 실행한다. 
     */

  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: "_afterLoad",
    value: function _afterLoad() {
      this.runHandlers('initialize');
      this.bindData();
      this.parseComponent();
    }
  }, {
    key: "load",
    value: function () {
      var _load = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {
        var _this2 = this;

        var _len2,
            args,
            _key2,
            localLoadMethods,
            _args2 = arguments;

        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                for (_len2 = _args2.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                  args[_key2] = _args2[_key2];
                }

                if (!this._loadMethods) {
                  this._loadMethods = this.filterProps(Event["CHECK_LOAD_PATTERN"]);
                } // loop 가 비동기라 await 로 대기를 시켜줘야 나머지 html 업데이트에 대한 순서를 맞출 수 있다. 


                localLoadMethods = this._loadMethods.filter(function (callbackName) {
                  var elName = callbackName.split(Event["LOAD_SAPARATOR"])[1].split(Event["CHECK_SAPARATOR"]).map(function (it) {
                    return it.trim();
                  })[0];
                  if (!args.length) return true;
                  return args.indexOf(elName) > -1;
                });
                _context2.next = 5;
                return localLoadMethods.forEach( /*#__PURE__*/function () {
                  var _ref = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(callbackName) {
                    var methodName, _methodName$split$map, _methodName$split$map2, elName, checker, isDomDiff, _this2$callbackName, newTemplate, fragment;

                    return regenerator_default.a.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            methodName = callbackName.split(Event["LOAD_SAPARATOR"])[1];
                            _methodName$split$map = methodName.split(Event["CHECK_SAPARATOR"]).map(function (it) {
                              return it.trim();
                            }), _methodName$split$map2 = toArray_default()(_methodName$split$map), elName = _methodName$split$map2[0], checker = _methodName$split$map2.slice(1);
                            checker = checker.map(function (it) {
                              return it.trim();
                            });
                            isDomDiff = Boolean(checker.filter(function (it) {
                              return Event["DOMDIFF"].includes(it);
                            }).length);

                            if (!_this2.refs[elName]) {
                              _context.next = 11;
                              break;
                            }

                            _context.next = 7;
                            return (_this2$callbackName = _this2[callbackName]).call.apply(_this2$callbackName, [_this2].concat(args));

                          case 7:
                            newTemplate = _context.sent;

                            if (Object(func["isArray"])(newTemplate)) {
                              newTemplate = newTemplate.join('');
                            } // create fragment 


                            // create fragment 
                            fragment = _this2.parseTemplate(Object(func["html"])(_templateObject2 || (_templateObject2 = taggedTemplateLiteral_default()(["", ""])), newTemplate), true);

                            if (isDomDiff) {
                              _this2.refs[elName].htmlDiff(fragment);
                            } else {
                              _this2.refs[elName].html(fragment);
                            }

                          case 11:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x) {
                    return _ref.apply(this, arguments);
                  };
                }());

              case 5:
                this._afterLoad();

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function load() {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }, {
    key: "runHandlers",
    value: function runHandlers() {
      var func = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'run';

      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      this.handlers.forEach(function (h) {
        return h[func].apply(h, args);
      });
    }
  }, {
    key: "bindData",
    value: function bindData() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.runHandlers.apply(this, ['load'].concat(args));
    } // 기본 템플릿 지정

  }, {
    key: "template",
    value: function template() {
      return "<div></div>";
    }
  }, {
    key: "eachChildren",
    value: function eachChildren(callback) {
      if (!Object(func["isFunction"])(callback)) return;
      Object(func["keyEach"])(this.children, function (_, Component) {
        callback(Component);
      });
    }
  }, {
    key: "rerender",
    value: function rerender() {
      var $parent = this.$el.parent();
      this.destroy();
      this.render($parent);
    }
    /**
     * 자원을 해제한다.
     * 이것도 역시 자식 컴포넌트까지 제어하기 때문에 가장 최상위 부모에서 한번만 호출되도 된다.
     * 
     */

  }, {
    key: "destroy",
    value: function destroy() {
      this.eachChildren(function (childComponent) {
        childComponent.destroy();
      });
      this.runHandlers('destroy');
      this.$el.remove();
      this.$el = null;
      this.refs = {};
      this.children = {};
    }
    /**
     * property 수집하기
     * 상위 클래스의 모든 property 를 수집해서 리턴한다.
     * 
     * @returns {string[]} 나의 상위 모든 메소드를 수집해서 리턴한다. 
     */

  }, {
    key: "collectProps",
    value: function collectProps() {
      return Object(func["collectProps"])(this, expectMethod);
    }
  }, {
    key: "filterProps",
    value: function filterProps(pattern) {
      return this.collectProps().filter(function (key) {
        return key.match(pattern);
      });
    }
    /* magic check method  */

  }, {
    key: "self",
    value: function self(e) {
      return e && e.$dt && e.$dt.is(e.target);
    }
  }, {
    key: "isAltKey",
    value: function isAltKey(e) {
      return e.altKey;
    }
  }, {
    key: "isCtrlKey",
    value: function isCtrlKey(e) {
      return e.ctrlKey;
    }
  }, {
    key: "isShiftKey",
    value: function isShiftKey(e) {
      return e.shiftKey;
    }
  }, {
    key: "isMetaKey",
    value: function isMetaKey(e) {
      return e.metaKey || e.key == 'Meta' || e.code.indexOf('Meta') > -1;
    }
  }, {
    key: "isMouseLeftButton",
    value: function isMouseLeftButton(e) {
      return e.buttons === 1; // 1 is left button 
    }
    /** before check method */

    /* after check method */

  }, {
    key: "preventDefault",
    value: function preventDefault(e) {
      e.preventDefault();
      return true;
    }
  }, {
    key: "stopPropagation",
    value: function stopPropagation(e) {
      e.stopPropagation();
      return true;
    }
  }, {
    key: "bodyMouseMove",
    value: function bodyMouseMove(e, methodName) {
      if (this[methodName]) {
        this.emit(types_event["a" /* ADD_BODY_MOUSEMOVE */], this[methodName], this, e.xy);
      }
    }
  }, {
    key: "bodyMouseUp",
    value: function bodyMouseUp(e, methodName) {
      if (this[methodName]) {
        this.emit(types_event["b" /* ADD_BODY_MOUSEUP */], this[methodName], this, e.xy);
      }
    }
  }]);

  return EventMachine;
}();


// CONCATENATED MODULE: ./src/el/base/UIElement.js








function UIElement_createSuper(Derived) { var hasNativeReflectConstruct = UIElement_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function UIElement_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




/**
 * UI 를 만드는 기본 단위 
 * 
 * dom handler, 
 * bind handler, 
 * store handler 를 가진다. 
 * 
 * @property {Editor} $editor 
 */

var UIElement_UIElement = /*#__PURE__*/function (_EventMachine) {
  inherits_default()(UIElement, _EventMachine);

  var _super = UIElement_createSuper(UIElement);

  function UIElement(opt) {
    var _this;

    var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    classCallCheck_default()(this, UIElement);

    _this = _super.call(this, opt, props);

    _this.created();

    _this.initialize();

    _this.initializeStoreEvent();

    return _this;
  }
  /**
   * UIElement 가 생성될 때 호출되는 메소드 
   * @protected
   */


  createClass_default()(UIElement, [{
    key: "created",
    value: function created() {}
  }, {
    key: "getRealEventName",
    value: function getRealEventName(e) {
      var s = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MULTI_PREFIX;
      var startIndex = e.indexOf(s);
      return e.substr(startIndex < 0 ? 0 : startIndex + s.length);
    }
  }, {
    key: "splitMethod",
    value: function splitMethod(events, keyword) {
      var defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

      var _splitMethodByKeyword = Object(func["splitMethodByKeyword"])(events.split(Event["CHECK_SAPARATOR"]), keyword),
          _splitMethodByKeyword2 = slicedToArray_default()(_splitMethodByKeyword, 2),
          methods = _splitMethodByKeyword2[0],
          params = _splitMethodByKeyword2[1];

      return [methods.length ? +params[0].target : defaultValue, methods, params];
    }
    /**
     * initialize store event
     *
     * you can define '@xxx' method(event) in UIElement
     *
     * Store Event 를 초기화 한다. 
     *
     */

  }, {
    key: "initializeStoreEvent",
    value: function initializeStoreEvent() {
      var _this2 = this;

      this.filterProps(Event["CHECK_SUBSCRIBE_PATTERN"]).forEach(function (key) {
        var events = _this2.getRealEventName(key, Event["SUBSCRIBE_SAPARATOR"]); // support deboounce for store event 


        var _this2$splitMethod = _this2.splitMethod(events, 'debounce'),
            _this2$splitMethod2 = slicedToArray_default()(_this2$splitMethod, 2),
            debounceSecond = _this2$splitMethod2[0],
            debounceMethods = _this2$splitMethod2[1];

        var _this2$splitMethod3 = _this2.splitMethod(events, 'throttle'),
            _this2$splitMethod4 = slicedToArray_default()(_this2$splitMethod3, 2),
            throttleSecond = _this2$splitMethod4[0],
            throttleMethods = _this2$splitMethod4[1];

        var _this2$splitMethod5 = _this2.splitMethod(events, 'allTrigger'),
            _this2$splitMethod6 = slicedToArray_default()(_this2$splitMethod5, 2),
            _ = _this2$splitMethod6[0],
            allTriggerMethods = _this2$splitMethod6[1];

        events.split(Event["CHECK_SAPARATOR"]).filter(function (it) {
          return debounceMethods.indexOf(it) === -1 && allTriggerMethods.indexOf(it) === -1 && throttleMethods.indexOf(it) === -1;
        }).map(function (it) {
          return it.trim();
        }).forEach(function (e) {
          var callback = _this2[key].bind(_this2);

          callback.displayName = "".concat(_this2.sourceName, ".").concat(e);
          callback.source = _this2.source;

          _this2.$store.on(e, callback, _this2, debounceSecond, throttleSecond, allTriggerMethods.length);
        });
      });
    }
    /**
     * 현재 UIElement 와 연결된 모든 메세지를 해제한다. 
     */

  }, {
    key: "destoryStoreSUBSCRIBE",
    value: function destoryStoreSUBSCRIBE() {
      this.$store.offAll(this);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      get_default()(getPrototypeOf_default()(UIElement.prototype), "destroy", this).call(this);

      this.destoryStoreSUBSCRIBE();
    }
    /**
     * UIElement 를 다시 그린다. 
     * 
     * template 정의 부터  메세지 이벤트 정의까지 모두 다시 한다. 
     */

  }, {
    key: "rerender",
    value: function rerender() {
      get_default()(getPrototypeOf_default()(UIElement.prototype), "rerender", this).call(this);

      this.initialize();
      this.initializeStoreEvent();
    }
    /**
     * UIElement 기반으로 메세지를 호출 한다. 
     * 나 이외의 객체들에게 메세지를 전달한다. 
     * 
     * @param {string} messageName
     * @param {any[]} args 
     */

  }, {
    key: "emit",
    value: function emit(messageName) {
      var _this$$store;

      this.$store.source = this.source;
      this.$store.sourceContext = this;

      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_this$$store = this.$store).emit.apply(_this$$store, [messageName].concat(args));
    }
    /**
     * MicroTask 를 수행한다. 
     * 
     * @param {Function} callback 
     */

  }, {
    key: "nextTick",
    value: function nextTick(callback) {
      this.$store.nextTick(callback);
    }
    /**
     * 
     * UIElement 자신의 메세지를 수행한다. 
     * emit 은 나외의 객체에게 메세지를 보내고 
     * 
     * @param {string} messageName 
     * @param {any[]} args 
     */

  }, {
    key: "trigger",
    value: function trigger(messageName) {
      var _this$$store2;

      this.$store.source = this.source;

      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      (_this$$store2 = this.$store).trigger.apply(_this$$store2, [messageName].concat(args));
    }
  }, {
    key: "broadcast",
    value: function broadcast(messageName) {
      var _this3 = this;

      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }

      Object.keys(this.children).forEach(function (key) {
        var _this3$children$key;

        (_this3$children$key = _this3.children[key]).trigger.apply(_this3$children$key, [messageName].concat(args));
      });
    }
  }, {
    key: "on",
    value: function on(message, callback) {
      this.$store.on(message, callback);
    }
  }, {
    key: "off",
    value: function off(message, callback) {
      this.$store.off(message, callback);
    }
  }]);

  return UIElement;
}(EventMachine_EventMachine);

/* harmony default export */ var base_UIElement = __webpack_exports__["a"] = (UIElement_UIElement);

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return second; });
/* unused harmony export frames */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return timecode; });
/* unused harmony export timecodeToFrames */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return framesToTimecode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return makeTimer; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _func__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(8);


function second(fps, timecode) {
  if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isString"])(timecode)) {
    var _timecode$split = timecode.split(':'),
        _timecode$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_timecode$split, 4),
        hour = _timecode$split2[0],
        minute = _timecode$split2[1],
        second = _timecode$split2[2],
        frame = _timecode$split2[3];

    hour = parseInt(hour, 10);
    minute = parseInt(minute, 10);
    second = parseInt(second, 10);
    frame = parseInt(frame, 10);
    return hour * 3600 + minute * 60 + second + frame * (1 / fps);
  } else if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(timecode)) {
    return timecode / fps;
  }

  return 0;
}
function frames(fps, time) {
  return time * fps;
}
function timecode(fps, seconds) {
  var h = Math.floor(seconds / 3600);
  var m = Math.floor(seconds / 60 % 60);
  var s = Math.floor(seconds % 60);
  var f = Math.round((seconds - Math.floor(seconds)) * fps);

  if (f === fps) {
    f = 0;
    s += 1;

    if (s === 60) {
      m += 1;

      if (m === 60) {
        h += 1;
      }
    }
  }

  return [h, m, s, f].map(function (t) {
    return (t + '').padStart(2, '0');
  }).join(':');
}
function timecodeToFrames(fps, timecode) {
  var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return frames(fps, second(fps, timecode) - second(fps, start));
}
function framesToTimecode(fps, frames) {
  var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  return timecode(fps, second(fps, frames) - second(fps, start));
}
/**
 * make a timer for timeline animation 
 * 
 * @param {*} opt 
 */

function makeTimer(opt) {
  var timer = {
    id: 0,
    start: 0,
    speed: opt.speed || 1,
    elapsed: opt.elapsed || 0,
    duration: opt.duration || 0,
    iterationStartCount: 1,
    iterationCount: opt.iterationCount || Number.MAX_SAFE_INTEGER,
    direction: opt.direction || 'normal',
    log: [],
    logIndex: 0,
    tick: opt.tick || function () {},
    startCallback: opt.start || function () {},
    endCallback: opt.end || function () {},
    firstCallback: opt.first || function () {},
    lastCallback: opt.last || function () {}
  };

  var isForward = function isForward() {
    if (timer.direction === 'normal') {
      return true;
    } else if (timer.direction === 'reverse') {
      return false;
    } else if (timer.direction === 'alternate') {
      return timer.iterationStartCount % 2 === 1;
    } else if (timer.direction === 'alternate-reverse') {
      return timer.iterationStartCount % 2 === 0;
    }
  };

  var calculateForDirection = function calculateForDirection(rate) {
    return isForward() ? rate : 1 - rate;
  };

  var tick = function tick(now) {
    var isStart = false;

    if (timer.start === null) {
      timer.start = now; // timer.elapsed = 0; 

      isStart = true;
    }

    var dt = now - timer.start;
    timer.elapsed += dt * timer.speed;
    timer.start = now;

    if (timer.elapsed > timer.duration) {
      timer.elapsed = timer.duration;
    } // console.log(timer.elapsed, dt, timer.speed)


    var elapsed = calculateForDirection(timer.elapsed / timer.duration) * timer.duration;
    if (isStart) timer.startCallback(elapsed, timer);
    timer.log[timer.logIndex++] = {
      elapsed: elapsed,
      dt: timer.lastTime - elapsed
    };
    timer.lastTime = elapsed;
    timer.tick(elapsed, timer);

    if (timer.elapsed === timer.duration) {
      end();
    } else {
      frameStart();
    }
  };

  var frameStart = function frameStart() {
    timer.id = requestAnimationFrame(tick);
  };

  var end = function end() {
    timer.endCallback(timer.elapsed, timer);
    timer.iterationStartCount++;

    if (timer.iterationStartCount > timer.iterationCount) {
      timer.lastCallback(timer.elapsed, timer);
      cancelAnimationFrame(timer.id);
    } else {
      // 멈추지 않은 상태면 
      timer.start = null;
      timer.elapsed = 0;
      frameStart();
    }
  };

  var play = function play() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    timer.start = null;
    timer.iterationStartCount = 1;
    timer.log = [];
    timer.lastTime = 0;
    timer.logIndex = 0;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(opt.elapsed)) timer.elapsed = opt.elapsed;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(opt.speed)) timer.speed = opt.speed;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(opt.duration)) timer.duration = opt.duration;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isNumber"])(opt.iterationCount)) timer.iterationCount = opt.iterationCount || Number.MAX_SAFE_INTEGER;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isString"])(opt.direction)) timer.direction = opt.direction;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.tick)) timer.tick = opt.tick;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.start)) timer.startCallback = opt.start;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.end)) timer.endCallback = opt.end;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.first)) timer.firstCallback = opt.first;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.last)) timer.lastCallback = opt.last;
    if (Object(_func__WEBPACK_IMPORTED_MODULE_1__["isFunction"])(opt.stop)) timer.stopCallback = opt.stop;
    timer.firstCallback(timer.elapsed, timer);
    frameStart();
  };

  var stop = function stop() {
    timer.stopCallback(timer.elapsed, timer);
    cancelAnimationFrame(timer.id);
  };

  var seek = function seek(t) {
    timer.elapsed = t;
    timer.tick(timer.elapsed, timer);
  };

  var first = function first(t) {
    seek(0);
  };

  var last = function last(t) {
    seek(timer.duration);
  };

  return {
    play: play,
    stop: stop,
    tick: tick,
    first: first,
    last: last,
    seek: seek,
    timer: timer
  };
} // var timer = makeTimer({
//     duration: 1000,
//     iterationCount: 3,
//     direction: 'alternate',
//     first: (elapsed, timer) => {
//         console.log('first', elapsed, timer);
//     },
//     last: (elapsed, timer) => {
//         console.log('last', elapsed, timer);
//     },
//     start: (elapsed, timer) => {
//         console.log('start', elapsed, timer);
//     },
//     end : (elapsed, timer) => {
//         console.log('end', elapsed, timer);
//     },
//     tick: (elapsed, timer) => {
//         console.log('tick', timecode(60, elapsed / 1000), elapsed, timer.iterationStartCount)
//     }
// })
// timer.start();
// setTimeout( () => {
//     timer.start();
// }, 1000)

/* 

makeTimer({
    duration:  ,
    tick: (elapsed, timer) => {

    }
})

timer.start({ elapsed: 10, speed : 0.5, duration : 10 * 1000 })

*/

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Transform_Transform; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/index.js + 7 modules
var esm = __webpack_require__(12);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// CONCATENATED MODULE: ./src/el/editor/property-parser/TransformCache.js


var MAX_CACHE_COUNT = 1000;
var cachedTransformMap = new Map();
var TransformCache_TransformCache = /*#__PURE__*/function () {
  function TransformCache() {
    classCallCheck_default()(this, TransformCache);
  }

  createClass_default()(TransformCache, null, [{
    key: "has",
    value: function has(key) {
      return cachedTransformMap.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return cachedTransformMap.get(key);
    }
  }, {
    key: "set",
    value: function set(key, parsedValue) {
      if (cachedTransformMap.size > MAX_CACHE_COUNT) {
        cachedTransformMap.clear();
      }

      cachedTransformMap.set(key, parsedValue);
    }
  }]);

  return TransformCache;
}();
// CONCATENATED MODULE: ./src/el/editor/property-parser/Transform.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var TRANSFORM_REG = /((matrix|translate(X|Y|Z|3d)?|scale(X|Y|Z|3d)?|rotate(X|Y|Z|3d)?|skew(X|Y)|matrix(3d)?|perspective)\(([^\)]*)\))/gi;
var Transform_Transform = /*#__PURE__*/function (_Property) {
  inherits_default()(Transform, _Property);

  var _super = _createSuper(Transform);

  function Transform() {
    classCallCheck_default()(this, Transform);

    return _super.apply(this, arguments);
  }

  createClass_default()(Transform, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return {
        itemType: "transform",
        value: []
      };
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread({}, this.attrs('itemType', 'type', 'value'));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.json.type, "(").concat(this.json.value.join(', ') || "", ")");
    }
  }, {
    key: "hasNumberValue",
    value: function hasNumberValue() {
      var type = this.json.type;
      return type.includes('matrix') || type.includes('scale');
    }
  }], [{
    key: "join",
    value: function join(list) {
      var firstType = 'perspective';
      var lastType = 'matrix3d';
      var arr = list.filter(function (it) {
        return it.type === firstType;
      });
      var last = list.filter(function (it) {
        return it.type === lastType;
      });
      var arr2 = list.filter(function (it) {
        return it.type !== firstType && it.type !== lastType;
      });
      return [].concat(toConsumableArray_default()(arr), toConsumableArray_default()(arr2), toConsumableArray_default()(last)).map(function (it) {
        return new Transform(it).toString();
      }).join(' ');
    }
  }, {
    key: "parse",
    value: function parse(transform) {
      return new Transform(transform);
    }
  }, {
    key: "remove",
    value: function remove(transform) {
      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      if (Object(func["isString"])(type)) {
        type = [type];
      }

      return Transform.filter(transform, function (it) {
        return type.includes(it.type) === false;
      });
    }
  }, {
    key: "filter",
    value: function filter(transform, filterFunction) {
      return Transform.join(Transform.parseStyle(transform, false).filter(function (it) {
        return filterFunction(it);
      }));
    }
  }, {
    key: "replace",
    value: function replace(transform, valueObject) {
      var obj = Transform.parseStyle(transform, false);
      var tObject = obj.find(function (t) {
        return t.type === valueObject.type;
      });

      if (tObject) {
        tObject.value = valueObject.value;
      } else {
        obj.push(valueObject);
      }

      return Transform.join(obj);
    }
  }, {
    key: "replaceAll",
    value: function replaceAll(oldTransform, newTransform) {
      var oldT = Transform.parseStyle(oldTransform, false);
      var newT = Transform.parseStyle(newTransform);

      for (var i = 0, len = newT.length; i < len; i++) {
        var newObject = newT[i];
        var oldObject = oldT.find(function (t) {
          return t.type === newObject.type;
        });

        if (oldObject) {
          oldObject.value = newObject.value;
        } else {
          oldT.push(newObject);
        }
      }

      return Transform.join(oldT);
    }
  }, {
    key: "addTransform",
    value: function addTransform(oldTransform, newTransform) {
      var oldT = Transform.parseStyle(oldTransform, false);
      var newT = Transform.parseStyle(newTransform);

      for (var i = 0, len = newT.length; i < len; i++) {
        var newObject = newT[i];
        var oldObject = oldT.find(function (t) {
          return t.type === newObject.type;
        });

        if (oldObject) {
          newObject.value.forEach(function (v, i) {
            oldObject.value[i].value += v.value;
          });
        } else {
          oldT.push(newObject);
        }
      }

      return Transform.join(oldT);
    }
    /**
     * 
     * @param {string} transform 
     * @param {string} type 
     * @returns {Length[]} 값 배열 
     */

  }, {
    key: "get",
    value: function get(transform, type) {
      var arr = Transform.parseStyle(transform);

      if (Object(func["isFunction"])(type)) {
        arr = arr.find(type);
      } else {
        arr = arr.find(function (it) {
          return it.type === type;
        });
      }

      if (arr) {
        return arr.value;
      }

      return undefined;
    }
  }, {
    key: "createRotateKey",
    value: function createRotateKey(transform, angle, field) {
      return "".concat(transform, ":::").concat(field, "(").concat(angle, ")");
    }
  }, {
    key: "rotate",
    value: function rotate(transform, angle) {
      var field = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rotate';
      var key = Transform.createRotateKey(transform, angle, field);
      if (TransformCache_TransformCache.has(key)) return TransformCache_TransformCache.get(key);
      TransformCache_TransformCache.set(key, Transform.replace(transform, {
        type: field,
        value: [angle]
      }));
      return TransformCache_TransformCache.get(key);
    }
  }, {
    key: "rotateZ",
    value: function rotateZ(transform, angle) {
      return Transform.rotate(transform, angle, 'rotateZ');
    }
  }, {
    key: "rotateX",
    value: function rotateX(transform, angle) {
      return Transform.rotate(transform, angle, 'rotateX');
    }
  }, {
    key: "rotateY",
    value: function rotateY(transform, angle) {
      return Transform.rotate(transform, angle, 'rotateY');
    }
    /**
     * css transform 문자열을 파싱한다. 
     * 
     * @param {string} transform 
     * @param {boolean} [doCache=true] 캐쉬 적용할지 여부 결정 
     * @returns {Transform[]} 트랜스폼 리스트 
     */

  }, {
    key: "parseStyle",
    value: function parseStyle(transform) {
      var doCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var transforms = [];
      if (!transform) return transforms;

      if (doCache && TransformCache_TransformCache.has(transform)) {
        return TransformCache_TransformCache.get(transform);
      }

      var matches = transform.match(TRANSFORM_REG) || [];
      matches.forEach(function (value, index) {
        var _value$split = value.split("("),
            _value$split2 = slicedToArray_default()(_value$split, 2),
            transformName = _value$split2[0],
            transformValue = _value$split2[1];

        transformValue = transformValue.split(")")[0];
        var arr = transformValue.split(',');

        if (transformValue.includes('matrix') || transformValue.includes('scale')) {
          arr = arr.map(function (it) {
            return Length["a" /* Length */].number(it.trim());
          });
        } else {
          arr = arr.map(function (it) {
            return Length["a" /* Length */].parse(it.trim());
          });
        } // drop shadow 제외한 나머지 값 지정


        transforms[index] = Transform.parse({
          type: transformName,
          value: arr
        });
      });

      if (doCache) {
        TransformCache_TransformCache.set(transform, transforms);
      }

      return transforms;
    }
    /**
     * Transform 정보를 기준으로 mat4 행렬값으로 변환 
     * 
     * 
     * @param {Transform[]} parsedTransformList 파싱된 Transform 리스트 
     * @param {number} width Layer 의 실제 넓이 
     * @param {number} height Layer 의 실제 높이 
     */

  }, {
    key: "createTransformMatrix",
    value: function createTransformMatrix(parsedTransformList, width, height) {
      // start with the identity matrix 
      var view = esm["a" /* mat4 */].create(); // 3. Multiply by each of the transform functions in transform property from left to right     

      for (var i = 0, len = parsedTransformList.length; i < len; i++) {
        var it = parsedTransformList[i];

        switch (it.type) {
          case 'translate':
          case 'translateX':
          case 'translateY':
          case 'translateZ':
            var values = it.value;

            if (it.type === 'translate') {
              values = [values[0].toPx(width).value, values[1].toPx(height).value, 0];
            } else if (it.type === 'translateX') {
              values = [values[0].toPx(width).value, 0, 0];
            } else if (it.type === 'translateY') {
              values = [0, values[0].toPx(height).value, 0];
            } else if (it.type === 'translateZ') {
              values = [0, 0, values[0].toPx().value];
            }

            esm["a" /* mat4 */].translate(view, view, values);
            break;

          case 'rotate':
          case 'rotateZ':
            // console.log('rotateZ', it.value);
            esm["a" /* mat4 */].rotateZ(view, view, Object(math["degreeToRadian"])(it.value[0].value));
            break;

          case 'rotateX':
            esm["a" /* mat4 */].rotateX(view, view, Object(math["degreeToRadian"])(it.value[0].value));
            break;

          case 'rotateY':
            esm["a" /* mat4 */].rotateY(view, view, Object(math["degreeToRadian"])(it.value[0].value));
            break;

          case 'rotate3d':
            var values = it.value;
            esm["a" /* mat4 */].rotate(view, view, Object(math["degreeToRadian"])(it.value[3].value), [values[0].value, values[1].value, values[2].value]);
            break;

          case 'scale':
            esm["a" /* mat4 */].scale(view, view, [it.value[0].value, it.value[1].value, 1]);
            break;

          case 'scaleX':
            esm["a" /* mat4 */].scale(view, view, [it.value[0].value, 1, 1]);
            break;

          case 'scaleY':
            esm["a" /* mat4 */].scale(view, view, [1, it.value[0].value, 1]);
            break;

          case 'scaleZ':
            esm["a" /* mat4 */].scale(view, view, [1, 1, it.value[0].value]);
            break;

          case 'matrix':
            var values = it.value;
            values = [values[0].value, values[1].value, 0, 0, values[2].value, values[3].value, 0, 0, 0, 0, 1, 0, values[4].value, values[5].value, 0, 1];
            esm["a" /* mat4 */].multiply(view, view, values);
            break;

          case 'matrix3d':
            var values = it.value.map(function (it) {
              return it.value;
            });
            esm["a" /* mat4 */].multiply(view, view, values);
            break;

          case 'perspective':
            var values = it.value;
            esm["a" /* mat4 */].perspective(view, Math.PI * 0.5, width / height, 1, values[0].value);
            break;
        }
      }

      return view;
    }
  }, {
    key: "fromScale",
    value: function fromScale(scale) {
      if (scale[0] === 1 && scale[1] === 1) {
        return '';
      }

      var list = [];
      if (scale[0] != 1) list.push("scaleX(".concat(scale[0], ")"));
      if (scale[1] != 1) list.push("scaleY(".concat(scale[1], ")"));
      if (scale[2] != 1) list.push("scaleZ(".concat(scale[2], ")"));
      return list.join(' ');
    }
  }]);

  return Transform;
}(Property["a" /* Property */]);

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export pointPoint */
/* unused harmony export pointPointDist */
/* unused harmony export pointCircle */
/* unused harmony export circleCirce */
/* unused harmony export pointRect */
/* unused harmony export rectRect */
/* unused harmony export circleRect */
/* unused harmony export linePoint */
/* unused harmony export lineCircle */
/* unused harmony export getClosestPointBylineCircle */
/* unused harmony export lineLine */
/* unused harmony export getClosestPointBylineLine */
/* unused harmony export lineRect */
/* unused harmony export getClosestPointBylineRect */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return polyPoint; });
/* unused harmony export polyCircle */
/* unused harmony export polyRect */
/* unused harmony export polyLine */
/* unused harmony export getClosestPointByPolyLine */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return polyPoly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return rectToVerties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return getRotatePointer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return rectToVertiesForArea; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return itemsToRectVerties; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return vertiesToRectangle; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(58);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(12);
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(15);





/**
 * 포인트 충돌 체크 
 * 
 * @param {number} x1
 * @param {number} y1
 * @param {number} x2
 * @param {number} y2
 */

function pointPoint(x1, y1, x2, y2) {
  return x1 === x2 && y1 === y2;
}
/**
 * 점간의 대략적인 거리의 위치 지정 
 * 
 * @param {vec3} s source vertext 
 * @param {vec3} t target vertext 
 * @param {number} [dist=0] check distance
 */

function pointPointDist(s, t) {
  var dist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var targetX = Infinity;
  var targetY = Infinity;

  if (Math.abs(s[0] - t[0]) <= dist) {
    targetX = t[0];
  }

  if (Math.abs(s[1] - t[1]) <= dist) {
    targetY = t[1];
  }

  return {
    targetX: targetX,
    targetY: targetY
  };
}
/**
 * 점과 원의 충돌 체크 
 * 
 * @param {number} x1 x 
 * @param {number} y1 y
 * @param {number} cx 원의 중심점 x 
 * @param {number} cy 원의 중심점 y
 * @param {number} r 원의 반지름 radius
 */

function pointCircle(x1, y1, cx, cy, r) {
  var distX = x1 - cx;
  var distY = y1 - cy;
  return Math.hypot(distX, distY) <= r;
}
/**
 * 원과 원의 충돌 
 * 
 * @param {number} cx1 
 * @param {number} cy1 
 * @param {number} r1 
 * @param {number} cx2 
 * @param {number} cy2 
 * @param {number} r2 
 */

function circleCirce(cx1, cy1, r1, cx2, cy2, r2) {
  var distX = cx2 - cx1;
  var distY = cy2 - cy1;
  return Math.hypot(distX, distY) <= r1 + r2;
}
/**
 * 점과 사각형 충돌 체크 
 * 
 * @param {number} x1
 * @param {number} y1
 * @param {number} rx 
 * @param {number} ry 
 * @param {number} rw 
 * @param {number} rh 
 */

function pointRect(x1, y1, rx, ry, rw, rh) {
  return rx <= x1 && x1 <= rx + rw && ry <= y1 && y1 <= ry + rh;
}
/**
 * 사각형과 사각형 충돌 체크 
 * 
 * @param {number} rx1 
 * @param {number} ry1 
 * @param {number} rw1 
 * @param {number} rh1 
 * @param {number} rx2 
 * @param {number} ry2 
 * @param {number} rw2 
 * @param {number} rh2 
 */

function rectRect(rx1, ry1, rw1, rh1, rx2, ry2, rw2, rh2) {
  return rx1 + rw1 >= rx2 && rx1 <= rx2 + rw2 && ry1 + rh1 >= ry2 && ry1 <= ry2 + rh2;
}
/**
 * 
 * @param {number} cx 
 * @param {number} cy 
 * @param {number} r 
 * @param {number} rx 
 * @param {number} ry 
 * @param {number} rw 
 * @param {number} rh 
 */

function circleRect(cx, cy, r, rx, ry, rw, rh) {
  var testX = cx;
  var testY = cy;
  if (cx < rx) testX = rx;else if (cx > rx + rw) testX = rx + rw;
  if (cy < ry) testY = ry;else if (cy > ry + rh) testY = ry + rh;
  var distX = cx - testX;
  var distY = cy - testY;
  return Math.hypot(distX, distY) <= r;
}
/**
 * 
 * 점이 line 에 속하는지 체크 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} px 
 * @param {number} py 
 * @param {number} buffer 
 */

function linePoint(x1, y1, x2, y2, px, py) {
  var buffer = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0.1;
  var dist1 = Math.hypot(px - x1, py - y1);
  var dist2 = Math.hypot(px - x2, py - y2);
  var lineLength = Math.hypot(x1 - x2, y1 - y2);
  var calcDist = dist1 + dist2;
  return calcDist >= lineLength - buffer && calcDist <= lineLength + buffer;
}
/**
 * 
 * 선과 원 체크 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} cx 
 * @param {number} cy 
 * @param {number} r 
 */

function lineCircle(x1, y1, x2, y2, cx, cy, r) {
  // 앙 옆의 점이 원 안에 있으면 true 
  if (pointCircle(x1, y1, cx, cy, r)) return true;
  if (pointCircle(x2, y2, cx, cy, r)) return true;
  var lineLength = Math.hypot(x1 - x2, y1 - y2);
  var dot = ((cx - x1) * (x2 - x1) + (cy - y1) * (y2 - y1)) / Math.pow(lineLength, 2);
  var closestX = x1 + (x2 - x1) * dot;
  var closestY = y1 + (y2 - y1) * dot;

  if (linePoint(x1, y1, x2, y2, closestX, closestY) === false) {
    return false;
  } // 원의 중심과 가장 가까운 점의 거리 체크 


  return Math.hypot(closestX - cx, closestY - cy) <= r;
}
/**
 * 
 * 선분에서 원의 중심에 가장 가까운 점 찾기 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} cx 
 * @param {number} cy 
 * @param {number} r 
 */

function getClosestPointBylineCircle(x1, y1, x2, y2, cx, cy, r) {
  var lineLength = Math.hypot(x1 - x2, y1 - y2);
  var dot = ((cx - x1) * (x2 - x1) + (cy - y1) * (y2 - y1)) / Math.pow(lineLength, 2);
  var closestX = x1 + (x2 - x1) * dot;
  var closestY = y1 + (y2 - y1) * dot;
  return [closestX, closestY];
}
function lineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
  var A = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  var B = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  return 0 <= A && A <= 1 && 0 <= B && B <= 1;
}
/**
 * 
 * 두개의 선분이 겹치는 점의 위치 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} x3 
 * @param {number} y3 
 * @param {number} x4 
 * @param {number} y4 
 */

function getClosestPointBylineLine(x1, y1, x2, y2, x3, y3, x4, y4) {
  var A = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));
  var B = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / ((y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1));

  if (0 <= A && A <= 1 && 0 <= B && B <= 1) {
    return [x1 + A * (x2 - x1), y1 + B * (y2 - y1)];
  }

  return [];
}
/**
 * 
 * 선과 사각형의 겹치는 지점 체크 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} rectX 
 * @param {number} rectY 
 * @param {number} width 
 * @param {number} height 
 */

function lineRect(x1, y1, x2, y2, rectX, rectY, width, height) {
  var left = lineLine(x1, y1, x2, y2, rectX, rectY, rectX, rectY + height);
  var right = lineLine(x1, y1, x2, y2, rectX + width, rectY, rectX + width, rectY + height);
  var top = lineLine(x1, y1, x2, y2, rectX, rectY, rectX + width, rectY);
  var bottom = lineLine(x1, y1, x2, y2, rectX, rectY + height, rectX + width, rectY + height);
  return left || right || top || bottom;
}
/**
 * 
 * 선과 사각형의 겹치는 지점 리스트 
 * 
 * @param {number} x1 
 * @param {number} y1 
 * @param {number} x2 
 * @param {number} y2 
 * @param {number} rectX 
 * @param {number} rectY 
 * @param {number} width 
 * @param {number} height 
 * @returns {[x, y][]}
 */

function getClosestPointBylineRect(x1, y1, x2, y2, rectX, rectY, width, height) {
  var left = getClosestPointBylineLine(x1, y1, x2, y2, rectX, rectY, rectX, rectY + height);
  var right = getClosestPointBylineLine(x1, y1, x2, y2, rectX + width, rectY, rectX + width, rectY + height);
  var top = getClosestPointBylineLine(x1, y1, x2, y2, rectX, rectY, rectX + width, rectY);
  var bottom = getClosestPointBylineLine(x1, y1, x2, y2, rectX, rectY + height, rectX + width, rectY + height);
  var points = [];
  if (left.length) points.push(left);
  if (right.length) points.push(right);
  if (top.length) points.push(top);
  if (bottom.length) points.push(bottom);
  return points;
}
/**
 * 폴리곤에 점 비교 
 * 
 * @param {vec3[]} verties 
 * @param {number} px 
 * @param {number} py 
 */

function polyPoint() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var px = arguments.length > 1 ? arguments[1] : undefined;
  var py = arguments.length > 2 ? arguments[2] : undefined;
  var isCollision = false;
  var len = verties.length;
  verties.forEach(function (vector, index) {
    var _vector = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        cx = _vector[0],
        cy = _vector[1];

    var _verties = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        nx = _verties[0],
        ny = _verties[1];

    if ((cy >= py && ny < py || cy < py && ny >= py) && px < (nx - cx) * (py - cy) / (ny - cy) + cx) {
      isCollision = !isCollision;
    }
  });
  return isCollision;
}
function polyCircle() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var cx = arguments.length > 1 ? arguments[1] : undefined;
  var cy = arguments.length > 2 ? arguments[2] : undefined;
  var r = arguments.length > 3 ? arguments[3] : undefined;
  var len = verties.length;
  var isCollision = verties.some(function (vector, index) {
    var _vector2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        currentX = _vector2[0],
        currentY = _vector2[1];

    var _verties2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        nextX = _verties2[0],
        nextY = _verties2[1];

    var collision = lineCircle(currentX, currentY, nextX, nextY, cx, cy, r);
    if (collision) return true;
    return false;
  });
  if (isCollision) return true;

  if (polyPoint(verties, cx, cy)) {
    return true;
  }

  return false;
}
function polyRect() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var rectX = arguments.length > 1 ? arguments[1] : undefined;
  var rectY = arguments.length > 2 ? arguments[2] : undefined;
  var rectWidth = arguments.length > 3 ? arguments[3] : undefined;
  var rectHeight = arguments.length > 4 ? arguments[4] : undefined;
  var len = verties.length;
  return verties.some(function (vector, index) {
    var _vector3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        currentX = _vector3[0],
        currentY = _vector3[1];

    var _verties3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        nextX = _verties3[0],
        nextY = _verties3[1];

    var collision = lineRect(currentX, currentY, nextX, nextY, rectX, rectY, rectWidth, rectHeight);
    if (collision) return true;
    var inside = polyPoint(verties, rectX, rectY);
    if (inside) return true;
    return false;
  });
}
function polyLine() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var x1 = arguments.length > 1 ? arguments[1] : undefined;
  var y1 = arguments.length > 2 ? arguments[2] : undefined;
  var x2 = arguments.length > 3 ? arguments[3] : undefined;
  var y2 = arguments.length > 4 ? arguments[4] : undefined;
  var len = verties.length;
  return verties.some(function (vector, index) {
    var _vector4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        x3 = _vector4[0],
        y3 = _vector4[1];

    var _verties4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        x4 = _verties4[0],
        y4 = _verties4[1];

    return lineLine(x1, y1, x2, y2, x3, y3, x4, y4);
  });
}
function getClosestPointByPolyLine() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var x1 = arguments.length > 1 ? arguments[1] : undefined;
  var y1 = arguments.length > 2 ? arguments[2] : undefined;
  var x2 = arguments.length > 3 ? arguments[3] : undefined;
  var y2 = arguments.length > 4 ? arguments[4] : undefined;
  var pointList = [];
  var len = verties.length;
  verties.forEach(function (vector, index) {
    var _vector5 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        x3 = _vector5[0],
        y3 = _vector5[1];

    var _verties5 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        x4 = _verties5[0],
        y4 = _verties5[1];

    var point = getClosestPointBylineLine(x1, y1, x2, y2, x3, y3, x4, y4);

    if (point.length) {
      pointList.push(point);
    }
  });
  return pointList;
}
/**
 * polygon 끼리 충돌 비교 
 * 
 * 
 * @param {[x,y][]} verties 
 * @param {[x,y][]} targetVerties 
 */

function polyPoly() {
  var verties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var targetVerties = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var len = verties.length;
  return verties.some(function (vector, index) {
    var _vector6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(vector, 2),
        x1 = _vector6[0],
        y1 = _vector6[1];

    var _verties6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(verties[(index + 1) % len], 2),
        x2 = _verties6[0],
        y2 = _verties6[1];

    var collision = polyLine(targetVerties, x1, y1, x2, y2);
    if (collision) return true;
    collision = polyPoint(verties, targetVerties[0][0], targetVerties[0][1]);
    if (collision) return true;
    return false;
  });
}
function rectToVerties(x, y, width, height) {
  var origin = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '50% 50% 0px';
  var center = el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_1__[/* TransformOrigin */ "a"].scale(origin, width, height);
  return [[x, y, 0], // top , left 
  [x + width, y, 0], // top , right 
  [x + width, y + height, 0], // bottom , right 
  [x, y + height, 0], // bottom , left
  [x + center[0], y + center[1], 0] // transform origin 
  ];
}
function getRotatePointer(verties) {
  var dist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var topPointer = gl_matrix__WEBPACK_IMPORTED_MODULE_3__[/* vec3 */ "d"].lerp([], verties[0], verties[1], 0.5);
  var bottomPointer = gl_matrix__WEBPACK_IMPORTED_MODULE_3__[/* vec3 */ "d"].lerp([], verties[2], verties[3], 0.5);
  var rotatePointer = Object(_math__WEBPACK_IMPORTED_MODULE_4__["getPointBetweenVerties"])(bottomPointer, topPointer, dist);
  return rotatePointer;
}
function rectToVertiesForArea(x, y, width, height) {
  return rectToVerties(x, y, width, height);
}
function itemsToRectVerties() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var minX = Number.MAX_SAFE_INTEGER;
  var minY = Number.MAX_SAFE_INTEGER;
  var maxX = Number.MIN_SAFE_INTEGER;
  var maxY = Number.MIN_SAFE_INTEGER;
  var xList = [];
  var yList = [];
  items.forEach(function (item) {
    item.verties().forEach(function (vector) {
      xList.push(vector[0]);
      yList.push(vector[1]);
    });
  });
  minX = Math.min.apply(Math, xList);
  maxX = Math.max.apply(Math, xList);
  minY = Math.min.apply(Math, yList);
  maxY = Math.max.apply(Math, yList);
  if (minX === Number.MAX_SAFE_INTEGER) minX = 0;
  if (minY === Number.MAX_SAFE_INTEGER) minY = 0;
  if (maxX === Number.MIN_SAFE_INTEGER) maxX = 0;
  if (maxY === Number.MIN_SAFE_INTEGER) maxY = 0;
  return rectToVerties(minX, minY, maxX - minX, maxY - minY);
}
function vertiesToRectangle(verties) {
  var x = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].px(verties[0][0]).floor();
  var y = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].px(verties[0][1]).floor();
  var width = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].px(gl_matrix__WEBPACK_IMPORTED_MODULE_3__[/* vec3 */ "d"].dist(verties[0], verties[1])).floor();
  var height = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].px(gl_matrix__WEBPACK_IMPORTED_MODULE_3__[/* vec3 */ "d"].dist(verties[0], verties[3])).floor();
  return {
    x: x,
    left: x,
    y: y,
    top: y,
    width: width,
    height: height
  };
}

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PathParser; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(24);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(15);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(12);
/* harmony import */ var _Point__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(25);









var REG_PARSE_NUMBER_FOR_PATH = /([mMlLvVhHcCsSqQtTaAzZ]([^mMlLvVhHcCsSqQtTaAzZ]*))/g;
var splitReg = /[\b\t \,]/g;
var numberReg = /-?[0-9]*\.?[0-9]+(?:e[-+]?\d+)?/ig;

var PathParser = /*#__PURE__*/function () {
  /**
   * 
   * @param {string} pathString  SVG Path 문자열
   */
  function PathParser() {
    var pathString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, PathParser);

    this.reset(pathString);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(PathParser, [{
    key: "reset",
    value: function reset() {
      var pathString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.segments = [];
      this.pathString = pathString;
      this.parse();
    }
  }, {
    key: "resetSegments",
    value: function resetSegments(segments) {
      this.segments = segments || [];
      this.pathString = this.joinPath();
    }
  }, {
    key: "trim",
    value: function trim() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var arr = str.match(numberReg) || [];
      return arr.filter(function (it) {
        return it != '';
      });
    }
  }, {
    key: "parse",
    value: function parse() {
      var _this = this;

      var arr = this.pathString.match(REG_PARSE_NUMBER_FOR_PATH) || [];
      this.segments = arr.map(function (s) {
        var command = s[0];

        var values = _this.trim(s.replace(command, '')).map(function (it) {
          return +it;
        });

        return {
          command: command,
          values: values
        };
      }); // 상대 좌표를 모두 절 대 좌표로 변경 
      // 절대좌표로 변환이 되어야 transform 을 쉽게 적용 할 수 있다. 
      // 물론 트랜스폼 하기 전에 절대 좌표로 구조를 맞추고 
      // 다시 돌아올 수도 있겠지만 불필요한 작업이 너무 많아질 수도 있다. 

      this.segments = this.segments.map(function (s, index) {
        switch (s.command) {
          case 'c':
          case 'm':
          case 'l':
          case 'q':
          case 's':
          case 't':
          case 'v':
          case 'h':
            var prev = _this.segments[index - 1];
            var x = prev.values[prev.values.length - 2];
            var y = prev.values[prev.values.length - 1];

            for (var i = 0, len = s.values.length; i < len; i += 2) {
              s.values[i] += x;
              s.values[i + 1] += y;
            }

            return {
              command: s.command.toUpperCase(),
              values: _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(s.values)
            };

          default:
            return s;
        }
      });
    }
  }, {
    key: "convertGenerator",
    value: function convertGenerator() {
      var points = [];

      for (var index = 0, len = this.segments.length; index < len; index++) {
        var s = this.segments[index];
        var nextSegment = this.segments[index + 1];
        var command = s.command,
            values = s.values;

        if (command === 'M') {
          var _values = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 2),
              x = _values[0],
              y = _values[1];

          points.push({
            command: command,
            originalCommand: command,
            startPoint: {
              x: x,
              y: y
            },
            endPoint: {
              x: x,
              y: y
            },
            reversePoint: {
              x: x,
              y: y
            },
            curve: false
          });
        } else if (command === 'L') {
          var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);

          if (prevPoint.curve) {
            var _values2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 2),
                x = _values2[0],
                y = _values2[1];

            points.push({
              command: command,
              originalCommand: command,
              startPoint: {
                x: x,
                y: y
              },
              endPoint: {
                x: x,
                y: y
              },
              reversePoint: Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_5__["clone"])(prevPoint.endPoint),
              curve: true
            });
          } else {
            var _values3 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 2),
                x = _values3[0],
                y = _values3[1];

            points.push({
              command: command,
              originalCommand: command,
              startPoint: {
                x: x,
                y: y
              },
              endPoint: {
                x: x,
                y: y
              },
              reversePoint: {
                x: x,
                y: y
              },
              curve: false
            });
          }
        } else if (command === 'Q') {
          var _values4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 4),
              cx1 = _values4[0],
              cy1 = _values4[1],
              x = _values4[2],
              y = _values4[3];

          var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);

          if (prevPoint.curve) {
            // 내가 Q 인데 앞의 포인트가  
            var startPoint = {
              x: x,
              y: y
            };
            var endPoint = {
              x: x,
              y: y
            };
            var reversePoint = {
              x: x,
              y: y
            };
            points.push({
              command: 'L',
              originalCommand: command,
              startPoint: startPoint,
              endPoint: endPoint,
              reversePoint: reversePoint,
              curve: false
            });
            prevPoint.endPoint = {
              x: cx1,
              y: cy1
            };
          } else {
            if (nextSegment && nextSegment.command === 'L') {
              prevPoint.curve = true;
              prevPoint.endPoint = {
                x: cx1,
                y: cy1
              };
              var startPoint = {
                x: x,
                y: y
              };
              var reversePoint = {
                x: x,
                y: y
              };
              var endPoint = {
                x: x,
                y: y
              };
              points.push({
                command: 'L',
                originalCommand: command,
                curve: false,
                startPoint: startPoint,
                endPoint: endPoint,
                reversePoint: reversePoint
              });
            } else {
              var startPoint = {
                x: x,
                y: y
              };
              var reversePoint = {
                x: cx1,
                y: cy1
              };
              var endPoint = {
                x: x,
                y: y
              };
              points.push({
                command: command,
                originalCommand: command,
                curve: true,
                startPoint: startPoint,
                endPoint: endPoint,
                reversePoint: reversePoint
              });
            }
          }
        } else if (command === 'T') {
          var _values5 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 2),
              x = _values5[0],
              y = _values5[1]; // T 는 앞에 Q 가 있다는 소리 
          // Q 의 Control Point 반대편에 Control Point 가 있다고 치고 생각하자. 


          var prevSegment = segments[index - 1];

          if (prevSegment && prevSegment.command === 'Q') {
            var _prevSegment$values = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(prevSegment.values, 4),
                cx1 = _prevSegment$values[0],
                cy1 = _prevSegment$values[1],
                sx = _prevSegment$values[2],
                sy = _prevSegment$values[3];

            var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);
            prevPoint.endPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getReversePoint({
              x: sx,
              y: sy
            }, {
              x: cx1,
              y: cy1
            });
            var startPoint = {
              x: x,
              y: y
            };
            var endPoint = {
              x: x,
              y: y
            };
            var reversePoint = {
              x: x,
              y: y
            };
            points.push({
              command: 'L',
              originalCommand: command,
              startPoint: startPoint,
              endPoint: endPoint,
              reversePoint: reversePoint,
              curve: false
            });
          }
        } else if (command === 'C') {
          var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);

          var _values6 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 6),
              cx1 = _values6[0],
              cy1 = _values6[1],
              cx2 = _values6[2],
              cy2 = _values6[3],
              x = _values6[4],
              y = _values6[5];

          var startPoint = {
            x: x,
            y: y
          };
          var reversePoint = {
            x: cx2,
            y: cy2
          };
          var endPoint = {
            x: x,
            y: y
          };
          points.push({
            command: command,
            originalCommand: command,
            curve: true,
            startPoint: startPoint,
            endPoint: endPoint,
            reversePoint: reversePoint
          });

          if (prevPoint) {
            prevPoint.curve = true;
            prevPoint.endPoint = {
              x: cx1,
              y: cy1
            };
          }
        } else if (command === 'S') {
          var _values7 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(values, 2),
              x = _values7[0],
              y = _values7[1]; // S 는 앞에 C,S 가 있다는 소리 
          // S 의 Control Point 반대편에 Control Point 가 있다고 치고 생각하자. 


          var prevSegment = segments[index - 1];

          if (prevSegment && prevSegment.command === 'C') {
            var _prevSegment$values2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(prevSegment.values, 4),
                cx2 = _prevSegment$values2[0],
                cy2 = _prevSegment$values2[1],
                sx = _prevSegment$values2[2],
                sy = _prevSegment$values2[3];

            var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);
            prevPoint.endPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getReversePoint(prevPoint.startPoint, prevPoint.reversePoint);
            var startPoint = {
              x: x,
              y: y
            };
            var endPoint = {
              x: x,
              y: y
            };
            var reversePoint = {
              x: cx2,
              y: cy2
            };
            points.push({
              command: 'Q',
              originalCommand: command,
              startPoint: startPoint,
              endPoint: endPoint,
              reversePoint: reversePoint,
              curve: false
            });
          }
        } else if (command === 'Z') {
          var prevPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getPrevPoint(points, points.length);
          var firstPoint = _Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].getFirstPoint(points, points.length);

          if (_Point__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].isEqual(prevPoint.startPoint, firstPoint.startPoint)) {
            prevPoint.connected = true;
            prevPoint.endPoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_5__["clone"])(firstPoint.endPoint);
            firstPoint.reversePoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_5__["clone"])(prevPoint.reversePoint);
          }

          prevPoint.close = true;
        }
      }

      points = points.filter(function (p) {
        return !!p;
      });
      return points;
    }
  }, {
    key: "length",
    value: function length() {
      return this.segments.length;
    }
  }, {
    key: "setSegments",
    value: function setSegments(index, seg) {
      this.segments[index] = seg;
    }
  }, {
    key: "getSegments",
    value: function getSegments(index) {
      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_5__["isNotUndefined"])(index)) {
        return this.segments[index];
      }

      return this.segments;
    }
  }, {
    key: "joinPath",
    value: function joinPath(segments) {
      var list = segments || this.segments;
      return list.map(function (it) {
        return "".concat(it.command, " ").concat(it.values.length ? it.values.join(' ') : '');
      }).join('');
    }
  }, {
    key: "each",
    value: function each(callback) {
      var _this2 = this;

      var isReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var newSegments = this.segments.map(function (segment, index) {
        return callback.call(_this2, segment, index);
      });

      if (isReturn) {
        return newSegments;
      } else {
        this.segments = newSegments;
      }
    }
  }, {
    key: "_loop",
    value: function _loop(m) {
      var isReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this.each(function (segment) {
        var v = segment.values;
        var c = segment.command;

        switch (c) {
          case 'M':
          case 'L':
            var result = m(v, 0);
            segment.values = [result[0], result[1]];
            break;

          case 'V':
            var result = m([+v[0], 0]);
            segment.values = [result[0]];
            break;

          case 'H':
            var result = m([0, +v[0]]);
            segment.values = [result[1]];
            break;

          case 'C':
          case 'S':
          case 'T':
          case 'Q':
            for (var i = 0, len = v.length; i < len; i += 2) {
              var result = m(v, i);
              segment.values[i] = result[0];
              segment.values[i + 1] = result[1];
            }

            break;

          case 'A':
            break;
        }

        return segment;
      }, isReturn);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new PathParser(this.joinPath());
    }
  }, {
    key: "translate",
    value: function translate(tx, ty) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromTranslation([], [tx, ty, 0]));
      return this;
    }
  }, {
    key: "translateTo",
    value: function translateTo(tx, ty) {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromTranslation([], [tx, ty, 0]), true));
    }
  }, {
    key: "scale",
    value: function scale(sx, sy) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [sx, sy, 1]));
      return this;
    }
  }, {
    key: "scaleTo",
    value: function scaleTo(sx, sy) {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [sx, sy, 1]), true));
    }
  }, {
    key: "rotate",
    value: function rotate(angle, centerX, centerY) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromRotation([], Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle), [centerX || 0, centerY || 0, 0]));
      return this;
    }
  }, {
    key: "rotateTo",
    value: function rotateTo(angle) {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromRotation([], Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle), [centerX || 0, centerY || 0, 0]), true));
    }
  }, {
    key: "reflectionOrigin",
    value: function reflectionOrigin() {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [-1, -1, 0]));
      return this;
    }
  }, {
    key: "reflectionOriginTo",
    value: function reflectionOriginTo() {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [-1, -1, 0]), true));
    }
  }, {
    key: "flipX",
    value: function flipX() {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [1, -1, 0]));
      return this;
    }
  }, {
    key: "flipXTo",
    value: function flipXTo() {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [1, -1, 0]), true));
    }
  }, {
    key: "flipY",
    value: function flipY() {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [-1, 1, 0]));
      return this;
    }
  }, {
    key: "flipYTo",
    value: function flipYTo() {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromScaling([], [-1, 1, 0]), true));
    }
  }, {
    key: "skewX",
    value: function skewX(angle) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromValues(1, Math.tan(Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle)), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
      return this;
    }
  }, {
    key: "skewXTo",
    value: function skewXTo(angle) {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromValues(1, Math.tan(Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle)), 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true));
    }
  }, {
    key: "skewY",
    value: function skewY(angle) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromValues(1, 0, 0, 0, Math.tan(Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle)), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1));
      return this;
    }
  }, {
    key: "skewYTo",
    value: function skewYTo(angle) {
      return this.joinPath(this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].fromValues(1, 0, 0, 0, Math.tan(Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["degreeToRadian"])(angle)), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), true));
    }
  }, {
    key: "normalize",
    value: function normalize() {}
  }, {
    key: "getBBox",
    value: function getBBox() {
      var minX = Number.MAX_SAFE_INTEGER,
          minY = Number.MAX_SAFE_INTEGER;
      var maxX = Number.MIN_SAFE_INTEGER,
          maxY = Number.MIN_SAFE_INTEGER;
      this.each(function (segment, index) {
        var v = segment.values;
        var c = segment.command;
        var prevSegment = this.segments[index - 1];
        var accurancy = 1 / 10000;

        switch (c) {
          case 'M':
          case 'L':
            minX = Math.min(minX, v[0]);
            maxX = Math.max(maxX, v[0]);
            minY = Math.min(minY, v[1]);
            maxY = Math.max(maxY, v[1]);
            break;

          case 'V':
            minX = Math.min(minX, v[0]);
            maxX = Math.max(maxX, v[0]);
            break;

          case 'H':
            minY = Math.min(minY, v[1]);
            maxY = Math.max(maxY, v[1]);
            break;

          case 'C':
            Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_4__[/* getCurveBBox */ "i"])([[prevSegment.values[prevSegment.values.length - 2], prevSegment.values[prevSegment.values.length - 1], 0], [v[0], v[1], 0], [v[2], v[3], 0], [v[4], v[5], 0]]).forEach(function (p) {
              minX = Math.min(minX, p[0]);
              maxX = Math.max(maxX, p[0]);
              minY = Math.min(minY, p[1]);
              maxY = Math.max(maxY, p[1]);
            });
            break;

          case 'Q':
            var newPoints = [[prevSegment.values[prevSegment.values.length - 2], prevSegment.values[prevSegment.values.length - 1], 0], [v[0], v[1], 0], [v[2], v[3], 0]].map(function (p) {
              return {
                x: p[0],
                y: p[1]
              };
            });

            for (var i = 0; i <= 1; i += accurancy) {
              var _getBezierPointOneQua = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_4__[/* getBezierPointOneQuard */ "e"])(newPoints, i),
                  x = _getBezierPointOneQua.x,
                  y = _getBezierPointOneQua.y;

              minX = Math.min(minX, x);
              maxX = Math.max(maxX, x);
              minY = Math.min(minY, y);
              maxY = Math.max(maxY, y);
            }

            break;

          case 'A':
            break;
        }

        return segment;
      });
      return [[minX, minY, 0], [maxX, minY, 0], [maxX, maxY, 0], [minX, maxY, 0]];
    }
  }, {
    key: "d",
    get: function get() {
      return this.toString();
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.joinPath();
    }
  }, {
    key: "transformMat4",
    value: function transformMat4(transformMatrix) {
      var isReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this.each(function (segment) {
        var v = segment.values;
        var c = segment.command;

        switch (c) {
          case 'M':
          case 'L':
            var result = gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* vec3 */ "d"].transformMat4([], [v[0], v[1], 0], transformMatrix);
            segment.values = [result[0], result[1]];
            break;

          case 'V':
            var result = gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* vec3 */ "d"].transformMat4([], [+v[0], 0, 0], transformMatrix);
            segment.values = [result[0]];
            break;

          case 'H':
            var result = gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* vec3 */ "d"].transformMat4([], [0, +v[0], 0], transformMatrix);
            segment.values = [result[1]];
            break;

          case 'C':
          case 'S':
          case 'T':
          case 'Q':
            for (var i = 0, len = v.length; i < len; i += 2) {
              var result = gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* vec3 */ "d"].transformMat4([], [v[i], v[i + 1], 0], transformMatrix);
              segment.values[i] = result[0];
              segment.values[i + 1] = result[1];
            }

            break;

          case 'A':
            break;
        }

        return segment;
      }, isReturn);
    }
  }, {
    key: "invert",
    value: function invert(transformMatrix) {
      this.transformMat4(gl_matrix__WEBPACK_IMPORTED_MODULE_7__[/* mat4 */ "a"].invert([], transformMatrix));
    }
  }, {
    key: "round",
    value: function round() {
      var k = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.each(function (segment) {
        segment.values = segment.values.map(function (it) {
          return Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_6__["round"])(it, k);
        });
        return segment;
      });
      return this;
    }
  }, {
    key: "reverseSegments",
    value: function reverseSegments(segments) {
      var newSegments = [];
      var lastIndex = segments.length - 1;

      for (var i = lastIndex; i > 0; i--) {
        var segment = segments[i];
        var v = segment.values;
        var c = segment.command;
        var prevSegment = segments[i - 1];
        var lastX = prevSegment.values[prevSegment.values.length - 2];
        var lastY = prevSegment.values[prevSegment.values.length - 1];

        switch (c) {
          case 'L':
            if (i === lastIndex) {
              // last 일 경우 
              newSegments.push({
                command: 'M',
                values: [v[0], v[1]]
              });
            }

            newSegments.push({
              command: 'L',
              values: [lastX, lastY]
            });
            break;

          case 'C':
            if (i === lastIndex) {
              // last 일 경우 
              newSegments.push({
                command: 'M',
                values: [v[4], v[5]]
              });
            }

            newSegments.push({
              command: 'C',
              values: [v[2], v[3], v[0], v[1], lastX, lastY]
            });
            break;

          case 'Q':
            if (i === lastIndex) {
              // last 일 경우 
              newSegments.push({
                command: 'M',
                values: [v[2], v[3]]
              });
            }

            newSegments.push({
              command: 'Q',
              values: [v[0], v[1], lastX, lastY]
            });
            break;

          case 'Z':
            newSegments.push(segment);
            lastIndex = i - 1;
            break;
        }
      } // z가 가장 먼저 올 때는 z 를 다시 뒤로 돌려보낸다. 


      if (newSegments[0].command === 'Z') {
        newSegments.push(newSegments.shift());
      }

      return newSegments;
    }
    /**
     * segments 를 M 기준으로 분리 시킨다. 
     */

  }, {
    key: "splitSegments",
    value: function splitSegments() {
      var groupSegments = [];
      var newSegments = [];
      this.segments.forEach(function (s) {
        if (s.command === 'M') {
          newSegments = [s];
          groupSegments.push(newSegments);
        } else {
          newSegments.push(s);
        }
      });
      return groupSegments;
    }
    /**
     * path 의 segment 들을 역순으로 정렬한다. 
     * 
     * M이 여러개일 경우는  group 별로 역순으로 정렬하고 합친다. 
     */

  }, {
    key: "reverse",
    value: function reverse() {
      var _this3 = this;

      var groupSegments = this.splitSegments();
      var newSegments = [];
      groupSegments.forEach(function (segments) {
        newSegments.push.apply(newSegments, _this3.reverseSegments(segments));
      });
      this.segments = newSegments;
    }
  }, {
    key: "verties",
    get: function get() {
      var arr = [];
      var lastValues = [];
      this.each(function (segment) {
        var v = segment.values;
        var c = segment.command;

        switch (c) {
          case 'M':
          case 'L':
            arr.push([].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(segment.values), [0]));
            break;

          case 'V':
            arr.push([v[0], lastValues.pop(), 0]);
            break;

          case 'H':
            lastValues.pop();
            arr.push([lastValues.pop(), v[0], 0]);
            break;

          case 'C':
          case 'S':
          case 'T':
          case 'Q':
            for (var i = 0, len = v.length; i < len; i += 2) {
              arr.push([v[i], v[i + 1], 0]);
            }

            break;

          case 'A':
            break;
        }

        lastValues = v;
      });
      return arr;
    }
  }]);

  return PathParser;
}();



/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ComponentManager; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var el_editor_items_Item__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(35);




var ComponentManager = new ( /*#__PURE__*/function () {
  function _class() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, _class);

    this.components = {};
    this.inspectors = {};
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(_class, [{
    key: "registerComponent",
    value: function registerComponent(name, componentProperty) {
      if (this.components[name]) throw new Error("It has duplicated item name. " + name);
      this.components[name] = componentProperty;
    }
  }, {
    key: "registerInspector",
    value: function registerInspector(name, inspectorCallback) {
      if (this.inspectors[name]) throw new Error("It has duplicated item name. " + name);
      this.inspectors[name] = inspectorCallback;
    }
  }, {
    key: "getComponentClass",
    value: function getComponentClass(name) {
      return this.components[name] || this.components['rect'];
    }
  }, {
    key: "getInspector",
    value: function getInspector(name) {
      return this.inspectors[name];
    }
    /**
     * ItemType 에 해당되는 Item 객체를 생성한다. 
     * create Item instance
     * 
     * @param {string} itemType  ItemType 
     * @param {object} obj 
     * @returns {Item} 
     */

  }, {
    key: "createComponent",
    value: function createComponent(itemType) {
      var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var ComponentClass = this.getComponentClass(itemType);

      if (!ComponentClass) {
        throw new Error("".concat(itemType, " type is not valid."));
      }

      return new ComponentClass(obj);
    }
    /**
     * Inspector 를 생성하는 배열을 리턴해준다. 
     * 
     * @param {string} itemType 
     * @param {Item} item 
     * @returns 
     */

  }, {
    key: "createInspector",
    value: function createInspector(item) {
      var inspector = this.getInspector(item.itemType);

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(inspector)) {
        return inspector(item) || [];
      }

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(item.getProps)) {
        return item.getProps() || [];
      }

      return [];
    }
  }]);

  return _class;
}())();

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Property; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _Item__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(35);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var Property = /*#__PURE__*/function (_Item) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(Property, _Item);

  var _super = _createSuper(Property);

  function Property() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Property);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Property, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _objectSpread({
        selected: false,
        // 선택 여부 체크 
        layers: []
      }, obj);
    }
  }, {
    key: "isAttribute",
    value: function isAttribute() {
      return true;
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {};
    }
  }, {
    key: "toString",
    value: function toString() {
      return Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__["CSS_TO_STRING"])(this.toCSS());
    }
  }]);

  return Property;
}(_Item__WEBPACK_IMPORTED_MODULE_6__[/* Item */ "a"]);

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Item; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(15);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(8);




function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




function _traverse(obj) {
  var results = [];
  obj.layers.length && obj.layers.forEach(function (it) {
    results.push.apply(results, _traverse(it));
  });
  results.push(obj);
  return results;
}
/**
 * Item , 그리기를 위한 기본 모델 
 * 유니크한 아이디를 가진다. 
 * 
 * @class
 */


var Item = /*#__PURE__*/function () {
  function Item() {
    var _this = this;

    var json = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Item);

    this.ref = new Proxy(this, {
      get: function get(target, key) {
        var originMethod = target[key];

        if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_4__["isFunction"])(originMethod)) {
          // method tracking
          return function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return originMethod.apply(target, args);
          };
        } else {
          // getter or json property
          return originMethod || target.json[key];
        }
      },
      set: function set(target, key, value) {
        // Dom 객체가 오면 자동으로 입력 해줌
        // if (value && value.realVal && isFunction(value.realVal)) {
        //   value = value.realVal();
        // }
        if (_this.checkField(key, value)) {
          var isDiff = target.json[key] != value;
          target.json[key] = value;

          if (isDiff) {
            _this.changed();
          }
        } else {
          throw new Error("".concat(value, " is invalid as ").concat(key, " property value."));
        }

        return true;
      }
    });

    if (json instanceof Item) {
      json = json.toJSON();
    }

    this.json = this.convert(Object.assign(this.getDefaultObject(), json));
    this.lastChangedField = {};
    return this.ref;
  }
  /***********************************
   *
   * override
   *
   **********************************/


  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Item, [{
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Item";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return '';
    }
    /**
     * check attribute object
     */

  }, {
    key: "isAttribute",
    value: function isAttribute() {
      return false;
    }
  }, {
    key: "isChanged",
    value: function isChanged(timestamp) {
      return this.json.timestamp != Number(timestamp);
    }
  }, {
    key: "changed",
    value: function changed() {
      this.json.timestamp = this.json._timestamp + performance.now();
    }
    /***********************************
     *
     * getter
     *
     **********************************/

    /**
     * title 속성 
     */

  }, {
    key: "title",
    get: function get() {
      return this.json.name || this.getDefaultTitle();
    }
    /**
     * 
     * @return {Item[]} 자신을 포함안 하위 모든 자식을 조회 
     */

  }, {
    key: "allLayers",
    get: function get() {
      return _traverse(this.ref);
    }
    /**
     * get id
     */

  }, {
    key: "id",
    get: function get() {
      return this.json.id;
    }
    /**
     * 자식 객체 리스트
     * 
     * @returns {Item[]}
     */

  }, {
    key: "layers",
    get: function get() {
      return this.json.layers;
    }
    /**
     * @returns {Item}
     */

  }, {
    key: "parent",
    get: function get() {
      return this.json.parent;
    }
  }, {
    key: "setParent",
    value: function setParent(otherParent) {
      this.json.parent = otherParent;
    }
    /**
     * 객체 깊이를 동적으로 계산 
     * 
     * @returns {number}
     */

  }, {
    key: "depth",
    get: function get() {
      if (!this.parent) return 1;
      return this.parent.depth + 1;
    }
    /**
     * 최상위 컴포넌트 찾기 
     * 
     * @returns {Item}
     */

  }, {
    key: "top",
    get: function get() {
      if (!this.parent) return this.ref;
      var localParent = this.parent;

      do {
        if (!localParent.parent) {
          return localParent;
        }

        localParent = localParent.parent;
      } while (localParent);
    }
    /**
     * 최상위 project 구하기 
     * 
     * @returns {Project}
     */

  }, {
    key: "project",
    get: function get() {
      return this.path.find(function (it) {
        return it.is('project');
      });
    }
    /**
     * 최상위 artboard 구하기 
     * 
     * @returns {ArtBoard}
     */

  }, {
    key: "artboard",
    get: function get() {
      return this.path.find(function (it) {
        return it.is('artboard');
      });
    }
    /**
     * 상속 구조 안에서 instance 리스트
     * 
     * @returns {Item[]}
     */

  }, {
    key: "path",
    get: function get() {
      if (!this.parent) return [this.ref];
      var list = this.parent.path;
      list.push(this.ref);
      return list;
    }
    /**
     * 부모의 자식들 중 나의 위치 찾기 
     * 
     * @returns {number}  나이 위치 index 
     */

  }, {
    key: "positionInParent",
    get: function get() {
      if (!this.parent) return -1;
      var layers = this.parent.layers;
      var index = -1;

      for (var i = 0, len = layers.length; i < len; i++) {
        if (layers[i] === this.ref) {
          index = i;
          break;
        }
      }

      return index;
    }
    /**
     * id 기반 문자열 id 생성
     * 
     * @param {string} postfix 
     */

  }, {
    key: "getInnerId",
    value: function getInnerId() {
      var postfix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return this.json.id + postfix;
    } // selection 이후에 
    // 위치나 , width, height 등의 geometry 가 변경되었을 때 호출 하는 함수 

  }, {
    key: "recover",
    value: function recover() {// 내부에 자신의 객체에 필요한 것들을 복구한다. 
    }
  }, {
    key: "setCache",
    value: function setCache() {}
  }, {
    key: "is",
    value: function is(checkItemType) {
      if (!this.json) return false;
      return checkItemType === this.json.itemType;
    }
  }, {
    key: "isNot",
    value: function isNot(checkItemType) {
      return this.is(checkItemType) === false;
    }
  }, {
    key: "isSVG",
    value: function isSVG() {
      return false;
    }
    /***********************************
     *
     * action
     *
     **********************************/

  }, {
    key: "generateListNumber",
    value: function generateListNumber() {
      this.layers.forEach(function (it, index) {
        it.no = index;
        it.generateListNumber();
      });
    }
    /**
     * when json is loaded, json object is be a new instance
     *
     * @param {*} json
     */

  }, {
    key: "convert",
    value: function convert(json) {
      var _this2 = this;

      if (json.layers) {
        json.layers.forEach(function (layer) {
          layer.parent = _this2.ref;
        });
      }

      return json;
    }
    /**
     * defence to set invalid key-value
     *
     * @param {*} key
     * @param {*} value
     */

  }, {
    key: "checkField",
    value: function checkField(key, value) {
      return true;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var isDeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var json = this.attrs('itemType', 'elementType', 'type', 'visible', 'lock', 'selected');

      if (isDeep) {
        json.layers = this.json.layers.map(function (layer) {
          return layer.clone(isDeep);
        });
      }

      return json;
    }
    /**
     * clone Item
     */

  }, {
    key: "clone",
    value: function clone() {
      var isDeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      var ItemClass = this.constructor; // 부모를 넘겨줘야 상대 주소를 맞출 수 있다. 

      var item = new ItemClass(this.toCloneObject(isDeep));
      item.setParent(this.json.parent);
      return item;
    }
    /**
     * set json content
     *
     * @param {object} obj
     */

  }, {
    key: "reset",
    value: function reset(obj) {
      this.json = this.convert(Object.assign(this.json, obj));
      this.lastChangedField = obj;
      this.changed();
    }
  }, {
    key: "hasChangedField",
    value: function hasChangedField() {
      var _this3 = this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return args.some(function (it) {
        return _this3.lastChangedField[it];
      });
    }
    /**
     * define default object for item
     *
     * @param {object} obj
     */

  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var id = Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_3__["uuidShort"])();
      return _objectSpread({
        id: id,
        _timestamp: Date.now(),
        _time: performance.now(),
        visible: true,
        // 보이기 여부 설정 
        lock: false,
        // 편집을 막고 
        selected: false,
        // 선택 여부 체크 
        layers: []
      }, obj);
    }
    /**
     * 지정된 필드의 값을 object 형태로 리턴한다. 
     * 
     * @param  {...string} args 필드 리스트 
     */

  }, {
    key: "attrs",
    value: function attrs() {
      var _this4 = this;

      var result = {};

      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      args.forEach(function (field) {
        result[field] = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_4__["clone"])(_this4.json[field]);
      });
      return result;
    }
    /**
     * 자식을 가지고 있는지 체크 
     * 
     * @returns {boolean}
     */

  }, {
    key: "hasChildren",
    value: function hasChildren() {
      return this.layers.length > 0;
    }
    /**
     * 자식으로 추가한다. 
     * 
     * @param {Item} layer 
     */

  }, {
    key: "appendChildItem",
    value: function appendChildItem(layer) {
      if (layer.parent === this.ref) {
        return layer;
      }

      this.resetMatrix(layer); // 객체를 추가할 때는  layer 의 절대 값을 기준으로 객체를 움직인다. 

      if (layer.parent) {
        layer.remove();
      }

      layer.setParent(this.ref);
      this.json.layers.push(layer);
      this.project.addIndexItem(layer);
      return layer;
    }
    /**
     * 자식중에 맨앞에 추가한다. 
     * 
     * @param {Item} layer 
     */

  }, {
    key: "prependChildItem",
    value: function prependChildItem(layer) {
      this.resetMatrix(layer); // 객체를 추가할 때는  layer 의 절대 값을 기준으로 객체를 움직인다. 

      if (layer.parent) {
        layer.remove();
      }

      layer.setParent(this.ref);
      this.json.layers.unshift(layer);
      this.project.addIndexItem(layer);
      return layer;
    }
  }, {
    key: "resetMatrix",
    value: function resetMatrix(item) {}
    /**
     * 특정 index 에 자식을 추가한다. 
     * 
     * @param {Item} layer 
     * @param {number} index 
     */

  }, {
    key: "insertChildItem",
    value: function insertChildItem(layer) {
      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      this.resetMatrix(layer); // 객체를 추가할 때는  layer 의 절대 값을 기준으로 객체를 움직인다. 

      if (layer.parent) {
        layer.remove();
      }

      layer.setParent(this.ref);
      this.json.layers.splice(index, 0, layer);
      this.project.addIndexItem(layer);
      return layer;
    }
    /**
     * 현재 Item 의 그 다음 순서로 추가한다. 
     * 
     * @param {Item} layer 
     */

  }, {
    key: "appendAfter",
    value: function appendAfter(layer) {
      var index = this.parent.findIndex(this);
      this.parent.insertChildItem(layer, index);
      this.project.addIndexItem(layer);
      return layer;
    }
    /**
     * 현재 Item 의 이전 순서로 추가한다. 
     * 
     * @param {Item} layer 
     */

  }, {
    key: "appendBefore",
    value: function appendBefore(layer) {
      var index = this.parent.findIndex(this);
      this.parent.insertChildItem(layer, index - 1);
      this.project.addIndexItem(layer);
      return layer;
    }
    /**
     * 특정한 위치에 자식 객체로 Item 을 추가 한다. 
     * set position in layers 
     * 
     * @param {Number} position 
     * @param {Item} item 
     */

  }, {
    key: "setPositionInPlace",
    value: function setPositionInPlace(position, item) {
      this.layers.splice(position, 0, item);
    }
    /**
     * toggle item's attribute
     *
     * @param {*} field
     * @param {*} toggleValue
     */

  }, {
    key: "toggle",
    value: function toggle(field, toggleValue) {
      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_4__["isUndefined"])(toggleValue)) {
        this.json[field] = !this.json[field];
      } else {
        this.json[field] = !!toggleValue;
      }
    }
  }, {
    key: "isTreeItemHide",
    value: function isTreeItemHide() {
      var currentParent = this.parent;
      var collapsedList = [];

      do {
        if (currentParent.is('project')) break;
        collapsedList.push(Boolean(currentParent.collapsed));
        currentParent = currentParent.parent;
      } while (currentParent); // 부모중에 하나라도 collapsed 가 있으면 여긴 트리에서 숨김 


      return Boolean(collapsedList.filter(Boolean).length);
    }
  }, {
    key: "expectJSON",
    value: function expectJSON(key) {
      if (key === 'parent') return false;
      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_4__["isUndefined"])(this.json[key])) return false;
      return true;
    }
    /**
     * convert to json
     * 
     */

  }, {
    key: "toJSON",
    value: function toJSON() {
      var _this5 = this;

      var json = this.json;
      var newJSON = {};
      Object.keys(json).filter(function (key) {
        return _this5.expectJSON(key);
      }).forEach(function (key) {
        newJSON[key] = json[key];
      });
      return newJSON;
    }
  }, {
    key: "resize",
    value: function resize() {}
    /**
     * Item 복사하기 
     * 
     * @param {number} dist 
     */

  }, {
    key: "copy",
    value: function copy() {
      var dist = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return this.json.parent.copyItem(this.ref, dist);
    }
  }, {
    key: "findIndex",
    value: function findIndex(item) {
      return this.json.layers.indexOf(item.ref);
    }
  }, {
    key: "copyItem",
    value: function copyItem(childItem) {
      var dist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
      // clone 을 어떻게 해야하나? 
      var child = childItem.clone();
      child.move([dist, dist, 0]);
      var childIndex = this.findIndex(childItem);

      if (childIndex > -1) {
        this.json.layers.splice(childIndex + 1, 0, child);
        this.project.addIndexItem(child);
      }

      return child;
    }
    /**
     * 부모 객체에서 나를 지운다. 
     * remove self in parent 
     */

  }, {
    key: "remove",
    value: function remove() {
      this.json.parent.removeItem(this.ref);
      this.project.removeIndexItem(this.ref);
    }
    /**
     * remote child item 
     * 
     * @param {Item} childItem 
     */

  }, {
    key: "removeItem",
    value: function removeItem(childItem) {
      var index = this.findIndex(childItem);

      if (index > -1) {
        this.json.layers.splice(index, 1);
      }
    }
    /**
     * 부모 아이디를 가지고 있는지 체크 한다. 
     * 
     * @param {string} parentId 
     */

  }, {
    key: "hasParent",
    value: function hasParent(parentId) {
      var isParent = this.json.parent.id === parentId;
      if (!isParent && this.json.parent.is('project') === false) return this.json.parent.hasParent(parentId);
      return isParent;
    }
    /**
     * 하위 자식 객체 중에 id를 가진 Item 을 리턴한다. 
     * 
     * @param {string} id 
     * @returns {Item|null} 검색된 Item 객체 
     */

  }, {
    key: "searchById",
    value: function searchById(id) {
      if (this.id === id) {
        project.addIndexItem(this.ref);
        return this.ref;
      }

      var project = this.project;

      for (var i = 0, len = this.layers.length; i < len; i++) {
        var item = this.layers[i];

        if (item.id === id) {
          project.addIndexItem(item);
          return item;
        } else {
          var searchedItem = item.searchById(id);

          if (searchedItem) {
            return searchedItem;
          }
        }
      }

      return null;
    }
  }]);

  return Item;
}();

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ BackgroundImage_BackgroundImage; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/Gradient.js
var Gradient = __webpack_require__(41);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ColorStep.js
var ColorStep = __webpack_require__(22);

// CONCATENATED MODULE: ./src/el/editor/property-parser/image-resource/StaticGradient.js








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var StaticGradient_StaticGradient = /*#__PURE__*/function (_Gradient) {
  inherits_default()(StaticGradient, _Gradient);

  var _super = _createSuper(StaticGradient);

  function StaticGradient() {
    classCallCheck_default()(this, StaticGradient);

    return _super.apply(this, arguments);
  }

  createClass_default()(StaticGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(StaticGradient.prototype), "getDefaultObject", this).call(this, {
        type: 'static-gradient',
        "static": true,
        colorsteps: [new ColorStep["a" /* ColorStep */]({
          color: 'red',
          percent: 0,
          index: 0
        }), new ColorStep["a" /* ColorStep */]({
          color: 'red',
          percent: 100,
          index: 0
        })]
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, get_default()(getPrototypeOf_default()(StaticGradient.prototype), "toCloneObject", this).call(this)), {}, {
        "static": true
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var color = this.json.colorsteps[0].color;
      return "linear-gradient(to right, ".concat(color, " 0%, ").concat(color, " 100%)");
    }
  }, {
    key: "isStatic",
    value: function isStatic() {
      return true;
    }
  }], [{
    key: "create",
    value: function create() {
      var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transparent';
      return new StaticGradient({
        colorsteps: [new ColorStep["a" /* ColorStep */]({
          color: color,
          percent: 0,
          index: 0
        }), new ColorStep["a" /* ColorStep */]({
          color: color,
          percent: 100,
          index: 1
        })]
      });
    }
  }]);

  return StaticGradient;
}(Gradient["a" /* Gradient */]);
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/URLImageResource.js
var URLImageResource = __webpack_require__(73);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/LinearGradient.js
var LinearGradient = __webpack_require__(52);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingLinearGradient.js
var RepeatingLinearGradient = __webpack_require__(74);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RadialGradient.js
var RadialGradient = __webpack_require__(54);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingRadialGradient.js
var RepeatingRadialGradient = __webpack_require__(75);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ConicGradient.js
var ConicGradient = __webpack_require__(55);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingConicGradient.js
var RepeatingConicGradient = __webpack_require__(76);

// EXTERNAL MODULE: ./src/el/base/functions/parser.js + 1 modules
var parser = __webpack_require__(21);

// CONCATENATED MODULE: ./src/el/editor/property-parser/BackgroundImage.js









function BackgroundImage_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function BackgroundImage_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { BackgroundImage_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { BackgroundImage_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function BackgroundImage_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundImage_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundImage_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }














var RepeatList = ["repeat", "no-repeat", "repeat-x", "repeat-y", 'round', 'space'];
var reg = /((linear\-gradient|repeating\-linear\-gradient|radial\-gradient|repeating\-radial\-gradient|conic\-gradient|repeating\-conic\-gradient|url)\(([^\)]*)\))/gi;
var BackgroundImage_BackgroundImage = /*#__PURE__*/function (_Property) {
  inherits_default()(BackgroundImage, _Property);

  var _super = BackgroundImage_createSuper(BackgroundImage);

  function BackgroundImage() {
    classCallCheck_default()(this, BackgroundImage);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundImage, [{
    key: "addImageResource",
    value: function addImageResource(imageResource) {
      this.clear("image-resource");
      return this.addItem("image-resource", imageResource);
    }
  }, {
    key: "addGradient",
    value: function addGradient(gradient) {
      return this.addImageResource(gradient);
    }
  }, {
    key: "setImageUrl",
    value: function setImageUrl(data) {
      if (!data.images) return;
      if (!data.images.length) return;
      this.reset({
        type: "image",
        image: BackgroundImage.createImage(data.images[0])
      });
    }
  }, {
    key: "setGradient",
    value: function setGradient(data) {
      this.reset({
        type: data.type,
        image: BackgroundImage.createGradient(data, this.json.image)
      });
    }
  }, {
    key: "getDefaultObject",
    value: // 기본 image 를 생성하지 않는다. 
    // 매번 StaticGradient 를 생성 했더니  변환에 너무 많은 비용이 들어간다. 
    function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(BackgroundImage.prototype), "getDefaultObject", this).call(this, {
        itemType: "background-image",
        checked: false,
        blendMode: "normal",
        size: "auto",
        repeat: "repeat",
        width: Length["a" /* Length */].percent(100),
        height: Length["a" /* Length */].percent(100),
        x: Length["a" /* Length */].percent(0),
        y: Length["a" /* Length */].percent(0)
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var json = this.json;
      return BackgroundImage_objectSpread(BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, get_default()(getPrototypeOf_default()(BackgroundImage.prototype), "toCloneObject", this).call(this)), this.attrs('checked', 'blendMode', 'size', 'repeat', 'width', 'height', 'x', 'y')), {}, {
        image: json.image.clone()
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json.x = Length["a" /* Length */].parse(json.x);
      json.y = Length["a" /* Length */].parse(json.y);
      if (json.width) json.width = Length["a" /* Length */].parse(json.width);
      if (json.height) json.height = Length["a" /* Length */].parse(json.height);

      if (Object(func["isString"])(json.image)) {
        json.image = BackgroundImage.parseImage(json.image);
      }

      return json;
    }
  }, {
    key: "image",
    get: function get() {
      return this.json.image;
    },
    set: function set(image) {
      this.json.image = image;
    }
  }, {
    key: "checkField",
    value: function checkField(key, value) {
      if (key === "repeat") {
        return RepeatList.includes(value);
      }

      return get_default()(getPrototypeOf_default()(BackgroundImage.prototype), "checkField", this).call(this, key, value);
    }
  }, {
    key: "toBackgroundImageCSS",
    value: function toBackgroundImageCSS() {
      if (!this.json.image) return {};
      return {
        "background-image": this.json.image.toString()
      };
    }
  }, {
    key: "toBackgroundPositionCSS",
    value: function toBackgroundPositionCSS() {
      var json = this.json;
      return {
        "background-position": "".concat(json.x, " ").concat(json.y)
      };
    }
  }, {
    key: "toBackgroundSizeCSS",
    value: function toBackgroundSizeCSS() {
      var json = this.json;
      var backgroundSize = "auto";

      if (json.size == "contain" || json.size == "cover") {
        backgroundSize = json.size;
      } else if (json.width.isPercent() && json.width.isPercent()) {
        // 기본 사이즈가 아닌 것만 표시 (100% 100% 이 아닐 때 )
        if (+json.width !== 100 || +json.height !== 100) {
          backgroundSize = "".concat(json.width, " ").concat(json.height);
        }
      } else {
        backgroundSize = "".concat(json.width, " ").concat(json.height);
      }

      return {
        "background-size": backgroundSize
      };
    }
  }, {
    key: "toBackgroundRepeatCSS",
    value: function toBackgroundRepeatCSS() {
      var json = this.json;
      return {
        "background-repeat": json.repeat
      };
    }
  }, {
    key: "toBackgroundBlendCSS",
    value: function toBackgroundBlendCSS() {
      var json = this.json;
      return {
        "background-blend-mode": json.blendMode
      };
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var results = BackgroundImage_objectSpread(BackgroundImage_objectSpread(BackgroundImage_objectSpread(BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, this.toBackgroundImageCSS()), this.toBackgroundPositionCSS()), this.toBackgroundSizeCSS()), this.toBackgroundRepeatCSS()), this.toBackgroundBlendCSS());

      return results;
    }
  }, {
    key: "toString",
    value: function toString() {
      return Object(func["keyMap"])(this.toCSS(), function (key, value) {
        return "".concat(key, ": ").concat(value);
      }).join(";");
    }
  }, {
    key: "toBackgroundCSS",
    value: function toBackgroundCSS() {
      var obj = this.toCSS();
      return {
        // 'background-blend-mode': obj['background-blend-mode'],
        // 'background-size': obj['background-size'],
        // 'background-position': obj['background-position'],
        // 'background-repeat': obj['background-repeat'],
        'background': "".concat(obj['background-image'], " ")
      };
    }
  }], [{
    key: "createImage",
    value: function createImage(url) {
      return new URLImageResource["a" /* URLImageResource */]({
        url: url
      });
    }
  }, {
    key: "createGradient",
    value: function createGradient(data, gradient) {
      var colorsteps = data.colorsteps || gradient.colorsteps; // linear, conic 은 angle 도 같이 설정한다.

      var angle = data.angle || gradient.angle; // radial 은  radialType 도 같이 설정한다.

      var radialType = data.radialType || gradient.radialType;
      var radialPosition = data.radialPosition || gradient.radialPosition;
      var json = gradient.toJSON();
      delete json.itemType;
      delete json.type;

      switch (data.type) {
        case "static-gradient":
          return new StaticGradient_StaticGradient(BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps
          }));

        case "linear-gradient":
          return new LinearGradient["a" /* LinearGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            angle: angle
          }));

        case "repeating-linear-gradient":
          return new RepeatingLinearGradient["a" /* RepeatingLinearGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            angle: angle
          }));

        case "radial-gradient":
          return new RadialGradient["a" /* RadialGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            radialType: radialType,
            radialPosition: radialPosition
          }));

        case "repeating-radial-gradient":
          return new RepeatingRadialGradient["a" /* RepeatingRadialGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            radialType: radialType,
            radialPosition: radialPosition
          }));

        case "conic-gradient":
          return new ConicGradient["a" /* ConicGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            angle: angle,
            radialPosition: radialPosition
          }));

        case "repeating-conic-gradient":
          return new RepeatingConicGradient["a" /* RepeatingConicGradient */](BackgroundImage_objectSpread(BackgroundImage_objectSpread({}, json), {}, {
            colorsteps: colorsteps,
            angle: angle,
            radialPosition: radialPosition
          }));
      }

      return new Gradient["a" /* Gradient */]();
    }
  }, {
    key: "parse",
    value: function parse(obj) {
      return new BackgroundImage(obj);
    }
  }, {
    key: "parseImage",
    value: function parseImage(str) {
      var results = Object(parser["convertMatches"])(str);
      var image = null;
      var matchResult = results.str.match(reg);
      if (!matchResult) return image;
      matchResult.forEach(function (value, index) {
        value = Object(parser["reverseMatches"])(value, results.matches);

        if (value.includes("repeating-linear-gradient")) {
          image = RepeatingLinearGradient["a" /* RepeatingLinearGradient */].parse(value);
        } else if (value.includes("linear-gradient")) {
          image = LinearGradient["a" /* LinearGradient */].parse(value);
        } else if (value.includes("repeating-radial-gradient")) {
          image = RepeatingRadialGradient["a" /* RepeatingRadialGradient */].parse(value);
        } else if (value.includes("radial-gradient")) {
          image = RadialGradient["a" /* RadialGradient */].parse(value);
        } else if (value.includes("repeating-conic-gradient")) {
          image = RepeatingConicGradient["a" /* RepeatingConicGradient */].parse(value);
        } else if (value.includes("conic-gradient")) {
          image = ConicGradient["a" /* ConicGradient */].parse(value);
        } else if (value.includes("url")) {
          image = URLImageResource["a" /* URLImageResource */].parse(value);
        }
      });
      return image;
    }
  }, {
    key: "changeImageType",
    value: function changeImageType(options) {
      switch (options.type) {
        case 'static-gradient':
          return new StaticGradient_StaticGradient(options);

        case 'linear-gradient':
          return new LinearGradient["a" /* LinearGradient */](options);

        case 'repeating-linear-gradient':
          return new RepeatingLinearGradient["a" /* RepeatingLinearGradient */](options);

        case 'radial-gradient':
          return new RadialGradient["a" /* RadialGradient */](options);

        case 'repeating-radial-gradient':
          return new RepeatingRadialGradient["a" /* RepeatingRadialGradient */](options);

        case 'conic-gradient':
          return new ConicGradient["a" /* ConicGradient */](options);

        case 'repeating-conic-gradient':
          return new RepeatingConicGradient["a" /* RepeatingConicGradient */](options);

        case 'image-resource':
        case 'url':
          return new URLImageResource["a" /* URLImageResource */](options);
      }
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(style) {
      var backgroundImages = [];
      var key = JSON.stringify(style);

      if (style["background-image"]) {
        var results = Object(parser["convertMatches"])(style["background-image"]);
        results.str.match(reg).forEach(function (value, index) {
          var image = null;
          value = Object(parser["reverseMatches"])(value, results.matches);

          if (value.includes("repeating-linear-gradient")) {
            image = RepeatingLinearGradient["a" /* RepeatingLinearGradient */].parse(value);
          } else if (value.includes("linear-gradient")) {
            image = LinearGradient["a" /* LinearGradient */].parse(value);
          } else if (value.includes("repeating-radial-gradient")) {
            image = RepeatingRadialGradient["a" /* RepeatingRadialGradient */].parse(value);
          } else if (value.includes("radial-gradient")) {
            image = RadialGradient["a" /* RadialGradient */].parse(value);
          } else if (value.includes("repeating-conic-gradient")) {
            image = RepeatingConicGradient["a" /* RepeatingConicGradient */].parse(value);
          } else if (value.includes("conic-gradient")) {
            image = ConicGradient["a" /* ConicGradient */].parse(value);
          } else if (value.includes("url")) {
            image = URLImageResource["a" /* URLImageResource */].parse(value);
          }

          backgroundImages[index] = new BackgroundImage({
            type: image.type,
            image: image
          });
        });
      }

      if (style["background-repeat"]) {
        style["background-repeat"].split(",").map(function (it) {
          return it.trim();
        }).forEach(function (it, index) {
          if (backgroundImages[index]) {
            backgroundImages[index].repeat = it;
          }
        });
      }

      if (style["background-blend-mode"]) {
        style["background-blend-mode"].split(",").map(function (it) {
          return it.trim();
        }).forEach(function (it, index) {
          if (backgroundImages[index]) {
            backgroundImages[index].blendMode = it;
          }
        });
      }

      if (style["background-size"]) {
        style["background-size"].split(",").map(function (it) {
          return it.trim();
        }).forEach(function (it, index) {
          if (backgroundImages[index]) {
            if (it == "cover" || it === "contain" || it === "auto") {
              backgroundImages[index].size = it;
            } else {
              backgroundImages[index].size = "auto";

              var _it$split = it.split(' '),
                  _it$split2 = slicedToArray_default()(_it$split, 2),
                  width = _it$split2[0],
                  height = _it$split2[1];

              backgroundImages[index].width = Length["a" /* Length */].parse(width);
              backgroundImages[index].height = Length["a" /* Length */].parse(height);
            }
          }
        });
      }

      if (style["background-position"]) {
        style["background-position"].split(",").map(function (it) {
          return it.trim();
        }).forEach(function (it, index) {
          if (backgroundImages[index]) {
            var _it$split3 = it.split(' '),
                _it$split4 = slicedToArray_default()(_it$split3, 2),
                x = _it$split4[0],
                y = _it$split4[1];

            backgroundImages[index].x = Length["a" /* Length */].parse(x);
            backgroundImages[index].y = Length["a" /* Length */].parse(y);
          }
        });
      }

      return backgroundImages;
    }
  }, {
    key: "toPropertyCSS",
    value: function toPropertyCSS(list) {
      var results = {};
      list.forEach(function (item) {
        Object(func["keyEach"])(item.toCSS(), function (key, value) {
          if (!results[key]) results[key] = [];
          results[key].push(value);
        });
      });
      return Object(func["combineKeyArray"])(results);
    }
  }, {
    key: "join",
    value: function join(list) {
      return Object(func["CSS_TO_STRING"])(BackgroundImage.toPropertyCSS(list.map(function (it) {
        return BackgroundImage.parse(it);
      })));
    }
  }, {
    key: "joinCSS",
    value: function joinCSS(list) {
      return BackgroundImage.toPropertyCSS(list.map(function (it) {
        return BackgroundImage.parse(it);
      }));
    }
  }]);

  return BackgroundImage;
}(Property["a" /* Property */]);

/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RangeEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var RangeEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RangeEditor, _EditorElement);

  var _super = _createSuper(RangeEditor);

  function RangeEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, RangeEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(RangeEditor, [{
    key: "initState",
    value: function initState() {
      var units = this.props.units || 'px,em,%';
      var value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].parse(this.props.value || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].z());
      return {
        removable: this.props.removable === 'true',
        calc: this.props.calc === 'true' ? true : false,
        compact: this.props.compact === 'true' ? true : false,
        label: this.props.label || '',
        min: +this.props.min || 0,
        max: +this.props.max || 100,
        step: +this.props.step || 1,
        key: this.props.key,
        params: this.props.params || '',
        layout: this.props.layout || '',
        units: units,
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='small-editor' ref='$body'></div>"
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$body'),
    value: function value() {
      var _this$state = this.state,
          min = _this$state.min,
          max = _this$state.max,
          step = _this$state.step,
          label = _this$state.label,
          removable = _this$state.removable,
          layout = _this$state.layout,
          compact = _this$state.compact;
      var value = +this.state.value.value.toString();

      if (isNaN(value)) {
        value = 0;
      }

      var layoutClass = layout;
      var realValue = (+value).toString();
      var units = this.state.units.split(',').map(function (it) {
        var description = it;

        if (description === 'number') {
          description = '';
        }

        return "".concat(it, ":").concat(description);
      }).join(',');
      return (
        /*html*/
        "\n        <div \n            ref=\"$range\"\n            class=\"".concat(Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["OBJECT_TO_CLASS"])(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({
          'range-editor': true,
          'has-label': !!label,
          'compact': !!compact,
          'is-removable': removable
        }, layoutClass, true)), "\"\n        >\n            ").concat(label ? "<label title=\"".concat(label, "\">").concat(label, "</label>") : '', "\n            <div class='range-editor-type' data-type='range'>\n                <input type='range' ref='$property' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" /> \n                <div class='area' ref='$rangeArea'>\n                    <input type='number' ref='$propertyNumber' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" tabIndex=\"1\" />\n                    <object refClass=\"SelectEditor\"  ref='$unit' key='unit' value=\"").concat(this.state.selectedUnit || this.state.value.unit, "\" options=\"").concat(units, "\" onchange='changeUnit' />\n                </div>\n            </div>\n            <button type='button' class='remove thin' ref='$remove' title='Remove'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].remove, "</button>\n        </div>\n    ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value.clone();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].parse(value)
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["FOCUS"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$rangeArea.addClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BLUR"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$rangeArea.removeClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$remove'),
    value: function value(e) {
      this.updateData({
        value: ''
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: "initValue",
    value: function initValue() {
      if (this.state.value == '') {
        this.state.value = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](0, this.children.$unit.getValue());
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["INPUT"])('$propertyNumber'),
    value: function value(e) {
      var value = +this.getRef('$propertyNumber').value;
      this.getRef('$property').val(value);
      this.initValue();
      this.updateData({
        value: new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](value, this.children.$unit.getValue())
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$property') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])('moveRange') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["END"])('moveRange'),
    value: function value() {}
  }, {
    key: "moveRange",
    value: function moveRange() {
      this.trigger('changeValue');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeValue') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["THROTTLE"])(100),
    value: function value() {
      var value = +this.getRef('$property').value;
      this.refs.$propertyNumber.val(value);
      this.initValue();
      this.updateData({
        value: new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](value, this.children.$unit.getValue())
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeUnit'),
    value: function value(key, _value) {
      this.initValue();
      this.updateData({
        value: this.state.value.toUnit(_value)
      });
    }
  }]);

  return RangeEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_12__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_11__[/* registElement */ "a"])({
  RangeEditor: RangeEditor
});

/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return Resource; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return filter_list; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return pattern_list; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return blend_list; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return font_list; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return hasSVGProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return hasSVGPathProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return hasCSSProperty; });
/* unused harmony export hasCustomProperty */
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);




var Resource = /*#__PURE__*/function () {
  function Resource() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Resource);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Resource, null, [{
    key: "getAllDropItems",
    value: function getAllDropItems(e) {
      var items = [];

      if (e.dataTransfer) {
        items = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(e.dataTransfer.types).map(function (type, index) {
          if (type.includes('text')) {
            return {
              kind: 'string',
              type: type,
              data: e.dataTransfer.getData(type)
            };
          }
        }).filter(function (it) {
          return it;
        });
      }

      var files = [];

      if (e.dataTransfer) {
        files = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(e.dataTransfer.files);
      }

      return [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(items), _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(files));
    }
  }]);

  return Resource;
}();


var filter_list = ["blur", "grayscale", "hue-rotate", "invert", "brightness", "contrast", "drop-shadow", "opacity", "saturate", "sepia", 'svg'];
var pattern_list = ['check', 'grid', 'dot', 'cross-dot', 'diagonal-line', 'vertical-line', 'horizontal-line'];
var blend_list = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"].join(',');
var font_list = ['', 'Arial', 'Arial Black', 'Times New Roman', 'Times', 'Courier New', 'Courier', 'Verdana', 'Georgia', 'Palatino', 'Garamond', 'Bookman', 'Tahoma', 'Trebuchet MS', 'Impact', 'Comic Sans MS', 'serif', 'sans-serif', 'monospace', 'cursive', 'fantasy', 'system-ui'].join(',');
var SVG_PROPERTY_LIST = {
  'text': true,
  'points': true,
  'textLength': true,
  'startOffset': true,
  'lengthAdjust': true
};
var SVG_PATH_PROPERTY_LIST = {
  'd': true
};
var CSS_PROPERTY_LIST = {
  'position': true,
  'x': true,
  'y': true,
  'right': true,
  'bottom': true,
  'width': true,
  'height': true,
  'rootVariable': true,
  'variable': true,
  'transform': true,
  'filter': true,
  'backdrop-filter': true,
  'background-color': true,
  'background-clip': true,
  'background-image': true,
  'border-radius': true,
  'box-shadow': true,
  'text-shadow': true,
  'text-clip': true,
  'clip-path': true,
  'color': true,
  'font-size': true,
  'font-stretch': true,
  'line-height': true,
  'text-align': true,
  'text-transform': true,
  'text-decoration': true,
  'letter-spacing': true,
  'word-spacing': true,
  'text-indent': true,
  'perspective-origin': true,
  'transform-origin': true,
  'transform-style': true,
  'perspective': true,
  'mix-blend-mode': true,
  'opacity': true,
  'rotate': true,
  'text-fill-color': true,
  'text-stroke-color': true,
  'text-stroke-width': true,
  'offset-path': true,
  'offset-distance': true,
  border: true,
  outline: true,
  borderRadius: true,
  // borderImage: true,
  animations: true,
  transitions: true,
  'fill': true,
  'fill-opacity': true,
  'stroke': true,
  'stroke-width': true,
  'stroke-dasharray': true,
  'stroke-dashoffset': true,
  'fill-rule': true,
  'stroke-linecap': true,
  'stroke-linejoin': true
};
var hasSVGProperty = function hasSVGProperty(property) {
  return SVG_PROPERTY_LIST[property] || false;
};
var hasSVGPathProperty = function hasSVGPathProperty(property) {
  return SVG_PATH_PROPERTY_LIST[property] || false;
};
var hasCSSProperty = function hasCSSProperty(property) {
  return CSS_PROPERTY_LIST[property] || false;
};
var hasCustomProperty = function hasCustomProperty(property) {
  return hasSVGProperty(property) === false && hasCSSProperty(property) === false;
};

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SelectEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SelectEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SelectEditor, _EditorElement);

  var _super = _createSuper(SelectEditor);

  function SelectEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SelectEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SelectEditor, [{
    key: "initState",
    value: function initState() {
      var keyValueChar = this.props['key-value-char'] || ':';
      var splitChar = this.props.split || ',';
      var options = (this.props.options || '').split(splitChar).map(function (it) {
        return it.trim();
      });
      var value = this.props.value;
      var tabIndex = this.props.tabindex;
      return {
        keyValueChar: keyValueChar,
        splitChar: splitChar,
        label: this.props.label || '',
        options: options,
        value: value,
        tabIndex: tabIndex
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          tabIndex = _this$state.tabIndex;
      var hasLabel = !!label ? 'has-label' : '';
      var hasTabIndex = !!tabIndex ? 'tabIndex="1"' : '';
      return (
        /*html*/
        "\n            <div class='select-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label title=\"".concat(label, "\">").concat(label, "</label>") : '', "\n                <select ref='$options' ").concat(hasTabIndex, "></select>\n            </div>\n        ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.refs.$options.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.state.value = value + '';
      this.refs.$options.val(this.state.value);
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.load();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BIND"])('$options'),
    value: function value() {
      return {
        'data-count': this.state.options.length.toString()
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$options'),
    value: function value() {
      var _this = this;

      var arr = this.state.options.map(function (it) {
        var value = it;
        var label = it;

        if (value.includes(_this.state.keyValueChar)) {
          var _value$split = value.split(_this.state.keyValueChar),
              _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_value$split, 2),
              value = _value$split2[0],
              label = _value$split2[1];
        }

        if (label === '') {
          label = _this.props['none-value'] ? _this.props['none-value'] : '';
        } else if (label === '-') {
          label = '----------';
          value = '';
        }

        var selected = value === _this.state.value ? 'selected' : '';
        return "<option ".concat(selected, " value=\"").concat(value, "\">").concat(label, "</option>");
      });
      return arr;
    }
  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.setState({
        options: options.split(this.state.splitChar).map(function (it) {
          return it.trim();
        })
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CHANGE"])('$options'),
    value: function value() {
      this.updateData({
        value: this.refs.$options.value
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }]);

  return SelectEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_8__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_7__[/* registElement */ "a"])({
  SelectEditor: SelectEditor
});

/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ClipPath; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8);
/* harmony import */ var el_editor_unit_DirectionLength__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(64);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(34);









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var CLIPPATH_REG = /(content\-box|padding\-box|border\-box|margin\-box|view\-box|stroke\-box|fill\-box|none|(inset|circle|ellipse|polygon|path|svg|url)(\(([^\)]*)\))?)/gi;
var ClipPath = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(ClipPath, _Property);

  var _super = _createSuper(ClipPath);

  function ClipPath() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, ClipPath);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(ClipPath, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(ClipPath.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: 'clip-path',
        type: 'none',
        value: ''
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(ClipPath.prototype), "toCloneObject", this).call(this)), this.attrs('value'));
    }
  }, {
    key: "toString",
    value: function toString() {
      var type = this.json.type;
      var value = this.json.value;
      var box = this.json.box;
      var results = '';

      switch (type) {
        case 'circle':
        case 'inset':
        case 'ellipse':
        case 'polygon':
        case 'path':
          results = "".concat(type, "(").concat(value, ")");
          break;

        case 'svg':
          results = "url(#".concat(value, ")");
          break;

        default:
          results = 'none';
          break;
      }

      return box ? "".concat(box, " ").concat(results) : results;
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {
        'clip-path': this.toString()
      };
    }
  }], [{
    key: "toCSS",
    value: function toCSS(obj) {
      return new ClipPath(obj).toCSS();
    }
  }, {
    key: "toString",
    value: function toString(obj) {
      return ClipPath.toCSS(obj)['clip-path'];
    }
  }, {
    key: "parse",
    value: function parse(obj) {
      return new ClipPath(obj);
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(str) {
      var clippath = {};
      if (!str) return {};
      var matches = str.match(CLIPPATH_REG) || [];
      matches.forEach(function (value, index) {
        if (value.includes('-box')) {
          clippath.box = value;
        } else {
          var _value$split = value.split("("),
              _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_value$split, 2),
              clipPathName = _value$split2[0],
              clipPathValue = _value$split2[1];

          clipPathValue = clipPathValue || '';

          if (clipPathName === 'none') {
            clipPathValue = '';
          } else {
            clipPathValue = clipPathValue.split(")")[0];
          }

          clippath.type = clipPathName;
          clippath.value = clipPathValue;
        }
      });
      return clippath;
    }
  }, {
    key: "parseStyleForCircle",
    value: function parseStyleForCircle(str) {
      var radius = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"]('', 'closest-side'),
          position = '';
      str = str || '50%';

      if (str.includes('at')) {
        var _str$split$map = str.split('at').map(function (it) {
          return it.trim();
        });

        var _str$split$map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_str$split$map, 2);

        radius = _str$split$map2[0];
        position = _str$split$map2[1];
      } else {
        position = str.trim();
      }

      var _position$split = position.split(' '),
          _position$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_position$split, 2),
          x = _position$split2[0],
          y = _position$split2[1];

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["isUndefined"])(y)) {
        y = x;
      }

      x = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(x);
      y = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(y);
      return {
        radius: radius,
        x: x,
        y: y
      };
    }
  }, {
    key: "parseStyleForEllipse",
    value: function parseStyleForEllipse() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '50% 50%';
      var radius = "50% 50%",
          position = '';
      str = str || '50%';

      if (str.includes('at')) {
        var _str$split$map3 = str.split('at').map(function (it) {
          return it.trim();
        });

        var _str$split$map4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_str$split$map3, 2);

        radius = _str$split$map4[0];
        position = _str$split$map4[1];
      } else {
        position = str.trim();
      }

      var _position$split3 = position.split(' '),
          _position$split4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_position$split3, 2),
          x = _position$split4[0],
          y = _position$split4[1];

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["isUndefined"])(y)) {
        y = x;
      }

      x = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(x);
      y = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(y);

      var _radius$split = radius.split(' '),
          _radius$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_radius$split, 2),
          radiusX = _radius$split2[0],
          radiusY = _radius$split2[1];

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["isUndefined"])(radiusY)) {
        radiusY = radiusX;
      }

      radiusX = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(radiusX);
      radiusY = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(radiusY);
      return {
        radiusX: radiusX,
        radiusY: radiusY,
        x: x,
        y: y
      };
    }
  }, {
    key: "parseStyleForInset",
    value: function parseStyleForInset() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var _str$split = str.split('round'),
          _str$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_str$split, 2),
          inset = _str$split2[0],
          round = _str$split2[1];

      var _DirectionLength$pars = el_editor_unit_DirectionLength__WEBPACK_IMPORTED_MODULE_10__[/* DirectionLength */ "a"].parse(inset),
          _DirectionLength$pars2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_DirectionLength$pars, 5),
          _count = _DirectionLength$pars2[0],
          top = _DirectionLength$pars2[1],
          right = _DirectionLength$pars2[2],
          bottom = _DirectionLength$pars2[3],
          left = _DirectionLength$pars2[4];

      if (round) {
        var _DirectionLength$pars3 = el_editor_unit_DirectionLength__WEBPACK_IMPORTED_MODULE_10__[/* DirectionLength */ "a"].parse(round),
            _DirectionLength$pars4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_DirectionLength$pars3, 5),
            _roundCount = _DirectionLength$pars4[0],
            topRadius = _DirectionLength$pars4[1],
            rightRadius = _DirectionLength$pars4[2],
            bottomRadius = _DirectionLength$pars4[3],
            leftRadius = _DirectionLength$pars4[4];
      }

      return {
        isAll: _count === 1,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        round: round,
        isAllRadius: _roundCount === 1,
        topRadius: topRadius,
        rightRadius: rightRadius,
        bottomRadius: bottomRadius,
        leftRadius: leftRadius
      };
    }
  }, {
    key: "parseStyleForPolygon",
    value: function parseStyleForPolygon() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return str.split(',').filter(function (it) {
        return it.trim();
      }).map(function (it) {
        var _it$trim$split = it.trim().split(' '),
            _it$trim$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_it$trim$split, 2),
            x = _it$trim$split2[0],
            y = _it$trim$split2[1];

        return {
          x: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(x),
          y: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(y)
        };
      });
    }
  }]);

  return ClipPath;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_11__[/* Property */ "a"]);

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Gradient; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _ImageResource__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(81);
/* harmony import */ var _ColorStep__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(22);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8);
/* harmony import */ var el_base_Color__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(26);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var DEFINED_ANGLES = {
  "to top": 0,
  "to top right": 45,
  "to right": 90,
  "to bottom right": 135,
  "to bottom": 180,
  "to bottom left": 225,
  "to left": 270,
  "to top left": 315
};
var Gradient = /*#__PURE__*/function (_ImageResource) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(Gradient, _ImageResource);

  var _super = _createSuper(Gradient);

  function Gradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Gradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Gradient, [{
    key: "isGradient",
    value: function isGradient() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "none";
    }
    /**
     * colorsteps = [
     *    new ColorStep({color: 'red', percent: 0}),
     *    new ColorStep({color: 'red', percent: 0})
     * ]
     *
     * @param {*} obj
     */

  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _objectSpread({
        itemType: "image-resource",
        type: "gradient",
        colorsteps: []
      }, obj);
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Gradient.prototype), "toCloneObject", this).call(this)), {}, {
        colorsteps: this.json.colorsteps.map(function (color) {
          return color.clone();
        })
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      if (json.colorsteps[0] instanceof _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]) {// colorstep instance 를 가지고 있으면 새로운 객체 생성을 하지 않는다. 
      } else {
        json.colorsteps = json.colorsteps.map(function (c) {
          return new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"](c);
        });
      }

      return json;
    }
  }, {
    key: "calculateAngle",
    value: function calculateAngle() {
      var angle = this.json.angle;
      return Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["isUndefined"])(DEFINED_ANGLES[angle]) ? angle : DEFINED_ANGLES[angle] || 0;
    }
    /**
     * add ColorStep
     *
     * @param {ColorStep} colorstep
     * @param {boolean} isSort
     */

  }, {
    key: "addColorStep",
    value: function addColorStep(colorstep) {
      var isSort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.json.colorsteps.push(colorstep);
      if (isSort) this.sortColorStep();
      return colorstep;
    }
  }, {
    key: "insertColorStep",
    value: function insertColorStep(percent) {
      var startColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "rgba(216,216,216,0)";
      var endColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "rgba(216,216,216,1)";
      var colorsteps = this.colorsteps;

      if (!colorsteps.length) {
        this.addColorStepList([new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
          color: startColor,
          percent: percent,
          index: 0
        }), new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
          color: endColor,
          percent: 100,
          index: 100
        })]);
        return;
      }

      if (percent < colorsteps[0].percent) {
        colorsteps[0].index = 1;
        this.addColorStep(new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
          index: 0,
          color: colorsteps[0].color,
          percent: percent
        }));
        return;
      }

      var lastIndex = colorsteps.length - 1;

      if (colorsteps[lastIndex].percent < percent) {
        var color = colorsteps[lastIndex].color;
        var index = colorsteps[lastIndex].index + 1;
        this.addColorStep(new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
          index: index,
          color: color,
          percent: percent
        }));
        return;
      }

      for (var i = 0, len = colorsteps.length - 1; i < len; i++) {
        var step = colorsteps[i];
        var nextStep = colorsteps[i + 1];

        if (step.percent <= percent && percent <= nextStep.percent) {
          var color = el_base_Color__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].mix(step.color, nextStep.color, (percent - step.percent) / (nextStep.percent - step.percent), "rgb");
          this.addColorStep(new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
            index: step.index + 1,
            color: color,
            percent: percent
          }));
          return;
        }
      }
    }
  }, {
    key: "sortColorStep",
    value: function sortColorStep() {
      var children = this.colorsteps;
      children.sort(function (a, b) {
        if (a.percent > b.percent) return 1;
        if (a.percent < b.percent) return -1;

        if (a.percent == b.percent) {
          if (a.index === b.index) return 0;
          return a.index > b.index ? 1 : -1;
        }
      });
      children.forEach(function (it, index) {
        it.index = index * 100;
      });
    }
    /**
     * add ColorStep List
     * @param {Array<ColorStep>} colorstepList
     */

  }, {
    key: "addColorStepList",
    value: function addColorStepList() {
      var _this = this;

      var colorstepList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      colorstepList.forEach(function (c) {
        _this.addColorStep(c, false);
      });
      this.sortColorStep();
    }
    /**
     * get color step by id
     *
     * @param {string} id
     */

  }, {
    key: "getColorStep",
    value: function getColorStep(id) {
      return this.json.colorsteps.filter(function (c) {
        return c.id == id;
      })[0];
    }
  }, {
    key: "clear",
    value: function clear() {
      if (arguments.length) {
        this.json.colorsteps.splice(+(arguments.length <= 0 ? undefined : arguments[0]), 1);
      } else {
        this.json.colorsteps = [];
      }
    }
  }, {
    key: "removeColorStep",
    value: function removeColorStep(id) {
      this.json.colorsteps = this.json.colorsteps.filter(function (it) {
        return it.id != id;
      });
    }
    /**
     * get colorstep list
     *
     * @return {Array<ColorStep>}
     */

  }, {
    key: "colorsteps",
    get: function get() {
      return this.json.colorsteps;
    }
    /**
     * get color string
     *
     * @return {string}
     */

  }, {
    key: "getColorString",
    value: function getColorString() {
      var colorsteps = this.colorsteps;
      return Gradient.toColorString(colorsteps);
    }
  }], [{
    key: "toColorString",
    value: function toColorString() {
      var colorsteps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (!colorsteps.length) return '';
      var newColors = colorsteps.map(function (c, index) {
        c.prevColorStep = c.cut && index > 0 ? colorsteps[index - 1] : null;
        return c;
      });

      if (newColors.length === 1) {
        newColors.push(new _ColorStep__WEBPACK_IMPORTED_MODULE_8__[/* ColorStep */ "a"]({
          color: newColors[0].color || 'transparent',
          percent: 100
        }));
      }

      return newColors.map(function (f) {
        return "".concat(f);
      }).join(",");
    }
  }]);

  return Gradient;
}(_ImageResource__WEBPACK_IMPORTED_MODULE_7__[/* ImageResource */ "a"]);

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ SVGFill_SVGFill; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// EXTERNAL MODULE: ./src/el/base/functions/parser.js + 1 modules
var parser = __webpack_require__(21);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ColorStep.js
var ColorStep = __webpack_require__(22);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/SVGGradient.js
var SVGGradient = __webpack_require__(84);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// CONCATENATED MODULE: ./src/el/editor/property-parser/image-resource/SVGLinearGradient.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGLinearGradient_SVGLinearGradient = /*#__PURE__*/function (_SVGGradient) {
  inherits_default()(SVGLinearGradient, _SVGGradient);

  var _super = _createSuper(SVGLinearGradient);

  function SVGLinearGradient() {
    classCallCheck_default()(this, SVGLinearGradient);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGLinearGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject(obj) {
      return get_default()(getPrototypeOf_default()(SVGLinearGradient.prototype), "getDefaultObject", this).call(this, _objectSpread({
        type: "linear-gradient",
        x1: '0%',
        y1: '0%',
        x2: '100%',
        y2: '0%',
        spreadMethod: 'pad'
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, get_default()(getPrototypeOf_default()(SVGLinearGradient.prototype), "toCloneObject", this).call(this)), this.attrs('x1', 'y1', 'x2', 'y2', 'spreadMethod'));
    }
  }, {
    key: "toString",
    value: function toString() {
      // linear-gradient(x1 y1 x2 y2 spreadMethod, ....colors)
      if (this.colorsteps.length === 0) return '';
      var colorString = this.getColorString();
      var _this$json = this.json,
          x1 = _this$json.x1,
          y1 = _this$json.y1,
          x2 = _this$json.x2,
          y2 = _this$json.y2,
          spreadMethod = _this$json.spreadMethod;
      var opt = [x1, y1, x2, y2, spreadMethod].join(' ');
      var result = "".concat(this.json.type, "(").concat(opt, ", ").concat(colorString, ")");
      return result;
    }
  }, {
    key: "toSVGString",
    value: function toSVGString(id) {
      var _this$json2 = this.json,
          x1 = _this$json2.x1,
          y1 = _this$json2.y1,
          x2 = _this$json2.x2,
          y2 = _this$json2.y2,
          spreadMethod = _this$json2.spreadMethod;
      return (
        /*html*/
        "\n        <linearGradient \n            id=\"".concat(id, "\"\n            x1=\"").concat(x1, "\"\n            x2=\"").concat(x2, "\"\n            y1=\"").concat(y1, "\"\n            y2=\"").concat(y2, "\"\n            spreadMethod=\"").concat(spreadMethod, "\"\n          >\n          ").concat(this.colorsteps.map(function (it) {
          return (
            /*html*/
            "<stop offset=\"".concat(it.percent, "%\"  stop-color=\"").concat(it.color, "\" ></stop>")
          );
        }).join('\n'), "\n        </linearGradient>\n      ")
      );
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(id) {
      return "url(#".concat(id, ")");
    }
  }], [{
    key: "toLinearGradient",
    value: function toLinearGradient(colorsteps) {
      if (colorsteps.length === 0) {
        return "none";
      }

      var gradient = new LinearGradient({
        angle: "to right",
        colorsteps: colorsteps
      });
      return gradient + "";
    }
  }, {
    key: "parse",
    value: function parse(str) {
      var results = Object(parser["convertMatches"])(str);
      var opt = {};
      var colorsteps = [];
      results.str.split("(")[1].split(")")[0].split(",").map(function (it) {
        return it.trim();
      }).forEach(function (newValue, index) {
        if (newValue.includes("@")) {
          newValue = Object(parser["reverseMatches"])(newValue, results.matches);
          colorsteps.push.apply(colorsteps, ColorStep["a" /* ColorStep */].parse(newValue));
        } else {
          var _newValue$split = newValue.split(' '),
              _newValue$split2 = slicedToArray_default()(_newValue$split, 5),
              x1 = _newValue$split2[0],
              y1 = _newValue$split2[1],
              x2 = _newValue$split2[2],
              y2 = _newValue$split2[3],
              spreadMethod = _newValue$split2[4];

          opt.x1 = Length["a" /* Length */].parse(x1);
          opt.y1 = Length["a" /* Length */].parse(y1);
          opt.x2 = Length["a" /* Length */].parse(x2);
          opt.y2 = Length["a" /* Length */].parse(y2);
          opt.spreadMethod = spreadMethod || 'pad';
        }
      });
      return new SVGLinearGradient(_objectSpread(_objectSpread({}, opt), {}, {
        colorsteps: colorsteps
      }));
    }
  }]);

  return SVGLinearGradient;
}(SVGGradient["a" /* SVGGradient */]);
// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/property-parser/image-resource/SVGRadialGradient.js









function SVGRadialGradient_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGRadialGradient_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGRadialGradient_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGRadialGradient_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGRadialGradient_createSuper(Derived) { var hasNativeReflectConstruct = SVGRadialGradient_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGRadialGradient_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGRadialGradient_SVGRadialGradient = /*#__PURE__*/function (_SVGGradient) {
  inherits_default()(SVGRadialGradient, _SVGGradient);

  var _super = SVGRadialGradient_createSuper(SVGRadialGradient);

  function SVGRadialGradient() {
    classCallCheck_default()(this, SVGRadialGradient);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGRadialGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SVGRadialGradient.prototype), "getDefaultObject", this).call(this, SVGRadialGradient_objectSpread({
        type: "radial-gradient",
        cx: '50%',
        cy: '50%',
        r: '50%',
        fx: '50%',
        fy: '50%',
        fr: '0%',
        spreadMethod: 'pad'
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return SVGRadialGradient_objectSpread(SVGRadialGradient_objectSpread({}, get_default()(getPrototypeOf_default()(SVGRadialGradient.prototype), "toCloneObject", this).call(this)), this.attrs('cx', 'cy', 'r', 'fx', 'fy', 'fr', 'spreadMethod'));
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.colorsteps.length === 0) return '';
      var colorString = this.getColorString();
      var _this$json = this.json,
          cx = _this$json.cx,
          cy = _this$json.cy,
          r = _this$json.r,
          fx = _this$json.fx,
          fy = _this$json.fy,
          fr = _this$json.fr,
          spreadMethod = _this$json.spreadMethod;
      var opt = [cx, cy, r, fx, fy, fr, spreadMethod].join(' ');
      var result = "".concat(this.json.type, "(").concat(opt, ", ").concat(colorString, ")");
      return result;
    }
  }, {
    key: "toSVGString",
    value: function toSVGString(id) {
      var _this$json2 = this.json,
          cx = _this$json2.cx,
          cy = _this$json2.cy,
          r = _this$json2.r,
          fx = _this$json2.fx,
          fy = _this$json2.fy,
          fr = _this$json2.fr,
          spreadMethod = _this$json2.spreadMethod;
      return (
        /*html*/
        "\n<radialGradient ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          id: id,
          cx: cx,
          cy: cy,
          r: r,
          fx: fx,
          fy: fy,
          fr: fr,
          spreadMethod: spreadMethod
        }), " >\n  ").concat(this.colorsteps.map(function (it) {
          return (
            /*html*/
            "<stop offset=\"".concat(it.percent, "%\"  stop-color=\"").concat(it.color, "\" />")
          );
        }).join('\n'), "\n</radialGradient>\n")
      );
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(id) {
      return "url(#".concat(id, ")");
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var results = Object(parser["convertMatches"])(str);
      var opt = {};
      var colorsteps = [];
      results.str.split("(")[1].split(")")[0].split(",").map(function (it) {
        return it.trim();
      }).forEach(function (newValue, index) {
        if (newValue.includes("@")) {
          // color 복원
          newValue = Object(parser["reverseMatches"])(newValue, results.matches);
          colorsteps.push.apply(colorsteps, ColorStep["a" /* ColorStep */].parse(newValue));
        } else {
          var _newValue$split = newValue.split(' '),
              _newValue$split2 = slicedToArray_default()(_newValue$split, 7),
              cx = _newValue$split2[0],
              cy = _newValue$split2[1],
              r = _newValue$split2[2],
              fx = _newValue$split2[3],
              fy = _newValue$split2[4],
              fr = _newValue$split2[5],
              spreadMethod = _newValue$split2[6];

          opt.cx = cx;
          opt.cy = cy;
          opt.r = r;
          opt.fx = fx;
          opt.fy = fy;
          opt.fr = fr;
          opt.spreadMethod = spreadMethod || 'pad';
        }
      });
      return new SVGRadialGradient(SVGRadialGradient_objectSpread(SVGRadialGradient_objectSpread({}, opt), {}, {
        colorsteps: colorsteps
      }));
    }
  }]);

  return SVGRadialGradient;
}(SVGGradient["a" /* SVGGradient */]);
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/SVGStaticGradient.js
var SVGStaticGradient = __webpack_require__(57);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ImageResource.js
var ImageResource = __webpack_require__(81);

// CONCATENATED MODULE: ./src/el/editor/property-parser/image-resource/SVGImageResource.js









function SVGImageResource_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGImageResource_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGImageResource_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGImageResource_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGImageResource_createSuper(Derived) { var hasNativeReflectConstruct = SVGImageResource_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGImageResource_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var IMAGE_LIST = ["jpg", "jpeg", "png", "gif", "svg"]; // refer to https://github.com/graingert/datauritoblob/blob/master/dataURItoBlob.js
// MIT License

function dataURItoBlob(dataURI) {
  // convert base64 to raw binary data held in a string
  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
  var byteString = atob(dataURI.split(",")[1]); // separate out the mime component

  var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0]; // write the bytes of the string to an ArrayBuffer

  var ab = new ArrayBuffer(byteString.length);
  var dw = new DataView(ab);

  for (var i = 0; i < byteString.length; i++) {
    dw.setUint8(i, byteString.charCodeAt(i));
  } // write the ArrayBuffer to a blob, and you're done


  return new Blob([ab], {
    type: mimeString
  });
}

var SVGImageResource_SVGImageResource = /*#__PURE__*/function (_ImageResource) {
  inherits_default()(SVGImageResource, _ImageResource);

  var _super = SVGImageResource_createSuper(SVGImageResource);

  function SVGImageResource() {
    classCallCheck_default()(this, SVGImageResource);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGImageResource, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SVGImageResource.prototype), "getDefaultObject", this).call(this, SVGImageResource_objectSpread({
        type: "url",
        url: "",
        datauri: "",
        patternUnits: 'userSpaceOnUse',
        patternWidth: '100%',
        patternHeight: '100%',
        imageX: "0%",
        imageY: '0%',
        imageWidth: "100%",
        imageHeight: '100%'
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return SVGImageResource_objectSpread(SVGImageResource_objectSpread({}, get_default()(getPrototypeOf_default()(SVGImageResource.prototype), "toCloneObject", this).call(this)), this.attrs('url', 'datauri', 'patternUnits', 'patternWidth', 'patternHeight', 'imageX', 'imageY', 'imageWidth', 'imageHeight'));
    }
  }, {
    key: "isUrl",
    value: function isUrl() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      var patternUnits = json.patternUnits,
          patternWidth = json.patternWidth,
          patternHeight = json.patternHeight,
          imageX = json.imageX,
          imageY = json.imageY,
          imageWidth = json.imageWidth,
          imageHeight = json.imageHeight,
          url = json.url;
      var string = [patternUnits, patternWidth, patternHeight, imageX, imageY, imageWidth, imageHeight].join(',').trim();
      return "url(".concat(url, "#").concat(string, ")");
    }
  }, {
    key: "toSVGString",
    value: function toSVGString(id) {
      var _this$json = this.json,
          patternUnits = _this$json.patternUnits,
          width = _this$json.patternWidth,
          height = _this$json.patternHeight,
          imageX = _this$json.imageX,
          imageY = _this$json.imageY,
          imageWidth = _this$json.imageWidth,
          imageHeight = _this$json.imageHeight;
      return (
        /*html*/
        "\n  <pattern ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          id: id,
          patternUnits: patternUnits,
          width: width,
          height: height
        }), " >\n    <image xlink:href=\"").concat(this.json.url, "\" ").concat(Object(func["OBJECT_TO_PROPERTY"])({
          x: imageX,
          y: imageY,
          width: imageWidth,
          height: imageHeight,
          preserveAspectRatio: "none"
        }), " />\n  </pattern>\n      ")
      );
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(id) {
      return "url(#".concat(id, ")");
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var content = str.split('(')[1].split(')')[0];

      var _content$trim$split = content.trim().split('#'),
          _content$trim$split2 = slicedToArray_default()(_content$trim$split, 2),
          url = _content$trim$split2[0],
          props = _content$trim$split2[1];

      if (!props) {
        return new SVGImageResource({
          url: url
        });
      }

      var _props$split = props.split(','),
          _props$split2 = slicedToArray_default()(_props$split, 7),
          patternUnits = _props$split2[0],
          patternWidth = _props$split2[1],
          patternHeight = _props$split2[2],
          imageX = _props$split2[3],
          imageY = _props$split2[4],
          imageWidth = _props$split2[5],
          imageHeight = _props$split2[6];

      return new SVGImageResource({
        patternUnits: patternUnits,
        patternWidth: patternWidth,
        patternHeight: patternHeight,
        imageX: imageX,
        imageY: imageY,
        imageWidth: imageWidth,
        imageHeight: imageHeight,
        url: url
      });
    }
  }, {
    key: "isImageFile",
    value: function isImageFile(fileExt) {
      return IMAGE_LIST.includes(fileExt);
    }
  }]);

  return SVGImageResource;
}(ImageResource["a" /* ImageResource */]);
// CONCATENATED MODULE: ./src/el/editor/property-parser/SVGFill.js







function SVGFill_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGFill_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGFill_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGFill_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGFill_createSuper(Derived) { var hasNativeReflectConstruct = SVGFill_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGFill_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var reg = /((linear\-gradient|radial\-gradient|url)\(([^\)]*)\))/gi;
var SVGFill_SVGFill = /*#__PURE__*/function (_Property) {
  inherits_default()(SVGFill, _Property);

  var _super = SVGFill_createSuper(SVGFill);

  function SVGFill() {
    classCallCheck_default()(this, SVGFill);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFill, [{
    key: "addImageResource",
    value: function addImageResource(imageResource) {
      this.clear("image-resource");
      return this.addItem("image-resource", imageResource);
    }
  }, {
    key: "addGradient",
    value: function addGradient(gradient) {
      return this.addImageResource(gradient);
    }
  }, {
    key: "setImageUrl",
    value: function setImageUrl(data) {
      if (!data.images) return;
      if (!data.images.length) return;
      this.reset({
        type: "image",
        image: SVGFill.createImage(data.images[0])
      });
    }
  }, {
    key: "setGradient",
    value: function setGradient(data) {
      this.reset({
        type: data.type,
        image: SVGFill.createGradient(data, this.json.image)
      });
    }
  }, {
    key: "image",
    get: function get() {
      return this.json.image;
    },
    set: function set(image) {
      this.json.image = image;
    }
  }], [{
    key: "createImage",
    value: function createImage(url) {
      return new SVGLImageResource({
        url: url
      });
    }
  }, {
    key: "createGradient",
    value: function createGradient(data, gradient) {
      var colorsteps = data.colorsteps || gradient.colorsteps;
      var json = gradient.toJSON();
      delete json.itemType;
      delete json.type;

      switch (data.type) {
        case "linear-gradient":
          return new SVGLinearGradient_SVGLinearGradient(SVGFill_objectSpread(SVGFill_objectSpread({}, json), {}, {
            colorsteps: colorsteps
          }));

        case "radial-gradient":
          return new SVGRadialGradient_SVGRadialGradient(SVGFill_objectSpread(SVGFill_objectSpread({}, json), {}, {
            colorsteps: colorsteps
          }));

        default:
          return new SVGStaticGradient["a" /* SVGStaticGradient */](SVGFill_objectSpread(SVGFill_objectSpread({}, json), {}, {
            colorsteps: colorsteps
          }));
      }
    }
  }, {
    key: "parse",
    value: function parse(obj) {
      return new SVGFill(obj);
    }
  }, {
    key: "parseImage",
    value: function parseImage(str) {
      var results = Object(parser["convertMatches"])(str);
      var image = null;
      var matchResult = results.str.match(reg);
      if (!matchResult) return SVGStaticGradient["a" /* SVGStaticGradient */].create(str || 'transparent');
      matchResult.forEach(function (value, index) {
        value = Object(parser["reverseMatches"])(value, results.matches);

        if (value.includes("linear")) {
          image = SVGLinearGradient_SVGLinearGradient.parse(value);
        } else if (value.includes("radial")) {
          image = SVGRadialGradient_SVGRadialGradient.parse(value);
        } else if (value.includes("url")) {
          image = SVGImageResource_SVGImageResource.parse(value);
        } else {
          image = SVGStaticGradient["a" /* SVGStaticGradient */].parse(value);
        }
      });
      return image;
    }
  }, {
    key: "changeImageType",
    value: function changeImageType(options) {
      switch (options.type) {
        case 'linear-gradient':
          return new SVGLinearGradient_SVGLinearGradient(options);

        case 'radial-gradient':
          return new SVGRadialGradient_SVGRadialGradient(options);

        case 'image-resource':
        case 'url':
          return new SVGImageResource_SVGImageResource(options);

        default:
          return new SVGStaticGradient["a" /* SVGStaticGradient */](options);
      }
    }
  }]);

  return SVGFill;
}(Property["a" /* Property */]);

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LayerRender; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _DomRender__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(62);





function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var LayerRender = /*#__PURE__*/function (_DomRender) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_1___default()(LayerRender, _DomRender);

  var _super = _createSuper(LayerRender);

  function LayerRender() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, LayerRender);

    return _super.apply(this, arguments);
  }

  return LayerRender;
}(_DomRender__WEBPACK_IMPORTED_MODULE_4__[/* default */ "a"]);



/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return Filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlurFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return URLSvgFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return GrayscaleFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return HueRotateFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return InvertFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return BrightnessFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return ContrastFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return OpacityFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return SaturateFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return SepiaFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return DropshadowFilter; });
/* unused harmony export FilterClassList */
/* unused harmony export FilterClassName */
/* unused harmony export FilterClass */
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(34);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(21);









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var FILTER_REG = /((blur|drop\-shadow|hue\-rotate|invert|brightness|contrast|opacity|saturate|sepia)\(([^\)]*)\))/gi;
var Filter = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Filter, _Property);

  var _super = _createSuper(Filter);

  function Filter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Filter);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Filter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Filter.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "filter"
      }, obj));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.json.type, "(").concat(this.json.value || "", ")");
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      var FilterClass = FilterClassName[obj.type];

      if (FilterClass) {
        return new FilterClass(obj);
      } else {
        return new URLSvgFilter({
          value: obj.type
        });
      }
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(filter) {
      var filters = [];
      if (!filter) return filters;
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_10__["convertMatches"])(filter);
      var matches = results.str.match(FILTER_REG) || [];
      matches.forEach(function (value, index) {
        var _value$split = value.split("("),
            _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_value$split, 2),
            filterName = _value$split2[0],
            filterValue = _value$split2[1];

        filterValue = filterValue.split(")")[0];

        if (filterName === "drop-shadow") {
          var arr = filterValue.split(" ");
          var colors = arr.filter(function (it) {
            return it.includes("@");
          }).map(function (it) {
            return results.matches[+it.replace("@", "")].color;
          });
          var values = arr.filter(function (it) {
            return !it.includes("@");
          }); // drop-shadow 값 설정

          filters[index] = Filter.parse({
            type: filterName,
            offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(values[0]),
            offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(values[1]),
            blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(values[2]),
            color: colors[0] || "rgba(0, 0, 0, 1)"
          });
        } else {
          // drop shadow 제외한 나머지 값 지정
          filters[index] = Filter.parse({
            type: filterName,
            value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(filterValue)
          });
        }
      });
      return filters;
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return Filter.parse(it);
      }).join(' ');
    }
  }]);

  return Filter;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_9__[/* Property */ "a"]);
var BlurFilter = /*#__PURE__*/function (_Filter) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(BlurFilter, _Filter);

  var _super2 = _createSuper(BlurFilter);

  function BlurFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, BlurFilter);

    return _super2.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(BlurFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(BlurFilter.prototype), "getDefaultObject", this).call(this, {
        type: "blur",
        value: BlurFilter.spec.defaultValue
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(BlurFilter.prototype), "toCloneObject", this).call(this)), this.attrs('value'));
    }
  }]);

  return BlurFilter;
}(Filter);
BlurFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: 'px',
  units: ["px", "em"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].z()
};
var URLSvgFilter = /*#__PURE__*/function (_Filter2) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(URLSvgFilter, _Filter2);

  var _super3 = _createSuper(URLSvgFilter);

  function URLSvgFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, URLSvgFilter);

    return _super3.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(URLSvgFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(URLSvgFilter.prototype), "getDefaultObject", this).call(this, {
        type: "svg",
        value: URLSvgFilter.spec.defaultValue
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(URLSvgFilter.prototype), "toCloneObject", this).call(this)), this.attrs('value'));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "url(#".concat(this.json.value || "", ")");
    }
  }]);

  return URLSvgFilter;
}(Filter);
URLSvgFilter.spec = {
  inputType: "select",
  defaultValue: ''
};
var GrayscaleFilter = /*#__PURE__*/function (_Filter3) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(GrayscaleFilter, _Filter3);

  var _super4 = _createSuper(GrayscaleFilter);

  function GrayscaleFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, GrayscaleFilter);

    return _super4.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(GrayscaleFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(GrayscaleFilter.prototype), "getDefaultObject", this).call(this, {
        type: "grayscale",
        value: GrayscaleFilter.spec.defaultValue
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(GrayscaleFilter.prototype), "toCloneObject", this).call(this)), this.attrs('value'));
    }
  }]);

  return GrayscaleFilter;
}(Filter);
GrayscaleFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(0)
};
var HueRotateFilter = /*#__PURE__*/function (_Filter4) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(HueRotateFilter, _Filter4);

  var _super5 = _createSuper(HueRotateFilter);

  function HueRotateFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, HueRotateFilter);

    return _super5.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(HueRotateFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(HueRotateFilter.prototype), "getDefaultObject", this).call(this, {
        type: "hue-rotate",
        value: HueRotateFilter.spec.defaultValue
      });
    }
  }]);

  return HueRotateFilter;
}(Filter);
HueRotateFilter.spec = {
  inputType: "range",
  min: 0,
  max: 360,
  step: 1,
  unit: 'deg',
  units: ["deg"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].deg(0)
};
var InvertFilter = /*#__PURE__*/function (_Filter5) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(InvertFilter, _Filter5);

  var _super6 = _createSuper(InvertFilter);

  function InvertFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, InvertFilter);

    return _super6.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(InvertFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(InvertFilter.prototype), "getDefaultObject", this).call(this, {
        type: "invert",
        value: InvertFilter.spec.defaultValue
      });
    }
  }]);

  return InvertFilter;
}(Filter);
InvertFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(0)
};
var BrightnessFilter = /*#__PURE__*/function (_Filter6) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(BrightnessFilter, _Filter6);

  var _super7 = _createSuper(BrightnessFilter);

  function BrightnessFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, BrightnessFilter);

    return _super7.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(BrightnessFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(BrightnessFilter.prototype), "getDefaultObject", this).call(this, {
        type: "brightness",
        value: BrightnessFilter.spec.defaultValue
      });
    }
  }]);

  return BrightnessFilter;
}(Filter);
BrightnessFilter.spec = {
  inputType: "range",
  min: 0,
  max: 200,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(100)
};
var ContrastFilter = /*#__PURE__*/function (_Filter7) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(ContrastFilter, _Filter7);

  var _super8 = _createSuper(ContrastFilter);

  function ContrastFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, ContrastFilter);

    return _super8.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(ContrastFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(ContrastFilter.prototype), "getDefaultObject", this).call(this, {
        type: "contrast",
        value: ContrastFilter.spec.defaultValue
      });
    }
  }]);

  return ContrastFilter;
}(Filter);
ContrastFilter.spec = {
  inputType: "range",
  min: 0,
  max: 200,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(100)
};
var OpacityFilter = /*#__PURE__*/function (_Filter8) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(OpacityFilter, _Filter8);

  var _super9 = _createSuper(OpacityFilter);

  function OpacityFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, OpacityFilter);

    return _super9.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(OpacityFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(OpacityFilter.prototype), "getDefaultObject", this).call(this, {
        type: "opacity",
        value: OpacityFilter.spec.defaultValue
      });
    }
  }]);

  return OpacityFilter;
}(Filter);
OpacityFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(100)
};
var SaturateFilter = /*#__PURE__*/function (_Filter9) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(SaturateFilter, _Filter9);

  var _super10 = _createSuper(SaturateFilter);

  function SaturateFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, SaturateFilter);

    return _super10.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(SaturateFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(SaturateFilter.prototype), "getDefaultObject", this).call(this, {
        type: "saturate",
        value: SaturateFilter.spec.defaultValue
      });
    }
  }]);

  return SaturateFilter;
}(Filter);
SaturateFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(100)
};
var SepiaFilter = /*#__PURE__*/function (_Filter10) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(SepiaFilter, _Filter10);

  var _super11 = _createSuper(SepiaFilter);

  function SepiaFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, SepiaFilter);

    return _super11.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(SepiaFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(SepiaFilter.prototype), "getDefaultObject", this).call(this, {
        type: "sepia",
        value: SepiaFilter.spec.defaultValue
      });
    }
  }]);

  return SepiaFilter;
}(Filter);
SepiaFilter.spec = {
  inputType: "range",
  min: 0,
  max: 100,
  step: 1,
  unit: '%',
  units: ["%"],
  defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(0)
};
var DropshadowFilter = /*#__PURE__*/function (_Filter11) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(DropshadowFilter, _Filter11);

  var _super12 = _createSuper(DropshadowFilter);

  function DropshadowFilter() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DropshadowFilter);

    return _super12.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DropshadowFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(DropshadowFilter.prototype), "getDefaultObject", this).call(this, {
        type: "drop-shadow",
        multi: true,
        offsetX: DropshadowFilter.spec.offsetX.defaultValue,
        offsetY: DropshadowFilter.spec.offsetY.defaultValue,
        blurRadius: DropshadowFilter.spec.blurRadius.defaultValue,
        color: DropshadowFilter.spec.color.defaultValue
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return "drop-shadow(".concat(json.offsetX, " ").concat(json.offsetY, " ").concat(json.blurRadius, " ").concat(json.color, ")");
    }
  }]);

  return DropshadowFilter;
}(Filter);
DropshadowFilter.spec = {
  offsetX: {
    title: "Offset X",
    inputType: "range",
    min: -100,
    max: 100,
    step: 1,
    defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].z(),
    unit: 'px',
    units: ["px", "em"]
  },
  offsetY: {
    title: "Offset Y",
    inputType: "range",
    min: -100,
    max: 100,
    step: 1,
    defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].z(),
    unit: 'px',
    units: ["px", "em"]
  },
  blurRadius: {
    title: "Blur Radius",
    inputType: "range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].z(),
    unit: 'px',
    units: ["px", "em", "%"]
  },
  color: {
    title: "Color",
    inputType: "color",
    defaultValue: "rgba(0, 0, 0, 1)",
    unit: 'color'
  }
};
var FilterClassList = [BlurFilter, GrayscaleFilter, HueRotateFilter, InvertFilter, BrightnessFilter, ContrastFilter, OpacityFilter, SaturateFilter, SepiaFilter, DropshadowFilter, URLSvgFilter];
var FilterClassName = {
  blur: BlurFilter,
  grayscale: GrayscaleFilter,
  "hue-rotate": HueRotateFilter,
  invert: InvertFilter,
  brightness: BrightnessFilter,
  contrast: ContrastFilter,
  opacity: OpacityFilter,
  saturate: SaturateFilter,
  sepia: SepiaFilter,
  "drop-shadow": DropshadowFilter,
  svg: URLSvgFilter
};
var FilterClass = {
  BlurFilter: BlurFilter,
  GrayscaleFilter: GrayscaleFilter,
  HueRotateFilter: HueRotateFilter,
  InvertFilter: InvertFilter,
  BrightnessFilter: BrightnessFilter,
  ContrastFilter: ContrastFilter,
  OpacityFilter: OpacityFilter,
  SaturateFilter: SaturateFilter,
  SepiaFilter: SepiaFilter,
  DropshadowFilter: DropshadowFilter,
  URLSvgFilter: URLSvgFilter
};

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PathStringManager; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _PathParser__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(32);




var PathStringManager = /*#__PURE__*/function () {
  function PathStringManager() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PathStringManager);

    this.pathArray = [];
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PathStringManager, [{
    key: "reset",
    value: function reset() {
      this.pathArray = [];
    }
  }, {
    key: "getPointString",
    value: function getPointString(values) {
      return values.map(function (v) {
        return "".concat(v.x, " ").concat(v.y);
      }).join(' ');
    }
  }, {
    key: "makeString",
    value: function makeString(command) {
      var values = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      this.pathArray.push("".concat(command, " ").concat(this.getPointString(values)));
      return this;
    }
  }, {
    key: "M",
    value: function M() {
      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      return this.makeString('M', values);
    }
  }, {
    key: "L",
    value: function L() {
      for (var _len2 = arguments.length, values = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        values[_key2] = arguments[_key2];
      }

      return this.makeString('L', values);
    }
    /**
     * x 표 그리기 
     * 
     * @param  {Point[]} values 
     */

  }, {
    key: "X",
    value: function X() {
      var dist = 3;
      var point = arguments.length <= 0 ? undefined : arguments[0];
      var topLeft = {
        x: point.x - dist,
        y: point.y - dist
      };
      var topRight = {
        x: point.x + dist,
        y: point.y - dist
      };
      var bottomLeft = {
        x: point.x - dist,
        y: point.y + dist
      };
      var bottomRight = {
        x: point.x + dist,
        y: point.y + dist
      };
      return this.M(topLeft).L(bottomRight).M(topRight).L(bottomLeft);
    }
  }, {
    key: "Q",
    value: function Q() {
      for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        values[_key3] = arguments[_key3];
      }

      return this.makeString('Q', values);
    }
  }, {
    key: "C",
    value: function C() {
      for (var _len4 = arguments.length, values = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        values[_key4] = arguments[_key4];
      }

      return this.makeString('C', values);
    }
  }, {
    key: "Z",
    value: function Z() {
      return this.makeString('Z');
    }
  }, {
    key: "d",
    get: function get() {
      return this.pathArray.join(' ').trim();
    }
  }, {
    key: "toString",
    value: function toString() {
      var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'object';
      return (
        /*html*/
        "<path d=\"".concat(this.d, "\" class='").concat(className, "'/>")
      );
    }
  }], [{
    key: "makeRect",
    value: function makeRect(x, y, width, height) {
      var d = new PathStringManager().M({
        x: x,
        y: y
      }).L({
        x: x + width,
        y: y
      }).L({
        x: x + width,
        y: y + height
      }).L({
        x: x,
        y: y + height
      }).L({
        x: x,
        y: y
      }).Z().d;
      return d;
    }
  }, {
    key: "makeLine",
    value: function makeLine(x, y, x2, y2) {
      var d = new PathStringManager().M({
        x: x,
        y: y
      }).L({
        x: x2,
        y: y2
      }).d;
      return d;
    }
  }, {
    key: "makeCircle",
    value: function makeCircle(x, y, width, height) {
      // refer to https://stackoverflow.com/questions/1734745/how-to-create-circle-with-b%C3%A9zier-curves
      var segmentSize = 0.552284749831;
      var d = new PathStringManager().M({
        x: 0,
        y: -1
      }).C({
        x: segmentSize,
        y: -1
      }, {
        x: 1,
        y: -segmentSize
      }, {
        x: 1,
        y: 0
      }).C({
        x: 1,
        y: segmentSize
      }, {
        x: segmentSize,
        y: 1
      }, {
        x: 0,
        y: 1
      }).C({
        x: -segmentSize,
        y: 1
      }, {
        x: -1,
        y: segmentSize
      }, {
        x: -1,
        y: 0
      }).C({
        x: -1,
        y: -segmentSize
      }, {
        x: -segmentSize,
        y: -1
      }, {
        x: 0,
        y: -1
      }).Z().d;
      var parser = new _PathParser__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"](d);
      parser.translate(1, 1).scale(width / 2, height / 2).translate(x, y);
      return parser.toString();
    }
  }, {
    key: "makePathByPoints",
    value: function makePathByPoints() {
      var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var manager = new PathStringManager();

      for (var i = 0, len = points.length; i < len; i++) {
        var point = points[i];

        if (i === 0) {
          manager.M(point);
        } else {
          manager.L(point);
        }
      }

      return manager.d;
    }
  }]);

  return PathStringManager;
}();



/***/ }),
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(143);

var iterableToArray = __webpack_require__(142);

var unsupportedIterableToArray = __webpack_require__(109);

var nonIterableRest = __webpack_require__(144);

function _toArray(arr) {
  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();
}

module.exports = _toArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Layer; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _DomItem__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(102);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var Layer = /*#__PURE__*/function (_DomItem) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(Layer, _DomItem);

  var _super = _createSuper(Layer);

  function Layer() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Layer);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Layer, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Layer.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "layer",
        name: "New Layer",
        tagName: 'div'
      }, obj));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Layer";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].rect;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Layer.prototype), "toCloneObject", this).call(this)), this.attrs('tagName'));
    }
  }], [{
    key: "getIcon",
    value: function getIcon() {
      return el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].rect;
    }
  }]);

  return Layer;
}(_DomItem__WEBPACK_IMPORTED_MODULE_7__[/* DomItem */ "a"]);

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/manager/RendererManager.js
var RendererManager = __webpack_require__(83);

// EXTERNAL MODULE: ./src/el/editor/items/Item.js
var Item = __webpack_require__(35);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/renderer/HTMLRenderer/DomRender.js + 1 modules
var DomRender = __webpack_require__(62);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/ArtBoardRender.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ArtBoardRender_ArtBoardRender = /*#__PURE__*/function (_DomRender) {
  inherits_default()(ArtBoardRender, _DomRender);

  var _super = _createSuper(ArtBoardRender);

  function ArtBoardRender() {
    classCallCheck_default()(this, ArtBoardRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ArtBoardRender, [{
    key: "render",
    value:
    /**
     * Artboard 템플릿 설정 
     * 
     * @param {Item} item 
     * @param {Renderer} renderer
     * @override
     */
    function render(item, renderer) {
      var elementType = item.elementType,
          id = item.id,
          name = item.name,
          itemType = item.itemType;
      var tagName = elementType || 'div';
      return (
        /*html*/
        "    \n      <".concat(tagName, " class=\"element-item artboard\" data-id=\"").concat(id, "\">\n        ").concat(this.toDefString(item), "\n        ").concat(item.layers.map(function (it) {
          return renderer.render(it, renderer);
        }).join('\n\t'), "\n      </").concat(tagName, ">\n    ")
      );
    }
  }]);

  return ArtBoardRender;
}(DomRender["a" /* default */]);


// EXTERNAL MODULE: ./src/el/editor/renderer/HTMLRenderer/LayerRender.js
var LayerRender = __webpack_require__(43);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/CircleRender.js





function CircleRender_createSuper(Derived) { var hasNativeReflectConstruct = CircleRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CircleRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var CircleRender_CircleRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(CircleRender, _LayerRender);

  var _super = CircleRender_createSuper(CircleRender);

  function CircleRender() {
    classCallCheck_default()(this, CircleRender);

    return _super.apply(this, arguments);
  }

  return CircleRender;
}(LayerRender["a" /* default */]);


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/CubeRender.js







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function CubeRender_createSuper(Derived) { var hasNativeReflectConstruct = CubeRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CubeRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var faceKeys = ['front', 'back', 'left', 'right', 'top', 'bottom'];

var CubeRender_CubeRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(CubeRender, _LayerRender);

  var _super = CubeRender_createSuper(CubeRender);

  function CubeRender() {
    classCallCheck_default()(this, CubeRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(CubeRender, [{
    key: "toDefaultCSS",
    value:
    /**
     * 
     * @param {Item} item 
     */
    function toDefaultCSS(item) {
      var obj = {};
      if (item.x) obj.left = item.x;
      if (item.y) obj.top = item.y;
      obj.visibility = item.visible ? 'visible' : 'hidden';
      return _objectSpread(_objectSpread({}, obj), this.toKeyListCSS(item, ['position', 'right', 'bottom', 'width', 'height', 'transform-origin', 'transform', 'transform-style', 'perspective', 'perspective-origin', 'animation', 'transition' // 'filter',
      ]));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toCSS",
    value: function toCSS(item) {
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.toVariableCSS(item)), this.toDefaultCSS(item)), this.toWebkitCSS(item)), this.toBoxModelCSS(item)), this.toLayoutItemCSS(item));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toNestedCSS",
    value: function toNestedCSS(item) {
      var rate = item.rate.value;
      var width = item.width;
      var height = item.height;
      var halfWidth = width.value / 2;
      var halfHeight = height.value / 2;
      var backfaceVisibility = item['backface-visibility'];

      var css = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.toKeyListCSS(item, ['filter', 'mix-blend-mode', 'border-radius', 'background-color', 'opacity', 'color'])), this.toClipPathCSS(item)), this.toBackgroundImageCSS(item)), this.toBorderCSS(item));

      return [{
        selector: 'div',
        cssText: "\n          position: absolute;\n          left: 0px;\n          top: 0px;\n          bottom: 0px;\n          right: 0px;\n          opacity: 1;\n          pointer-events: none;\n          ".concat(Object(func["CSS_TO_STRING"])(css), "\n        ").trim()
      }, {
        selector: '.front',
        cssText: "\n          transform:rotateY(0deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";     \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(item['front.color'] ? "background-color: ".concat(item['front.color'], ";") : '', "\n          ").concat(item['front.background'] ? "".concat(item['front.background'], ";") : '', "\n\n        ").trim()
      }, {
        selector: '.back',
        cssText: "\n          transform: rotateY(180deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";        \n          backface-visibility: ").concat(backfaceVisibility, ";              \n          ").concat(item['back.color'] ? "background-color: ".concat(item['back.color'], ";") : '', "                  \n          ").concat(item['back.background'] ? "".concat(item['back.background'], ";") : '', "\n        ").trim()
      }, {
        selector: '.left',
        cssText: "\n          transform: rotateY(-90deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";    \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(item['left.color'] ? "background-color: ".concat(item['left.color'], ";") : '', "                          \n          ").concat(item['left.background'] ? "".concat(item['left.background'], ";") : '', "\n        ").trim()
      }, {
        selector: '.right',
        cssText: "\n          transform: rotateY(90deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";      \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(item['right.color'] ? "background-color: ".concat(item['right.color'], ";") : '', "                        \n          ").concat(item['right.background'] ? "".concat(item['right.background'], ";") : '', "          \n        ").trim()
      }, {
        selector: '.top',
        cssText: "\n          transform: rotateX(90deg) translateZ(".concat(halfHeight * rate, "px);\n          top: ").concat(halfHeight - halfWidth, "px;\n          width: ").concat(width, ";\n          height: ").concat(width, ";\n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(item['top.color'] ? "background-color: ".concat(item['top.color'], ";") : '', "      \n          ").concat(item['top.background'] ? "".concat(item['top.background'], ";") : '', "              \n        ").trim()
      }, {
        selector: '.bottom',
        cssText: "\n          transform: rotateX(-90deg) translateZ(".concat(halfHeight * rate, "px);\n          top: ").concat(halfHeight - halfWidth, "px;          \n          width: ").concat(width, ";\n          height: ").concat(width, ";    \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(item['bottom.color'] ? "background-color: ".concat(item['bottom.color'], ";") : '', "\n          ").concat(item['bottom.background'] ? "".concat(item['bottom.background'], ";") : '', "                          \n        ").trim()
      }];
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id;
      return (
        /*html*/
        "\n      <div class='element-item cube' data-id=\"".concat(id, "\">\n        ").concat(this.toDefString(item), "\n        ").concat(faceKeys.map(function (key) {
          return (
            /*html*/
            "<div class='".concat(key, "'></div>")
          );
        }).join(''), "\n      </div>")
      );
    }
  }]);

  return CubeRender;
}(LayerRender["a" /* default */]);


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/IFrameRender.js







function IFrameRender_createSuper(Derived) { var hasNativeReflectConstruct = IFrameRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function IFrameRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var IFrameRender_IFrameRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(IFrameRender, _LayerRender);

  var _super = IFrameRender_createSuper(IFrameRender);

  function IFrameRender() {
    classCallCheck_default()(this, IFrameRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(IFrameRender, [{
    key: "update",
    value: function update(item, currentElement) {
      var $iframe = currentElement.$("iframe");

      if (item.hasChangedField('url')) {
        $iframe.attr('src', item.url || 'about:blank');
      }

      if (item.hasChangedField('width', 'height')) {
        $iframe.setAttr({
          width: item.width,
          height: item.height
        });
      }

      get_default()(getPrototypeOf_default()(IFrameRender.prototype), "update", this).call(this, item, currentElement);
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          _item$url = item.url,
          url = _item$url === void 0 ? 'about:blank' : _item$url,
          width = item.width,
          height = item.height;
      return (
        /*html*/
        "\n      <div class='element-item iframe' data-id=\"".concat(id, "\">\n        ").concat(this.toDefString(item), "\n        <iframe \n            width=\"").concat(width, "\" \n            height=\"").concat(height, "\" \n            style=\"border:0px;pointer-events:none;\" \n            src=\"").concat(url, "\"\n            allowfullscreen=\"true\"\n        ></iframe>\n      </div>")
      );
    }
  }]);

  return IFrameRender;
}(LayerRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/ImageRender.js







function ImageRender_createSuper(Derived) { var hasNativeReflectConstruct = ImageRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ImageRender_ImageRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(ImageRender, _LayerRender);

  var _super = ImageRender_createSuper(ImageRender);

  function ImageRender() {
    classCallCheck_default()(this, ImageRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageRender, [{
    key: "toNestedCSS",
    value:
    /**
     * 중첩 CSS 정의 
     * 
     * @param {Item} item
     */
    function toNestedCSS(item) {
      return [{
        selector: 'img',
        cssText: "\n                width: 100%;\n                height: 100%;\n                pointer-events: none;\n                ".trim()
      }];
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "getUrl",
    value: function getUrl(item) {
      var src = item.src;
      var project = item.project;
      return project.getImageValueById(src) || src;
    }
    /**
     * 
     * @param {*} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id;
      return (
        /*html*/
        "\n          <div class='element-item image' data-id=\"".concat(id, "\">\n            ").concat(this.toDefString(item), "\n            <img src='").concat(this.getUrl(item), "' />\n          </div>")
      );
    }
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      var $image = currentElement.$('img');

      if ($image) {
        $image.attr('src', this.getUrl(item));
      }

      get_default()(getPrototypeOf_default()(ImageRender.prototype), "update", this).call(this, item, currentElement);
    }
  }]);

  return ImageRender;
}(LayerRender["a" /* default */]);


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./src/el/editor/items/Project.js + 45 modules
var Project = __webpack_require__(70);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFilter.js + 32 modules
var SVGFilter = __webpack_require__(56);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/ProjectRender.js








function ProjectRender_createSuper(Derived) { var hasNativeReflectConstruct = ProjectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ProjectRender_ProjectRender = /*#__PURE__*/function (_DomRender) {
  inherits_default()(ProjectRender, _DomRender);

  var _super = ProjectRender_createSuper(ProjectRender);

  function ProjectRender() {
    classCallCheck_default()(this, ProjectRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectRender, [{
    key: "toRootVariableCSS",
    value:
    /**
     * 
     * @param {Item} item 
     */
    function toRootVariableCSS(item) {
      var obj = {};
      item.rootVariable.split(';').filter(function (it) {
        return it.trim();
      }).forEach(function (it) {
        var _it$split = it.split(':'),
            _it$split2 = slicedToArray_default()(_it$split, 2),
            key = _it$split2[0],
            value = _it$split2[1];

        obj["--".concat(key)] = value;
      });
      return obj;
    }
    /**
     * 
     * @param {Project} item 
     */

  }, {
    key: "toCSS",
    value: function toCSS(item) {
      return Object.assign.apply(Object, [{}].concat(toConsumableArray_default()(this.toRootVariableCSS(item))));
    }
    /**
     * 
     * @param {Project} item 
     */

  }, {
    key: "toStyle",
    value: function toStyle(item) {
      var keyframeString = item.toKeyframeString();
      var rootVariable = this.toRootVariableCSS(item);
      return (
        /*html*/
        "\n<style type='text/css' data-renderer-type=\"html\" data-id='".concat(item.id, "'>\n    :root {\n        ").concat(Object(func["CSS_TO_STRING"])(rootVariable), "\n    }\n    /* keyframe */\n    ").concat(keyframeString, "\n</style>\n        ")
      );
    }
    /**
     * 
     * @param {Item} item 
     * @param {HTMLRenderer} renderer 
     */

  }, {
    key: "render",
    value: function render(item, renderer) {
      return item.layers.map(function (it) {
        return renderer.render(it);
      }).join('');
    }
  }, {
    key: "renderSVGFilter",
    value: function renderSVGFilter(item) {
      var filterString = item.svgfilters.map(function (svgfilter) {
        var filters = svgfilter.filters.map(function (filter) {
          return SVGFilter["a" /* SVGFilter */].parse(filter);
        });
        return (
          /*html*/
          "<filter id='".concat(svgfilter.id, "'>").concat(filters.join('\n'), "</filter>")
        );
      }).join('\n\n');
      return filterString;
    }
    /**
     * 프로젝트에서 관리하는 SVG 객체를 출력한다. 
     * 
     * @param {Item} item 
     * @param {HTMLRenderer} renderer 
     */

  }, {
    key: "renderSVG",
    value: function renderSVG(item, renderer) {
      var filterString = this.renderSVGFilter(item);
      return (
        /*html*/
        "\n<svg width=\"0\" height=\"0\">\n    <title>SVG Properties</title>\n    ".concat(filterString, "\n</svg>\n")
      );
    }
  }]);

  return ProjectRender;
}(DomRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/RectRender.js





function RectRender_createSuper(Derived) { var hasNativeReflectConstruct = RectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var RectRender_RectRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(RectRender, _LayerRender);

  var _super = RectRender_createSuper(RectRender);

  function RectRender() {
    classCallCheck_default()(this, RectRender);

    return _super.apply(this, arguments);
  }

  return RectRender;
}(LayerRender["a" /* default */]);


// EXTERNAL MODULE: ./src/el/base/Color.js + 2 modules
var Color = __webpack_require__(26);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFill.js + 3 modules
var SVGFill = __webpack_require__(42);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/SVGItemRender.js








function SVGItemRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGItemRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGItemRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGItemRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGItemRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGItemRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGItemRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SVGItemRender_SVGItemRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(SVGItemRender, _LayerRender);

  var _super = SVGItemRender_createSuper(SVGItemRender);

  function SVGItemRender() {
    classCallCheck_default()(this, SVGItemRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGItemRender, [{
    key: "updateDefString",
    value:
    /**
     * Def 업데이트 하기 
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function updateDefString(item, currentElement) {
      var $defs = currentElement.$('defs');

      if ($defs) {
        $defs.updateSVGDiff("<defs>".concat(this.toDefInnerString(item), "</defs>"));
      } else {
        var str = this.toDefString(item).trim();
        currentElement.prepend(Dom["a" /* default */].createByHTML(str));
      }
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefInnerString",
    value: function toDefInnerString(item) {
      return (
        /*html*/
        "\n            ".concat(this.toFillSVG(item), "\n            ").concat(this.toStrokeSVG(item), "\n        ")
      );
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefString",
    value: function toDefString(item) {
      var str = this.toDefInnerString(item).trim();
      return (
        /*html*/
        "\n            <defs>\n            ".concat(str, "\n            </defs>\n        ")
      );
    }
  }, {
    key: "fillId",
    value: function fillId(item) {
      return this.getInnerId(item, 'fill');
    }
  }, {
    key: "strokeId",
    value: function strokeId(item) {
      return this.getInnerId(item, 'stroke');
    }
  }, {
    key: "toFillSVG",
    value: function toFillSVG(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.fill || 'transparent').toSVGString(this.fillId(item));
    }
  }, {
    key: "toStrokeSVG",
    value: function toStrokeSVG(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.stroke || 'black').toSVGString(this.strokeId(item));
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.fill || 'transparent').toFillValue(this.fillId(item));
    }
  }, {
    key: "toFillOpacityValue",
    value: function toFillOpacityValue(item) {
      return Color["a" /* default */].parse(item.fill || 'transparent').a;
    }
  }, {
    key: "toStrokeValue",
    value: function toStrokeValue(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.stroke || 'black').toFillValue(this.strokeId(item));
    }
  }, {
    key: "toFilterValue",
    value: function toFilterValue(item) {
      if (!item.svgfilter) {
        return '';
      }

      return "url(#".concat(item.svgfilter, ")");
    }
    /**
     * @override
     * @param {Item} item
     */

  }, {
    key: "toLayoutCSS",
    value: function toLayoutCSS(item) {
      return {};
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefaultCSS",
    value: function toDefaultCSS(item) {
      return SVGItemRender_objectSpread(SVGItemRender_objectSpread({}, get_default()(getPrototypeOf_default()(SVGItemRender.prototype), "toDefaultCSS", this).call(this, item)), this.toKeyListCSS(item, ['stroke-width', 'stroke-linecap', 'stroke-linejoin', 'stroke-dasharray', 'stroke-dashoffset', 'fill-opacity', 'fill-rule', 'text-anchor']));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toSVGAttribute",
    value: function toSVGAttribute(item) {
      return this.toDefaultCSS(item);
    }
  }]);

  return SVGItemRender;
}(LayerRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/SVGPathRender.js






function SVGPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGPathRender_SVGPathRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGPathRender, _SVGItemRender);

  var _super = SVGPathRender_createSuper(SVGPathRender);

  function SVGPathRender() {
    classCallCheck_default()(this, SVGPathRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGPathRender, [{
    key: "update",
    value:
    /**
     * @param {Item} item
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      if (!currentElement) return;
      var $path = currentElement.$('path');

      if ($path) {
        $path.setAttrNS({
          'd': item.d,
          'fill-rule': item['fill-rule'] || 'nonezero',
          'filter': this.toFilterValue(item),
          'fill': this.toFillValue(item),
          'stroke': this.toStrokeValue(item)
        });
        item.totalLength = $path.totalLength;
      }

      this.updateDefString(item, currentElement);
    }
  }, {
    key: "render",
    value: function render(item) {
      return (
        /*html*/
        "\n        <svg \n          class='element-item path'  \n          xmlns=\"http://www.w3.org/2000/svg\"\n          data-id=\"".concat(item.id, "\"\n        >\n            ").concat(this.toDefString(item), "\n            <path \n              class=\"svg-path-item\"\n              d=\"").concat(item.d, "\"\n              fill-rule=\"").concat(item['fill-rule'], "\"\n              filter=\"").concat(this.toFilterValue(item), "\"\n              fill=\"").concat(this.toFillValue(item), "\"\n              stroke=\"").concat(this.toStrokeValue(item), "\"\n            />\n        </svg>\n    ")
      );
    }
  }]);

  return SVGPathRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/SVGTextPathRender.js






function SVGTextPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGTextPathRender_SVGTextPathRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextPathRender, _SVGItemRender);

  var _super = SVGTextPathRender_createSuper(SVGTextPathRender);

  function SVGTextPathRender() {
    classCallCheck_default()(this, SVGTextPathRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextPathRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var $path = currentElement.$('path.svg-path-item');

      if ($path) {
        $path.attr('d', item.d);
      }

      var $guidePath = currentElement.$('path.guide');

      if ($guidePath) {
        $guidePath.attr('d', item.d);
      }

      var $textPath = currentElement.$('textPath');

      if ($textPath) {
        $textPath.text(item.text);
        $textPath.setAttrNS({
          filter: this.toFilterValue(item),
          fill: this.toFillValue(item),
          stroke: this.toStrokeValue(item),
          textLength: item.textLength,
          lengthAdjust: item.lengthAdjust,
          startOffset: item.startOffset
        });
      }

      this.updateDefString(item, currentElement);
      item.totalLength = $path.totalLength;
    }
  }, {
    key: "toDefInnerString",
    value: function toDefInnerString(item) {
      return (
        /*html*/
        "\n        ".concat(this.toPathSVG(item), "\n        ").concat(this.toFillSVG(item), "\n        ").concat(this.toStrokeSVG(item), "\n    ")
      );
    }
  }, {
    key: "toPathId",
    value: function toPathId(item) {
      return this.getInnerId(item, 'path');
    }
  }, {
    key: "toPathSVG",
    value: function toPathSVG(item) {
      return (
        /*html*/
        "\n    <path class=\"svg-path-item\" id=\"".concat(this.toPathId(item), "\" d=\"").concat(item.d, "\" fill=\"none\" />\n    ")
      );
    }
  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          textLength = item.textLength,
          lengthAdjust = item.lengthAdjust,
          startOffset = item.startOffset;
      var pathId = "#".concat(this.toPathId(item));
      return (
        /*html*/
        "\n      <svg class='element-item textpath' data-id=\"".concat(id, "\">\n        ").concat(this.toDefString(item), "\n        <text class=\"svg-textpath-item\">\n          <textPath \n            xlink:href=\"").concat(pathId, "\"\n            textLength=\"").concat(textLength, "\"\n            lengthAdjust=\"").concat(lengthAdjust, "\"\n            startOffset=\"").concat(startOffset, "\"\n          >").concat(item.text, "</textPath>\n          <use href=\"").concat(pathId, "\" stroke-width=\"1\" stroke=\"black\" />\n        </text>\n        <path class=\"guide\" d=\"").concat(item.d, "\" fill=\"none\"/>\n      </svg>\n    ")
      );
    }
  }]);

  return SVGTextPathRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/SVGTextRender.js






function SVGTextRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGTextRender_SVGTextRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextRender, _SVGItemRender);

  var _super = SVGTextRender_createSuper(SVGTextRender);

  function SVGTextRender() {
    classCallCheck_default()(this, SVGTextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var $text = currentElement.$('text');

      if ($text) {
        $text.text(item.text);
        $text.setAttrNS({
          filter: this.toFilterValue(item),
          fill: this.toFillValue(item),
          stroke: this.toStrokeValue(item),
          textLength: item.textLength,
          lengthAdjust: item.lengthAdjust
        });
      }

      this.updateDefString(item, currentElement);
    }
  }, {
    key: "shapeInsideId",
    value: function shapeInsideId(item) {
      return this.getInnerId(item, 'shape-inside');
    }
  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          textLength = item.textLength,
          lengthAdjust = item.lengthAdjust;
      return (
        /*html*/
        "\n  <svg class='element-item textpath' data-id=\"".concat(id, "\">\n    ").concat(this.toDefString(item), "\n      <text class=\"svg-text-item\" textLength=\"").concat(textLength, "\" lengthAdjust=\"").concat(lengthAdjust, "\">").concat(item.text, "</text>\n  </svg>")
      );
    }
  }]);

  return SVGTextRender;
}(SVGItemRender_SVGItemRender);


// EXTERNAL MODULE: ./src/el/editor/renderer/template-engine/TemplateEngine.js + 1 modules
var TemplateEngine = __webpack_require__(103);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/TemplateRender.js







function TemplateRender_createSuper(Derived) { var hasNativeReflectConstruct = TemplateRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TemplateRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TemplateRender_TemplateRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(TemplateRender, _LayerRender);

  var _super = TemplateRender_createSuper(TemplateRender);

  function TemplateRender() {
    classCallCheck_default()(this, TemplateRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TemplateRender, [{
    key: "update",
    value: function update(item, currentElement) {
      if (item.hasChangedField('x', 'y', 'width', 'height') === false) {
        var compiledTemplate = this.compile(item);
        var $innerHTML = currentElement.$(".inner-html"); // TODO: template, engine, params 가 변경 된 시점에  변경 상태를 기록한다. 
        // TODO: 그렇게 해서 변경이 없는 부분은 최대한 다시 그리지 않도록 한다. 

        if ($innerHTML) {
          $innerHTML.updateDiff(compiledTemplate);
        }
      }

      get_default()(getPrototypeOf_default()(TemplateRender.prototype), "update", this).call(this, item, currentElement);
    }
  }, {
    key: "compile",
    value: function compile(item) {
      return TemplateEngine["a" /* TemplateEngine */].compile('dom', item.template, item.params);
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id; // 마지막으로 렌더링된 template 을 저장해둔다. 
      // 이후 업데이트 될 때  변경시점을 확인 할 수 있다. 

      var compiledTemplate = this.compile(item);
      return (
        /*html*/
        "\n      <div class='element-item template' data-id=\"".concat(id, "\">\n        ").concat(this.toDefString(item), "\n        <style id=\"style-").concat(id, "\">\n          [data-id=\"").concat(id, "\"] .inner-html {\n            width: 100%; \n            height: 100%;\n            position:relative;\n            display:block;\n            pointer-events: none; \n          }\n\n          [data-id=\"").concat(id, "\"] .inner-html > * {\n            width: 100%; \n            height: 100%;\n          }          \n        </style>\n        <div class=\"inner-html\">\n          ").concat(compiledTemplate, "\n        </div>\n      </div>")
      );
    }
  }]);

  return TemplateRender;
}(LayerRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/TextRender.js







function TextRender_createSuper(Derived) { var hasNativeReflectConstruct = TextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TextRender_TextRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(TextRender, _LayerRender);

  var _super = TextRender_createSuper(TextRender);

  function TextRender() {
    classCallCheck_default()(this, TextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextRender, [{
    key: "toCSS",
    value:
    /**
     * 
     * @param {Item} item 
     */
    function toCSS(item) {
      var css = get_default()(getPrototypeOf_default()(TextRender.prototype), "toCSS", this).call(this, item);

      css.margin = css.margin || '0px';
      return css;
    }
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      var $textElement = currentElement.$(".text-content");

      if ($textElement) {
        var content = item.content;
        $textElement.updateDiff(content);
      }

      get_default()(getPrototypeOf_default()(TextRender.prototype), "update", this).call(this, item, currentElement);
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          content = item.content;
      return (
        /*html*/
        "\n            <div class='element-item text' data-id=\"".concat(id, "\">\n                ").concat(this.toDefString(item), "\n                <div class=\"text-content\" tabIndex=\"-1\" data-id=\"").concat(id, "\">").concat(content, "</div>\n            </div>\n        ")
      );
    }
  }]);

  return TextRender;
}(LayerRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/VideoRender.js







function VideoRender_createSuper(Derived) { var hasNativeReflectConstruct = VideoRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var VideoRender_VideoRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(VideoRender, _LayerRender);

  var _super = VideoRender_createSuper(VideoRender);

  function VideoRender() {
    classCallCheck_default()(this, VideoRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoRender, [{
    key: "toNestedCSS",
    value:
    /**
     * 
     * @param {Item} item 
     */
    function toNestedCSS(item) {
      return [{
        selector: 'video',
        cssText: "\n                width: 100%;\n                height: 100%;\n                pointer-events: none;\n                ".trim()
      }];
    }
    /**
     * 
     * Resource URL 얻어오기
     * 
     * @param {Project} item 
     */

  }, {
    key: "getUrl",
    value: function getUrl(item) {
      var src = item.src;
      var project = item.project;
      return project.getVideoValueById(src);
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          controls = item.controls,
          muted = item.muted,
          poster = item.poster,
          loop = item.loop,
          crossorigin = item.crossorigin,
          autoplay = item.autoplay;
      return (
        /*html*/
        "\n        <div class='element-item video' data-id=\"".concat(id, "\">\n            ").concat(this.toDefString(item), "\n            <video \n                controls=\"").concat(controls, "\"\n                src=\"").concat(this.getUrl(item), "\n                muted=\"").concat(muted, "\"\n                poster=\"").concat(poster, "\"\n                loop=\"").concat(loop, "\"\n                crossorigin=\"").concat(crossorigin, "\"\n                autoplay=\"").concat(autoplay, "\"\n            >\n                Sorry, your browser doesn't support embedded videos.\n            </video>\n        </div>")
      );
    }
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      var currentTime = item.currentTime,
          playbackRate = item.playbackRate,
          volume = item.volume; // select 하는 부분을 완전히 뺄 수 있을까? 

      var $video = currentElement.$('video');

      if ($video) {
        $video.setProp({
          currentTime: currentTime,
          playbackRate: playbackRate,
          volume: volume
        });
      }

      get_default()(getPrototypeOf_default()(VideoRender.prototype), "update", this).call(this, item, currentElement);
    }
  }]);

  return VideoRender;
}(LayerRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/index.js





 // import ChartRender from './ChartRender';














function filterKeyName(str) {
  var prefixPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return str.split(';').filter(function (it) {
    return it.trim();
  }).map(function (it) {
    it = it.trim();

    var _it$split = it.split(':'),
        _it$split2 = slicedToArray_default()(_it$split, 2),
        key = _it$split2[0],
        value = _it$split2[1];

    return "".concat(prefixPadding, "<strong>").concat(key, "</strong>:").concat(value, ";\n");
  }).join('').trim();
}

function modifyNewLine(str) {
  return str.replace(/;/gi, ";\n").trim();
}

var renderers = {
  'project': new ProjectRender_ProjectRender(),
  'artboard': new ArtBoardRender_ArtBoardRender(),
  'rect': new RectRender_RectRender(),
  'circle': new CircleRender_CircleRender(),
  'image': new ImageRender_ImageRender(),
  'text': new TextRender_TextRender(),
  'video': new VideoRender_VideoRender(),
  'svg-path': new SVGPathRender_SVGPathRender(),
  'svg-text': new SVGTextRender_SVGTextRender(),
  'svg-textpath': new SVGTextPathRender_SVGTextPathRender(),
  'cube': new CubeRender_CubeRender(),
  'iframe': new IFrameRender_IFrameRender(),
  'template': new TemplateRender_TemplateRender() // 'chart': new ChartRender()

};
/* harmony default export */ var HTMLRenderer = __webpack_exports__["a"] = ({
  getDefaultRendererInstance: function getDefaultRendererInstance() {
    return renderers['rect'];
  },
  getRendererInstance: function getRendererInstance(item) {
    return renderers[item.itemType] || RendererManager["a" /* RendererManager */].getRendererInstance('html', item.itemType) || this.getDefaultRendererInstance() || item;
  },

  /**
   * 
   * @param {Item} item 
   */
  render: function render(item, renderer) {
    if (!item) return;
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.render(item, renderer || this);
    }
  },
  renderSVG: function renderSVG(item, renderer) {
    var currentRenderer = this.getRendererInstance(item);

    if (Object(func["isFunction"])(currentRenderer.renderSVG)) {
      return currentRenderer.renderSVG(item, renderer || this);
    }

    return this.getDefaultRendererInstance().renderSVG(item, renderer || this);
  },
  to: function to(type, item) {
    var currentRenderer = this.getRendererInstance(item);

    if (Object(func["isFunction"])(currentRenderer[type])) {
      return currentRenderer[type].call(currentRenderer, item);
    }

    var defaultInstance = this.getDefaultRendererInstance();

    if (Object(func["isFunction"])(defaultInstance[type])) {
      return defaultInstance[type].call(defaultInstance, item);
    }
  },

  /**
   * 
   * @param {Item} item 
   */
  toCSS: function toCSS(item) {
    return this.to('toCSS', item);
  },

  /**
   * 
   * @param {Item} item 
   */
  toNestedCSS: function toNestedCSS(item) {
    return this.to('toNestedCSS', item);
  },

  /**
   * 
   * @param {Item} item 
   */
  toTransformCSS: function toTransformCSS(item) {
    return this.to('toTransformCSS', item);
  },
  toGridLayoutCSS: function toGridLayoutCSS(item) {
    return this.to('toGridLayoutCSS', item);
  },
  toLayoutItemCSS: function toLayoutItemCSS(item) {
    return this.to('toLayoutItemCSS', item);
  },

  /**
   * 
   * 렌더링 될 style 태그를 리턴한다. 
   * 
   * @param {Item} item 
   */
  toStyle: function toStyle(item, renderer) {
    var currentRenderer = this.getRendererInstance(item);

    if (Object(func["isFunction"])(currentRenderer.toStyle)) {
      return currentRenderer.toStyle(item, renderer || this);
    }

    return this.getDefaultRendererInstance().toStyle(item, renderer || this);
  },

  /**
   * 
   * @param {Item} item 
   * @param {Dom} currentElement
   */
  update: function update(item, currentElement, editor) {
    var currentRenderer = this.getRendererInstance(item);

    if (Object(func["isFunction"])(currentRenderer.update)) {
      return currentRenderer.update(item, currentElement, editor);
    }

    return this.getDefaultRendererInstance().update(item, currentElement, editor);
  },

  /**
   * 코드 뷰용 HTML 코드를 렌더링 한다. 
   * @param {Item} item 
   */
  codeview: function codeview(item) {
    if (!item) {
      return '';
    }

    var currentProject = item.top;
    var keyframeCode = modifyNewLine(filterKeyName(currentProject ? currentProject.toKeyframeString() : ''));
    var rootVariable = currentProject ? Object(func["CSS_TO_STRING"])(currentProject.toRootVariableCSS()) : '';
    var svgCode = this.renderSVG(currentProject);
    svgCode = svgCode.replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
    var current = item;
    var cssCode = filterKeyName(current ? Object(func["TAG_TO_STRING"])(Object(func["CSS_TO_STRING"])(this.toCSS(current))) : '');
    var nestedCssCode = current ? this.toNestedCSS(current).map(function (it) {
      var cssText = it.cssText ? it.cssText : Object(func["CSS_TO_STRING"])(it.css);
      return "".concat(it.selector, " { \n    ").concat(filterKeyName(Object(func["TAG_TO_STRING"])(cssText), '&nbsp;&nbsp;'), "\n    }");
    }) : [];
    var selectorCode = current ? current.selectors : [];
    return (
      /*html*/
      "\n          <div class=''>\n           \n            ".concat(cssCode &&
      /*html*/
      "<div><pre title='CSS'>".concat(cssCode, "</pre></div>"), "\n            \n            ").concat(nestedCssCode.map(function (it) {
        return (
          /*html*/
          "<div><pre title='CSS'>".concat(it, "</pre></div>")
        );
      }).join(''), "\n    \n            ").concat((selectorCode || []).length ?
      /*html*/
      "<div>\n                ".concat(selectorCode.map(function (selector) {
        return "<pre title='".concat(selector.selector, "'>").concat(selector.toPropertyString(), "</pre>");
      }).join(''), "\n                \n              </div>") : '', "\n    \n            ").concat(keyframeCode &&
      /*html*/
      "<div><pre title='Keyframe'>".concat(keyframeCode, "</pre></div>"), "\n\n            ").concat(rootVariable ?
      /*html*/
      "<div>\n              <label>:root</label>\n              <pre>".concat(rootVariable, "</pre>\n              </div>") : '', "\n    \n          </div>\n        ")
    );
  }
});

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoHSV", function() { return RGBtoHSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoCMYK", function() { return RGBtoCMYK; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoHSL", function() { return RGBtoHSL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return c; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gray", function() { return gray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoSimpleGray", function() { return RGBtoSimpleGray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoGray", function() { return RGBtoGray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "brightness", function() { return brightness; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoYCrCb", function() { return RGBtoYCrCb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PivotRGB", function() { return PivotRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoXYZ", function() { return RGBtoXYZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RGBtoLAB", function() { return RGBtoLAB; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/* harmony import */ var _fromLAB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(97);


/**
 * @method RGBtoHSV
 *
 * convert rgb to hsv
 *
 * 		color.RGBtoHSV(0, 0, 255) === { h : 240, s : 1, v : 1 } === '#FFFF00'
 *
 * @param {Number} R  red color value
 * @param {Number} G  green color value
 * @param {Number} B  blue color value
 * @return {Object}  hsv color code
 */

function RGBtoHSV(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        r = _arguments$.r,
        g = _arguments$.g,
        b = _arguments$.b;
  }

  var R1 = r / 255;
  var G1 = g / 255;
  var B1 = b / 255;
  var MaxC = Math.max(R1, G1, B1);
  var MinC = Math.min(R1, G1, B1);
  var DeltaC = MaxC - MinC;
  var H = 0;

  if (DeltaC == 0) {
    H = 0;
  } else if (MaxC == R1) {
    H = 60 * ((G1 - B1) / DeltaC % 6);
  } else if (MaxC == G1) {
    H = 60 * ((B1 - R1) / DeltaC + 2);
  } else if (MaxC == B1) {
    H = 60 * ((R1 - G1) / DeltaC + 4);
  }

  if (H < 0) {
    H = 360 + H;
  }

  var S = 0;
  if (MaxC == 0) S = 0;else S = DeltaC / MaxC;
  var V = MaxC;
  return {
    h: H,
    s: S,
    v: V
  };
}
function RGBtoCMYK(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$2 = arguments[0],
        r = _arguments$2.r,
        g = _arguments$2.g,
        b = _arguments$2.b;
  }

  var R1 = r / 255;
  var G1 = g / 255;
  var B1 = b / 255;
  var K = 1 - Math.max(R1, G1, B1);
  var C = (1 - R1 - K) / (1 - K);
  var M = (1 - G1 - K) / (1 - K);
  var Y = (1 - B1 - K) / (1 - K);
  return {
    c: C,
    m: M,
    y: Y,
    k: K
  };
}
function RGBtoHSL(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$3 = arguments[0],
        r = _arguments$3.r,
        g = _arguments$3.g,
        b = _arguments$3.b;
  }

  r /= 255, g /= 255, b /= 255;
  var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
  var h,
      s,
      l = (max + min) / 2;

  if (max == min) {
    h = s = 0; // achromatic
  } else {
    var d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

    switch (max) {
      case r:
        h = (g - b) / d + (g < b ? 6 : 0);
        break;

      case g:
        h = (b - r) / d + 2;
        break;

      case b:
        h = (r - g) / d + 4;
        break;
    }

    h /= 6;
  }

  return {
    h: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(h * 360),
    s: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(s * 100),
    l: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(l * 100)
  };
}
function c(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$4 = arguments[0],
        r = _arguments$4.r,
        g = _arguments$4.g,
        b = _arguments$4.b;
  }

  return gray((r + g + b) / 3 > 90 ? 0 : 255);
}
function gray(gray) {
  return {
    r: gray,
    g: gray,
    b: gray
  };
}
function RGBtoSimpleGray(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$5 = arguments[0],
        r = _arguments$5.r,
        g = _arguments$5.g,
        b = _arguments$5.b;
  }

  return gray(Math.ceil((r + g + b) / 3));
}
function RGBtoGray(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$6 = arguments[0],
        r = _arguments$6.r,
        g = _arguments$6.g,
        b = _arguments$6.b;
  }

  return gray(RGBtoYCrCb(r, g, b).y);
}
function brightness(r, g, b) {
  return Math.ceil(r * 0.2126 + g * 0.7152 + b * 0.0722);
}
function RGBtoYCrCb(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$7 = arguments[0],
        r = _arguments$7.r,
        g = _arguments$7.g,
        b = _arguments$7.b;
  }

  var Y = brightness(r, g, b);
  var Cb = 0.564 * (b - Y);
  var Cr = 0.713 * (r - Y);
  return {
    y: Y,
    cr: Cr,
    cb: Cb
  };
}
function PivotRGB(n) {
  return (n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92) * 100;
}
function RGBtoXYZ(r, g, b) {
  //sR, sG and sB (Standard RGB) input range = 0 ÷ 255
  //X, Y and Z output refer to a D65/2° standard illuminant.
  if (arguments.length == 1) {
    var _arguments$8 = arguments[0],
        r = _arguments$8.r,
        g = _arguments$8.g,
        b = _arguments$8.b;
  }

  var R = r / 255;
  var G = g / 255;
  var B = b / 255;
  R = PivotRGB(R);
  G = PivotRGB(G);
  B = PivotRGB(B);
  var x = R * 0.4124 + G * 0.3576 + B * 0.1805;
  var y = R * 0.2126 + G * 0.7152 + B * 0.0722;
  var z = R * 0.0193 + G * 0.1192 + B * 0.9505;
  return {
    x: x,
    y: y,
    z: z
  };
}
function RGBtoLAB(r, g, b) {
  if (arguments.length == 1) {
    var _arguments$9 = arguments[0],
        r = _arguments$9.r,
        g = _arguments$9.g,
        b = _arguments$9.b;
  }

  return Object(_fromLAB__WEBPACK_IMPORTED_MODULE_1__["XYZtoLAB"])(RGBtoXYZ(r, g, b));
}

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Pattern_Pattern; });

// UNUSED EXPORTS: BasePattern, CheckPattern, GridPattern, DotPattern, CrossDotPattern, DiagonalLinePattern, VerticalLinePattern, HorizontalLinePattern, PatternClassList, PatternClassName, PatternClass

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// EXTERNAL MODULE: ./src/el/base/functions/parser.js + 1 modules
var parser = __webpack_require__(21);

// EXTERNAL MODULE: ./src/el/editor/property-parser/BackgroundImage.js + 1 modules
var BackgroundImage = __webpack_require__(36);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/property-parser/PatternCache.js


var MAX_CACHE_COUNT = 1000;
var cachedPatternMap = new Map();
var PatternCache_PatternCache = /*#__PURE__*/function () {
  function PatternCache() {
    classCallCheck_default()(this, PatternCache);
  }

  createClass_default()(PatternCache, null, [{
    key: "has",
    value: function has(key) {
      return cachedPatternMap.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return cachedPatternMap.get(key);
    }
  }, {
    key: "set",
    value: function set(key, parsedValue) {
      if (cachedPatternMap.size > MAX_CACHE_COUNT) {
        cachedPatternMap.clear();
      }

      cachedPatternMap.set(key, parsedValue);
    }
  }]);

  return PatternCache;
}();
// CONCATENATED MODULE: ./src/el/editor/property-parser/Pattern.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PATTERN_REG = /((check|grid|dot|cross\-dot|diagonal\-line|vertical\-line|horizontal\-line|)\(([^\)]*)\))/gi;
var Pattern_Pattern = /*#__PURE__*/function (_Property) {
  inherits_default()(Pattern, _Property);

  var _super = _createSuper(Pattern);

  function Pattern() {
    classCallCheck_default()(this, Pattern);

    return _super.apply(this, arguments);
  }

  createClass_default()(Pattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(Pattern.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "pattern"
      }, obj));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.json.type, "(").concat(this.json.value || "", ")");
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      var PatternClass = PatternClassName[obj.type];

      if (PatternClass) {
        return new PatternClass(obj);
      }
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(pattern) {
      var patterns = [];
      if (!pattern) return patterns;

      if (PatternCache_PatternCache.has(pattern)) {
        return PatternCache_PatternCache.get(pattern);
      }

      var results = Object(parser["convertMatches"])(pattern);
      var matches = results.str.match(PATTERN_REG) || [];
      matches.forEach(function (value, index) {
        var _value$split = value.split("("),
            _value$split2 = slicedToArray_default()(_value$split, 2),
            patternName = _value$split2[0],
            patternValue = _value$split2[1];

        patternValue = patternValue.split(")")[0];

        var _patternValue$split$m = patternValue.split(",").map(function (it) {
          return it.trim();
        }),
            _patternValue$split$m2 = slicedToArray_default()(_patternValue$split$m, 6),
            size = _patternValue$split$m2[0],
            position = _patternValue$split$m2[1],
            foreColor = _patternValue$split$m2[2],
            backColor = _patternValue$split$m2[3],
            blendMode = _patternValue$split$m2[4],
            lineSize = _patternValue$split$m2[5];

        var _size$split = size.split(' '),
            _size$split2 = slicedToArray_default()(_size$split, 2),
            width = _size$split2[0],
            height = _size$split2[1];

        var _position$split = position.split(' '),
            _position$split2 = slicedToArray_default()(_position$split, 2),
            x = _position$split2[0],
            y = _position$split2[1];

        var _split = (lineSize || '').split(' '),
            _split2 = slicedToArray_default()(_split, 2),
            lineWidth = _split2[0],
            lineHeight = _split2[1];

        patterns[index] = Pattern.parse({
          type: patternName,
          x: Length["a" /* Length */].parse(x),
          y: Length["a" /* Length */].parse(y),
          width: Length["a" /* Length */].parse(width),
          height: Length["a" /* Length */].parse(height),
          foreColor: Object(parser["reverseMatches"])(foreColor, results.matches),
          backColor: Object(parser["reverseMatches"])(backColor, results.matches),
          blendMode: blendMode || 'normal',
          lineWidth: Length["a" /* Length */].parse(lineWidth || '1px'),
          lineHeight: Length["a" /* Length */].parse(lineHeight || '1px')
        });
      });
      PatternCache_PatternCache.set(pattern, patterns);
      return patterns;
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return Pattern.parse(it);
      }).join(' ');
    }
  }, {
    key: "toCSS",
    value: function toCSS(str) {
      var list = [];
      Pattern.parseStyle(str).forEach(function (it) {
        list.push.apply(list, BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(func["STRING_TO_CSS"])(it.toCSS())));
      });
      return BackgroundImage["a" /* BackgroundImage */].joinCSS(list);
    }
  }]);

  return Pattern;
}(Property["a" /* Property */]);
var Pattern_BasePattern = /*#__PURE__*/function (_Pattern) {
  inherits_default()(BasePattern, _Pattern);

  var _super2 = _createSuper(BasePattern);

  function BasePattern() {
    classCallCheck_default()(this, BasePattern);

    return _super2.apply(this, arguments);
  }

  createClass_default()(BasePattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(BasePattern.prototype), "getDefaultObject", this).call(this, {
        type: "base",
        x: Length["a" /* Length */].z(),
        y: Length["a" /* Length */].z(),
        width: Length["a" /* Length */].px(20),
        height: Length["a" /* Length */].px(20),
        lineWidth: Length["a" /* Length */].px(1),
        lineHeight: Length["a" /* Length */].px(1),
        foreColor: 'black',
        backColor: 'white',
        blendMode: 'normal'
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(BasePattern.prototype), "convert", this).call(this, json);
      json.width = Length["a" /* Length */].parse(json.width);
      json.height = Length["a" /* Length */].parse(json.height);
      json.lineWidth = Length["a" /* Length */].parse(json.lineWidth);
      json.lineHeight = Length["a" /* Length */].parse(json.lineHeight);
      json.x = Length["a" /* Length */].parse(json.x);
      json.y = Length["a" /* Length */].parse(json.y);
      return json;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          type = _this$json.type,
          width = _this$json.width,
          height = _this$json.height,
          x = _this$json.x,
          y = _this$json.y,
          foreColor = _this$json.foreColor,
          backColor = _this$json.backColor,
          blendMode = _this$json.blendMode,
          lineWidth = _this$json.lineWidth,
          lineHeight = _this$json.lineHeight;
      return "".concat(type, "(").concat(width, " ").concat(height, ", ").concat(x, " ").concat(y, ", ").concat(foreColor, ", ").concat(backColor, ", ").concat(blendMode, ", ").concat(lineWidth, " ").concat(lineHeight, ")");
    }
  }]);

  return BasePattern;
}(Pattern_Pattern);
var Pattern_CheckPattern = /*#__PURE__*/function (_BasePattern) {
  inherits_default()(CheckPattern, _BasePattern);

  var _super3 = _createSuper(CheckPattern);

  function CheckPattern() {
    classCallCheck_default()(this, CheckPattern);

    return _super3.apply(this, arguments);
  }

  createClass_default()(CheckPattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(CheckPattern.prototype), "getDefaultObject", this).call(this, {
        type: 'check'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json2 = this.json,
          width = _this$json2.width,
          height = _this$json2.height,
          x = _this$json2.x,
          y = _this$json2.y,
          backColor = _this$json2.backColor,
          foreColor = _this$json2.foreColor,
          blendMode = _this$json2.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: repeating-linear-gradient(45deg, ".concat(foreColor, " 25%, ").concat(backColor, " 25%, ").concat(backColor, " 75%, ").concat(foreColor, " 75%, ").concat(foreColor, " 100%),repeating-linear-gradient(45deg, ").concat(foreColor, " 25%, ").concat(backColor, " 25%, ").concat(backColor, " 75%, ").concat(foreColor, " 75%, ").concat(foreColor, " 100%);\n      background-position: 0px 0px, ").concat(x, " ").concat(y, ";\n      background-size: ").concat(width, " ").concat(height, ", ").concat(width, " ").concat(height, ";\n      background-blend-mode: ").concat(blendMode, ", ").concat(blendMode, ";\n    ");
    }
  }]);

  return CheckPattern;
}(Pattern_BasePattern);
var Pattern_GridPattern = /*#__PURE__*/function (_BasePattern2) {
  inherits_default()(GridPattern, _BasePattern2);

  var _super4 = _createSuper(GridPattern);

  function GridPattern() {
    classCallCheck_default()(this, GridPattern);

    return _super4.apply(this, arguments);
  }

  createClass_default()(GridPattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(GridPattern.prototype), "getDefaultObject", this).call(this, {
        type: 'grid'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json3 = this.json,
          width = _this$json3.width,
          height = _this$json3.height,
          lineWidth = _this$json3.lineWidth,
          lineHeight = _this$json3.lineHeight,
          backColor = _this$json3.backColor,
          foreColor = _this$json3.foreColor,
          blendMode = _this$json3.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: linear-gradient(".concat(foreColor, " ").concat(lineHeight, ", ").concat(backColor, " ").concat(lineHeight, "),linear-gradient(to right, ").concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, ");\n      background-size: ").concat(width.value / 2, "px ").concat(height.value / 2, "px, ").concat(width.value / 2, "px ").concat(height.value / 2, "px;      \n      background-blend-mode: ").concat(blendMode, ", ").concat(blendMode, ";      \n    ");
    }
  }]);

  return GridPattern;
}(Pattern_BasePattern);
var Pattern_DotPattern = /*#__PURE__*/function (_BasePattern3) {
  inherits_default()(DotPattern, _BasePattern3);

  var _super5 = _createSuper(DotPattern);

  function DotPattern() {
    classCallCheck_default()(this, DotPattern);

    return _super5.apply(this, arguments);
  }

  createClass_default()(DotPattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DotPattern.prototype), "getDefaultObject", this).call(this, {
        type: 'dot'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json4 = this.json,
          width = _this$json4.width,
          height = _this$json4.height,
          lineWidth = _this$json4.lineWidth,
          lineHeight = _this$json4.lineHeight,
          backColor = _this$json4.backColor,
          foreColor = _this$json4.foreColor,
          blendMode = _this$json4.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: radial-gradient(".concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, ");\n      background-size: ").concat(width.value / 2, "px ").concat(height.value / 2, "px;          \n      background-blend-mode: ").concat(blendMode, ";      \n    ");
    }
  }]);

  return DotPattern;
}(Pattern_BasePattern);
var Pattern_CrossDotPattern = /*#__PURE__*/function (_BasePattern4) {
  inherits_default()(CrossDotPattern, _BasePattern4);

  var _super6 = _createSuper(CrossDotPattern);

  function CrossDotPattern() {
    classCallCheck_default()(this, CrossDotPattern);

    return _super6.apply(this, arguments);
  }

  createClass_default()(CrossDotPattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(CrossDotPattern.prototype), "getDefaultObject", this).call(this, {
        type: 'cross-dot'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json5 = this.json,
          width = _this$json5.width,
          height = _this$json5.height,
          x = _this$json5.x,
          y = _this$json5.y,
          lineWidth = _this$json5.lineWidth,
          lineHeight = _this$json5.lineHeight,
          backColor = _this$json5.backColor,
          foreColor = _this$json5.foreColor,
          blendMode = _this$json5.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: radial-gradient(".concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, "),radial-gradient(").concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, ");\n      background-size: ").concat(width, " ").concat(height, ",").concat(width, " ").concat(height, ";\n      background-position: 0px 0px, ").concat(x, " ").concat(y, ";      \n      background-blend-mode: multiply, ").concat(blendMode, ";\n    ");
    }
  }]);

  return CrossDotPattern;
}(Pattern_BasePattern);
var Pattern_DiagonalLinePattern = /*#__PURE__*/function (_BasePattern5) {
  inherits_default()(DiagonalLinePattern, _BasePattern5);

  var _super7 = _createSuper(DiagonalLinePattern);

  function DiagonalLinePattern() {
    classCallCheck_default()(this, DiagonalLinePattern);

    return _super7.apply(this, arguments);
  }

  createClass_default()(DiagonalLinePattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DiagonalLinePattern.prototype), "getDefaultObject", this).call(this, {
        type: 'diagonal-line'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json6 = this.json,
          width = _this$json6.width,
          height = _this$json6.height,
          x = _this$json6.x,
          lineWidth = _this$json6.lineWidth,
          backColor = _this$json6.backColor,
          foreColor = _this$json6.foreColor,
          blendMode = _this$json6.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: repeating-linear-gradient(".concat(x, ", ").concat(foreColor, " 0, ").concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " 0, ").concat(backColor, " 50%);\n      background-size: ").concat(width, " ").concat(height, ";      \n      background-blend-mode: ").concat(blendMode, ";\n    ");
    }
  }]);

  return DiagonalLinePattern;
}(Pattern_BasePattern);
var Pattern_VerticalLinePattern = /*#__PURE__*/function (_BasePattern6) {
  inherits_default()(VerticalLinePattern, _BasePattern6);

  var _super8 = _createSuper(VerticalLinePattern);

  function VerticalLinePattern() {
    classCallCheck_default()(this, VerticalLinePattern);

    return _super8.apply(this, arguments);
  }

  createClass_default()(VerticalLinePattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(VerticalLinePattern.prototype), "getDefaultObject", this).call(this, {
        type: 'vertical-line'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json7 = this.json,
          width = _this$json7.width,
          height = _this$json7.height,
          x = _this$json7.x,
          y = _this$json7.y,
          lineWidth = _this$json7.lineWidth,
          backColor = _this$json7.backColor,
          foreColor = _this$json7.foreColor,
          blendMode = _this$json7.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: repeating-linear-gradient(to right, ".concat(foreColor, " 0px, ").concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, ", ").concat(backColor, " 100%);\n      background-size: ").concat(width, " ").concat(height, "; \n      background-position: ").concat(x, " ").concat(y, ";        \n      background-blend-mode: ").concat(blendMode, ";\n    ");
    }
  }]);

  return VerticalLinePattern;
}(Pattern_BasePattern);
var Pattern_HorizontalLinePattern = /*#__PURE__*/function (_BasePattern7) {
  inherits_default()(HorizontalLinePattern, _BasePattern7);

  var _super9 = _createSuper(HorizontalLinePattern);

  function HorizontalLinePattern() {
    classCallCheck_default()(this, HorizontalLinePattern);

    return _super9.apply(this, arguments);
  }

  createClass_default()(HorizontalLinePattern, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(HorizontalLinePattern.prototype), "getDefaultObject", this).call(this, {
        type: 'horizontal-line'
      });
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var _this$json8 = this.json,
          width = _this$json8.width,
          height = _this$json8.height,
          x = _this$json8.x,
          y = _this$json8.y,
          lineWidth = _this$json8.lineWidth,
          backColor = _this$json8.backColor,
          foreColor = _this$json8.foreColor,
          blendMode = _this$json8.blendMode;
      backColor = backColor || 'transparent';
      foreColor = foreColor || 'black';
      return "\n      background-image: repeating-linear-gradient(0deg, ".concat(foreColor, " 0px, ").concat(foreColor, " ").concat(lineWidth, ", ").concat(backColor, " ").concat(lineWidth, ", ").concat(backColor, " 100%);    \n      background-position: ").concat(x, " ").concat(y, ";\n      background-size: ").concat(width, " ").concat(height, ";   \n      background-blend-mode: ").concat(blendMode, ";\n    ");
    }
  }]);

  return HorizontalLinePattern;
}(Pattern_BasePattern);
var PatternClassList = [Pattern_CheckPattern, Pattern_GridPattern, Pattern_DotPattern, Pattern_CrossDotPattern, Pattern_DiagonalLinePattern, Pattern_VerticalLinePattern, Pattern_HorizontalLinePattern];
var PatternClassName = {
  check: Pattern_CheckPattern,
  grid: Pattern_GridPattern,
  dot: Pattern_DotPattern,
  'cross-dot': Pattern_CrossDotPattern,
  'diagonal-line': Pattern_DiagonalLinePattern,
  'vertical-line': Pattern_VerticalLinePattern,
  'horizontal-line': Pattern_HorizontalLinePattern
};
var PatternClass = {
  CheckPattern: Pattern_CheckPattern,
  GridPattern: Pattern_GridPattern,
  DotPattern: Pattern_DotPattern,
  CrossDotPattern: Pattern_CrossDotPattern,
  DiagonalLinePattern: Pattern_DiagonalLinePattern,
  VerticalLinePattern: Pattern_VerticalLinePattern,
  HorizontalLinePattern: Pattern_HorizontalLinePattern
};

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Component; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Layer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(47);
/* harmony import */ var _manager_ComponentManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(33);
/* harmony import */ var _icon_icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11);









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




/**
 * Complex Component with children 
 */

var Component = /*#__PURE__*/function (_Layer) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Component, _Layer);

  var _super = _createSuper(Component);

  function Component() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Component);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Component, [{
    key: "is",
    value: function is() {
      var _get2;

      for (var _len = arguments.length, itemType = new Array(_len), _key = 0; _key < _len; _key++) {
        itemType[_key] = arguments[_key];
      }

      if (itemType.includes('component')) {
        return true;
      }

      return (_get2 = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Component.prototype), "is", this)).call.apply(_get2, [this].concat(itemType));
    }
  }, {
    key: "getProps",
    value: function getProps() {
      return [];
    }
  }], [{
    key: "createComponent",
    value: function createComponent(_ref) {
      var iconString = _ref.iconString,
          _ref$title = _ref.title,
          title = _ref$title === void 0 ? 'Unknown Title' : _ref$title,
          _ref$attrs = _ref.attrs,
          attrs = _ref$attrs === void 0 ? {} : _ref$attrs,
          _ref$enableHasChildre = _ref.enableHasChildren,
          _enableHasChildren = _ref$enableHasChildre === void 0 ? false : _ref$enableHasChildre;

      return /*#__PURE__*/function (_Component) {
        _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(_class, _Component);

        var _super2 = _createSuper(_class);

        function _class() {
          _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, _class);

          return _super2.apply(this, arguments);
        }

        _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(_class, [{
          key: "getIcon",
          value: function getIcon() {
            return iconString || _icon_icon__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].add;
          }
        }, {
          key: "getDefaultObject",
          value: function getDefaultObject() {
            return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(_class.prototype), "getDefaultObject", this).call(this, _objectSpread({
              itemType: 'NewComponent',
              name: "New Component"
            }, attrs));
          }
        }, {
          key: "toCloneObject",
          value: function toCloneObject() {
            return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(_class.prototype), "toCloneObject", this).call(this)), this.attrs.apply(this, _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(Object.keys(attrs))));
          }
        }, {
          key: "enableHasChildren",
          value: function enableHasChildren() {
            return _enableHasChildren || false;
          }
        }, {
          key: "getDefaultTitle",
          value: function getDefaultTitle() {
            return title;
          }
        }]);

        return _class;
      }(Component);
    }
  }]);

  return Component;
}(_Layer__WEBPACK_IMPORTED_MODULE_8__[/* Layer */ "a"]);
_manager_ComponentManager__WEBPACK_IMPORTED_MODULE_9__[/* ComponentManager */ "a"].registerComponent('component', Component);

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return LinearGradient; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _Gradient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(41);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);
/* harmony import */ var _ColorStep__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(22);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var DEFINED_DIRECTIONS = {
  "0": "to top",
  "45": "to top right",
  "90": "to right",
  "135": "to bottom right",
  "180": "to bottom",
  "225": "to bottom left",
  "270": "to left",
  "315": "to top left"
};
var DEFINED_ANGLES = {
  "to top": "0",
  "to top right": "45",
  "to right": "90",
  "to bottom right": "135",
  "to bottom": "180",
  "to bottom left": "225",
  "to left": "270",
  "to top left": "315"
};
var LinearGradient = /*#__PURE__*/function (_Gradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(LinearGradient, _Gradient);

  var _super = _createSuper(LinearGradient);

  function LinearGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, LinearGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(LinearGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject(obj) {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(LinearGradient.prototype), "getDefaultObject", this).call(this, _objectSpread({
        type: "linear-gradient",
        angle: 0
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(LinearGradient.prototype), "toCloneObject", this).call(this)), {}, {
        angle: this.json.angle
      });
    }
  }, {
    key: "isLinear",
    value: function isLinear() {
      return true;
    }
  }, {
    key: "hasAngle",
    value: function hasAngle() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.colorsteps.length === 0) return '';
      var colorString = this.getColorString();
      var opt = '';
      var angle = this.json.angle || 0;
      opt = angle;

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isNumber"])(opt)) {
        opt = DEFINED_DIRECTIONS["".concat(opt)] || opt;
      }

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isNumber"])(opt)) {
        opt = opt > 360 ? opt % 360 : opt;
        opt = "".concat(opt, "deg");
      }

      var result = "".concat(this.json.type, "(").concat(opt, ", ").concat(colorString, ")");
      return result;
    }
  }], [{
    key: "toLinearGradient",
    value: function toLinearGradient(colorsteps) {
      if (colorsteps.length === 0) {
        return "none";
      }

      var gradient = new LinearGradient({
        angle: "to right",
        colorsteps: colorsteps
      });
      return gradient + "";
    }
  }, {
    key: "parse",
    value: function parse(str) {
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["convertMatches"])(str);
      var angle = 0;
      var colorsteps = [];
      results.str.split("(")[1].split(")")[0].split(",").map(function (it) {
        return it.trim();
      }).forEach(function (newValue, index) {
        if (newValue.includes("@")) {
          newValue = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["reverseMatches"])(newValue, results.matches);
          colorsteps.push.apply(colorsteps, _ColorStep__WEBPACK_IMPORTED_MODULE_11__[/* ColorStep */ "a"].parse(newValue));
        } else {
          angle = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isUndefined"])(DEFINED_ANGLES[newValue]) ? el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(newValue) : el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].deg(+DEFINED_ANGLES[newValue]);
        }
      });
      return new LinearGradient({
        angle: angle.value,
        colorsteps: colorsteps
      });
    }
  }]);

  return LinearGradient;
}(_Gradient__WEBPACK_IMPORTED_MODULE_7__[/* Gradient */ "a"]);

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomNumber", function() { return randomNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomByCount", function() { return randomByCount; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "random", function() { return random; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "randomRGBA", function() { return randomRGBA; });
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(63);

function randomNumber(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
function randomByCount() {
  var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var arr = [];

  for (var i = 0; i < count; i++) {
    arr[arr.length] = random();
  }

  return arr;
}
function random() {
  return Object(_formatter__WEBPACK_IMPORTED_MODULE_0__["rgb"])({
    r: randomNumber(0, 255),
    g: randomNumber(0, 255),
    b: randomNumber(0, 255)
  });
}
function randomRGBA() {
  return Object(_formatter__WEBPACK_IMPORTED_MODULE_0__["rgb"])({
    r: randomNumber(0, 255),
    g: randomNumber(0, 255),
    b: randomNumber(0, 255),
    a: randomNumber(0, 1000) / 1000
  });
}

/***/ }),
/* 54 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RadialGradient; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Gradient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(41);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(21);
/* harmony import */ var _ColorStep__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22);









var _DEFINED_POSITIONS;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var DEFINED_POSITIONS = (_DEFINED_POSITIONS = {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "center", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "top", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "left", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "right", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "bottom", true), _DEFINED_POSITIONS);
var RadialGradient = /*#__PURE__*/function (_Gradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(RadialGradient, _Gradient);

  var _super = _createSuper(RadialGradient);

  function RadialGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, RadialGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(RadialGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(RadialGradient.prototype), "getDefaultObject", this).call(this, _objectSpread({
        type: "radial-gradient",
        radialType: "ellipse",
        radialPosition: [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Position */ "b"].CENTER, el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Position */ "b"].CENTER]
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(RadialGradient.prototype), "toCloneObject", this).call(this)), this.attrs('radialType', 'radialPosition'));
    }
  }, {
    key: "isRadial",
    value: function isRadial() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.colorsteps.length === 0) return '';
      var colorString = this.getColorString();
      var json = this.json;
      var opt = '';
      var radialType = json.radialType;
      var radialPosition = json.radialPosition || ["center", "center"];
      radialPosition = DEFINED_POSITIONS[radialPosition] ? radialPosition : radialPosition.join(' ');
      opt = radialPosition ? "".concat(radialType, " at ").concat(radialPosition) : radialType;
      return "".concat(json.type || "radial-gradient", "(").concat(opt, ", ").concat(colorString, ")");
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__["convertMatches"])(str);
      var radialType = "ellipse";
      var radialPosition = [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Position */ "b"].CENTER, el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Position */ "b"].CENTER];
      var colorsteps = [];
      results.str.split("(")[1].split(")")[0].split(",").map(function (it) {
        return it.trim();
      }).forEach(function (newValue, index) {
        if (newValue.includes("@")) {
          // color 복원
          newValue = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__["reverseMatches"])(newValue, results.matches);
          colorsteps.push.apply(colorsteps, _ColorStep__WEBPACK_IMPORTED_MODULE_12__[/* ColorStep */ "a"].parse(newValue));
        } else {
          // direction
          if (newValue.includes("at")) {
            var _newValue$split$map = newValue.split("at").map(function (it) {
              return it.trim();
            });

            var _newValue$split$map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_newValue$split$map, 2);

            radialType = _newValue$split$map2[0];
            radialPosition = _newValue$split$map2[1];
          } else {
            radialType = newValue;
          }

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["isString"])(radialPosition)) {
            var arr = radialPosition.split(' ');

            if (arr.length === 1) {
              var len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].parse(arr[0]);

              if (len.isString()) {
                radialPosition = [len.value, len.value];
              } else {
                radialPosition = [len.clone(), len.clone()];
              }
            } else if (arr.length === 2) {
              radialPosition = arr.map(function (it) {
                var len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].parse(it);
                return len.isString() ? len.value : len.clone();
              });
            }
          }
        }
      });
      return new RadialGradient({
        radialType: radialType,
        radialPosition: radialPosition,
        colorsteps: colorsteps
      });
    }
  }]);

  return RadialGradient;
}(_Gradient__WEBPACK_IMPORTED_MODULE_8__[/* Gradient */ "a"]);

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConicGradient; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Gradient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(41);
/* harmony import */ var _ColorStep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(22);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(21);









var _DEFINED_POSITIONS;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var DEFINED_POSITIONS = (_DEFINED_POSITIONS = {}, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "center", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "top", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "left", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "right", true), _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_7___default()(_DEFINED_POSITIONS, "bottom", true), _DEFINED_POSITIONS);
var DEFINED_ANGLES = {
  "to top": 0,
  "to top right": 45,
  "to right": 90,
  "to bottom right": 135,
  "to bottom": 180,
  "to bottom left": 225,
  "to left": 270,
  "to top left": 315
};
var ConicGradient = /*#__PURE__*/function (_Gradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(ConicGradient, _Gradient);

  var _super = _createSuper(ConicGradient);

  function ConicGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ConicGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ConicGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ConicGradient.prototype), "getDefaultObject", this).call(this, _objectSpread({
        type: "conic-gradient",
        angle: 0,
        radialPosition: [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Position */ "b"].CENTER, el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Position */ "b"].CENTER]
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ConicGradient.prototype), "toCloneObject", this).call(this)), {}, {
        angle: this.json.angle,
        radialPosition: Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__["clone"])(this.json.radialPosition)
      });
    }
  }, {
    key: "isConic",
    value: function isConic() {
      return true;
    }
  }, {
    key: "hasAngle",
    value: function hasAngle() {
      return true;
    }
  }, {
    key: "getColorString",
    value: function getColorString() {
      if (this.colorsteps.length === 0) return '';
      var colorsteps = this.colorsteps;
      if (!colorsteps) return '';
      colorsteps.sort(function (a, b) {
        if (a.percent == b.percent) return 0;
        return a.percent > b.percent ? 1 : -1;
      });
      var newColors = colorsteps.map(function (c, index) {
        c.prevColorStep = c.cut && index > 0 ? colorsteps[index - 1] : null;
        return c;
      });
      return newColors.map(function (f) {
        var deg = Math.floor(f.percent * 3.6);
        var prev = '';

        if (f.cut && f.prevColorStep) {
          var prevDeg = Math.floor(f.prevColorStep.percent * 3.6);
          prev = "".concat(prevDeg, "deg");
        }

        return "".concat(f.color, " ").concat(prev, " ").concat(deg, "deg");
      }).join(",");
    }
  }, {
    key: "toString",
    value: function toString() {
      var colorString = this.getColorString();
      var opt = [];
      var json = this.json;
      var conicAngle = json.angle;
      var conicPosition = json.radialPosition || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Position */ "b"].CENTER;
      conicPosition = DEFINED_POSITIONS[conicPosition] ? conicPosition : conicPosition.join(' ');

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__["isNotUndefined"])(conicAngle)) {
        conicAngle = +(DEFINED_ANGLES[conicAngle] || conicAngle);
        opt.push("from ".concat(conicAngle, "deg"));
      }

      if (conicPosition) {
        opt.push("at ".concat(conicPosition));
      }

      var optString = opt.length ? opt.join(' ') + "," : '';
      return "".concat(json.type, "(").concat(optString, " ").concat(colorString, ")");
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_12__["convertMatches"])(str);
      var angle = "0deg"; //

      var radialPosition = [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Position */ "b"].CENTER, el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Position */ "b"].CENTER];
      var colorsteps = [];
      results.str.split("(")[1].split(")")[0].split(",").map(function (it) {
        return it.trim();
      }).forEach(function (newValue, index) {
        if (newValue.includes("@")) {
          // conic 은 최종 값이 deg 라  gradient 의 공통 영역을 위해서
          // deg 르 % 로 미리 바꾸는 작업이 필요하다.
          newValue = newValue.split(' ').map(function (it) {
            return it.trim();
          }).map(function (it) {
            if (it.includes("deg")) {
              return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(it).toPercent();
            } else {
              return it;
            }
          }).join(' '); // color 복원

          newValue = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_12__["reverseMatches"])(newValue, results.matches); // 나머지는 ColorStep 이 파싱하는걸로
          // ColorStep 은 파싱이후 colorsteps 를 리턴해줌... 배열임, 명심 명심

          colorsteps.push.apply(colorsteps, _ColorStep__WEBPACK_IMPORTED_MODULE_9__[/* ColorStep */ "a"].parse(newValue));
        } else {
          // direction
          if (newValue.includes("at")) {
            // at 이 있으면 radialPosition 이 있는 것임
            var _newValue$split$map = newValue.split("at").map(function (it) {
              return it.trim();
            });

            var _newValue$split$map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_newValue$split$map, 2);

            angle = _newValue$split$map2[0];
            radialPosition = _newValue$split$map2[1];
          } else {
            // at 이 없으면 radialPosition 이 center, center 로 있음
            angle = newValue;
          }

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__["isString"])(radialPosition)) {
            var arr = radialPosition.split(' ');

            if (arr.length === 1) {
              var len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(arr[0]);

              if (len.isString()) {
                radialPosition = [len.value, len.value];
              } else {
                radialPosition = [len.clone(), len.clone()];
              }
            } else if (arr.length === 2) {
              radialPosition = arr.map(function (it) {
                var len = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(it);
                return len.isString() ? len.value : len;
              });
            }
          }

          if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__["isString"])(angle)) {
            if (angle.includes("from")) {
              angle = angle.split("from")[1];
              angle = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_11__["isUndefined"])(DEFINED_ANGLES[angle]) ? el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(angle) : el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].deg(+DEFINED_ANGLES[angle]);
            }
          }
        }
      });
      return new ConicGradient({
        angle: angle.value,
        radialPosition: radialPosition,
        colorsteps: colorsteps
      });
    }
  }]);

  return ConicGradient;
}(_Gradient__WEBPACK_IMPORTED_MODULE_8__[/* Gradient */ "a"]);

/***/ }),
/* 56 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ SVGFilter_SVGFilter; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ SVGFilterClassName; });
__webpack_require__.d(__webpack_exports__, "c", function() { return /* binding */ SVGFilterSpecList; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/BaseSVGFilter.js








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var Primitive = 'SourceGraphic,SourceAlpha,BackgroundImage,BackgroundAlpha,FillPaint,StrokePaint'.split(',');
var DEFAULT_ATTRIBUTES = {
  xChannelSelector: true,
  yChannelSelector: true
};
var BaseSVGFilter_BaseSVGFilter = /*#__PURE__*/function (_Property) {
  inherits_default()(BaseSVGFilter, _Property);

  var _super = _createSuper(BaseSVGFilter);

  function BaseSVGFilter() {
    classCallCheck_default()(this, BaseSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(BaseSVGFilter, [{
    key: "hasLight",
    value: function hasLight() {
      return false;
    }
  }, {
    key: "isLight",
    value: function isLight() {
      return false;
    }
  }, {
    key: "isSource",
    value: function isSource() {
      return false;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var id = Object(math["uuidShort"])();
      return get_default()(getPrototypeOf_default()(BaseSVGFilter.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "svgfilter",
        id: id,
        "in": [],
        bound: {
          x: 100,
          y: 100,
          targetX: 0,
          targetY: 0
        },
        connected: []
      }, obj));
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 0;
    }
  }, {
    key: "setIn",
    value: function setIn(index, target) {
      this.json["in"][index] = {
        id: target.id,
        type: target.type
      };
    }
  }, {
    key: "setConnected",
    value: function setConnected(target) {
      var f = this.json.connected.filter(function (c) {
        return c.id === target.id;
      });

      if (f.length === 0) {
        this.json.connected.push({
          id: target.id
        });
      }
    }
  }, {
    key: "convert",
    value: function convert(json) {
      if (Object(func["isString"])(json["in"])) {
        json["in"] = JSON.parse(json["in"]);
      }

      if (Object(func["isString"])(json.bound)) {
        json.bound = JSON.parse(json.bound);
      }

      if (Object(func["isString"])(json.connected)) {
        json.connected = JSON.parse(json.connected);
      }

      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, get_default()(getPrototypeOf_default()(BaseSVGFilter.prototype), "toCloneObject", this).call(this)), this.attrs('id', 'in', 'bound', 'connected'));
    }
  }, {
    key: "getDefaultAttribute",
    value: function getDefaultAttribute() {
      var _this = this;

      var list = [];

      if (this.json.connected.length) {
        list.push("result=\"".concat(this.json.id, "result\""));
      }

      Object.keys(DEFAULT_ATTRIBUTES).filter(function (key) {
        return !!_this.json[key];
      }).forEach(function (key) {
        list.push("".concat(key, "=\"").concat(_this.json[key], "\""));
      });
      return list.join(' ') + ' ' + this.getSourceInAttribute();
    }
  }, {
    key: "hasInIndex",
    value: function hasInIndex() {
      return false;
    }
  }, {
    key: "getSourceInAttribute",
    value: function getSourceInAttribute(inList) {
      var _this2 = this;

      return (inList || this.json["in"]).map(function (it, index) {
        if (!it) return '';
        var indexString = index === 0 ? '' : index + 1 + '';

        if (!_this2.hasInIndex()) {
          indexString = '';
        }

        if (Primitive.includes(it.type)) {
          return "in".concat(indexString, "=\"").concat(it.type, "\"");
        }

        return "in".concat(indexString, "=\"").concat(it.id, "result\"");
      }).join(' ');
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          type = _this$json.type,
          value = _this$json.value;
      return "<fe".concat(type, " value=\"").concat(value, "\" ").concat(this.getDefaultAttribute(), " />");
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      var FilterClass = SVGFilterClassName[obj.type];
      return new FilterClass(obj);
    }
  }]);

  return BaseSVGFilter;
}(Property["a" /* Property */]);
// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/RotaMatrixSVGFilter.js







function RotaMatrixSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = RotaMatrixSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RotaMatrixSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var RotaMatrixSVGFilter_RotaMatrixSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(RotaMatrixSVGFilter, _BaseSVGFilter);

  var _super = RotaMatrixSVGFilter_createSuper(RotaMatrixSVGFilter);

  function RotaMatrixSVGFilter() {
    classCallCheck_default()(this, RotaMatrixSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(RotaMatrixSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(RotaMatrixSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "RotaMatrix",
        hueRotate: RotaMatrixSVGFilter.spec.hueRotate.defaultValue
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json.hueRotate = Length["a" /* Length */].parse(json.hueRotate);
      return json;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          id = _this$json.id,
          hueRotate = _this$json.hueRotate;
      return (
        /*html*/
        "\n      <feColorMatrix type=\"hueRotate\" result=\"romatrix-".concat(id, "\"  values=\"").concat(hueRotate, "\"/>\n      <feColorMatrix type=\"matrix\" in=\"romatrix-").concat(id, "\" in2=\"SourceGraphic\"  ").concat(this.getDefaultAttribute(), " values=\"-1 2 -3 0 -.5 2 1 0 0 0 0 3 1 0 0 0 0 1 1 0\"/>\n    ")
      );
    }
  }]);

  return RotaMatrixSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
RotaMatrixSVGFilter_RotaMatrixSVGFilter.spec = {
  hueRotate: {
    title: "hue-rotate",
    inputType: "number-range",
    min: 0,
    max: 360,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/MergeSVGFilter.js







function MergeSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = MergeSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function MergeSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var MergeSVGFilter_MergeSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(MergeSVGFilter, _BaseSVGFilter);

  var _super = MergeSVGFilter_createSuper(MergeSVGFilter);

  function MergeSVGFilter() {
    classCallCheck_default()(this, MergeSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(MergeSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(MergeSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Merge"
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 3;
    }
  }, {
    key: "getDefaultAttribute",
    value: function getDefaultAttribute() {
      var list = [];

      if (this.json.connected.length) {
        list.push("result=\"".concat(this.json.id, "result\""));
      }

      return list.join(' ');
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this = this;

      var inList = this.json["in"];
      return (
        /*html*/
        "\n    <feMerge  ".concat(this.getDefaultAttribute(), " >\n      ").concat(inList.map(function (it) {
          return "<feMergeNode ".concat(_this.getSourceInAttribute([it]), " />");
        }).join(''), "\n    </feMerge>")
      );
    }
  }]);

  return MergeSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
MergeSVGFilter_MergeSVGFilter.spec = {};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/CompositeSVGFilter.js







function CompositeSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = CompositeSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CompositeSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var CompositeSVGFilter_CompositeSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(CompositeSVGFilter, _BaseSVGFilter);

  var _super = CompositeSVGFilter_createSuper(CompositeSVGFilter);

  function CompositeSVGFilter() {
    classCallCheck_default()(this, CompositeSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(CompositeSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(CompositeSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Composite",
        operator: CompositeSVGFilter.spec.operator.defaultValue,
        k1: CompositeSVGFilter.spec.k1.defaultValue,
        k2: CompositeSVGFilter.spec.k2.defaultValue,
        k3: CompositeSVGFilter.spec.k3.defaultValue,
        k4: CompositeSVGFilter.spec.k4.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 2;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          operator = _this$json.operator,
          k1 = _this$json.k1,
          k2 = _this$json.k2,
          k3 = _this$json.k3,
          k4 = _this$json.k4;
      var kNumbers = '';

      if (operator === 'arithmetic') {
        kNumbers = " k1=\"".concat(k1, "\" k2=\"").concat(k2, "\" k3=\"").concat(k3, "\" k4=\"").concat(k4, "\" ");
      }

      return "<feComposite operator=\"".concat(operator, "\" ").concat(kNumbers, "  ").concat(this.getDefaultAttribute(), " />");
    }
  }, {
    key: "hasInIndex",
    value: function hasInIndex() {
      return true;
    }
  }]);

  return CompositeSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
CompositeSVGFilter_CompositeSVGFilter.spec = {
  operator: {
    title: "operator",
    inputType: "select",
    options: "over,in,out,atop,xor,arithmetic",
    defaultValue: "over"
  },
  k1: {
    title: "k1",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  },
  k2: {
    title: "k2",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  },
  k3: {
    title: "k3",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  },
  k4: {
    title: "k4",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/MorphologySVGFilter.js







function MorphologySVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = MorphologySVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function MorphologySVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var MorphologySVGFilter_MorphologySVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(MorphologySVGFilter, _BaseSVGFilter);

  var _super = MorphologySVGFilter_createSuper(MorphologySVGFilter);

  function MorphologySVGFilter() {
    classCallCheck_default()(this, MorphologySVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(MorphologySVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(MorphologySVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Morphology",
        operator: MorphologySVGFilter.spec.operator.defaultValue,
        radius: MorphologySVGFilter.spec.radius.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          operator = _this$json.operator,
          radius = _this$json.radius;
      return "<feMorphology operator=\"".concat(operator, "\" radius=\"").concat(radius, "\"  ").concat(this.getDefaultAttribute(), " />");
    }
  }]);

  return MorphologySVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
MorphologySVGFilter_MorphologySVGFilter.spec = {
  operator: {
    title: "Operator",
    inputType: "select",
    options: 'erode,dilate',
    defaultValue: 'erode'
  },
  radius: {
    title: "Radius",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/TurbulenceSVGFilter.js







function TurbulenceSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = TurbulenceSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TurbulenceSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TurbulenceSVGFilter_TurbulenceSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(TurbulenceSVGFilter, _BaseSVGFilter);

  var _super = TurbulenceSVGFilter_createSuper(TurbulenceSVGFilter);

  function TurbulenceSVGFilter() {
    classCallCheck_default()(this, TurbulenceSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(TurbulenceSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(TurbulenceSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Turbulence",
        filterType: TurbulenceSVGFilter.spec.filterType.defaultValue,
        baseFrequency: TurbulenceSVGFilter.spec.baseFrequency.defaultValue,
        numOctaves: TurbulenceSVGFilter.spec.numOctaves.defaultValue,
        seed: TurbulenceSVGFilter.spec.seed.defaultValue
      });
    }
  }, {
    key: "convert",
    value: function convert(obj) {
      obj.baseFrequency = Length["a" /* Length */].parse(obj.baseFrequency);
      obj.numOctaves = Length["a" /* Length */].parse(obj.numOctaves);
      obj.seed = Length["a" /* Length */].parse(obj.seed);
      return obj;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          filterType = _this$json.filterType,
          baseFrequency = _this$json.baseFrequency,
          numOctaves = _this$json.numOctaves,
          seed = _this$json.seed;
      return (
        /*html*/
        "<feTurbulence ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          type: filterType,
          baseFrequency: baseFrequency,
          numOctaves: numOctaves,
          seed: seed
        }), "   ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return TurbulenceSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
TurbulenceSVGFilter_TurbulenceSVGFilter.spec = {
  filterType: {
    title: "Type",
    inputType: "select",
    options: "fractalNoise,turbulence",
    defaultValue: "turbulence"
  },
  baseFrequency: {
    title: 'Frequency',
    inputType: 'number-range',
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  },
  numOctaves: {
    title: 'Octaves',
    inputType: 'number-range',
    min: 1,
    max: 10,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  seed: {
    title: 'Seed',
    inputType: 'number-range',
    min: 0,
    max: 10000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/DisplacementMapSVGFilter.js







function DisplacementMapSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = DisplacementMapSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DisplacementMapSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var DisplacementMapSVGFilter_DisplacementMapSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(DisplacementMapSVGFilter, _BaseSVGFilter);

  var _super = DisplacementMapSVGFilter_createSuper(DisplacementMapSVGFilter);

  function DisplacementMapSVGFilter() {
    classCallCheck_default()(this, DisplacementMapSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(DisplacementMapSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DisplacementMapSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "DisplacementMap",
        scale: DisplacementMapSVGFilter.spec.scale.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 2;
    }
  }, {
    key: "convert",
    value: function convert(obj) {
      obj.scale = Length["a" /* Length */].parse(obj.scale);
      return obj;
    }
  }, {
    key: "toString",
    value: function toString() {
      var scale = this.json.scale;
      var scaleOption = scale.value ? "scale=\"".concat(scale, "\"") : '';
      return "<feDisplacementMap ".concat(scaleOption, "  ").concat(this.getDefaultAttribute(), " />");
    }
  }, {
    key: "hasInIndex",
    value: function hasInIndex() {
      return true;
    }
  }]);

  return DisplacementMapSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
DisplacementMapSVGFilter_DisplacementMapSVGFilter.spec = {
  scale: {
    title: 'scale',
    inputType: 'number-range',
    min: 0,
    max: 5000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/ColorMatrixSVGFilter.js







function ColorMatrixSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = ColorMatrixSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorMatrixSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var ColorMatrixSVGFilter_ColorMatrixSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(ColorMatrixSVGFilter, _BaseSVGFilter);

  var _super = ColorMatrixSVGFilter_createSuper(ColorMatrixSVGFilter);

  function ColorMatrixSVGFilter() {
    classCallCheck_default()(this, ColorMatrixSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorMatrixSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(ColorMatrixSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "ColorMatrix",
        values: ColorMatrixSVGFilter.spec.values.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var values = this.json.values;
      var valueString = values.join(' ');
      return (
        /*html*/
        "<feColorMatrix type=\"matrix\" values=\"".concat(valueString, "\"  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return ColorMatrixSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
ColorMatrixSVGFilter_ColorMatrixSVGFilter.spec = {
  values: {
    title: 'values',
    inputType: 'color-matrix',
    column: 5,
    defaultValue: [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/ConvolveMatrixSVGFilter.js







function ConvolveMatrixSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = ConvolveMatrixSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ConvolveMatrixSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var ConvolveMatrixSVGFilter_ConvolveMatrixSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(ConvolveMatrixSVGFilter, _BaseSVGFilter);

  var _super = ConvolveMatrixSVGFilter_createSuper(ConvolveMatrixSVGFilter);

  function ConvolveMatrixSVGFilter() {
    classCallCheck_default()(this, ConvolveMatrixSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(ConvolveMatrixSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(ConvolveMatrixSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "ConvolveMatrix",
        kernelMatrix: ConvolveMatrixSVGFilter.spec.kernelMatrix.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var kernelMatrix = this.json.kernelMatrix;
      var valueString = kernelMatrix.join(' ');
      return (
        /*html*/
        "<feConvolveMatrix kernelMatrix=\"".concat(valueString, "\"  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return ConvolveMatrixSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
ConvolveMatrixSVGFilter_ConvolveMatrixSVGFilter.spec = {
  kernelMatrix: {
    title: 'kernelMatrix',
    inputType: 'input-array',
    column: 3,
    defaultValue: [1, 0, 0, 0, 1, 0, 0, 0, 1]
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/GaussianBlurSVGFilter.js







function GaussianBlurSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = GaussianBlurSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GaussianBlurSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var GaussianBlurSVGFilter_GaussianBlurSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(GaussianBlurSVGFilter, _BaseSVGFilter);

  var _super = GaussianBlurSVGFilter_createSuper(GaussianBlurSVGFilter);

  function GaussianBlurSVGFilter() {
    classCallCheck_default()(this, GaussianBlurSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(GaussianBlurSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(GaussianBlurSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "GaussianBlur",
        stdDeviationX: GaussianBlurSVGFilter.spec.stdDeviationX.defaultValue,
        stdDeviationY: GaussianBlurSVGFilter.spec.stdDeviationY.defaultValue,
        edgeMode: GaussianBlurSVGFilter.spec.edgeMode.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "convert",
    value: function convert(obj) {
      obj.stdDeviationX = Length["a" /* Length */].parse(obj.stdDeviationX);
      obj.stdDeviationY = Length["a" /* Length */].parse(obj.stdDeviationY);
      return obj;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          stdDeviationX = _this$json.stdDeviationX,
          stdDeviationY = _this$json.stdDeviationY,
          edgeMode = _this$json.edgeMode;
      var stdDeviation = "".concat(stdDeviationX, " ").concat(stdDeviationY);

      if (stdDeviationX === stdDeviationY) {
        stdDeviation = stdDeviationX;
      }

      return "<feGaussianBlur  stdDeviation=\"".concat(stdDeviation, "\" edgeMode=\"").concat(edgeMode, "\"  ").concat(this.getDefaultAttribute(), " />");
    }
  }]);

  return GaussianBlurSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
GaussianBlurSVGFilter_GaussianBlurSVGFilter.spec = {
  stdDeviationX: {
    title: "X",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  stdDeviationY: {
    title: "Y",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  edgeMode: {
    title: "edge",
    inputType: "select",
    options: "none,duplicate,wrap",
    defaultValue: "none"
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/FloodSVGFilter.js







function FloodSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = FloodSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FloodSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var FloodSVGFilter_FloodSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(FloodSVGFilter, _BaseSVGFilter);

  var _super = FloodSVGFilter_createSuper(FloodSVGFilter);

  function FloodSVGFilter() {
    classCallCheck_default()(this, FloodSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(FloodSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(FloodSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Flood",
        x: FloodSVGFilter.spec.x.defaultValue,
        y: FloodSVGFilter.spec.y.defaultValue,
        width: FloodSVGFilter.spec.width.defaultValue,
        height: FloodSVGFilter.spec.height.defaultValue,
        color: FloodSVGFilter.spec.color.defaultValue,
        opacity: FloodSVGFilter.spec.opacity.defaultValue
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json.x = Length["a" /* Length */].parse(json.x);
      json.y = Length["a" /* Length */].parse(json.y);
      json.width = Length["a" /* Length */].parse(json.width);
      json.height = Length["a" /* Length */].parse(json.height);
      return json;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          opacity = _this$json.opacity,
          color = _this$json.color,
          x = _this$json.x,
          y = _this$json.y,
          width = _this$json.width,
          height = _this$json.height;
      return "<feFlood ".concat(Object(func["OBJECT_TO_PROPERTY"])({
        x: x,
        y: y,
        width: width,
        height: height
      }), " flood-opacity=\"").concat(opacity, "\" flood-color=\"").concat(color, "\" ").concat(this.getDefaultAttribute(), " />");
    }
  }]);

  return FloodSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
FloodSVGFilter_FloodSVGFilter.spec = {
  x: {
    title: "X",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  y: {
    title: "Y",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  width: {
    title: "width",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  height: {
    title: "height",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  opacity: {
    title: "opacity",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  },
  color: {
    title: "color",
    inputType: "color",
    defaultValue: 'rgba(0, 0, 0, 1)'
  }
};
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toArray.js
var toArray = __webpack_require__(46);
var toArray_default = /*#__PURE__*/__webpack_require__.n(toArray);

// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/ComponentTransferSVGFilter.js









function ComponentTransferSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = ComponentTransferSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ComponentTransferSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ComponentTransferSVGFilter_ComponentTransferSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(ComponentTransferSVGFilter, _BaseSVGFilter);

  var _super = ComponentTransferSVGFilter_createSuper(ComponentTransferSVGFilter);

  function ComponentTransferSVGFilter() {
    classCallCheck_default()(this, ComponentTransferSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(ComponentTransferSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(ComponentTransferSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "ComponentTransfer",
        r: ComponentTransferSVGFilter.spec.r.defaultValue,
        g: ComponentTransferSVGFilter.spec.g.defaultValue,
        b: ComponentTransferSVGFilter.spec.b.defaultValue,
        a: ComponentTransferSVGFilter.spec.a.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "parse",
    value: function parse(value) {
      var _value$split = value.split(' '),
          _value$split2 = toArray_default()(_value$split),
          type = _value$split2[0],
          values = _value$split2.slice(1);

      if (type === 'table' || type === 'discrete') {
        return {
          type: type,
          tableValues: values.join(' ')
        };
      }

      if (type === 'linear') {
        var _values = slicedToArray_default()(values, 2),
            slop = _values[0],
            intercept = _values[1];

        return {
          type: type,
          slop: slop,
          intercept: intercept
        };
      } else if (type === 'gamma') {
        var _values2 = slicedToArray_default()(values, 3),
            amplitude = _values2[0],
            exponent = _values2[1],
            offset = _values2[2];

        return {
          type: type,
          amplitude: amplitude,
          exponent: exponent,
          offset: offset
        };
      }

      return {
        type: type
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          r = _this$json.r,
          g = _this$json.g,
          b = _this$json.b,
          a = _this$json.a;
      r = this.parse(r);
      g = this.parse(g);
      b = this.parse(b);
      a = this.parse(a);
      return (
        /*html*/
        "<feComponentTransfer ".concat(this.getDefaultAttribute(), " >\n      ").concat(r && "<feFuncR ".concat(Object(func["OBJECT_TO_PROPERTY"])(r), " />"), "\n      ").concat(g && "<feFuncG ".concat(Object(func["OBJECT_TO_PROPERTY"])(g), " />"), "\n      ").concat(b && "<feFuncB ".concat(Object(func["OBJECT_TO_PROPERTY"])(b), " />"), "\n      ").concat(a && "<feFuncA ".concat(Object(func["OBJECT_TO_PROPERTY"])(a), " />"), "\n    </feComponentTransfe>")
      );
    }
  }]);

  return ComponentTransferSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
ComponentTransferSVGFilter_ComponentTransferSVGFilter.spec = {
  r: {
    title: "R",
    inputType: "FuncFilter",
    defaultValue: "identity"
  },
  g: {
    title: "G",
    inputType: "FuncFilter",
    defaultValue: "identity"
  },
  b: {
    title: "B",
    inputType: "FuncFilter",
    defaultValue: "identity"
  },
  a: {
    title: "A",
    inputType: "FuncFilter",
    defaultValue: "identity"
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/DistantLightSVGFilter.js







function DistantLightSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = DistantLightSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DistantLightSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DistantLightSVGFilter_DistantLightSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(DistantLightSVGFilter, _BaseSVGFilter);

  var _super = DistantLightSVGFilter_createSuper(DistantLightSVGFilter);

  function DistantLightSVGFilter() {
    classCallCheck_default()(this, DistantLightSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(DistantLightSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DistantLightSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "DistantLight",
        azimuth: DistantLightSVGFilter.spec.azimuth.defaultValue,
        elevation: DistantLightSVGFilter.spec.elevation.defaultValue
      });
    }
  }, {
    key: "isLight",
    value: function isLight() {
      return true;
    } // toString() {
    //   var { azimuth, elevation } = this.json; 
    //   return /*html*/`<feDistantLight ${OBJECT_TO_PROPERTY({
    //     azimuth, elevation
    //   })}  ${this.getDefaultAttribute()} />`;
    // }

  }, {
    key: "toString",
    value: function toString() {
      return '';
    }
  }, {
    key: "toLightString",
    value: function toLightString() {
      var _this$json = this.json,
          azimuth = _this$json.azimuth,
          elevation = _this$json.elevation;
      return (
        /*html*/
        "<feDistantLight ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          azimuth: azimuth,
          elevation: elevation
        }), " />")
      );
    }
  }]);

  return DistantLightSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
DistantLightSVGFilter_DistantLightSVGFilter.spec = {
  azimuth: {
    title: "azimuth",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  elevation: {
    title: "elevation",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/PointLightSVGFilter.js







function PointLightSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = PointLightSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PointLightSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var PointLightSVGFilter_PointLightSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(PointLightSVGFilter, _BaseSVGFilter);

  var _super = PointLightSVGFilter_createSuper(PointLightSVGFilter);

  function PointLightSVGFilter() {
    classCallCheck_default()(this, PointLightSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(PointLightSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(PointLightSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "PointLight",
        x: PointLightSVGFilter.spec.x.defaultValue,
        y: PointLightSVGFilter.spec.y.defaultValue,
        z: PointLightSVGFilter.spec.z.defaultValue
      });
    }
  }, {
    key: "isLight",
    value: function isLight() {
      return true;
    } // toString() {
    //   var { x, y, z } = this.json; 
    //   return /*html*/`<fePointLight ${OBJECT_TO_PROPERTY({
    //     x, y, z
    //   })}  ${this.getDefaultAttribute()} />`;
    // }

  }, {
    key: "toString",
    value: function toString() {
      return '';
    }
  }, {
    key: "toLightString",
    value: function toLightString() {
      var _this$json = this.json,
          x = _this$json.x,
          y = _this$json.y,
          z = _this$json.z;
      return (
        /*html*/
        "<fePointLight ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          x: x,
          y: y,
          z: z
        }), " />")
      );
    }
  }]);

  return PointLightSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
PointLightSVGFilter_PointLightSVGFilter.spec = {
  x: {
    title: "x",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  y: {
    title: "y",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  z: {
    title: "z",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SpotLightSVGFilter.js







function SpotLightSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SpotLightSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SpotLightSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SpotLightSVGFilter_SpotLightSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(SpotLightSVGFilter, _BaseSVGFilter);

  var _super = SpotLightSVGFilter_createSuper(SpotLightSVGFilter);

  function SpotLightSVGFilter() {
    classCallCheck_default()(this, SpotLightSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SpotLightSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(SpotLightSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "SpotLight",
        x: SpotLightSVGFilter.spec.x.defaultValue,
        y: SpotLightSVGFilter.spec.x.defaultValue,
        z: SpotLightSVGFilter.spec.x.defaultValue,
        pointsAtX: SpotLightSVGFilter.spec.pointsAtX.defaultValue,
        pointsAtY: SpotLightSVGFilter.spec.pointsAtY.defaultValue,
        pointsAtZ: SpotLightSVGFilter.spec.pointsAtZ.defaultValue,
        specularExponent: SpotLightSVGFilter.spec.specularExponent.defaultValue,
        limitingConeAngle: SpotLightSVGFilter.spec.limitingConeAngle.defaultValue
      });
    }
  }, {
    key: "isLight",
    value: function isLight() {
      return true;
    } // toString() {
    //   var { x, y, z, pointsAtX, pointsAtY, pointsAtZ, specularExponent, limitingConeAngle } = this.json; 
    //   return /*html*/`<feSpotLight ${OBJECT_TO_PROPERTY({
    //     x, y, z, pointsAtX, pointsAtY, pointsAtZ, specularExponent, limitingConeAngle
    //   })}  ${this.getDefaultAttribute()} />`;
    // }

  }, {
    key: "toString",
    value: function toString() {}
  }, {
    key: "toLightString",
    value: function toLightString() {
      var _this$json = this.json,
          x = _this$json.x,
          y = _this$json.y,
          z = _this$json.z,
          pointsAtX = _this$json.pointsAtX,
          pointsAtY = _this$json.pointsAtY,
          pointsAtZ = _this$json.pointsAtZ,
          specularExponent = _this$json.specularExponent,
          limitingConeAngle = _this$json.limitingConeAngle;
      return (
        /*html*/
        "<feSpotLight ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          x: x,
          y: y,
          z: z,
          pointsAtX: pointsAtX,
          pointsAtY: pointsAtY,
          pointsAtZ: pointsAtZ,
          specularExponent: specularExponent,
          limitingConeAngle: limitingConeAngle
        }), " />")
      );
    }
  }]);

  return SpotLightSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
SpotLightSVGFilter_SpotLightSVGFilter.spec = {
  x: {
    title: "x",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  y: {
    title: "y",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  z: {
    title: "z",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  pointsAtX: {
    title: "pointsAtX",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  pointsAtY: {
    title: "pointsAtY",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  pointsAtZ: {
    title: "pointsAtZ",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  specularExponent: {
    title: "specularExponent",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  limitingConeAngle: {
    title: "limitingConeAngle",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/DiffuseLightingSVGFilter.js








function DiffuseLightingSVGFilter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function DiffuseLightingSVGFilter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DiffuseLightingSVGFilter_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DiffuseLightingSVGFilter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function DiffuseLightingSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = DiffuseLightingSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DiffuseLightingSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DiffuseLightingSVGFilter_DiffuseLightingSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(DiffuseLightingSVGFilter, _BaseSVGFilter);

  var _super = DiffuseLightingSVGFilter_createSuper(DiffuseLightingSVGFilter);

  function DiffuseLightingSVGFilter() {
    classCallCheck_default()(this, DiffuseLightingSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(DiffuseLightingSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DiffuseLightingSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "DiffuseLighting",
        surfaceScale: DiffuseLightingSVGFilter.spec.surfaceScale.defaultValue,
        lightingColor: DiffuseLightingSVGFilter.spec.lightingColor.defaultValue,
        diffuseConstant: DiffuseLightingSVGFilter.spec.diffuseConstant.defaultValue,
        lightInfo: ''
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return DiffuseLightingSVGFilter_objectSpread(DiffuseLightingSVGFilter_objectSpread({}, get_default()(getPrototypeOf_default()(DiffuseLightingSVGFilter.prototype), "toCloneObject", this).call(this)), this.attrs('surfaceScale', 'lightingColor', 'diffuseConstant', 'lightInfo'));
    }
  }, {
    key: "hasLight",
    value: function hasLight() {
      return true;
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          surfaceScale = _this$json.surfaceScale,
          diffuseConstant = _this$json.diffuseConstant,
          lightingColor = _this$json.lightingColor;
      return (
        /*html*/
        "<feDiffuseLighting ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          surfaceScale: surfaceScale,
          diffuseConstant: diffuseConstant,
          'lighting-color': lightingColor
        }), "  ").concat(this.getDefaultAttribute(), " >\n      ").concat(this.json.lightInfo, "\n    </feDiffuseLighting>")
      );
    }
  }]);

  return DiffuseLightingSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
DiffuseLightingSVGFilter_DiffuseLightingSVGFilter.spec = {
  surfaceScale: {
    title: "surfaceScale",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  diffuseConstant: {
    title: "diffuseConstant",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  lightingColor: {
    title: "Lighting Color",
    inputType: "color",
    defaultValue: 'rgba(0, 0, 0, 1)'
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SpecularLightingSVGFilter.js








function SpecularLightingSVGFilter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SpecularLightingSVGFilter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SpecularLightingSVGFilter_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SpecularLightingSVGFilter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SpecularLightingSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SpecularLightingSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SpecularLightingSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SpecularLightingSVGFilter_SpecularLightingSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(SpecularLightingSVGFilter, _BaseSVGFilter);

  var _super = SpecularLightingSVGFilter_createSuper(SpecularLightingSVGFilter);

  function SpecularLightingSVGFilter() {
    classCallCheck_default()(this, SpecularLightingSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SpecularLightingSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(SpecularLightingSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "SpecularLighting",
        surfaceScale: SpecularLightingSVGFilter.spec.surfaceScale.defaultValue,
        lightingColor: SpecularLightingSVGFilter.spec.lightingColor.defaultValue,
        specularConstant: SpecularLightingSVGFilter.spec.specularConstant.defaultValue,
        specularExponent: SpecularLightingSVGFilter.spec.specularExponent.defaultValue,
        lightInfo: ''
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return SpecularLightingSVGFilter_objectSpread(SpecularLightingSVGFilter_objectSpread({}, get_default()(getPrototypeOf_default()(SpecularLightingSVGFilter.prototype), "toCloneObject", this).call(this)), this.attrs('surfaceScale', 'lightingColor', 'specularConstant', 'specularExponent', 'lightInfo'));
    }
  }, {
    key: "hasLight",
    value: function hasLight() {
      return true;
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          surfaceScale = _this$json.surfaceScale,
          specularConstant = _this$json.specularConstant,
          specularExponent = _this$json.specularExponent,
          lightingColor = _this$json.lightingColor;
      return (
        /*html*/
        "<feSpecularLighting ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          surfaceScale: surfaceScale,
          specularConstant: specularConstant,
          specularExponent: specularExponent,
          'lighting-color': lightingColor
        }), "  ").concat(this.getDefaultAttribute(), " >\n      ").concat(this.json.lightInfo, "\n    </feSpecularLighting>")
      );
    }
  }, {
    key: "getSourceInAttribute",
    value: function getSourceInAttribute() {
      return '';
    }
  }]);

  return SpecularLightingSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
SpecularLightingSVGFilter_SpecularLightingSVGFilter.spec = {
  surfaceScale: {
    title: "surfaceScale",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  specularConstant: {
    title: "Constant",
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  specularExponent: {
    title: 'Exponent',
    inputType: "number-range",
    min: 0,
    max: 100,
    step: 1,
    defaultValue: Length["a" /* Length */].number(1)
  },
  lightingColor: {
    title: "Lighting Color",
    inputType: "color",
    defaultValue: 'rgba(0, 0, 0, 1)'
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/OffsetSVGFilter.js







function OffsetSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = OffsetSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function OffsetSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var OffsetSVGFilter_OffsetSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(OffsetSVGFilter, _BaseSVGFilter);

  var _super = OffsetSVGFilter_createSuper(OffsetSVGFilter);

  function OffsetSVGFilter() {
    classCallCheck_default()(this, OffsetSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(OffsetSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(OffsetSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Offset",
        dx: OffsetSVGFilter.spec.dx.defaultValue,
        dy: OffsetSVGFilter.spec.dy.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          dx = _this$json.dx,
          dy = _this$json.dy;
      return (
        /*html*/
        "<feOffset \n      ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          dx: dx,
          dy: dy
        }), "  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return OffsetSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
OffsetSVGFilter_OffsetSVGFilter.spec = {
  dx: {
    title: "dx",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  dy: {
    title: "dy",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/BlendSVGFilter.js







function BlendSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = BlendSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BlendSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var BlendSVGFilter_BlendSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(BlendSVGFilter, _BaseSVGFilter);

  var _super = BlendSVGFilter_createSuper(BlendSVGFilter);

  function BlendSVGFilter() {
    classCallCheck_default()(this, BlendSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(BlendSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(BlendSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Blend",
        mode: BlendSVGFilter.spec.mode.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 2;
    }
  }, {
    key: "toString",
    value: function toString() {
      var mode = this.json.mode;
      return (
        /*html*/
        "<feBlend ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          mode: mode
        }), " ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }, {
    key: "hasInIndex",
    value: function hasInIndex() {
      return true;
    }
  }]);

  return BlendSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
BlendSVGFilter_BlendSVGFilter.spec = {
  mode: {
    title: 'mode',
    inputType: 'blend',
    defaultValue: 'normal'
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SourceSVGFilter.js








function SourceSVGFilter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SourceSVGFilter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SourceSVGFilter_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SourceSVGFilter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SourceSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SourceSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SourceSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var SourceSVGFilter_SourceSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(SourceSVGFilter, _BaseSVGFilter);

  var _super = SourceSVGFilter_createSuper(SourceSVGFilter);

  function SourceSVGFilter() {
    classCallCheck_default()(this, SourceSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SourceSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SourceSVGFilter.prototype), "getDefaultObject", this).call(this, SourceSVGFilter_objectSpread({
        type: 'Source'
      }, obj));
    }
  }, {
    key: "isSource",
    value: function isSource() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      return '';
    }
  }]);

  return SourceSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SourceGraphicSVGFilter.js







function SourceGraphicSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SourceGraphicSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SourceGraphicSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var SourceGraphicSVGFilter_SourceGraphicSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(SourceGraphicSVGFilter, _SourceSVGFilter);

  var _super = SourceGraphicSVGFilter_createSuper(SourceGraphicSVGFilter);

  function SourceGraphicSVGFilter() {
    classCallCheck_default()(this, SourceGraphicSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SourceGraphicSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(SourceGraphicSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'SourceGraphic'
      });
    }
  }]);

  return SourceGraphicSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SourceAlphaSVGFilter.js







function SourceAlphaSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SourceAlphaSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SourceAlphaSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var SourceAlphaSVGFilter_SourceAlphaSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(SourceAlphaSVGFilter, _SourceSVGFilter);

  var _super = SourceAlphaSVGFilter_createSuper(SourceAlphaSVGFilter);

  function SourceAlphaSVGFilter() {
    classCallCheck_default()(this, SourceAlphaSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SourceAlphaSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(SourceAlphaSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'SourceAlpha'
      });
    }
  }]);

  return SourceAlphaSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/BackgroundImageSVGFilter.js







function BackgroundImageSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundImageSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundImageSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var BackgroundImageSVGFilter_BackgroundImageSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(BackgroundImageSVGFilter, _SourceSVGFilter);

  var _super = BackgroundImageSVGFilter_createSuper(BackgroundImageSVGFilter);

  function BackgroundImageSVGFilter() {
    classCallCheck_default()(this, BackgroundImageSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundImageSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(BackgroundImageSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'BackgroundImage'
      });
    }
  }]);

  return BackgroundImageSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/BackgroundAlphaSVGFilter.js







function BackgroundAlphaSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundAlphaSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundAlphaSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var BackgroundAlphaSVGFilter_BackgroundAlphaSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(BackgroundAlphaSVGFilter, _SourceSVGFilter);

  var _super = BackgroundAlphaSVGFilter_createSuper(BackgroundAlphaSVGFilter);

  function BackgroundAlphaSVGFilter() {
    classCallCheck_default()(this, BackgroundAlphaSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundAlphaSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(BackgroundAlphaSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'BackgroundAlpha'
      });
    }
  }]);

  return BackgroundAlphaSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/FillPaintSVGFilter.js







function FillPaintSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = FillPaintSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FillPaintSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var FillPaintSVGFilter_FillPaintSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(FillPaintSVGFilter, _SourceSVGFilter);

  var _super = FillPaintSVGFilter_createSuper(FillPaintSVGFilter);

  function FillPaintSVGFilter() {
    classCallCheck_default()(this, FillPaintSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(FillPaintSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(FillPaintSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'FillPaint'
      });
    }
  }]);

  return FillPaintSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/StrokePaintSVGFilter.js







function StrokePaintSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = StrokePaintSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function StrokePaintSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var StrokePaintSVGFilter_StrokePaintSVGFilter = /*#__PURE__*/function (_SourceSVGFilter) {
  inherits_default()(StrokePaintSVGFilter, _SourceSVGFilter);

  var _super = StrokePaintSVGFilter_createSuper(StrokePaintSVGFilter);

  function StrokePaintSVGFilter() {
    classCallCheck_default()(this, StrokePaintSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(StrokePaintSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(StrokePaintSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: 'StrokePaint'
      });
    }
  }]);

  return StrokePaintSVGFilter;
}(SourceSVGFilter_SourceSVGFilter);
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/DropShadowSVGFilter.js







function DropShadowSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = DropShadowSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DropShadowSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DropShadowSVGFilter_DropShadowSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(DropShadowSVGFilter, _BaseSVGFilter);

  var _super = DropShadowSVGFilter_createSuper(DropShadowSVGFilter);

  function DropShadowSVGFilter() {
    classCallCheck_default()(this, DropShadowSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(DropShadowSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(DropShadowSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "DropShadow",
        dx: DropShadowSVGFilter.spec.dx.defaultValue,
        dy: DropShadowSVGFilter.spec.dy.defaultValue,
        stdDeviation: DropShadowSVGFilter.spec.stdDeviation.defaultValue,
        color: DropShadowSVGFilter.spec.color.defaultValue,
        opacity: DropShadowSVGFilter.spec.opacity.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          dx = _this$json.dx,
          dy = _this$json.dy,
          stdDeviation = _this$json.stdDeviation,
          color = _this$json.color,
          opacity = _this$json.opacity;
      return (
        /*html*/
        "<feDropShadow ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          dx: dx,
          dy: dy,
          stdDeviation: stdDeviation,
          'flood-color': color,
          'flood-opacity': opacity
        }), "  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return DropShadowSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
DropShadowSVGFilter_DropShadowSVGFilter.spec = {
  dx: {
    title: "dx",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  dy: {
    title: "dy",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  stdDeviation: {
    title: "stdDeviation",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 0.1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  opacity: {
    title: "opacity",
    inputType: "number-range",
    min: 0,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(1)
  },
  color: {
    title: "color",
    inputType: "color",
    defaultValue: 'rgba(0, 0, 0, 1)'
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/SaturateSVGFilter.js







function SaturateSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SaturateSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SaturateSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SaturateSVGFilter_SaturateSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(SaturateSVGFilter, _BaseSVGFilter);

  var _super = SaturateSVGFilter_createSuper(SaturateSVGFilter);

  function SaturateSVGFilter() {
    classCallCheck_default()(this, SaturateSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SaturateSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(SaturateSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Saturate",
        values: SaturateSVGFilter.spec.values.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var values = this.json.values;
      return (
        /*html*/
        "<feColorMatrix type=\"saturate\" values=\"".concat(values, "\"  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return SaturateSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
SaturateSVGFilter_SaturateSVGFilter.spec = {
  values: {
    title: "values",
    inputType: "number-range",
    min: -1,
    max: 1,
    step: 0.01,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/HueRotateSVGFilter.js







function HueRotateSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = HueRotateSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HueRotateSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var HueRotateSVGFilter_HueRotateSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(HueRotateSVGFilter, _BaseSVGFilter);

  var _super = HueRotateSVGFilter_createSuper(HueRotateSVGFilter);

  function HueRotateSVGFilter() {
    classCallCheck_default()(this, HueRotateSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(HueRotateSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(HueRotateSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "HueRotate",
        values: HueRotateSVGFilter.spec.values.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      var values = this.json.values;
      return (
        /*html*/
        "<feColorMatrix type=\"hueRotate\" values=\"".concat(values, "\"  ").concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return HueRotateSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
HueRotateSVGFilter_HueRotateSVGFilter.spec = {
  values: {
    title: "values",
    inputType: "number-range",
    min: 0,
    max: 360,
    step: 0.1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/LuminanceAlphaSVGFilter.js







function LuminanceAlphaSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = LuminanceAlphaSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LuminanceAlphaSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var LuminanceAlphaSVGFilter_LuminanceAlphaSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(LuminanceAlphaSVGFilter, _BaseSVGFilter);

  var _super = LuminanceAlphaSVGFilter_createSuper(LuminanceAlphaSVGFilter);

  function LuminanceAlphaSVGFilter() {
    classCallCheck_default()(this, LuminanceAlphaSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(LuminanceAlphaSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(LuminanceAlphaSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "LuminanceAlpha"
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "toString",
    value: function toString() {
      return (
        /*html*/
        "<feColorMatrix type=\"luminanceToAlpha\" ".concat(this.getDefaultAttribute(), " />")
      );
    }
  }]);

  return LuminanceAlphaSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
LuminanceAlphaSVGFilter_LuminanceAlphaSVGFilter.spec = {};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/TileSVGFilter.js







function TileSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = TileSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TileSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TileSVGFilter_TileSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(TileSVGFilter, _BaseSVGFilter);

  var _super = TileSVGFilter_createSuper(TileSVGFilter);

  function TileSVGFilter() {
    classCallCheck_default()(this, TileSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(TileSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(TileSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Tile",
        x: TileSVGFilter.spec.x.defaultValue,
        y: TileSVGFilter.spec.y.defaultValue,
        width: TileSVGFilter.spec.width.defaultValue,
        height: TileSVGFilter.spec.height.defaultValue
      });
    }
  }, {
    key: "getInCount",
    value: function getInCount() {
      return 1;
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json.x = Length["a" /* Length */].parse(json.x);
      json.y = Length["a" /* Length */].parse(json.y);
      json.width = Length["a" /* Length */].parse(json.width);
      json.height = Length["a" /* Length */].parse(json.height);
      return json;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          x = _this$json.x,
          y = _this$json.y,
          width = _this$json.width,
          height = _this$json.height;
      return "<feTile ".concat(Object(func["OBJECT_TO_PROPERTY"])({
        x: x,
        y: y,
        width: width,
        height: height
      }), " ").concat(this.getDefaultAttribute(), " />");
    }
  }]);

  return TileSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
TileSVGFilter_TileSVGFilter.spec = {
  x: {
    title: "X",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  y: {
    title: "Y",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  width: {
    title: "width",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  height: {
    title: "height",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/svg-filter/ImageSVGFilter.js







function ImageSVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = ImageSVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageSVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ImageSVGFilter_ImageSVGFilter = /*#__PURE__*/function (_BaseSVGFilter) {
  inherits_default()(ImageSVGFilter, _BaseSVGFilter);

  var _super = ImageSVGFilter_createSuper(ImageSVGFilter);

  function ImageSVGFilter() {
    classCallCheck_default()(this, ImageSVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageSVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return get_default()(getPrototypeOf_default()(ImageSVGFilter.prototype), "getDefaultObject", this).call(this, {
        type: "Image",
        x: ImageSVGFilter.spec.x.defaultValue,
        y: ImageSVGFilter.spec.y.defaultValue,
        width: ImageSVGFilter.spec.width.defaultValue,
        height: ImageSVGFilter.spec.height.defaultValue,
        src: ImageSVGFilter.spec.src.defaultValue,
        alignment: ImageSVGFilter.spec.alignment.defaultValue,
        scaleing: ImageSVGFilter.spec.scaleing.defaultValue
      });
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json.x = Length["a" /* Length */].parse(json.x);
      json.y = Length["a" /* Length */].parse(json.y);
      json.width = Length["a" /* Length */].parse(json.width);
      json.height = Length["a" /* Length */].parse(json.height);
      return json;
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          src = _this$json.src,
          x = _this$json.x,
          y = _this$json.y,
          width = _this$json.width,
          height = _this$json.height,
          alignment = _this$json.alignment,
          scaleing = _this$json.scaleing;
      return "<feImage ".concat(Object(func["OBJECT_TO_PROPERTY"])({
        x: x,
        y: y,
        width: width,
        height: height,
        'xlink:href': src,
        preserveAspectRatio: "".concat(alignment, " ").concat(scaleing)
      }), " ").concat(this.getDefaultAttribute(), " />");
    }
  }]);

  return ImageSVGFilter;
}(BaseSVGFilter_BaseSVGFilter);
ImageSVGFilter_ImageSVGFilter.spec = {
  x: {
    title: "X",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  y: {
    title: "Y",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  width: {
    title: "width",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  height: {
    title: "height",
    inputType: "number-range",
    min: 0,
    max: 1000,
    step: 1,
    defaultValue: Length["a" /* Length */].number(0)
  },
  alignment: {
    title: "alignment",
    inputType: "select",
    options: "xMinYMin,xMidYMin,xMaxYMin,xMinYMid,xMidYMid,xMaxYMid,xMinYMax,xMidYMax,xMaxYMax",
    defaultValue: "xMidYMid"
  },
  scaleing: {
    title: "scaleing",
    inputType: "select",
    options: "meet,slice",
    defaultValue: "meet"
  },
  src: {
    title: "Image",
    inputType: "ImageSelectEditor",
    defaultValue: ''
  }
};
// CONCATENATED MODULE: ./src/el/editor/property-parser/SVGFilter.js








function SVGFilter_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGFilter_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGFilter_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGFilter_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGFilter_createSuper(Derived) { var hasNativeReflectConstruct = SVGFilter_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGFilter_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
































var SVG_FILTER_COMMON_ATTRIBUTES = ['result'];
var SVGFilter_SVGFilter = /*#__PURE__*/function (_Property) {
  inherits_default()(SVGFilter, _Property);

  var _super = SVGFilter_createSuper(SVGFilter);

  function SVGFilter() {
    classCallCheck_default()(this, SVGFilter);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFilter, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SVGFilter.prototype), "getDefaultObject", this).call(this, SVGFilter_objectSpread({
        itemType: "svgfilter",
        result: ''
      }, obj));
    }
  }, {
    key: "getDefaultAttribute",
    value: function getDefaultAttribute() {
      var _this = this;

      return SVG_FILTER_COMMON_ATTRIBUTES.map(function (key) {
        return "".concat(key, "=\"").concat(_this.json[key], "\"");
      }).join(' ');
    }
  }, {
    key: "toString",
    value: function toString() {
      var _this$json = this.json,
          type = _this$json.type,
          value = _this$json.value;
      return "<fe".concat(type, " value=\"").concat(value, "\" ").concat(this.getDefaultAttribute(), " />");
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      var FilterClass = SVGFilterClassName[obj.type];
      return new FilterClass(obj);
    }
  }]);

  return SVGFilter;
}(Property["a" /* Property */]);
var SVGFilterClassName = {
  Image: ImageSVGFilter_ImageSVGFilter,
  Tile: TileSVGFilter_TileSVGFilter,
  Saturate: SaturateSVGFilter_SaturateSVGFilter,
  HueRotate: HueRotateSVGFilter_HueRotateSVGFilter,
  LuminanceAlpha: LuminanceAlphaSVGFilter_LuminanceAlphaSVGFilter,
  DropShadow: DropShadowSVGFilter_DropShadowSVGFilter,
  SourceGraphic: SourceGraphicSVGFilter_SourceGraphicSVGFilter,
  SourceAlpha: SourceAlphaSVGFilter_SourceAlphaSVGFilter,
  BackgroundImage: BackgroundImageSVGFilter_BackgroundImageSVGFilter,
  BackgroundAlpha: BackgroundAlphaSVGFilter_BackgroundAlphaSVGFilter,
  FillPaint: FillPaintSVGFilter_FillPaintSVGFilter,
  StrokePaint: StrokePaintSVGFilter_StrokePaintSVGFilter,
  ComponentTransfer: ComponentTransferSVGFilter_ComponentTransferSVGFilter,
  DistantLight: DistantLightSVGFilter_DistantLightSVGFilter,
  PointLight: PointLightSVGFilter_PointLightSVGFilter,
  SpotLight: SpotLightSVGFilter_SpotLightSVGFilter,
  DiffuseLighting: DiffuseLightingSVGFilter_DiffuseLightingSVGFilter,
  SpecularLighting: SpecularLightingSVGFilter_SpecularLightingSVGFilter,
  Blend: BlendSVGFilter_BlendSVGFilter,
  Offset: OffsetSVGFilter_OffsetSVGFilter,
  RotaMatrix: RotaMatrixSVGFilter_RotaMatrixSVGFilter,
  GaussianBlur: GaussianBlurSVGFilter_GaussianBlurSVGFilter,
  Flood: FloodSVGFilter_FloodSVGFilter,
  Merge: MergeSVGFilter_MergeSVGFilter,
  Composite: CompositeSVGFilter_CompositeSVGFilter,
  Morphology: MorphologySVGFilter_MorphologySVGFilter,
  Turbulence: TurbulenceSVGFilter_TurbulenceSVGFilter,
  DisplacementMap: DisplacementMapSVGFilter_DisplacementMapSVGFilter,
  ColorMatrix: ColorMatrixSVGFilter_ColorMatrixSVGFilter,
  ConvolveMatrix: ConvolveMatrixSVGFilter_ConvolveMatrixSVGFilter
};
var SVGFilterSpecList = {
  Image: ImageSVGFilter_ImageSVGFilter.spec,
  Tile: TileSVGFilter_TileSVGFilter.spec,
  DropShadow: DropShadowSVGFilter_DropShadowSVGFilter.spec,
  Saturate: SaturateSVGFilter_SaturateSVGFilter.spec,
  HueRotate: HueRotateSVGFilter_HueRotateSVGFilter.spec,
  LuminanceAlpha: LuminanceAlphaSVGFilter_LuminanceAlphaSVGFilter.spec,
  Offset: OffsetSVGFilter_OffsetSVGFilter.spec,
  ComponentTransfer: ComponentTransferSVGFilter_ComponentTransferSVGFilter.spec,
  SpecularLighting: SpecularLightingSVGFilter_SpecularLightingSVGFilter.spec,
  SpotLight: SpotLightSVGFilter_SpotLightSVGFilter.spec,
  PointLight: PointLightSVGFilter_PointLightSVGFilter.spec,
  DistantLight: DistantLightSVGFilter_DistantLightSVGFilter.spec,
  DiffuseLighting: DiffuseLightingSVGFilter_DiffuseLightingSVGFilter.spec,
  Blend: BlendSVGFilter_BlendSVGFilter.spec,
  RotaMatrix: RotaMatrixSVGFilter_RotaMatrixSVGFilter.spec,
  Merge: MergeSVGFilter_MergeSVGFilter.spec,
  GaussianBlur: GaussianBlurSVGFilter_GaussianBlurSVGFilter.spec,
  Flood: FloodSVGFilter_FloodSVGFilter.spec,
  Morphology: MorphologySVGFilter_MorphologySVGFilter.spec,
  Composite: CompositeSVGFilter_CompositeSVGFilter.spec,
  Turbulence: TurbulenceSVGFilter_TurbulenceSVGFilter.spec,
  DisplacementMap: DisplacementMapSVGFilter_DisplacementMapSVGFilter.spec,
  ColorMatrix: ColorMatrixSVGFilter_ColorMatrixSVGFilter.spec,
  ConvolveMatrix: ConvolveMatrixSVGFilter_ConvolveMatrixSVGFilter.spec
};

/***/ }),
/* 57 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGStaticGradient; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _ColorStep__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(22);
/* harmony import */ var _SVGGradient__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(84);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGStaticGradient = /*#__PURE__*/function (_SVGGradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(SVGStaticGradient, _SVGGradient);

  var _super = _createSuper(SVGStaticGradient);

  function SVGStaticGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SVGStaticGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SVGStaticGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGStaticGradient.prototype), "getDefaultObject", this).call(this, {
        type: 'static-gradient',
        "static": true,
        colorsteps: [new _ColorStep__WEBPACK_IMPORTED_MODULE_7__[/* ColorStep */ "a"]({
          color: 'red',
          percent: 0,
          index: 0
        }), new _ColorStep__WEBPACK_IMPORTED_MODULE_7__[/* ColorStep */ "a"]({
          color: 'red',
          percent: 100,
          index: 1
        })]
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGStaticGradient.prototype), "toCloneObject", this).call(this)), {}, {
        "static": true
      });
    }
  }, {
    key: "setColor",
    value: function setColor(color) {
      this.colorsteps.forEach(function (it) {
        it.color = color;
      });
    }
  }, {
    key: "toString",
    value: function toString() {
      var color = this.json.colorsteps[0].color;
      return color;
    }
  }, {
    key: "toSVGString",
    value: function toSVGString() {
      return '';
    }
  }, {
    key: "toFillValue",
    value: function toFillValue() {
      return this.toString();
    }
  }, {
    key: "isStatic",
    value: function isStatic() {
      return true;
    }
  }], [{
    key: "create",
    value: function create() {
      var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transparent';
      return new SVGStaticGradient({
        colorsteps: [new _ColorStep__WEBPACK_IMPORTED_MODULE_7__[/* ColorStep */ "a"]({
          color: color,
          percent: 0,
          index: 0
        }), new _ColorStep__WEBPACK_IMPORTED_MODULE_7__[/* ColorStep */ "a"]({
          color: color,
          percent: 100,
          index: 0
        })]
      });
    }
  }]);

  return SVGStaticGradient;
}(_SVGGradient__WEBPACK_IMPORTED_MODULE_8__[/* SVGGradient */ "a"]);

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ TransformOrigin_TransformOrigin; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// CONCATENATED MODULE: ./src/el/editor/property-parser/TransformOriginCache.js


var MAX_CACHE_COUNT = 1000;
var cachedTransformOriginMap = new Map();
var TransformOriginCache_TransformOriginCache = /*#__PURE__*/function () {
  function TransformOriginCache() {
    classCallCheck_default()(this, TransformOriginCache);
  }

  createClass_default()(TransformOriginCache, null, [{
    key: "has",
    value: function has(key) {
      return cachedTransformOriginMap.has(key);
    }
  }, {
    key: "get",
    value: function get(key) {
      return cachedTransformOriginMap.get(key);
    }
  }, {
    key: "set",
    value: function set(key, parsedValue) {
      if (cachedTransformOriginMap.size > MAX_CACHE_COUNT) {
        cachedTransformOriginMap.clear();
      }

      cachedTransformOriginMap.set(key, parsedValue);
    }
  }]);

  return TransformOriginCache;
}();
// CONCATENATED MODULE: ./src/el/editor/property-parser/TransformOrigin.js





var TransformOrigin_TransformOrigin = /*#__PURE__*/function () {
  function TransformOrigin() {
    classCallCheck_default()(this, TransformOrigin);
  }

  createClass_default()(TransformOrigin, null, [{
    key: "parseStyle",
    value:
    /**
     * 
     * transform-origin 속성 값 
     * 
     * transform-origin: 50% 
     * transform-origin: 50px 5px
     * transform-origin: 50px 5px 30px
     * 
     * @param {string} transformOrigin 
     */
    function parseStyle() {
      var transformOrigin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '50% 50% 0%';

      if (TransformOriginCache_TransformOriginCache.has(transformOrigin)) {
        return TransformOriginCache_TransformOriginCache.get(transformOrigin);
      }

      var origins = transformOrigin.trim().split(' ').filter(function (it) {
        return it.trim();
      });
      var parsedTransformOrigin = null;

      if (origins.length === 1) {
        parsedTransformOrigin = [origins[0], origins[0]].map(function (it) {
          return Length["a" /* Length */].parse(it);
        });
      } else {
        parsedTransformOrigin = origins.map(function (it) {
          return Length["a" /* Length */].parse(it);
        });
      }

      TransformOriginCache_TransformOriginCache.set(transformOrigin, parsedTransformOrigin);
      return parsedTransformOrigin;
    }
  }, {
    key: "scale",
    value: function scale(transformOrigin, width, height) {
      var parsedTransformOrigin = TransformOrigin.parseStyle(transformOrigin);
      var originX = parsedTransformOrigin[0].toPx(width).value;
      var originY = parsedTransformOrigin[1].toPx(height).value;
      var originZ = parsedTransformOrigin[2].value;
      return [originX, originY, originZ];
    }
  }, {
    key: "toPx",
    value: function toPx(transformOrigin, width, height) {
      var distance = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

      var _TransformOrigin$pars = TransformOrigin.parseStyle(transformOrigin),
          _TransformOrigin$pars2 = slicedToArray_default()(_TransformOrigin$pars, 3),
          transformOriginX = _TransformOrigin$pars2[0],
          transformOriginY = _TransformOrigin$pars2[1],
          transformOriginZ = _TransformOrigin$pars2[2];

      transformOriginX = transformOriginX.toPx(width);
      transformOriginY = transformOriginY.toPx(height);
      transformOriginZ = transformOriginZ.toPx(distance);
      return "".concat(transformOriginX, " ").concat(transformOriginY, " ").concat(transformOriginZ);
    }
  }]);

  return TransformOrigin;
}();

/***/ }),
/* 59 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BoxShadow; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(34);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var BoxShadow = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(BoxShadow, _Property);

  var _super = _createSuper(BoxShadow);

  function BoxShadow() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, BoxShadow);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(BoxShadow, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(BoxShadow.prototype), "getDefaultObject", this).call(this, {
        itemType: "box-shadow",
        inset: false,
        offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        spreadRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        color: "rgba(0, 0, 0, 1)"
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var json = this.json;
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(BoxShadow.prototype), "toCloneObject", this).call(this)), this.attrs('inset', 'offsetX', 'offsetY', 'blurRadius', 'spreadRadius', 'color'));
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(BoxShadow.prototype), "convert", this).call(this, json);
      json.offsetX = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.offsetX);
      json.offsetY = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.offsetY);
      json.blurRadius = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.blurRadius);
      json.spreadRadius = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.spreadRadius);
      return json;
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {
        "box-shadow": this.toString()
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return "".concat(json.inset ? "inset " : '').concat(json.offsetX, " ").concat(json.offsetY, " ").concat(json.blurRadius, " ").concat(json.spreadRadius, " ").concat(json.color);
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new BoxShadow(obj);
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(str) {
      var boxShadows = [];
      if (!str) return boxShadows;
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["convertMatches"])(str);
      boxShadows = results.str.split(",").filter(function (it) {
        return it.trim();
      }).map(function (shadow) {
        var values = shadow.split(" ");
        var insets = values.filter(function (it) {
          return it === "inset";
        });
        var colors = values.filter(function (it) {
          return it.includes("@");
        }).map(function (it) {
          return Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["reverseMatches"])(it, results.matches);
        });
        var numbers = values.filter(function (it) {
          return it !== "inset" && !it.includes("@");
        });
        return BoxShadow.parse({
          inset: !!insets.length,
          color: colors[0] || "rgba(0, 0, 0, 1)",
          offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[0] || "0px"),
          offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[1] || "0px"),
          blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[2] || "0px"),
          spreadRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[3] || "0px")
        });
      });
      return boxShadows;
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return BoxShadow.parse(it);
      }).join(', ');
    }
  }]);

  return BoxShadow;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__[/* Property */ "a"]);

/***/ }),
/* 60 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextShadow; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(34);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(21);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TextShadow = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(TextShadow, _Property);

  var _super = _createSuper(TextShadow);

  function TextShadow() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TextShadow);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(TextShadow, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(TextShadow.prototype), "getDefaultObject", this).call(this, {
        itemType: "text-shadow",
        offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        color: "rgba(0, 0, 0, 1)"
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(TextShadow.prototype), "toCloneObject", this).call(this)), this.attrs('offsetX', 'offsetY', 'blurRadius', 'color'));
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(TextShadow.prototype), "convert", this).call(this, json);
      json.offsetX = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.offsetX);
      json.offsetY = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.offsetY);
      json.blurRadius = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(json.blurRadius);
      return json;
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {
        "text-shadow": this.toString()
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return "".concat(json.offsetX, " ").concat(json.offsetY, " ").concat(json.blurRadius, " ").concat(json.color);
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new TextShadow(obj);
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(str) {
      var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_9__["convertMatches"])(str);
      var textShadows = results.str.split(",").filter(function (it) {
        return it.trim();
      }).map(function (shadow) {
        var values = shadow.split(" ");
        var colors = values.filter(function (it) {
          return it.includes("@");
        }).map(function (it) {
          return results.matches[+it.replace("@", "")].color;
        });
        var numbers = values.filter(function (it) {
          return !it.includes("@");
        });
        return TextShadow.parse({
          color: colors[0] || "rgba(0, 0, 0, 1)",
          offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[0] || "0px"),
          offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[1] || "0px"),
          blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(numbers[2] || "0px")
        });
      });
      return textShadows;
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return TextShadow.parse(it);
      }).join(', ');
    }
  }]);

  return TextShadow;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__[/* Property */ "a"]);

/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ EDIT_MODE_SELECTION; });
__webpack_require__.d(__webpack_exports__, "b", function() { return /* binding */ Editor; });

// UNUSED EXPORTS: EDITOR_ID, EDIT_MODE_ADD

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/editor/items/Item.js
var Item = __webpack_require__(35);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/base/BaseStore.js




var BaseStore_BaseStore = /*#__PURE__*/function () {
  function BaseStore(editor) {
    classCallCheck_default()(this, BaseStore);

    this.cachedCallback = {};
    this.callbacks = {};
    this.commandes = [];
    this.editor = editor;
  }

  createClass_default()(BaseStore, [{
    key: "getCallbacks",
    value: function getCallbacks(event) {
      if (!this.callbacks[event]) {
        this.callbacks[event] = [];
      }

      return this.callbacks[event];
    }
  }, {
    key: "setCallbacks",
    value: function setCallbacks(event) {
      var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      this.callbacks[event] = list;
    }
  }, {
    key: "debug",
    value: function debug() {
      if (this.editor && this.editor.config.get('debug')) {
        var _console;

        (_console = console).debug.apply(_console, arguments);
      }
    }
    /**
     * 메세지 등록 
     * 
     * @param {string} event 
     * @param {*} originalCallback 
     * @param {*} context 
     * @param {*} debounceDelay 
     * @param {*} throttleDelay 
     */

  }, {
    key: "on",
    value: function on(event, originalCallback, context) {
      var debounceDelay = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var throttleDelay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var enableSelfTrigger = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;
      var callback = originalCallback;
      if (debounceDelay > 0) callback = Object(func["debounce"])(originalCallback, debounceDelay);else if (throttleDelay > 0) callback = Object(func["throttle"])(originalCallback, throttleDelay);
      this.getCallbacks(event).push({
        event: event,
        callback: callback,
        context: context,
        originalCallback: originalCallback,
        enableSelfTrigger: enableSelfTrigger
      });
      this.debug('add message event', event, context.sourceName);
    }
    /**
     * 메세지 해제
     * 
     * @param {string} event 
     * @param {*} originalCallback 
     */

  }, {
    key: "off",
    value: function off(event, originalCallback) {
      this.debug('off message event', event);

      if (arguments.length == 1) {
        this.setCallbacks(event);
      } else if (arguments.length == 2) {
        this.setCallbacks(event, this.getCallbacks(event).filter(function (f) {
          return f.originalCallback !== originalCallback;
        }));
      }
    }
  }, {
    key: "offAll",
    value: function offAll(context) {
      var _this = this;

      Object.keys(this.callbacks).forEach(function (event) {
        _this.setCallbacks(event, _this.getCallbacks(event).filter(function (f) {
          return f.context !== context;
        }));
      });
      this.debug('off all message', context.sourceName);
    }
  }, {
    key: "getCachedCallbacks",
    value: function getCachedCallbacks(event) {
      return this.getCallbacks(event);
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(source, event) {
      var _this2 = this;

      for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
        args[_key - 2] = arguments[_key];
      }

      Promise.resolve().then(function () {
        var list = _this2.getCachedCallbacks(event);

        if (list) {
          for (var i = 0, len = list.length; i < len; i++) {
            var f = list[i]; // console.log(f.enableSelfTrigger, f);

            if (f.enableSelfTrigger || f.originalCallback.source !== source) {
              f.callback.apply(f.context, args);
            }
          }
        }
      });
    }
  }, {
    key: "nextSendMessage",
    value: function nextSendMessage(source, callback) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      Promise.resolve().then(function () {
        callback.apply(void 0, args);
      });
    }
  }, {
    key: "triggerMessage",
    value: function triggerMessage(source, event) {
      var _this3 = this;

      for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
        args[_key3 - 2] = arguments[_key3];
      }

      Promise.resolve().then(function () {
        var list = _this3.getCachedCallbacks(event);

        if (list) {
          for (var i = 0, len = list.length; i < len; i++) {
            var f = list[i];

            if (f.originalCallback.source === source) {
              f.callback.apply(f.context, args);
            }
          }
        } else {
          console.warn(event, ' is not valid event');
        }
      });
    }
  }, {
    key: "emit",
    value: function emit() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }

      this.sendMessage.apply(this, [this.source].concat(args));
    }
    /**
     * 마이크로 Task 를 실행 
     * 
     * @param {Function} callback  마이크로Task 형식으로 실행될 함수 
     */

  }, {
    key: "nextTick",
    value: function nextTick(callback) {
      this.nextSendMessage(this.source, callback);
    }
  }, {
    key: "trigger",
    value: function trigger() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }

      this.triggerMessage.apply(this, [this.source].concat(args));
    }
  }]);

  return BaseStore;
}();


// EXTERNAL MODULE: ./src/el/base/registElement.js
var base_registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/i18n/locales/index.js + 3 modules
var locales = __webpack_require__(78);

// CONCATENATED MODULE: ./src/el/i18n/index.js


var FALLBACK_LANG = 'en_US';
var i18n_i18n = {
  locales: locales["a" /* default */],
  get: function get(key) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : FALLBACK_LANG;
    var str = locales["a" /* default */][lang][key] || locales["a" /* default */][FALLBACK_LANG][key] || key || undefined;

    if (Object(func["isFunction"])(str)) {
      return str(params);
    } else {
      var newValue = str;

      if (key === newValue) {
        return key.split('.').pop();
      }

      Object(func["keyEach"])(params, function (key, value) {
        newValue = newValue.replace(new RegExp("{".concat(key, "}"), 'ig'), value);
      });
      return newValue;
    }
  },
  hasKey: function hasKey(key) {
    var lang = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FALLBACK_LANG;
    return !!(locales["a" /* default */][lang][key] || locales["a" /* default */][FALLBACK_LANG][key]);
  }
};
/* harmony default export */ var el_i18n = (i18n_i18n);
// CONCATENATED MODULE: ./src/el/editor/ui/theme/dark.js
/* harmony default export */ var dark = ({
  left_size: 250,
  left_max_size: 400,
  bottom_size: 150,
  bottom_max_size: 500,
  timeline_grid_font_color: '#ececec',
  timeline_line_color: 'red',
  timeline_timeview_bottom_color: 'black'
});
// CONCATENATED MODULE: ./src/el/editor/ui/theme/light.js
/* harmony default export */ var light = ({
  left_size: 250,
  left_max_size: 400,
  bottom_size: 150,
  bottom_max_size: 500,
  timeline_grid_font_color: 'black',
  timeline_line_color: '#4778d4',
  timeline_timeview_bottom_color: '#ececec'
});
// CONCATENATED MODULE: ./src/el/editor/ui/theme/toon.js
/* harmony default export */ var toon = ({
  left_size: 250,
  left_max_size: 400,
  bottom_size: 150,
  bottom_max_size: 500,
  timeline_grid_font_color: 'black',
  timeline_line_color: '#4778d4',
  timeline_timeview_bottom_color: '#ececec'
});
// CONCATENATED MODULE: ./src/el/editor/ui/theme/index.js



/* harmony default export */ var theme = ({
  dark: dark,
  light: light,
  toon: toon
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./src/el/editor/manager/TimelineSelectionManager.js





function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var TimelineSelectionManager_TimelineSelectionManager = /*#__PURE__*/function () {
  function TimelineSelectionManager(editor) {
    classCallCheck_default()(this, TimelineSelectionManager);

    this.$editor = editor;
    this.items = [];
    this.itemKeys = {};
  }

  createClass_default()(TimelineSelectionManager, [{
    key: "initialize",
    value: function initialize() {
      this.items = [];
      this.itemKeys = {};
    }
  }, {
    key: "currentProject",
    value: function currentProject(callback) {
      var project = this.$editor.selection.currentProject;

      if (project) {
        callback && callback(project);
      }
    }
  }, {
    key: "empty",
    value: function empty() {
      this.select();
    }
  }, {
    key: "each",
    value: function each(callback) {
      this.items.forEach(function (item, index) {
        callback && callback(item, index);
      });
    }
  }, {
    key: "refreshCache",
    value: function refreshCache(list) {
      var _this = this;

      this.items = list;
      this.itemKeys = {};
      this.items.forEach(function (it) {
        _this.itemKeys[it.id] = it;
      });
    }
  }, {
    key: "cachedList",
    value: function cachedList() {
      return this.items.map(function (it) {
        return _objectSpread({}, it);
      });
    }
  }, {
    key: "checked",
    value: function checked(id) {
      return !!this.itemKeys[id];
    }
  }, {
    key: "selectLayer",
    value: function selectLayer(layerId) {
      var _this2 = this;

      this.currentProject(function (project) {
        var list = project.getKeyframeListReturnArray().filter(function (it) {
          return it.layerId === layerId;
        });

        _this2.refreshCache(list);
      });
    }
  }, {
    key: "toggleLayerContainer",
    value: function toggleLayerContainer(animationId) {
      this.currentProject(function (project) {
        project.getSelectedTimeline().animations.filter(function (it) {
          return it.id === animationId;
        }).forEach(function (it) {
          it.collapsed = !it.collapsed;
        });
      });
    }
  }, {
    key: "selectProperty",
    value: function selectProperty(layerId, property) {
      var _this3 = this;

      this.currentProject(function (project) {
        var list = project.getKeyframeListReturnArray().filter(function (it) {
          return it.layerId === layerId && it.property === property;
        });

        _this3.refreshCache(list);
      });
    }
  }, {
    key: "select",
    value: function select() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.refreshCache(args);
    }
  }, {
    key: "selectBySearch",
    value: function selectBySearch(list, startTime, endTime) {
      var _this4 = this;

      this.currentProject(function (project) {
        var totalList = [];
        list.forEach(function (it) {
          var results = [];

          if (it.property) {
            var p = project.getTimelineProperty(it.layerId, it.property);
            results = p.keyframes.filter(function (keyframe) {
              return startTime <= keyframe.time && keyframe.time <= endTime;
            });
          } else {
            var p = project.getTimelineObject(it.layerId);
            p.properties.filter(function (property) {
              return property.property === it.property;
            }).forEach(function (property) {
              results.push.apply(results, property.keyframes.filter(function (keyframe) {
                return startTime <= keyframe.time && keyframe.time <= endTime;
              }));
            });
          }

          totalList.push.apply(totalList, results);
        });
        var uniqueOffset = {};
        totalList.forEach(function (it) {
          uniqueOffset[it.id] = it;
        });

        _this4.select.apply(_this4, toConsumableArray_default()(Object.values(uniqueOffset)));
      });
    }
  }, {
    key: "checkLayer",
    value: function checkLayer(layerId) {
      var _this5 = this;

      return Object.keys(this.itemKeys).some(function (key) {
        return _this5.itemKeys[key].layerId === layerId;
      });
    }
  }, {
    key: "checkProperty",
    value: function checkProperty(layerId, property) {
      var _this6 = this;

      return Object.keys(this.itemKeys).some(function (key) {
        return _this6.itemKeys[key].layerId === layerId && _this6.itemKeys[key].property === property;
      });
    }
  }]);

  return TimelineSelectionManager;
}();
// EXTERNAL MODULE: ./src/el/base/functions/collision.js
var collision = __webpack_require__(31);

// EXTERNAL MODULE: ./src/el/editor/items/MovableItem.js
var MovableItem = __webpack_require__(100);

// EXTERNAL MODULE: ./src/el/editor/items/Project.js + 45 modules
var Project = __webpack_require__(70);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/index.js + 7 modules
var esm = __webpack_require__(12);

// CONCATENATED MODULE: ./src/el/editor/manager/SelectionManager.js











function _traverse(obj, idList) {
  var results = [];
  obj.layers.length && obj.layers.forEach(function (it) {
    results.push.apply(results, _traverse(it, idList));
  });

  if (idList.id) {
    results.push(obj);
  } else if (idList.includes(obj.id)) {
    results.push(obj);
  }

  return results;
}

var SelectionManager_SelectionManager = /*#__PURE__*/function () {
  function SelectionManager(editor) {
    classCallCheck_default()(this, SelectionManager);

    /**
     * @property {Editor} $editor Editor
     */
    this.$editor = editor;
    /**
     * @property {Project} project Project Item 
     */

    this.project = null;
    /**
     * @property {Item[]} items Item List
     */

    this.items = [];
    this.itemKeys = {};
    this.hoverId = '';
    this.hoverItems = [];
    this.ids = [];
    this.idsString = '';
    this.colorsteps = [];
    this.cachedItemVerties = [];
    this.cachedArtBoardVerties = [];
    this.cachedVerties = Object(collision["e" /* rectToVerties */])(0, 0, 0, 0, '50% 50% 0px');
    this.selectionCamera = new MovableItem["a" /* MovableItem */]({
      parent: this.currentProject,
      x: Length["a" /* Length */].px(0),
      y: Length["a" /* Length */].px(0),
      width: Length["a" /* Length */].px(0),
      height: Length["a" /* Length */].px(0)
    });
  }

  createClass_default()(SelectionManager, [{
    key: "initialize",
    value: function initialize() {
      // this.colorsteps = []    
      this.items = [];
      this.itemKeys = {};
      this.ids = [];
      this.idsString = '';
      this.cachedItemVerties = {};
    } // snapshot() {
    //   const selection = new SelectionManager(this.$editor);
    //   selection.select(this.cachedItems);
    //   this.$editor.history.add('selection', 'selection', { selection })
    // }

    /**
     * get first item instance
     */

  }, {
    key: "current",
    get: function get() {
      return this.items[0];
    }
    /**
     * 
     * @returns {Project}
     */

  }, {
    key: "currentProject",
    get: function get() {
      return this.project;
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isEmpty",
    get: function get() {
      return !this.length;
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isOne",
    get: function get() {
      return this.length === 1;
    }
    /**
     * @returns {boolean}
     */

  }, {
    key: "isMany",
    get: function get() {
      return this.length > 1;
    }
  }, {
    key: "length",
    get: function get() {
      return this.items.length;
    }
  }, {
    key: "isLayoutItem",
    get: function get() {
      var _this$current;

      return (_this$current = this.current) === null || _this$current === void 0 ? void 0 : _this$current.isLayoutItem();
    }
    /**
     * snap to object 에 사용될 target item 리스트 
     * 
     * @returns {Item[]}
     */

  }, {
    key: "snapTargetLayers",
    get: function get() {
      var _this = this;

      if (!this.currentProject) return [];
      return this.currentProject.allLayers.filter(function (item) {
        // project item 은 제외 
        if (item.is('project')) return false;
        return !_this.check(item);
      });
    }
  }, {
    key: "snapTargetLayersWithSelection",
    get: function get() {
      if (!this.currentProject) return [];
      return this.currentProject.allLayers.filter(function (item) {
        // project item 은 제외 
        if (item.is('project')) return false;
        return true;
      });
    }
  }, {
    key: "selectedArtboards",
    get: function get() {
      return toConsumableArray_default()(new Set(this.items.map(function (it) {
        return it.artboard;
      })));
    }
  }, {
    key: "getRootItem",
    value: function getRootItem(current) {
      var rootItem = current;

      if (current && current.parent) {
        rootItem = current.parent;
      }

      return rootItem;
    }
  }, {
    key: "selectColorStep",
    value: function selectColorStep() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      this.colorsteps = args;
    }
  }, {
    key: "isSelectedColorStep",
    value: function isSelectedColorStep(id) {
      return this.colorsteps.includes(id);
    }
  }, {
    key: "selectProject",
    value: function selectProject(project) {
      this.project = project;
    }
  }, {
    key: "isRelative",
    get: function get() {
      var item = this.items[0] || {};
      return item.position === 'relative';
    }
  }, {
    key: "isSameIds",
    value: function isSameIds(newIds) {
      if (this.ids.length != newIds.length) {
        return false;
      } // 동일한 selection 을 가지고 있으면 더 이상 select 를 진행하지 않는다. 


      if (this.ids.filter(function (id) {
        return newIds.includes(id);
      }).length === this.ids.length) {
        return true;
      }

      return false;
    }
  }, {
    key: "select",
    value: function select() {
      var _this2 = this;

      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      var list = (args || []).filter(function (it) {
        return !it.lock && it.isAbsolute;
      }); // 부모, 자식간에 동시에 selection 이 되어 있으면 
      // 자식은 제외한다. 

      var newSelectedItems = list.filter(function (it) {
        return it.path.filter(function (element) {
          return list.includes(element);
        }).length < 2;
      });
      var newSelectedIds = newSelectedItems.map(function (it) {
        return it.id;
      }); // 동일한 selection 을 가지고 있으면 더 이상 select 를 진행하지 않는다. 

      if (this.isSameIds(newSelectedIds)) {
        return false;
      }

      this.items = newSelectedItems;
      this.itemKeys = {};
      this.items.forEach(function (it) {
        _this2.itemKeys[it.id] = it;
      });
      this.ids = Object.keys(this.itemKeys);
      this.ids.sort();
      this.idsString = this.ids.join(',');
      this.setRectCache();
      return true;
    }
  }, {
    key: "reselect",
    value: function reselect() {
      this.setRectCache();
    }
  }, {
    key: "check",
    value: function check(item) {
      return !!this.itemKeys[item.id];
    }
  }, {
    key: "get",
    value: function get(id) {
      return this.itemKeys[id];
    }
    /**
     * selection 상태를 비운다. 
     */

  }, {
    key: "empty",
    value: function empty() {
      this.select();
    }
    /**
     * id 기반으로 객체를 검색한다. 
     * id 가 없으면 현재 선택된 객체 리스트를 반환한다. 
     * 
     * @param {string[]|null} ids 
     * @returns {Item[]}
     */

  }, {
    key: "itemsByIds",
    value: function itemsByIds() {
      var ids = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var itemIdList = [];

      if (Object(func["isArray"])(ids)) {
        itemIdList = ids;
      } else if (Object(func["isString"])(ids) || Object(func["isObject"])(ids)) {
        itemIdList = [ids];
      }
      /**
       * 주어진 id 리스트가 있을 때 project 에 캐쉬된 item 을 먼저 조회 하도록 한다. 
       */


      if (itemIdList.length) {
        var project = this.project;
        var newItems = [];
        var expectIdList = [];
        itemIdList.forEach(function (id) {
          if (project.hasIndexItem(id)) {
            newItems.push(project.getIndexItem(id));
          } else {
            expectIdList.push(id);
          }
        });

        var searchItems = _traverse(this.project, expectIdList);

        searchItems.forEach(function (it) {
          project.addIndexItem(it);
        });
        newItems.push.apply(newItems, searchItems);
        return newItems;
      } else {
        return this.items;
      }
    }
  }, {
    key: "makeItemMap",
    value: function makeItemMap(attrs) {
      var itemMap = {};
      this.ids.forEach(function (id) {
        itemMap[id] = Object(func["clone"])(attrs);
      });
      return itemMap;
    }
    /**
     * id 로 아이템 선택하기 
     * 
     * @param {string} id 
     */

  }, {
    key: "selectById",
    value: function selectById(id) {
      if (id) {
        this.select.apply(this, toConsumableArray_default()(_traverse(this.project, id)));
      }
    }
  }, {
    key: "selectAfterCopy",
    value: function selectAfterCopy() {
      this.select.apply(this, toConsumableArray_default()(this.items.map(function (it) {
        return it.copy();
      })));
    }
  }, {
    key: "addById",
    value: function addById(id) {
      if (this.itemKeys[id]) return;
      this.select.apply(this, toConsumableArray_default()(this.items).concat(toConsumableArray_default()(_traverse(this.project, id))));
    }
    /**
     * 
     * id 로 선택된 객체 지우기 
     * 
     * @param {string|string[]} id 
     */

  }, {
    key: "removeById",
    value: function removeById(id) {
      var ids = id;

      if (Object(func["isString"])(id)) {
        ids = [id];
      }

      var filteredItems = this.items.filter(function (it) {
        return ids.includes(it.id) === false;
      });
      this.select.apply(this, toConsumableArray_default()(filteredItems));
    }
  }, {
    key: "toggleById",
    value: function toggleById(id) {
      if (this.itemKeys[id]) {
        this.removeById(id);
      } else {
        this.addById(id);
      }
    }
  }, {
    key: "getArtboardByPoint",
    value: function getArtboardByPoint(vec) {
      var selectedArtBoard = this.currentProject.artboards.find(function (artboard) {
        var artboardVerties = artboard.matrix.verties.filter(function (_, index) {
          return index < 4;
        });
        return Object(collision["c" /* polyPoint */])(artboardVerties, vec[0], vec[1]);
      });
      return selectedArtBoard;
    }
  }, {
    key: "changeArtBoard",
    value: function changeArtBoard() {
      var _this3 = this;

      var checkedParentChange = false;
      this.each(function (instance) {
        if (instance.is('artboard') === false) {
          var instanceVerties = instance.rectVerties(); // FIXME: 내가 속한 영역이 객체의 instance 의 artboard 안에 있으면 artboard 를 바꾸지 않는다. 

          if (instance.artboard) {
            var localArtboard = instance.artboard;
            var localArtboardVerties = localArtboard.rectVerties();
            var isInArtboard = Object(collision["c" /* polyPoint */])(localArtboardVerties, instanceVerties[0][0], instanceVerties[0][1]) || Object(collision["d" /* polyPoly */])(instanceVerties, localArtboardVerties); // 내가 여전히 나의 artboard 에 속해 있으면 변경하지 않는다. 

            if (isInArtboard) {
              return false;
            }
          }

          var selectedArtBoard = _this3.cachedArtBoardVerties.find(function (artboard) {
            var artboardVerties = artboard.matrix.verties.filter(function (_, index) {
              return index < 4;
            });
            return Object(collision["c" /* polyPoint */])(artboardVerties, instanceVerties[0][0], instanceVerties[0][1]) || Object(collision["d" /* polyPoly */])(instanceVerties, artboardVerties);
          });

          if (selectedArtBoard) {
            // 부모 artboard 가 다르면  artboard 를 교체한다.            
            if (selectedArtBoard.item !== instance.artboard) {
              selectedArtBoard.item.appendChildItem(instance);
              checkedParentChange = true;
            }
          } else {
            if (instance.artboard) {
              _this3.currentProject.appendChildItem(instance);

              checkedParentChange = true;
            }
          }
        }
      });
      return checkedParentChange;
    }
  }, {
    key: "doCache",
    value: function doCache() {
      this.items.forEach(function (item) {
        item.setCache();
      });
    }
  }, {
    key: "setRectCache",
    value: function setRectCache() {
      this.cachedVerties = this.verties;
      this.cachedItemVerties = this.items.map(function (it) {
        it.fakeParent = undefined;
        return it.matrix;
      });
      this.cachedArtBoardVerties = this.currentProject.artboards.map(function (item) {
        return {
          item: item,
          matrix: item.matrix
        };
      });
    }
  }, {
    key: "verties",
    get: function get() {
      if (this.isOne) {
        // 하나 일 때랑 
        return this.current.verties();
      } else {
        return this.rectVerties;
      }
    }
  }, {
    key: "selectionVerties",
    get: function get() {
      if (this.isOne) {
        // 하나 일 때랑 
        return this.current.selectionVerties();
      } else {
        return this.rectVerties;
      }
    }
  }, {
    key: "rectVerties",
    get: function get() {
      return Object(collision["b" /* itemsToRectVerties */])(this.items);
    }
    /**
     * Item Rect 만들기 
     * 멀티 selection 일 때만 사용하자 
     * 
     * @returns {ItemRect} 
     */

  }, {
    key: "itemRect",
    get: function get() {
      var verties = this.verties;
      return {
        x: Length["a" /* Length */].px(verties[0][0]),
        y: Length["a" /* Length */].px(verties[0][1]),
        width: Length["a" /* Length */].px(esm["d" /* vec3 */].distance(verties[0], verties[1])),
        height: Length["a" /* Length */].px(esm["d" /* vec3 */].distance(verties[0], verties[3]))
      };
    } // 객체 속성만 클론 
    // 부모, 자식은 클론하지 않음. 
    // 부모 자식은, 객체가 추가 삭제시만 필요 

  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var data = {};
      this.each(function (item) {
        data[item.id] = item.toCloneObject(false);
      });
      return data;
    }
  }, {
    key: "cloneValue",
    value: function cloneValue() {
      for (var _len3 = arguments.length, keys = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        keys[_key3] = arguments[_key3];
      }

      var data = {};
      this.each(function (item) {
        data[item.id] = {};
        keys.forEach(function (key) {
          data[item.id][key] = item[key];
        });
      });
      return data;
    }
  }, {
    key: "each",
    value: function each(callback) {
      if (Object(func["isFunction"])(callback)) {
        this.items.forEach(function (item, index) {
          callback(item);
        });
      }
    }
  }, {
    key: "map",
    value: function map(callback) {
      if (Object(func["isFunction"])(callback)) {
        return this.items.map(function (item, index) {
          return callback(item, index);
        });
      }

      return this.items;
    }
  }, {
    key: "reset",
    value: function reset(obj) {
      this.each(function (item) {
        return item.reset(obj);
      });
    }
  }, {
    key: "resetCallback",
    value: function resetCallback(callback) {
      this.each(function (item) {
        return item.reset(callback(item));
      });
    }
  }, {
    key: "resize",
    value: function resize() {
      this.each(function (item) {
        return item.resize();
      });
    }
  }, {
    key: "remove",
    value: function remove() {
      this.each(function (item) {
        return item.remove();
      });
      this.empty();
    }
  }, {
    key: "copy",
    value: function copy() {
      this.copyItems = this.items.map(function (item) {
        return item;
      });
    }
  }, {
    key: "paste",
    value: function paste() {
      this.select.apply(this, toConsumableArray_default()(this.copyItems.map(function (item) {
        return item.copy();
      })));
      this.copy();
    }
  }, {
    key: "isInParent",
    value: function isInParent(item) {
      var parentItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var prevItem = item;
      var parent = prevItem.parent;
      var hasParent = parentItems.includes(parent);

      while (!hasParent) {
        if (Object(func["isUndefined"])(parent)) break;
        prevItem = parent;
        parent = parent.parent;
        hasParent = parentItems.includes(parent);
      }

      return hasParent;
    }
    /**
     * 특정 위치가 selection 영역에 있는지 여부 체크 
     * 
     * @param {vec3} point 
     * @param {number} y 
     */

  }, {
    key: "hasPoint",
    value: function hasPoint(point) {
      if (this.isMany) {
        // 멀티 selection 일 때는  사각형 영역에서 체크 
        return Object(collision["c" /* polyPoint */])(this.rectVerties, point[0], point[1]);
      } else {
        return this.cachedItemVerties.some(function (it) {
          return Object(collision["c" /* polyPoint */])(it.verties, point[0], point[1]);
        });
      }
    }
  }, {
    key: "checkHover",
    value: function checkHover(itemOrId) {
      if (Object(func["isString"])(itemOrId)) {
        return this.hoverId === itemOrId;
      } else {
        return this.hoverItems.findIndex(function (it) {
          return it.id === itemOrId.id;
        }) > -1;
      }
    }
  }, {
    key: "setHoverId",
    value: function setHoverId(id) {
      var isChanged = false;

      if (!id || this.itemKeys[id]) {
        if (this.hoverId != '') {
          isChanged = true;
        }

        this.hoverId = '';
        this.hoverItems = [];
      } else if (this.cachedArtBoardVerties.find(function (it) {
        return it.item.id === id;
      })) {
        if (this.hoverId != '') {
          isChanged = true;
        }

        this.hoverId = '';
        this.hoverItems = [];
      } else {
        if (this.hoverId != id) {
          isChanged = true;
        }

        this.hoverId = id;
        this.hoverItems = this.itemsByIds([id]).filter(function (it) {
          return it.is('artboard') === false;
        });

        if (this.hoverItems.length === 0) {
          this.hoverId = '';
          isChanged = true;
        }
      }

      if (isChanged) {
        this.$editor.emit('changeHoverItem');
      }

      return isChanged;
    }
  }]);

  return SelectionManager;
}();
// EXTERNAL MODULE: ./src/el/editor/manager/ComponentManager.js
var ComponentManager = __webpack_require__(33);

// CONCATENATED MODULE: ./src/el/editor/commands/refreshElement.js
/**
 * refresh element command 
 * 
 * @param {Editor} editor - editor instance 
 * @param {Array} args - command parameters 
 */
function refreshElement(editor, current) {
  // 화면 사이즈 조정         
  editor.emit('refreshSelectionStyleView', current); // 화면 레이아웃 재정렬 

  editor.emit('refreshElementBoundSize', editor.selection.getRootItem(current));
}
// CONCATENATED MODULE: ./src/el/editor/commands/refreshProject.js
/**
 * refresh element command 
 * 
 * @param {Editor} editor - editor instance 
 * @param {Array} args - command parameters 
 */
function refreshProject(editor, current) {
  editor.emit('refreshStyleView', current, true);
}
// CONCATENATED MODULE: ./src/el/editor/commands/setAttribute.js


/* harmony default export */ var setAttribute = ({
  command: 'setAttribute',
  execute: function execute(editor) {
    var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    var ids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    editor.selection.itemsByIds(ids).forEach(function (item) {
      Object.keys(attrs).forEach(function (key) {
        var value = attrs[key];

        if (Object(func["isFunction"])(value)) {
          value = value(item);
        }

        item.reset(defineProperty_default()({}, key, value));
      }); // path 나 내부 요소가 크기가 정해져 있어야 하는 것들을 위해서 
      // 기본 모양에 대한 캐쉬를 적용한다. 

      item.setCache();
      editor.emit('refreshElement', item);
    });
  }
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// CONCATENATED MODULE: ./src/el/editor/commands/_doForceRefreshSelection.js
function _doForceRefreshSelection(editor) {
  editor.emit('noneSelectMenu');
  editor.nextTick(function () {
    editor.emit('refreshAll');
    editor.emit('refreshSelectionTool');
  });
}
// CONCATENATED MODULE: ./src/el/editor/commands/resizeArtBoard.js



function resizeArtBoard(editor) {
  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var current = editor.selection.current;

  if (current && current.is('artboard')) {
    if (!size.trim()) return;

    var _size$split = size.split('x'),
        _size$split2 = slicedToArray_default()(_size$split, 2),
        width = _size$split2[0],
        height = _size$split2[1];

    width = Length["a" /* Length */].px(+width);
    height = Length["a" /* Length */].px(+height);
    current.reset({
      width: width,
      height: height
    });
    editor.selection.select(current);

    _doForceRefreshSelection(editor);
  }
}
// EXTERNAL MODULE: ./src/el/editor/parser/PathParser.js
var PathParser = __webpack_require__(32);

// CONCATENATED MODULE: ./src/el/editor/commands/convertPath.js

function convertPath(editor, pathString) {
  var rect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var current = editor.selection.current; // clip path 가 path 일 때 
  // path 속성을 가지고 있을 때 

  if (current) {
    if (current.is('svg-path', 'svg-brush', 'svg-textpath')) {
      var d = pathString;

      if (rect) {
        var parser = new PathParser["a" /* default */](pathString);
        parser.scale(current.width.value / rect.width, current.height.value / rect.height);
        d = parser.d;
      }

      editor.command('setAttribute', 'set attribute -d', {
        d: d
      }, current);
    } else if (current['clip-path'].includes('path')) {
      var d = pathString;

      if (rect) {
        var parser = new PathParser["a" /* default */](pathString);
        parser.scale(current.width.value / rect.width, current.height.value / rect.height);
        d = parser.d;
      } // path string 을 저걸로 맞추기 


      editor.command('setAttribute', 'change clip path', {
        'clip-path': "path(".concat(d, ")")
      }, current);
    }
  }
}
// CONCATENATED MODULE: ./src/el/editor/commands/addImage.js
function addImage(editor) {
  var rect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var containerItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  editor.emit('newComponent', 'image', rect, true, containerItem);
}
// CONCATENATED MODULE: ./src/el/editor/commands/addVideo.js
function addVideo(editor) {
  var rect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var containerItem = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  editor.emit('newComponent', 'video', rect, true, containerItem);
}
// CONCATENATED MODULE: ./src/el/editor/commands/addArtBoard.js


function addArtBoard_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function addArtBoard_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { addArtBoard_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { addArtBoard_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/**
 * 
 * @param {Editor} editor 
 * @param {*} obj 
 * @param {vec3} [center=null] center를 지정하고 artboard 를 재배치 
 */

function addArtBoard(editor) {
  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var center = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var project = editor.selection.currentProject;

  if (!project) {
    project = editor.add(editor.createItem({
      itemType: 'project'
    }));
    editor.selection.selectProject(project);
  }

  var artboard = project.appendChildItem(editor.createItem(addArtBoard_objectSpread({
    itemType: 'artboard',
    x: Length["a" /* Length */].px(300),
    y: Length["a" /* Length */].px(200),
    width: Length["a" /* Length */].px(375),
    height: Length["a" /* Length */].px(667)
  }, obj)));

  if (center) {
    artboard.reset({
      x: Length["a" /* Length */].px(0),
      y: Length["a" /* Length */].px(0)
    });
    artboard.moveByCenter(center);
  }

  editor.selection.select(artboard);

  _doForceRefreshSelection(editor);
}
// CONCATENATED MODULE: ./src/el/editor/commands/addProject.js


function addProject_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function addProject_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { addProject_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { addProject_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }


function addProject(editor) {
  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var project = editor.add(editor.createItem(addProject_objectSpread({
    itemType: 'project'
  }, obj)));
  editor.selection.selectProject(project);

  _doForceRefreshSelection(editor);
}
// CONCATENATED MODULE: ./src/el/editor/commands/addLayer.js

function addLayer(editor, layer) {
  var rect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var isSelected = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var containerItem = arguments.length > 4 ? arguments[4] : undefined;

  if (!containerItem) {
    containerItem = editor.selection.current || editor.selection.currentProject;
  }

  if (containerItem) {
    if (!containerItem.is('project') && !containerItem.enableHasChildren()) {
      containerItem = containerItem.parent;
    }

    containerItem.appendChildItem(layer);

    if (isSelected) {
      editor.selection.select(layer);
    }

    _doForceRefreshSelection(editor, true, 10);
  }
}
// EXTERNAL MODULE: ./src/el/editor/parser/PathStringManager.js
var PathStringManager = __webpack_require__(45);

// CONCATENATED MODULE: ./src/el/editor/commands/newComponent.js


function newComponent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function newComponent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { newComponent_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { newComponent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/**
 * 
 * @param {Editor} editor 
 * @param {*} itemType 
 * @param {*} obj 
 * @param {*} isSelected 
 * @param {Item} [containerItem=undefined]  상위 부모 객체 
 */

function newComponent(editor, itemType, obj) {
  var isSelected = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
  var containerItem = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;

  if (itemType === 'svg-textpath') {
    obj = newComponent_objectSpread(newComponent_objectSpread({}, obj), {}, {
      'font-size': Length["a" /* Length */].parse(obj.height),
      textLength: '100%',
      d: PathStringManager["a" /* default */].makeLine(0, obj.height.value, obj.width.value, obj.height.value)
    });
  } else if (itemType === 'svg-circle') {
    itemType = 'svg-path';
    obj = newComponent_objectSpread(newComponent_objectSpread({}, obj), {}, {
      'background-color': undefined,
      fill: "#C4C4C4",
      d: PathStringManager["a" /* default */].makeCircle(0, 0, obj.width.value, obj.height.value)
    });
  } else if (itemType === 'svg-rect') {
    itemType = 'svg-path';
    obj = newComponent_objectSpread(newComponent_objectSpread({}, obj), {}, {
      'background-color': undefined,
      fill: "#C4C4C4",
      d: PathStringManager["a" /* default */].makeRect(0, 0, obj.width.value, obj.height.value)
    });
  } else if (itemType === 'text') {
    obj = newComponent_objectSpread({
      width: Length["a" /* Length */].px(300),
      height: Length["a" /* Length */].px(50)
    }, obj);
  } else if (itemType === 'artboard') {
    obj = newComponent_objectSpread(newComponent_objectSpread({}, obj), {}, {
      'background-color': 'white'
    });
  }

  editor.command('addLayer', "add layer - ".concat(itemType), editor.createItem(newComponent_objectSpread({
    itemType: itemType
  }, obj)), obj, isSelected, containerItem);
  editor.changeMode(EDIT_MODE_SELECTION);
  editor.emit('afterChangeMode');
}
// CONCATENATED MODULE: ./src/el/editor/commands/addComponentType.js
/**
 * @deprecated
 */
function addComponentType(editor, type) {
  // editor.emit('hideSubEditor');
  editor.changeAddType(type);
  editor.emit('afterChangeMode');
  editor.emit('addStatusBarMessage', "Drag if you want to create ".concat(type, " layer"));
}
// CONCATENATED MODULE: ./src/el/editor/commands/clipboard.copy.js
/* harmony default export */ var clipboard_copy = ({
  command: 'clipboard.copy',
  title: 'Copy',
  description: 'Copy',
  execute: function execute(editor, obj) {
    editor.selection.copy();
  }
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(18);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(17);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// CONCATENATED MODULE: ./src/el/editor/commands/clipboard.paste.js


/* harmony default export */ var clipboard_paste = ({
  command: 'clipboard.paste',
  execute: function () {
    var _execute = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(editor, event) {
      var text;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(editor.selection.length && editor.selection.copyItems.length)) {
                _context.next = 5;
                break;
              }

              editor.selection.paste();
              editor.emit('refreshAll');
              _context.next = 9;
              break;

            case 5:
              _context.next = 7;
              return navigator.clipboard.readText();

            case 7:
              text = _context.sent;

              if (text) {
                editor.emit('convertPasteText', text);
              }

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function execute(_x, _x2) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }()
});
// CONCATENATED MODULE: ./src/el/editor/commands/switchTheme.js
/* harmony default export */ var switchTheme = ({
  command: 'switchTheme',
  execute: function execute(editor, theme) {
    editor.changeTheme(theme);
    editor.emit('changeTheme');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/showExportView.js
/* harmony default export */ var showExportView = ({
  command: 'showExportView',
  execute: function execute(editor) {
    editor.emit('showExportWindow');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateScale.js

/* harmony default export */ var updateScale = ({
  command: 'updateScale',

  /**
   * scale 설정하기 
   * 
   * @param {Editor} editor 
   * @param {number} scale [0.5...5]
   */
  execute: function execute(editor, scale) {
    var oldScale = editor.viewport.scale;
    editor.viewport.setScale(scale);
    editor.emit('updateViewport', scale, oldScale);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/fileDropItems.js
/* harmony default export */ var fileDropItems = ({
  command: 'fileDropItems',
  execute: function execute(editor) {
    var items = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    editor.emit('updateResource', items);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateResource.js
/* harmony default export */ var updateResource = ({
  command: 'updateResource',
  execute: function execute(editor, items) {
    items.forEach(function (item) {
      switch (item.type) {
        case 'image/svg+xml':
        case 'image/png':
        case 'image/gif':
        case 'image/jpg':
        case 'image/jpeg':
          editor.emit('updateImage', item);
          break;

        case 'text/plain':
        case 'text/html':
          editor.emit('addText', {
            content: item.data
          }); // this.trigger('update.string', item);

          break;

        case 'text/uri-list':
          editor.emit('updateUriList', item);
          break;
      }
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateImage.js

/* harmony default export */ var updateImage = ({
  command: 'updateImage',
  execute: function execute(editor, imageFileOrBlob, rect, containerItem) {
    var reader = new FileReader();

    reader.onload = function (e) {
      var datauri = e.target.result;
      var local = URL.createObjectURL(imageFileOrBlob);
      editor.emit('addImageAssetItem', {
        id: Object(math["uuidShort"])(),
        type: imageFileOrBlob.type,
        name: imageFileOrBlob.name,
        original: datauri,
        local: local
      }, rect, containerItem);
    };

    reader.readAsDataURL(imageFileOrBlob);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateVideo.js

/* harmony default export */ var updateVideo = ({
  command: 'updateVideo',
  execute: function execute(editor, item, rect) {
    var containerItem = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var reader = new FileReader();

    reader.onload = function (e) {
      var datauri = e.target.result;
      var local = URL.createObjectURL(item);
      editor.emit('addVideoAssetItem', {
        id: Object(math["uuidShort"])(),
        type: item.type,
        name: item.name,
        original: datauri,
        local: local
      }, rect, containerItem);
    };

    reader.readAsDataURL(item);
  }
});
// CONCATENATED MODULE: ./src/el/editor/util/loadOriginalImage.js

function loadOriginalImage(obj, callback) {
  var img = new Image();

  img.onload = function () {
    var info = {
      id: obj.id,
      local: obj.local,
      naturalWidth: Length["a" /* Length */].px(img.naturalWidth),
      naturalHeight: Length["a" /* Length */].px(img.naturalHeight),
      width: Length["a" /* Length */].px(img.naturalWidth),
      height: Length["a" /* Length */].px(img.naturalHeight)
    };
    callback && callback(info, img);
  };

  img.onerror = function (e) {
    console.log(e, e.message);
  };

  img.src = obj.local;
}
// CONCATENATED MODULE: ./src/el/editor/commands/addImageAssetItem.js


function addImageAssetItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function addImageAssetItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { addImageAssetItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { addImageAssetItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/* harmony default export */ var addImageAssetItem = ({
  command: 'addImageAssetItem',
  execute: function execute(editor, imageObject) {
    var rect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var containerItem = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var project = editor.selection.currentProject;

    if (project) {
      // append image asset 
      project.createImage(imageObject);
      editor.emit('addImageAsset'); // convert data or blob to local url 

      loadOriginalImage(imageObject, function (info) {
        // width 랑 같은 비율로 맞추기 
        var rate = rect.width.value / info.width.value;
        var width = rect.width;
        var height = Length["a" /* Length */].px(info.height.value * rate);
        editor.emit('addImage', addImageAssetItem_objectSpread(addImageAssetItem_objectSpread(addImageAssetItem_objectSpread({
          src: imageObject.id
        }, info), rect), {}, {
          width: width,
          height: height
        }), containerItem);
        editor.changeMode(EDIT_MODE_SELECTION);
        editor.emit('afterChangeMode');
      });
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/util/loadOriginalVideo.js

function loadOriginalVideo(obj, callback) {
  var video = document.createElement('video');

  video.onloadeddata = function () {
    var info = {
      local: obj.local,
      naturalWidth: Length["a" /* Length */].px(video.videoWidth),
      naturalHeight: Length["a" /* Length */].px(video.videoHeight),
      width: Length["a" /* Length */].px(video.videoWidth),
      height: Length["a" /* Length */].px(video.videoHeight),
      duration: video.duration,
      playTime: "0:1:".concat(video.duration),
      volume: video.volume,
      muted: video.muted,
      placebackRate: video.playbackRate
    };
    callback && callback(info, video);
  };

  video.src = obj.local;
}
// CONCATENATED MODULE: ./src/el/editor/commands/addVideoAssetItem.js


function addVideoAssetItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function addVideoAssetItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { addVideoAssetItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { addVideoAssetItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ var addVideoAssetItem = ({
  command: 'addVideoAssetItem',
  execute: function execute(editor, videoObject) {
    var rect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var containerItem = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    var project = editor.selection.currentProject;

    if (project) {
      // append image asset 
      project.createVideo(videoObject);
      editor.emit('addVideoAsset'); // convert data or blob to local url 

      loadOriginalVideo(videoObject, function (info) {
        editor.emit('addVideo', addVideoAssetItem_objectSpread(addVideoAssetItem_objectSpread({
          src: videoObject.id
        }, info), rect), containerItem);
        editor.changeMode(EDIT_MODE_SELECTION);
        editor.emit('afterChangeMode');
      });
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/dropImageUrl.js


function dropImageUrl_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function dropImageUrl_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { dropImageUrl_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { dropImageUrl_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }



/* harmony default export */ var dropImageUrl = ({
  command: 'dropImageUrl',
  execute: function execute(editor, imageUrl) {
    // convert data or blob to local url 
    loadOriginalImage({
      local: imageUrl
    }, function (info) {
      editor.emit('addImage', dropImageUrl_objectSpread({
        src: info.local
      }, info));
      editor.changeMode(EDIT_MODE_SELECTION);
      editor.emit('afterChangeMode');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/addSVGFilterAssetItem.js

/* harmony default export */ var addSVGFilterAssetItem = ({
  command: 'addSVGFilterAssetItem',
  execute: function execute(editor, callback) {
    var project = editor.selection.currentProject;

    if (project) {
      var id = Object(math["uuidShort"])();
      var index = project.createSVGFilter({
        id: id,
        filters: []
      });
      callback && callback(index, id);
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateImageAssetItem.js


/* harmony default export */ var updateImageAssetItem = ({
  command: 'updateImageAssetItem',
  execute: function execute(editor, item, callback) {
    var reader = new FileReader();

    reader.onload = function (e) {
      var datauri = e.target.result;
      var local = URL.createObjectURL(item);
      var project = editor.selection.currentProject;

      if (project) {
        // append image asset 
        var image = project.createImage({
          id: Object(math["uuidShort"])(),
          type: item.type,
          name: item.name,
          original: datauri,
          local: local
        });
        editor.emit('addImageAsset');
        Object(func["isFunction"])(callback) && callback(image.id);
      }
    };

    reader.readAsDataURL(item);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateVideoAssetItem.js


/* harmony default export */ var updateVideoAssetItem = ({
  command: 'updateVideoAssetItem',
  execute: function execute(editor, item, callback) {
    var reader = new FileReader();

    reader.onload = function (e) {
      var datauri = e.target.result;
      var local = URL.createObjectURL(item);
      var project = editor.selection.currentProject;

      if (project) {
        // append image asset 
        project.createVideo({
          id: Object(math["uuidShort"])(),
          type: item.type,
          name: item.name,
          original: datauri,
          local: local
        });
        editor.emit('addVideoAsset');
        Object(func["isFunction"])(callback) && callback(local);
      }
    };

    reader.readAsDataURL(item);
  }
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toArray.js
var toArray = __webpack_require__(46);
var toArray_default = /*#__PURE__*/__webpack_require__.n(toArray);

// CONCATENATED MODULE: ./src/el/editor/parser/AssetParser.js





var AssetParser_AssetParser = /*#__PURE__*/function () {
  function AssetParser() {
    classCallCheck_default()(this, AssetParser);
  }

  createClass_default()(AssetParser, null, [{
    key: "parse",
    value: function parse(datauri) {
      var enableParselocal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var _datauri$split = datauri.split('data:'),
          _datauri$split2 = slicedToArray_default()(_datauri$split, 2),
          _ = _datauri$split2[0],
          data = _datauri$split2[1];

      var _data$split = data.split(','),
          _data$split2 = toArray_default()(_data$split),
          mediaType = _data$split2[0],
          content = _data$split2.slice(1);

      var _mediaType$split = mediaType.split(';'),
          _mediaType$split2 = slicedToArray_default()(_mediaType$split, 2),
          mimeType = _mediaType$split2[0],
          encoding = _mediaType$split2[1];

      content = content.join(',');
      return {
        mimeType: mimeType,
        local: enableParselocal && AssetParser.getLink(mimeType, encoding, content)
      };
    }
  }, {
    key: "getLink",
    value: function getLink(mimeType, encoding, content) {
      if (encoding === 'base64') {
        var binary = atob(content);
        var len = binary.length;
        var unit8Array = new Uint8Array(len);

        for (var i = 0; i < len; i++) {
          unit8Array[i] = binary.charCodeAt(i);
        }

        var blob = new Blob([unit8Array], {
          type: mimeType
        });
        return URL.createObjectURL(blob);
      }

      return '';
    }
  }]);

  return AssetParser;
}();


// CONCATENATED MODULE: ./src/el/editor/commands/updateUriList.js


/* harmony default export */ var updateUriList = ({
  command: 'updateUriList',
  execute: function execute(editor, item) {
    var datauri = item.data;

    if (datauri.indexOf('data:') > -1) {
      var info = AssetParser_AssetParser.parse(datauri, true); // datauri 그대로 정의 될 때 

      switch (info.mimeType) {
        case 'image/png':
        case 'image/gif':
        case 'image/jpg':
        case 'image/jpeg':
          editor.emit('addImageAssetItem', {
            id: Object(math["uuidShort"])(),
            type: info.mimeType,
            name: '',
            original: datauri,
            local: info.local
          });
          break;
      }
    } else {
      // url 로 정의 될 때 
      var ext = item.data.split('.').pop();
      var name = item.data.split('/').pop();

      switch (ext) {
        case 'png':
        case 'jpg':
        case 'gif':
        case 'svg':
          editor.emit('addImageAssetItem', {
            id: Object(math["uuidShort"])(),
            type: 'image/' + ext,
            name: name,
            original: item.data,
            local: item.data
          });
          break;
      }
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/util/downloadFile.js
function downloadFile(datauri) {
  var filename = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'easylogic.json';
  var a = document.createElement('a');
  a.href = datauri;
  a.download = filename;
  a.click();
}
// CONCATENATED MODULE: ./src/el/editor/commands/downloadJSON.js

/* harmony default export */ var downloadJSON = ({
  command: 'downloadJSON',
  execute: function execute(editor, filename) {
    var json = JSON.stringify(editor.projects);
    var datauri = 'data:application/json;base64,' + window.btoa(json);
    downloadFile(datauri, filename || 'easylogic.json');
  }
});
// EXTERNAL MODULE: ./src/el/editor/manager/ExportManager.js + 2 modules
var ExportManager = __webpack_require__(71);

// CONCATENATED MODULE: ./src/el/editor/commands/downloadSVG.js


/* harmony default export */ var downloadSVG = ({
  command: 'downloadSVG',
  execute: function execute(editor) {
    var item = editor.selection.current;

    if (item) {
      var svgString = ExportManager["a" /* default */].generateSVG(editor, item).trim();
      var datauri = 'data:image/svg+xml;base64,' + window.btoa(svgString);
      var filename = item.id;
      downloadFile(datauri, filename);
    }
  }
});
// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// CONCATENATED MODULE: ./src/el/editor/util/createImagePng.js

function createImagePng(img, callback) {
  var imageType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'image/png';
  var canvas = Dom["a" /* default */].create('canvas');
  var width = img.width,
      height = img.height;
  canvas.resize({
    width: width,
    height: height
  });
  canvas.drawImage(img);
  callback && callback(canvas.toDataURL(imageType));
}
// CONCATENATED MODULE: ./src/el/editor/commands/downloadPNG.js




/* harmony default export */ var downloadPNG = ({
  command: 'downloadPNG',
  execute: function execute(editor) {
    var callbackCommand = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var item = editor.selection.current;

    if (item) {
      var svgString = ExportManager["a" /* default */].generateSVG(editor, item).trim();
      var datauri = 'data:image/svg+xml;base64,' + window.btoa(svgString);
      var filename = item.id;
      loadOriginalImage({
        local: datauri
      }, function (info, img) {
        createImagePng(img, function (pngDataUri) {
          downloadFile(pngDataUri, filename);

          if (callbackCommand) {
            editor.emit(callbackCommand, pngDataUri);
          }
        });
      });
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/saveJSON.js
/* harmony default export */ var saveJSON = ({
  command: 'saveJSON',
  execute: function execute(editor) {
    editor.saveResource('projects', editor.projects);
    editor.emit('notify', 'alert', 'Save', 'Save the content on localStorage', 2000);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/load.json.js


/* harmony default export */ var load_json = ({
  command: 'load.json',

  /**
   * 
   * @param {Editor} editor 
   * @param {*} json 
   */
  execute: function execute(editor, json) {
    json = json || editor.loadResource('projects', []); // 값이 아무것도 없을 때 project 를 설정해준다. 

    if (json.length === 0) {
      json = [{
        itemType: 'project',
        layers: [{
          itemType: 'artboard',
          name: "New ArtBoard",
          x: '300px',
          y: '200px',
          width: '375px',
          height: '667px',
          'background-color': 'white',
          layer: []
        }]
      }];
    }

    var projects = json.map(function (p) {
      return editor.createItem(p);
    });
    projects.forEach(function (p) {
      p.artboards.forEach(function (artboard) {
        p.selectTimeline(artboard.id);
      });
    });

    if (projects.length) {
      var project = projects[0];
      editor.selection.selectProject(project);
      editor.load(projects);

      _doForceRefreshSelection(editor);
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/setLocale.js
/* harmony default export */ var setLocale = ({
  command: 'setLocale',
  execute: function execute(editor, locale) {
    editor.setLocale(locale);
    editor.emit('changed.locale');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/_currentProject.js

/**
 * 
 * @param {Editor} editor 
 * @param {*} callback 
 */

function _currentProject(editor, callback) {
  var project = editor.selection.currentProject;

  if (project) {
    var timeline = project.getSelectedTimeline();
    callback && callback(project, timeline);
  }
}
// CONCATENATED MODULE: ./src/el/editor/commands/addTimelineProperty.js


/* harmony default export */ var addTimelineProperty = ({
  command: 'addTimelineProperty',
  execute: function execute(editor, layerList) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
      timing: 'linear'
    };

    _currentProject(editor, function (project, timeline) {
      var _editor$timeline;

      if (Object(func["isArray"])(layerList) === false) {
        layerList = [layerList];
      }

      var list = [];
      layerList.forEach(function (layerId) {
        var keyframeObj = {
          layerId: layerId,
          property: options.property,
          value: options.value + "",
          timing: options.timing,
          editor: options.editor
        };
        var obj = project.addTimelineKeyframe(keyframeObj);

        if (obj) {
          list.push(obj);
        }
      });

      (_editor$timeline = editor.timeline).select.apply(_editor$timeline, list);

      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/refreshSelectedOffset.js
/* harmony default export */ var refreshSelectedOffset = ({
  command: 'refreshSelectedOffset',
  execute: function execute(editor) {
    var offset = editor.timeline.items[0];

    if (offset) {
      editor.emit('refreshOffsetValue', offset);
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/setTimelineOffset.js

/* harmony default export */ var setTimelineOffset = ({
  command: 'setTimelineOffset',
  debounce: 100,
  execute: function execute(editor, obj) {
    _currentProject(editor, function (project, timeline) {
      project.setTimelineKeyframeOffsetValue(obj.layerId, obj.property, obj.id, obj.value, obj.timing, obj.time);
      editor.emit('refreshTimeline');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/addTimelineCurrentProperty.js

/* harmony default export */ var addTimelineCurrentProperty = ({
  command: 'addTimelineCurrentProperty',
  execute: function execute(editor) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      timing: 'linear'
    };

    _currentProject(editor, function (project, timeline) {
      var _editor$timeline;

      var list = [];
      editor.selection.each(function (item) {
        var keyframeObj = {
          layerId: item.id,
          property: options.property,
          value: item[options.property] + "",
          timing: options.timing,
          editor: options.editor
        };
        var obj = project.addTimelineKeyframe(keyframeObj);

        if (obj) {
          list.push(obj);
        }
      });

      (_editor$timeline = editor.timeline).select.apply(_editor$timeline, list);

      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/removeTimelineProperty.js

/* harmony default export */ var removeTimelineProperty = ({
  command: 'removeTimelineProperty',
  execute: function execute(editor, layerId, property) {
    _currentProject(editor, function (project, timeline) {
      project.removeTimelineProperty(layerId, property);
      editor.timeline.empty();
      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/deleteTimelineKeyframe.js

/* harmony default export */ var deleteTimelineKeyframe = ({
  command: 'deleteTimelineKeyframe',
  execute: function execute(editor) {
    _currentProject(editor, function (project, timeline) {
      editor.timeline.each(function (item) {
        project.deleteTimelineKeyframe(item.layerId, item.property, item.id);
      });
      editor.timeline.empty();
      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/selectTimelineItem.js

/* harmony default export */ var selectTimelineItem = ({
  command: 'selectTimelineItem',
  execute: function execute(editor, selectedId) {
    _currentProject(editor, function (project, timeline) {
      project.selectTimeline(selectedId);
      editor.emit('refreshTimeline');
      editor.emit('selectTimeline');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/removeTimeline.js

/* harmony default export */ var removeTimeline = ({
  command: 'removeTimeline',
  execute: function execute(editor, layerId) {
    _currentProject(editor, function (project, timeline) {
      project.removeTimeline(layerId);
      editor.timeline.empty();
      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/removeAnimationItem.js

/* harmony default export */ var removeAnimationItem = ({
  command: 'removeAnimationItem',
  execute: function execute(editor, id) {
    _currentProject(editor, function (project, timeline) {
      project.removeAnimation(id);
      editor.timeline.empty();
      editor.emit('refreshTimeline');
      editor.emit('removeAnimation');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/addTimelineKeyframe.js

/* harmony default export */ var addTimelineKeyframe = ({
  command: 'addTimelineKeyframe',
  execute: function execute(editor) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      timing: 'linear'
    };

    _currentProject(editor, function (project, timeline) {
      var item = project.searchById(options.layerId);
      var keyframeObj = {
        layerId: options.layerId,
        property: options.property,
        time: options.time,
        value: item[options.property] + "",
        timing: options.timing,
        editor: options.editor
      };
      var obj = project.addTimelineKeyframe(keyframeObj);
      editor.timeline.select(obj);
      editor.emit('refreshTimeline');
      editor.emit('refreshSelectedOffset');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/copyTimelineProperty.js

/* harmony default export */ var copyTimelineProperty = ({
  command: 'copyTimelineProperty',
  execute: function execute(editor, layerId, property) {
    var newTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

    _currentProject(editor, function (project, timeline) {
      project.copyTimelineKeyframe(layerId, property, newTime);
      editor.emit('refreshTimeline');
    });
  }
});
// EXTERNAL MODULE: ./src/el/base/functions/time.js
var time = __webpack_require__(29);

// CONCATENATED MODULE: ./src/el/editor/commands/playTimelineItem.js


/* harmony default export */ var playTimelineItem = ({
  command: 'playTimelineItem',
  description: 'Play button action',
  execute: function execute(editor) {
    var speed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    var iterationCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'normal';
    editor.selection.empty();
    editor.emit('refreshSelection');
    editor.changeMode('play');
    editor.emit('afterChangeMode');

    _currentProject(editor, function (project, timeline) {
      var lastTime = project.getSelectedTimelineLastTime();

      if (editor.timer) {
        editor.timer.stop();
      } else {
        editor.timer = Object(time["b" /* makeTimer */])({
          elapsed: timeline.currentTime * 1000,
          speed: speed,
          duration: lastTime * 1000,
          iterationCount: iterationCount,
          direction: direction
        });
      }

      editor.timer.play({
        duration: lastTime * 1000,
        elapsed: timeline.currentTime * 1000,
        speed: speed,
        iterationCount: iterationCount,
        direction: direction,
        tick: function tick(elapsed, timer) {
          // console.log('tick', timecode(timeline.fps, elapsed / 1000), elapsed, elapsed/1000);
          project.seek(Object(time["d" /* timecode */])(timeline.fps, elapsed / 1000));
          editor.emit('playTimeline');
        },
        last: function last(elapsed, timer) {
          // console.log('last', timecode(timeline.fps, elapsed / 1000), elapsed, elapsed/1000);
          project.seek(Object(time["d" /* timecode */])(timeline.fps, elapsed / 1000));
          editor.emit('playTimeline');
          editor.nextTick(function () {
            editor.emit('stopTimeline'); // project.setTimelineCurrentTime(0);

            editor.changeMode('SELECTION');
            editor.emit('afterChangeMode');
          });
        },
        stop: function stop(elapsed, timer) {
          // console.log('stop', timecode(timeline.fps, elapsed / 1000), elapsed, elapsed/1000);                    
          project.stop(Object(time["d" /* timecode */])(timeline.fps, elapsed / 1000));
          editor.emit('stopTimeline'); // project.setTimelineCurrentTime(0);

          editor.changeMode('SELECTION');
          editor.emit('afterChangeMode');
        }
      });
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/prevTimelineItem.js


/* harmony default export */ var prevTimelineItem = ({
  command: 'prevTimelineItem',
  execute: function execute(editor) {
    _currentProject(editor, function (project, timeline) {
      var prevTime = project.getSelectedTimelinePrevTime();
      project.setTimelineCurrentTime(Object(time["d" /* timecode */])(timeline.fps, prevTime));
      project.seek();
      editor.emit('playTimeline');
      editor.changeMode('SELECTION');
      editor.emit('afterChangeMode');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/firstTimelineItem.js


/* harmony default export */ var firstTimelineItem = ({
  command: 'firstTimelineItem',
  execute: function execute(editor) {
    _currentProject(editor, function (project, timeline) {
      var firstTime = project.getSelectedTimelineFirstTime();
      project.setTimelineCurrentTime(Object(time["d" /* timecode */])(timeline.fps, firstTime));
      project.seek();
      editor.emit('playTimeline');
      editor.changeMode('SELECTION');
      editor.emit('afterChangeMode');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/nextTimelineItem.js


/* harmony default export */ var nextTimelineItem = ({
  command: 'nextTimelineItem',
  execute: function execute(editor) {
    _currentProject(editor, function (project, timeline) {
      var nextTime = project.getSelectedTimelineNextTime();
      project.setTimelineCurrentTime(Object(time["d" /* timecode */])(timeline.fps, nextTime));
      project.seek();
      editor.emit('playTimeline');
      editor.changeMode('SELECTION');
      editor.emit('afterChangeMode');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/lastTimelineItem.js


/* harmony default export */ var lastTimelineItem = ({
  command: 'lastTimelineItem',
  execute: function execute(editor) {
    _currentProject(editor, function (project, timeline) {
      var lastTime = project.getSelectedTimelineLastTime();
      project.setTimelineCurrentTime(Object(time["d" /* timecode */])(timeline.fps, lastTime));
      project.seek();
      editor.emit('playTimeline');
      editor.changeMode('SELECTION');
      editor.emit('afterChangeMode');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/pauseTimelineItem.js
/* harmony default export */ var pauseTimelineItem = ({
  command: 'pauseTimelineItem',
  execute: function execute(editor) {
    if (editor.timer) {
      editor.timer.stop();
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/addTimelineItem.js

/* harmony default export */ var addTimelineItem = ({
  command: 'addTimelineItem',
  execute: function execute(editor, layerId) {
    _currentProject(editor, function (project, timeline) {
      if (layerId) {
        project.addTimelineLayer(layerId);
      } else {
        project.addTimeline();
      }

      editor.emit('refreshTimeline');
      editor.emit('addTimeline');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/drop.asset.js



/* harmony default export */ var drop_asset = ({
  command: 'drop.asset',
  execute: function () {
    var _execute = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(editor, obj) {
      var id,
          artboardData,
          componentData,
          _args = arguments;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              id = _args.length > 2 && _args[2] !== undefined ? _args[2] : null;

              if (!obj.color) {
                _context.next = 5;
                break;
              }

              editor.emit('addBackgroundColor', obj.color, id);
              _context.next = 29;
              break;

            case 5:
              if (!obj.gradient) {
                _context.next = 9;
                break;
              }

              editor.emit('addBackgroundImageGradient', obj.gradient, id);
              _context.next = 29;
              break;

            case 9:
              if (!obj.pattern) {
                _context.next = 13;
                break;
              }

              editor.emit('addBackgroundImagePattern', obj.pattern, id);
              _context.next = 29;
              break;

            case 13:
              if (!obj.imageUrl) {
                _context.next = 17;
                break;
              }

              editor.emit('addBackgroundImageAsset', obj.imageUrl, id);
              _context.next = 29;
              break;

            case 17:
              if (!obj.artboard) {
                _context.next = 24;
                break;
              }

              _context.next = 20;
              return editor.storageManager.getArtBoard(obj.artboard.id);

            case 20:
              artboardData = _context.sent;

              if (artboardData) {
                editor.emit('addArtBoard', artboardData, obj.artboard.center);
              }

              _context.next = 29;
              break;

            case 24:
              if (!obj.customComponent) {
                _context.next = 29;
                break;
              }

              _context.next = 27;
              return editor.storageManager.getCustomComponent(obj.customComponent.id);

            case 27:
              componentData = _context.sent;

              if (componentData) {
                editor.emit('addArtBoard', componentData, obj.customComponent.center);
              }

            case 29:
              _doForceRefreshSelection(editor, true);

            case 30:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function execute(_x, _x2) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }()
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/BackgroundImage.js + 1 modules
var BackgroundImage = __webpack_require__(36);

// CONCATENATED MODULE: ./src/el/editor/commands/addBackgroundImageGradient.js



/* harmony default export */ var addBackgroundImageGradient = ({
  command: 'addBackgroundImageGradient',
  execute: function execute(editor, gradient) {
    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    console.log(id);
    var items = editor.selection.itemsByIds(id);
    console.log(items);
    var itemsMap = {};
    items.forEach(function (item) {
      var images = BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(func["STRING_TO_CSS"])(item['background-image']));
      images.unshift(new BackgroundImage["a" /* BackgroundImage */]({
        image: BackgroundImage["a" /* BackgroundImage */].parseImage(gradient)
      }));
      itemsMap[item.id] = {
        'background-image': BackgroundImage["a" /* BackgroundImage */].join(images)
      };
    });
    editor.emit('history.setAttributeForMulti', 'add gradient', itemsMap);
  }
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/URLImageResource.js
var URLImageResource = __webpack_require__(73);

// CONCATENATED MODULE: ./src/el/editor/commands/addBackgroundImageAsset.js



/* harmony default export */ var addBackgroundImageAsset = ({
  command: 'addBackgroundImageAsset',
  execute: function execute(editor, url) {
    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var items = editor.selection.itemsByIds(id);
    var itemsMap = {};
    items.forEach(function (item) {
      var images = BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(func["STRING_TO_CSS"])(item['background-image']));
      images.unshift(new BackgroundImage["a" /* BackgroundImage */]({
        image: new URLImageResource["a" /* URLImageResource */]({
          url: url
        })
      }));
      itemsMap[item.id] = {
        'background-image': BackgroundImage["a" /* BackgroundImage */].join(images)
      };
    });
    editor.emit('history.setAttributeForMulti', 'add background image', itemsMap);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/keymap.keydown.js
/* harmony default export */ var keymap_keydown = ({
  command: 'keymap.keydown',
  execute: function execute(editor, e) {
    editor.keyboardManager.add(e.code, e.keyCode);
    editor.shortcuts.execute(e, 'keydown');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/keymap.keyup.js
/* harmony default export */ var keymap_keyup = ({
  command: 'keymap.keyup',
  execute: function execute(editor, e) {
    editor.keyboardManager.remove(e.key, e.keyCode);
    editor.shortcuts.execute(e, 'keyup');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/removeLayer.js
/* harmony default export */ var removeLayer = ({
  command: 'removeLayer',
  execute: function execute(editor) {
    var ids = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;
    // console.log(removeLayer);
    editor.selection.itemsByIds(ids || editor.selection.ids).forEach(function (item) {
      item.remove();
    });
    editor.selection.empty();
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/change.mode.view.js

/* harmony default export */ var change_mode_view = ({
  command: 'change.mode.view',
  execute: function execute(editor) {
    var modeView = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'CanvasView';
    editor.changeModeView(modeView);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/segment.move.down.js
/* harmony default export */ var segment_move_down = ({
  command: 'segment.move.down',
  execute: function execute(editor) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      dy: 1
    };
    var dy = +obj.dy;
    editor.emit('moveSegment', 0, dy);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/segment.move.up.js
/* harmony default export */ var segment_move_up = ({
  command: 'segment.move.up',
  execute: function execute(editor) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      dy: 1
    };
    var dy = +obj.dy;
    editor.emit('moveSegment', 0, -1 * dy);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/segment.move.right.js
/* harmony default export */ var segment_move_right = ({
  command: 'segment.move.right',
  execute: function execute(editor) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      dx: 1
    };
    var dx = +obj.dx;
    editor.emit('moveSegment', dx, 0);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/segment.move.left.js
/* harmony default export */ var segment_move_left = ({
  command: 'segment.move.left',
  execute: function execute(editor) {
    var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      dx: 1
    };
    var dx = +obj.dx;
    editor.emit('moveSegment', -1 * dx, 0);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/segment.delete.js
/* harmony default export */ var segment_delete = ({
  command: 'segment.delete',
  execute: function execute(editor, current) {
    editor.emit('deleteSegment');
  }
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/Pattern.js + 1 modules
var Pattern = __webpack_require__(50);

// CONCATENATED MODULE: ./src/el/editor/commands/addBackgroundImagePattern.js


/* harmony default export */ var addBackgroundImagePattern = ({
  command: 'addBackgroundImagePattern',
  execute: function execute(editor, pattern) {
    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var items = editor.selection.itemsByIds(id);
    var itemsMap = {};
    items.forEach(function (item) {
      itemsMap[item.id] = {
        pattern: Pattern["a" /* Pattern */].join([].concat(toConsumableArray_default()(Pattern["a" /* Pattern */].parseStyle(pattern)), toConsumableArray_default()(Pattern["a" /* Pattern */].parseStyle(item.pattern))))
      };
    });
    editor.emit('history.setAttributeForMulti', 'add pattern', itemsMap);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/addBackgroundColor.js
/* harmony default export */ var addBackgroundColor = ({
  command: 'addBackgroundColor',
  execute: function execute(editor, color) {
    var id = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    var items = editor.selection.itemsByIds(id);
    var itemsMap = {};
    items.forEach(function (item) {
      itemsMap[item.id] = {
        'background-color': color
      };
    });
    editor.emit('history.setAttributeForMulti', 'add background color', itemsMap);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/scale.minus.js

/* harmony default export */ var scale_minus = ({
  command: 'scale.minus',
  execute: function execute(editor) {
    var oldScale = editor.viewport.scale;
    editor.viewport.setScale(editor.viewport.scale - 0.25);
    editor.emit('updateViewport', editor.viewport.scale, oldScale);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/scale.plus.js

/* harmony default export */ var scale_plus = ({
  command: 'scale.plus',
  execute: function execute(editor) {
    var oldScale = editor.viewport.scale;
    editor.viewport.setScale(editor.viewport.scale + 0.25);
    editor.emit('updateViewport', editor.viewport.scale, oldScale);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/resetSelection.js

/**
 * reset selecdtion command 
 * 
 * @param {Editor} editor 
 */

function resetSelection(editor) {
  editor.emit('setAttribute');
  editor.nextTick(function () {
    editor.emit('refreshSelectionTool');
  });
}
// CONCATENATED MODULE: ./src/el/editor/commands/sort.center.js

/* harmony default export */ var sort_center = ({
  command: 'sort.center',
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distX = Object(math["getVertiesCenterX"])(current.artboard.verties()) - Object(math["getVertiesCenterX"])(editor.selection.verties);
        editor.emit('moveLayer', distX, 0);
      }
    } else if (editor.selection.isMany) {
      var maxRightX = Object(math["getVertiesCenterX"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightX = Object(math["getVertiesCenterX"])(item.verties());
        return {
          item: item,
          dist: [maxRightX - itemRightX, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/sort.left.js

/* harmony default export */ var sort_left = ({
  command: 'sort.left',
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distX = Object(math["getVertiesMinX"])(current.artboard.verties()) - Object(math["getVertiesMinX"])(editor.selection.verties);
        editor.emit('moveLayer', distX, 0);
      }
    } else if (editor.selection.isMany) {
      var maxRightX = Object(math["getVertiesMinX"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightX = Object(math["getVertiesMinX"])(item.verties());
        return {
          item: item,
          dist: [maxRightX - itemRightX, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/manager/Sort.js



var Sort_Sort = /*#__PURE__*/function () {
  function Sort() {
    classCallCheck_default()(this, Sort);
  }

  createClass_default()(Sort, null, [{
    key: "getContainer",
    value: function getContainer(editor) {
      return editor.selection.items.length === 1 ? editor.selection.current : editor.selection.allRect;
    }
  }]);

  return Sort;
}();


// CONCATENATED MODULE: ./src/el/editor/commands/sort.middle.js


/* harmony default export */ var sort_middle = ({
  command: 'sort.middle',
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distY = Object(math["getVertiesCenterY"])(current.artboard.verties()) - Object(math["getVertiesCenterY"])(editor.selection.verties);
        editor.emit('moveLayer', 0, distY);
      }
    } else if (editor.selection.isMany) {
      var maxRightY = Object(math["getVertiesCenterY"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightY = Object(math["getVertiesCenterY"])(item.verties());
        return {
          item: item,
          dist: [0, maxRightY - itemRightY, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/sort.bottom.js


/* harmony default export */ var sort_bottom = ({
  command: 'sort.bottom',
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distY = Object(math["getVertiesMaxY"])(current.artboard.verties()) - Object(math["getVertiesMaxY"])(editor.selection.verties);
        editor.emit('moveLayer', 0, distY);
      }
    } else if (editor.selection.isMany) {
      var maxRightY = Object(math["getVertiesMaxY"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightY = Object(math["getVertiesMaxY"])(item.verties());
        return {
          item: item,
          dist: [0, maxRightY - itemRightY, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/sort.top.js

/* harmony default export */ var sort_top = ({
  command: 'sort.top',
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distY = Object(math["getVertiesMinY"])(current.artboard.verties()) - Object(math["getVertiesMinY"])(editor.selection.verties);
        editor.emit('moveLayer', 0, distY);
      }
    } else if (editor.selection.isMany) {
      var maxRightY = Object(math["getVertiesMinY"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightY = Object(math["getVertiesMinY"])(item.verties());
        return {
          item: item,
          dist: [0, maxRightY - itemRightY, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/sort.right.js


/* harmony default export */ var sort_right = ({
  command: 'sort.right',

  /**
   * 
   * @param {Editor} editor 
   */
  execute: function execute(editor) {
    if (editor.selection.isOne) {
      var current = editor.selection.current;

      if (current.parent.is('project')) {// 상위 객체가 project 이면 움직이지 않는다. 
      } else if (current.artboard) {
        // 선택된 객체가 하나이고 artboard 가 존재하면 artboard 를 기준으로 잡는다. 
        var distX = Object(math["getVertiesMaxX"])(current.artboard.verties()) - Object(math["getVertiesMaxX"])(editor.selection.verties);
        editor.emit('moveLayer', distX, 0);
      }
    } else if (editor.selection.isMany) {
      var maxRightX = Object(math["getVertiesMaxX"])(editor.selection.verties);
      editor.emit('moveLayerForItems', editor.selection.map(function (item) {
        var itemRightX = Object(math["getVertiesMaxX"])(item.verties());
        return {
          item: item,
          dist: [maxRightX - itemRightX, 0, 0]
        };
      }));
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/same.width.js
/* harmony default export */ var same_width = ({
  command: 'same.width',
  execute: function execute(editor) {
    if (editor.selection.isMany) {
      var rect = editor.selection.allRect;
      editor.selection.each(function (item) {
        item.setScreenX(rect.x.value);
        item.width.set(rect.width.value);
      });
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/same.height.js
/* harmony default export */ var same_height = ({
  command: 'same.width',
  execute: function execute(editor) {
    var len = editor.selection.items.length;

    if (len == 1) {// artboard 랑 크기를 맞출지 고민해보자. 
    } else if (len > 1) {
      var rect = editor.selection.allRect;
      editor.selection.each(function (item) {
        item.setScreenY(rect.y.value);
        item.height.set(rect.height.value);
      });
    }

    editor.emit('resetSelection');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/refreshArtboard.js
/**
 * refresh element command 
 * 
 * @param {Editor} editor - editor instance 
 * @param {Array} args - command parameters 
 */
function refreshArtboard(editor) {
  editor.emit('refreshLayerTreeView');
  editor.emit('refreshAllCanvas');
  editor.emit('refreshStyleView');
  editor.emit('refreshSelectionStyleView');
  editor.emit('refreshAllElementBoundSize');
  editor.emit('refreshSelection');
  editor.nextTick(function () {
    editor.emit('refreshSelectionTool', true);
  });
}
// CONCATENATED MODULE: ./src/el/editor/commands/addLayerView.js
/**
 * 객체 추가 모드로 변경 
 * 
 * @param {*} editor 
 * @param {*} type 
 */
function addLayerView(editor, type) {
  var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  // editor.emit('hideSubEditor');
  editor.selection.empty();
  editor.emit('refreshSelectionTool');
  editor.emit('hideAddViewLayer');
  editor.emit('removeGuideLine');

  if (type === 'select') {// NOOP
    // select 는 아무것도 하지 않는다. 
  } else if (type === 'brush') {
    editor.emit('showPathDrawEditor');
  } else if (type === 'path') {
    editor.emit('showPathEditor', 'path');
  } else {
    editor.emit('showLayerAppendView', type, data);
  }
}
// CONCATENATED MODULE: ./src/el/editor/commands/setEditorLayout.js
/* harmony default export */ var setEditorLayout = ({
  command: 'setEditorLayout',
  execute: function execute(editor, layout) {
    editor.setLayout(layout);
    editor.emit('changedEditorlayout');
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/item.move.depth.down.js

/* harmony default export */ var item_move_depth_down = ({
  command: 'item.move.depth.down',
  execute: function execute(editor) {
    var current = editor.selection.current;

    if (current) {
      current.orderPrev();
    }

    _doForceRefreshSelection(editor, true);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/item.move.depth.up.js

/* harmony default export */ var item_move_depth_up = ({
  command: 'item.move.depth.up',
  execute: function execute(editor) {
    var current = editor.selection.current;

    if (current) {
      current.orderNext();
    }

    _doForceRefreshSelection(editor, true);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/group.item.js


function group_item_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function group_item_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { group_item_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { group_item_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/* harmony default export */ var group_item = ({
  command: 'group.item',
  execute: function execute(editor) {
    if (editor.selection.length === 0) return;
    var project = editor.selection.currentProject;

    if (project) {
      // no 캐쉬 
      project.generateListNumber(); // depth 캐쉬 

      var list = editor.selection.map(function (item) {
        return {
          depth: item.depth,
          item: item
        };
      }); // no, depth 로 정렬 

      list.sort(function (a, b) {
        if (a.depth === b.depth) {
          return a.no > b.no ? -1 : 1;
        }

        return a.depth > b.depth ? 1 : -1;
      }); // 객체 생성             

      var groupLayer = editor.createItem(group_item_objectSpread({
        itemType: 'rect'
      }, editor.selection.itemRect)); // 마지막, 레이어 상으로는 가장 위 레이어 옆으로 추가 

      list[0].item.appendAfter(groupLayer); // selected 된 items 을 모두 group Layer 에 추가 

      list.forEach(function (_ref) {
        var item = _ref.item;
        groupLayer.appendChildItem(item);
      });
      editor.selection.select(groupLayer);
      editor.emit('refreshAll');
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/ungroup.item.js

/* harmony default export */ var ungroup_item = ({
  command: 'ungroup.item',
  execute: function execute(editor) {
    if (editor.selection.length === 0) return;
    var current = editor.selection.current;

    if (current) {
      var _editor$selection;

      var groupLayer = current;

      var layers = toConsumableArray_default()(groupLayer.layers);

      layers.reverse();
      layers.forEach(function (child) {
        groupLayer.appendAfter(child);
      });

      (_editor$selection = editor.selection).selection.apply(_editor$selection, toConsumableArray_default()(layers));

      editor.emit('refreshAll');
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.setAttribute.js

/* harmony default export */ var history_setAttribute = ({
  command: 'history.setAttribute',
  execute: function execute(editor, message) {
    var attrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var ids = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    editor.emit('setAttribute', attrs, ids);
    editor.history.add(message, this, {
      currentValues: [attrs, ids],
      undoValues: editor.history.getUndoValues(attrs)
    });
    editor.nextTick(function () {
      editor.history.saveSelection();
    });
  },
  redo: function redo(editor, _ref) {
    var currentValues = _ref.currentValues;
    editor.emit.apply(editor, ['setAttribute'].concat(toConsumableArray_default()(currentValues)));
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  },
  undo: function undo(editor, _ref2) {
    var undoValues = _ref2.undoValues;
    var ids = Object.keys(undoValues);
    var items = editor.selection.itemsByIds(ids);
    items.forEach(function (item) {
      item.reset(undoValues[item.id]);
    });
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.redo.js

/* harmony default export */ var history_redo = ({
  command: 'history.redo',

  /**
   * history redo 를 실행한다. 
   * 
   * @param {Editor} editor 
   */
  execute: function execute(editor) {
    editor.history.redo();
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.undo.js
/* harmony default export */ var history_undo = ({
  command: 'history.undo',
  execute: function execute(editor) {
    editor.history.undo();
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/refreshSelection.js

/* harmony default export */ var refreshSelection = ({
  command: 'refreshSelection',
  execute: function execute(editor) {// editor.history.saveSelection()
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.refreshSelection.js


/* harmony default export */ var history_refreshSelection = ({
  command: 'history.refreshSelection',
  description: "save selection in history ",
  description_ko: 'Selection 정보를 갱신하면서 History 에 저장한다',
  execute: function execute(editor) {
    var message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'selection';
    var currentValues = editor.selection.ids;
    var undoValues = editor.history.selectedIds; // 이전 선택과 같으면 선택 히스토리는 쌓지 않는다. 

    if (Object(func["isArrayEquals"])(currentValues, undoValues)) {
      return;
    }

    editor.history.add(message, this, {
      currentValues: currentValues,
      undoValues: undoValues
    });
    this.nextAction(editor);
  },
  nextAction: function nextAction(editor) {
    editor.nextTick(function () {
      editor.history.saveSelection();
      editor.emit('refreshSelection');
      editor.nextTick(function () {
        editor.emit('refreshSelectionTool');
      });
    });
  },
  redo: function redo(editor, _ref) {
    var currentValues = _ref.currentValues;
    editor.selection.selectById(currentValues);
    this.nextAction(editor);
  },
  undo: function undo(editor, _ref2) {
    var undoValues = _ref2.undoValues;
    editor.selection.selectById(undoValues);
    this.nextAction(editor);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/setAttributeForMulti.js


/* harmony default export */ var setAttributeForMulti = ({
  command: 'setAttributeForMulti',

  /**
   * 
   * @param {Editor} editor 
   * @param {object} multiAttrs  아이디 기반의 속성 리스트  { [id] : { key: value }, .... }
   */
  execute: function execute(editor) {
    var multiAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    Object.keys(multiAttrs).forEach(function (id) {
      var attrs = multiAttrs[id];
      editor.selection.itemsByIds(id).forEach(function (item) {
        var newAttrs = {};
        Object.keys(attrs).forEach(function (key) {
          var value = attrs[key];

          if (Object(func["isFunction"])(value)) {
            value = value(item);
          }

          newAttrs[key] = value;
        });
        item.reset(newAttrs); // path 나 내부 요소가 크기가 정해져 있어야 하는 것들을 위해서 
        // 기본 모양에 대한 캐쉬를 적용한다. 

        item.setCache();
        editor.emit('refreshElement', item);
      });
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.setAttributeForMulti.js

/* harmony default export */ var history_setAttributeForMulti = ({
  command: 'history.setAttributeForMulti',
  execute: function execute(editor, message) {
    var multiAttrs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    editor.emit('setAttributeForMulti', multiAttrs);
    editor.history.add(message, this, {
      currentValues: [multiAttrs],
      undoValues: editor.history.getUndoValuesForMulti(multiAttrs)
    });
    editor.nextTick(function () {
      editor.history.saveSelection();
    });
  },
  redo: function redo(editor, _ref) {
    var currentValues = _ref.currentValues;
    editor.emit.apply(editor, ['setAttributeForMulti'].concat(toConsumableArray_default()(currentValues)));
    editor.nextTick(function () {
      editor.selection.reselect();
      editor.emit('refreshAll');
    });
  },
  undo: function undo(editor, _ref2) {
    var undoValues = _ref2.undoValues;
    var ids = Object.keys(undoValues);
    var items = editor.selection.itemsByIds(ids);
    items.forEach(function (item) {
      item.reset(undoValues[item.id]);
    });
    editor.selection.reselect();
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.addLayer.js


/* harmony default export */ var history_addLayer = ({
  command: 'history.addLayer',
  description: 'add layer in history ',
  execute: function execute(editor, message, layer) {
    var _this = this;

    var rect = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    var isSelected = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    var containerItem = arguments.length > 5 ? arguments[5] : undefined;
    editor.emit('addLayer', layer, rect, isSelected, containerItem);
    editor.nextTick(function () {
      editor.history.add(message, _this, {
        // 이미 변환이 된 객체(즉, screenX, screenY 가  적용된 객체라 rect 로 영역을 다시 지정하지 않는다. )
        currentValues: [layer, {}, isSelected, layer.parent],
        undoValues: [layer.id]
      });
    });
    editor.nextTick(function () {
      editor.history.saveSelection();
    });
  },
  redo: function redo(editor, _ref) {
    var currentValues = _ref.currentValues;
    editor.emit.apply(editor, ['addLayer'].concat(toConsumableArray_default()(currentValues)));
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  },
  undo: function undo(editor, _ref2) {
    var undoValues = _ref2.undoValues;
    var ids = undoValues;
    var items = editor.selection.itemsByIds(ids); // 추가는 하나 밖에 안 했을테니 이게 맞을지도
    // 여러개일수도 있으니 이걸로 동시에 여러개를 삭제 하자 

    items.forEach(function (item) {
      if (item) {
        item.remove();
      }
    });
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/history.removeLayer.js


/**
 * Item 리스트에서 포함된 자식을 제거한다. 
 * 
 * 제거하는 방법은  상속관계 id 리스트를구한 다음에 , 
 * 
 * item 리스트에서 부모와 자식 관계가 동시에 존재하는 경우 자식이라고 인지하고 필터링 한다. 
 * 
 * @param {Item[]} items 
 */

function filterChildren() {
  var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  // items 중에  자식/부모의 관게의 객체가 있으면 자식은 필터링 한다. 
  return items.filter(function (item) {
    var total = 0;
    item.path.forEach(function (treeItem) {
      total += items.filter(function (it) {
        return it.id === treeItem.id;
      }).length ? 1 : 0;
    });
    return total === 1;
  });
}

/* harmony default export */ var history_removeLayer = ({
  command: 'history.removeLayer',
  description: 'remove layer',

  /**
   * 객체를 삭제 한다. 삭제 할 때 history 도 남긴다. 
   * 
   * @param {Editor} editor 
   * @param {string} message 
   * @param {string[]|undefined} ids 
   */
  execute: function execute(editor, message, event, ids) {
    // // 지우기 전 객체를 모두 clone 한다. 
    var items = editor.selection.itemsByIds(ids || editor.selection.ids); // items 중에  자식/부모의 관게의 객체가 있으면 자식은 필터링 한다. 

    items = filterChildren(items);
    var filtedIds = items.map(function (it) {
      return it.id;
    }); // 지워야 하는 객체를 serialize 한다. 

    var serializedObjectList = editor.serialize(items); //전체 삭제 

    items.forEach(function (item) {
      return item.remove();
    });
    editor.history.add(message, this, {
      currentValues: [filtedIds],
      undoValues: serializedObjectList
    });
    editor.nextTick(function () {
      editor.selection.removeById(items.map(function (it) {
        return it.id;
      }));
      editor.emit('refreshAll');
      editor.emit('removeGuideLine');
      editor.nextTick(function () {
        editor.history.saveSelection();
      });
    });
  },
  redo: function redo(editor, _ref) {
    var currentValues = _ref.currentValues;
    var ids = currentValues[0];
    var items = editor.selection.itemsByIds(ids || editor.selection.ids); // items 중에  자식/부모의 관게의 객체가 있으면 자식은 필터링 한다. 

    items = filterChildren(items); //전체 삭제 

    items.forEach(function (item) {
      return item.remove();
    });
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  },

  /**
   * 생성된 undoValues 를 복구한다. 
   * 복구 할 때는 해당 객체의 부모와 위치를 같이 복구한다. 
   * 
   * @param {Editor} editor 
   * @param {Object} param1 
   * @param {string} param1.undoValues  JSON serialize 된 문자열 
   */
  undo: function undo(editor, _ref2) {
    var undoValues = _ref2.undoValues;
    editor.deserialize(undoValues, true);
    editor.nextTick(function () {
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updatePathItem.js



/* harmony default export */ var updatePathItem = ({
  command: 'updatePathItem',
  description: 'Update path string for selected svg path item',

  /**
   * 
   * @param {Editor} editor 
   * @param {object} pathObject 
   * @param {string} pathObject.d    svg path 문자열 
   */
  execute: function execute(editor, pathObject) {
    var current = editor.selection.current;

    if (current) {
      if (pathObject.box === 'box') {
        var newPath = current.invertPath(pathObject.d); // d 속성 (path 문자열) 을 설정한다. 

        editor.emit('setAttribute', {
          d: newPath.d
        });
      } else {
        var _newPath = current.invertPath(pathObject.d);

        var bbox = _newPath.getBBox();

        var newX = current.offsetX.value + bbox[0][0];
        var newY = current.offsetY.value + bbox[0][1];
        var newWidth = esm["d" /* vec3 */].distance(bbox[1], bbox[0]);
        var newHeight = esm["d" /* vec3 */].distance(bbox[3], bbox[0]);

        _newPath.translate(-bbox[0][0], -bbox[0][1]); // d 속성 (path 문자열) 을 설정한다. 


        editor.emit('setAttribute', {
          d: _newPath.d,
          x: Length["a" /* Length */].px(newX),
          y: Length["a" /* Length */].px(newY),
          width: Length["a" /* Length */].px(newWidth),
          height: Length["a" /* Length */].px(newHeight)
        });
      }
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/updateClipPath.js

/* harmony default export */ var updateClipPath = ({
  command: 'updateClipPath',
  description: 'update clip-path property ',

  /**
   * 
   * @param {Editor} editor 
   * @param {object} pathObject 
   * @param {string} pathObject.d    svg path 문자열 
   */
  execute: function execute(editor, pathObject) {
    // d 속성 (path 문자열) 을 설정한다. 
    editor.command('setAttribute', 'change clip-path', {
      'clip-path': "path(".concat(pathObject.d, ")")
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/moveLayer.js



/* harmony default export */ var moveLayer = ({
  command: 'moveLayer',
  description: 'mova layer by keydown with matrix ',

  /**
   * 
   * @param {Editor} editor 
   * @param {number} dx
   * @param {number} dy
   */
  execute: function execute(editor) {
    var dx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var dy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var itemsMap = {};
    editor.selection.each(function (item) {
      itemsMap[item.id] = {
        x: Length["a" /* Length */].px(item.offsetX.value + dx).round(),
        y: Length["a" /* Length */].px(item.offsetY.value + dy).round()
      };
    });
    editor.emit('history.setAttributeForMulti', 'item move down', itemsMap);
    editor.nextTick(function () {
      editor.selection.reselect();
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/moveToCenter.js


/* harmony default export */ var moveToCenter = ({
  command: 'moveToCenter',
  description: 'Move Layer to Center on Viewport',

  /**
   * 
   * @param {Editor} editor 
   * @param {vec3[]} areaVerties 
   * @param {boolean} withScale    scale 도 같이 조절 할지 정리 
   */
  execute: function execute(editor, areaVerties) {
    var withScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (areaVerties) {
      editor.viewport.moveLayerToCenter(areaVerties, undefined, withScale);
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/moveLayerForItems.js



/* harmony default export */ var moveLayerForItems = ({
  command: 'moveLayerForItems',
  description: 'mova layer by multi items ',

  /**
   * 
   * @param {Editor} editor 
   * @param {number} dx
   * @param {number} dy
   */
  execute: function execute(editor) {
    var moveItems = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var itemsMap = {};
    moveItems.forEach(function (it) {
      itemsMap[it.item.id] = {
        x: Length["a" /* Length */].px(it.item.offsetX.value + it.dist[0]).round(),
        y: Length["a" /* Length */].px(it.item.offsetY.value + it.dist[1]).round()
      };
    });
    editor.emit('history.setAttributeForMulti', 'item move down', itemsMap);
    editor.nextTick(function () {
      editor.selection.reselect();
      editor.emit('refreshAll');
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/moveSelectionToCenter.js


/* harmony default export */ var moveSelectionToCenter = ({
  command: 'moveSelectionToCenter',
  description: 'Move selection project or artboards to center on Viewport',

  /**
   * 
   * @param {Editor} editor 
   * @param {vec3[]} areaVerties 
   * @param {boolean} [withScale=true]    scale 도 같이 조절 할지 정리 
   */
  execute: function execute(editor) {
    var withScale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
    var areaVerties = [];

    if (editor.selection.isEmpty) {
      areaVerties = editor.selection.currentProject.rectVerties;
    } else {
      areaVerties = Object(collision["b" /* itemsToRectVerties */])(editor.selection.items);
    }

    editor.emit('moveToCenter', areaVerties, withScale);
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/savePNG.js



/* harmony default export */ var savePNG = ({
  command: 'savePNG',
  execute: function execute(editor) {
    var callbackCommand = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    var item = editor.selection.current;

    if (item) {
      var svgString = ExportManager["a" /* default */].generateSVG(editor, item).trim();
      var datauri = 'data:image/svg+xml;base64,' + window.btoa(svgString);
      loadOriginalImage({
        local: datauri
      }, function (info, img) {
        createImagePng(img, function (pngDataUri) {
          if (callbackCommand) {
            editor.emit(callbackCommand, pngDataUri);
          }
        });
      });
    }
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/refreshCursor.js
/* harmony default export */ var refreshCursor = ({
  command: 'refreshCursor',
  execute: function execute(editor, iconType) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    editor.emit.apply(editor, ['changeIconView', iconType].concat(args));
  }
});
// CONCATENATED MODULE: ./src/el/editor/commands/recoverCursor.js
/* harmony default export */ var recoverCursor = ({
  command: 'recoverCursor',
  execute: function execute(editor) {
    editor.emit('changeIconView', 'auto');
  }
});
// EXTERNAL MODULE: ./node_modules/js-video-url-parser/dist/jsVideoUrlParser.js
var jsVideoUrlParser = __webpack_require__(140);
var jsVideoUrlParser_default = /*#__PURE__*/__webpack_require__.n(jsVideoUrlParser);

// CONCATENATED MODULE: ./src/el/editor/commands/convertPasteText.js




/* harmony default export */ var convertPasteText = ({
  command: 'convertPasteText',
  execute: function () {
    var _execute = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(editor, text) {
      var embedUrl, center, width, height;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              embedUrl = jsVideoUrlParser_default.a.create({
                videoInfo: jsVideoUrlParser_default.a.parse(text),
                format: 'embed',
                mediaType: 'clip'
              });

              if (embedUrl) {
                center = editor.viewport.center;
                width = 300;
                height = 200;
                editor.emit('newComponent', 'iframe', {
                  x: Length["a" /* Length */].px(center[0] - width / 2),
                  y: Length["a" /* Length */].px(center[1] - height / 2),
                  width: Length["a" /* Length */].px(width),
                  height: Length["a" /* Length */].px(height),
                  'background-color': 'transparent',
                  url: embedUrl
                });
              }

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function execute(_x, _x2) {
      return _execute.apply(this, arguments);
    }

    return execute;
  }()
});
// CONCATENATED MODULE: ./src/el/editor/commands/addCustomComponent.js


function addCustomComponent_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function addCustomComponent_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { addCustomComponent_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { addCustomComponent_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




/**
 * 
 * @param {Editor} editor 
 * @param {*} obj 
 * @param {vec3} [center=null] center를 지정하고 artboard 를 재배치 
 */

function addCustomComponent(editor) {
  var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var center = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var project = editor.selection.currentProject;
  var customComponent = project.appendChildItem(editor.createItem(addCustomComponent_objectSpread({
    x: Length["a" /* Length */].px(300),
    y: Length["a" /* Length */].px(200),
    width: Length["a" /* Length */].px(375),
    height: Length["a" /* Length */].px(667)
  }, obj)));

  if (center) {
    customComponent.reset({
      x: Length["a" /* Length */].px(0),
      y: Length["a" /* Length */].px(0)
    });
    customComponent.moveByCenter(center);
  }

  editor.selection.select(customComponent);

  _doForceRefreshSelection(editor);
}
// CONCATENATED MODULE: ./src/el/editor/commands/index.js


var _convertPasteText$ref;









































































































/* harmony default export */ var editor_commands = (_convertPasteText$ref = {
  convertPasteText: convertPasteText,
  refreshCursor: refreshCursor,
  recoverCursor: recoverCursor,
  // history + command   
  historyAddLayer: history_addLayer,
  historyRemoveLayer: history_removeLayer,
  historySetAttribute: history_setAttribute,
  historySetAttributeForMulti: history_setAttributeForMulti,
  historyRefreshSelection: history_refreshSelection,
  historyRedo: history_redo,
  historyUndo: history_undo,
  moveLayer: moveLayer,
  moveLayerForItems: moveLayerForItems,
  moveToCenter: moveToCenter,
  moveSelectionToCenter: moveSelectionToCenter,
  // command 
  groupItem: group_item,
  ungroupItem: ungroup_item,
  setEditorLayout: setEditorLayout,
  refreshSelection: refreshSelection,
  refreshArtboard: refreshArtboard,
  resetSelection: resetSelection,
  addBackgroundColor: addBackgroundColor,
  addBackgroundImagePattern: addBackgroundImagePattern,
  segmentDelete: segment_delete,
  segmentMoveDown: segment_move_down,
  segmentMoveUp: segment_move_up,
  segmentMoveRight: segment_move_right,
  segmentMoveLeft: segment_move_left,
  changeModeView: change_mode_view,
  removeLayer: removeLayer,
  itemMoveDepthDown: item_move_depth_down,
  itemMoveDepthUp: item_move_depth_up,
  keymapKeydown: keymap_keydown,
  keymapKeyup: keymap_keyup,
  scaleMinus: scale_minus,
  scalePlus: scale_plus,
  dropAsset: drop_asset,
  addBackgroundImageAsset: addBackgroundImageAsset,
  addBackgroundImageGradient: addBackgroundImageGradient,
  addTimelineItem: addTimelineItem,
  pauseTimelineItem: pauseTimelineItem,
  lastTimelineItem: lastTimelineItem,
  nextTimelineItem: nextTimelineItem,
  firstTimelineItem: firstTimelineItem,
  prevTimelineItem: prevTimelineItem,
  playTimelineItem: playTimelineItem,
  copyTimelineProperty: copyTimelineProperty,
  addTimelineKeyframe: addTimelineKeyframe,
  removeAnimationItem: removeAnimationItem,
  removeTimeline: removeTimeline,
  selectTimelineItem: selectTimelineItem,
  deleteTimelineKeyframe: deleteTimelineKeyframe,
  removeTimelineProperty: removeTimelineProperty,
  addTimelineCurrentProperty: addTimelineCurrentProperty,
  setTimelineOffset: setTimelineOffset,
  refreshSelectedOffset: refreshSelectedOffset,
  addTimelineProperty: addTimelineProperty,
  setLocale: setLocale,
  loadJSON: load_json,
  saveJSON: saveJSON,
  savePNG: savePNG,
  downloadPNG: downloadPNG,
  downloadSVG: downloadSVG,
  downloadJSON: downloadJSON,
  updateUriList: updateUriList,
  updateImageAssetItem: updateImageAssetItem,
  updateVideoAssetItem: updateVideoAssetItem,
  addSVGFilterAssetItem: addSVGFilterAssetItem,
  dropImageUrl: dropImageUrl,
  addImageAssetItem: addImageAssetItem,
  addVideoAssetItem: addVideoAssetItem,
  updateImage: updateImage,
  updateVideo: updateVideo,
  updateResource: updateResource,
  fileDropItems: fileDropItems,
  updateScale: updateScale,
  showExportView: showExportView,
  switchTheme: switchTheme,
  clipboardPaste: clipboard_paste,
  clipboardCopy: clipboard_copy,
  addComponentType: addComponentType,
  addArtBoard: addArtBoard,
  addCustomComponent: addCustomComponent,
  addImage: addImage,
  addVideo: addVideo,
  addLayer: addLayer,
  addLayerView: addLayerView,
  addProject: addProject,
  convertPath: convertPath,
  newComponent: newComponent,
  refreshElement: refreshElement,
  refreshProject: refreshProject,
  resizeArtBoard: resizeArtBoard,
  setAttribute: setAttribute,
  setAttributeForMulti: setAttributeForMulti,
  sortBottom: sort_bottom,
  sortCenter: sort_center,
  sortLeft: sort_left,
  sortMiddle: sort_middle
}, defineProperty_default()(_convertPasteText$ref, "sortBottom", sort_bottom), defineProperty_default()(_convertPasteText$ref, "sortTop", sort_top), defineProperty_default()(_convertPasteText$ref, "sortRight", sort_right), defineProperty_default()(_convertPasteText$ref, "sameWidth", same_width), defineProperty_default()(_convertPasteText$ref, "sameHeight", same_height), defineProperty_default()(_convertPasteText$ref, "updatePathItem", updatePathItem), defineProperty_default()(_convertPasteText$ref, "updateClipPath", updateClipPath), _convertPasteText$ref);
// CONCATENATED MODULE: ./src/el/editor/manager/CommandManager.js




var CommandManager_CommandManager = /*#__PURE__*/function () {
  function CommandManager(editor) {
    classCallCheck_default()(this, CommandManager);

    this.$editor = editor;
    this.loadCommands();
  }

  createClass_default()(CommandManager, [{
    key: "loadCommands",
    value: function loadCommands() {
      var _this = this;

      Object.keys(editor_commands).forEach(function (command) {
        if (Object(func["isFunction"])(editor_commands[command])) {
          _this.registerCommand(command, editor_commands[command]);
        } else {
          _this.registerCommand(editor_commands[command]);
        }
      });
    }
  }, {
    key: "registerCommand",
    value: function registerCommand(command, commandCallback) {
      var _this2 = this;

      if (arguments.length === 2) {
        var callback = function callback() {
          var _this2$$editor;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          commandCallback.call.apply(commandCallback, [_this2, _this2.$editor].concat(args));

          (_this2$$editor = _this2.$editor).debug.apply(_this2$$editor, ['command execute', _this2].concat(args));
        };

        callback.source = command;
        this.$editor.on(command, callback, this, 0);
      } else if (Object(func["isObject"])(command)) {
        // command object { command, title, description, debounce, execute }
        var _callback = function _callback() {
          var _command$execute, _this2$$editor2;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_command$execute = command.execute).call.apply(_command$execute, [command, _this2.$editor].concat(args));

          (_this2$$editor2 = _this2.$editor).debug.apply(_this2$$editor2, ['command execute', command].concat(args));
        };

        _callback.source = command.command;
        this.$editor.on(command.command, _callback, this, command.debounce || 0);
      }
    }
  }]);

  return CommandManager;
}();
// EXTERNAL MODULE: ./src/el/base/functions/detect.js
var detect = __webpack_require__(88);

// EXTERNAL MODULE: ./src/el/editor/shortcuts/index.js + 46 modules
var shortcuts = __webpack_require__(86);

// EXTERNAL MODULE: ./src/el/editor/types/key.js
var types_key = __webpack_require__(72);

// CONCATENATED MODULE: ./src/el/editor/manager/ShortCutManager.js





function ShortCutManager_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ShortCutManager_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ShortCutManager_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ShortCutManager_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






function joinKeys() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return args.filter(Boolean).join('+');
}

function generateKeyCode(code) {
  return types_key["a" /* KEY_CODE */]["".concat(code).toLowerCase()] || code;
}

var ShortCutManager_ShortCutManager = /*#__PURE__*/function () {
  function ShortCutManager(editor) {
    classCallCheck_default()(this, ShortCutManager);

    this.$editor = editor;
    this.loadShortCuts();
  }

  createClass_default()(ShortCutManager, [{
    key: "getGeneratedKeyCode",
    value: function getGeneratedKeyCode(code) {
      return generateKeyCode(code);
    }
  }, {
    key: "loadShortCuts",
    value: function loadShortCuts() {
      var _this = this;

      this.list = [];
      this.commands = {};
      shortcuts["a" /* default */].forEach(function (shortcut) {
        _this.registerShortCut(shortcut);
      });
      this.sort();
    }
  }, {
    key: "registerShortCut",
    value: function registerShortCut(shortcut) {
      var OSName = Object(detect["a" /* os */])();
      this.list.push(ShortCutManager_objectSpread(ShortCutManager_objectSpread({
        key: '',
        command: '',
        args: [],
        eventType: 'keydown'
      }, shortcut), {}, {
        checkKeyString: this.splitShortCut(shortcut[OSName] || shortcut.key),
        whenFunction: this.makeWhenFunction(shortcut.command, shortcut.when || "true")
      }));
      this.sort();
    }
  }, {
    key: "makeWhenFunction",
    value: function makeWhenFunction(command, when) {
      return new Function('editor',
      /*jsx*/
      "\n            /////////////////////////////////\n            ////////Custom Function///////////\n\n            return function () {\n                const CanvasView = editor.modeView === 'CanvasView';\n                const PathEditorView = editor.modeView === 'PathEditorView';                \n\n                return (".concat(when, ");\n            }\n            ////////Custom Function///////////\n            /////////////////////////////////\n        "))(this.$editor);
    }
  }, {
    key: "sort",
    value: function sort() {
      var _this2 = this;

      this.commands = {};
      this.list.forEach(function (it) {
        if (Object(func["isArray"])(_this2.commands[it.checkKeyString]) === false) {
          _this2.commands[it.checkKeyString] = [];
        }

        _this2.commands[it.checkKeyString].push(it);
      });
    }
  }, {
    key: "splitShortCut",
    value: function splitShortCut(key) {
      var arr = key.toUpperCase().split('+').map(function (it) {
        return it.trim();
      }).filter(Boolean);
      var isAlt = false;
      var isControl = false;
      var isShift = false;
      var isMeta = false;
      var restKeys = [];
      arr.forEach(function (key) {
        if (key.includes('ALT')) isAlt = true;else if (key.includes('CTRL')) isControl = true;else if (key.includes('SHIFT')) isShift = true;else if (key.includes('CMD') || key.includes('WIN') || key.includes('META')) isMeta = true;else restKeys.push(key);
      });
      return joinKeys(isAlt ? 'ALT' : '', isControl ? 'CTRL' : '', isShift ? 'SHIFT' : '', isMeta ? 'META' : '', generateKeyCode(restKeys.join('')));
    }
  }, {
    key: "makeKeyString",
    value: function makeKeyString(e) {
      return joinKeys(e.altKey ? 'ALT' : '', e.ctrlKey ? 'CTRL' : '', e.shiftKey ? 'SHIFT' : '', e.metaKey ? 'META' : '', e.key.toUpperCase());
    }
  }, {
    key: "makeCodeString",
    value: function makeCodeString(e) {
      return joinKeys(e.altKey ? 'ALT' : '', e.ctrlKey ? 'CTRL' : '', e.shiftKey ? 'SHIFT' : '', e.metaKey ? 'META' : '', e.code.toUpperCase());
    }
  }, {
    key: "makeKeyCodeString",
    value: function makeKeyCodeString(e) {
      return joinKeys(e.altKey ? 'ALT' : '', e.ctrlKey ? 'CTRL' : '', e.shiftKey ? 'SHIFT' : '', e.metaKey ? 'META' : '', e.keyCode);
    }
  }, {
    key: "checkShortCut",
    value: function checkShortCut(keyCodeString, keyString, codeString) {
      return this.commands[keyCodeString] || this.commands[keyString] || this.commands[codeString];
    }
  }, {
    key: "checkWhen",
    value: function checkWhen(command) {
      return command.whenFunction();
    }
  }, {
    key: "execute",
    value: function execute(e) {
      var _this3 = this;

      var eventType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'keydown';
      var commands = this.checkShortCut(this.makeKeyCodeString(e), this.makeKeyString(e), this.makeCodeString(e));

      if (commands) {
        var filteredCommands = commands.filter(function (it) {
          return it.eventType === eventType;
        }).filter(function (it) {
          return _this3.checkWhen(it);
        });

        if (filteredCommands.length) {
          e.preventDefault();
        }

        filteredCommands.forEach(function (it) {
          var _this3$$editor;

          (_this3$$editor = _this3.$editor).emit.apply(_this3$$editor, [it.command].concat(toConsumableArray_default()(it.args), [e]));
        });
      }
    }
  }]);

  return ShortCutManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/ConfigManager.js


var ConfigManager_ConfigManager = /*#__PURE__*/function () {
  function ConfigManager(editor) {
    classCallCheck_default()(this, ConfigManager);

    this.editor = editor;
    this.config = new Map();
    this.initialize();
  }

  createClass_default()(ConfigManager, [{
    key: "initialize",
    value: function initialize() {
      this.set('canvas.width', 10000);
      this.set('canvas.height', 10000);
      this.set('body.move.ms', 30);
      this.set('grid.preview.position', []);
      this.set('debug', false);
      this.set('fixedAngle', 15);
      this.set('ruler.show', true);
      this.set('show.left.panel', true);
      this.set('show.right.panel', true);
    }
    /**
     *  key 에 해당하는 config 를 가지고 온다. 
     * 
     * @param {string} key 
     */

  }, {
    key: "get",
    value: function get(key) {
      return this.config[key];
    }
  }, {
    key: "set",
    value: function set(key, value) {
      var oldValue = this.config[key];

      if (oldValue != value) {
        this.config[key] = value;
        this.editor.emit("config:" + key);
      }
    }
  }, {
    key: "toggle",
    value: function toggle(key) {
      this.set(key, !this.get(key));
    }
  }, {
    key: "true",
    value: function _true(key) {
      return this.get(key) === true;
    }
  }, {
    key: "false",
    value: function _false(key) {
      return this.get(key) === false;
    }
  }, {
    key: "remove",
    value: function remove(key) {
      delete this.config[key];
      this.editor.emit("config:" + key);
    }
  }]);

  return ConfigManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/HistoryManager.js




var HistoryManager_HistoryManager = /*#__PURE__*/function () {
  function HistoryManager(editor) {
    classCallCheck_default()(this, HistoryManager);

    this.$editor = editor;
    this.currentIndex = -1;
    this.undoHistories = [];
    this.redoHistories = [];
    this.selection = {};
  }

  createClass_default()(HistoryManager, [{
    key: "length",
    get: function get() {
      return this.undoHistories.length;
    }
  }, {
    key: "selectedIds",
    get: function get() {
      return Object.keys(this.selection);
    }
  }, {
    key: "createCommand",
    value: function createCommand(commandString) {
      return this.$editor.isPointerUp ? "history.".concat(commandString) : commandString;
    }
  }, {
    key: "saveSelection",
    value: function saveSelection() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.selection = this.$editor.selection.toCloneObject();
    }
  }, {
    key: "getUndoValues",
    value: function getUndoValues() {
      var _this = this;

      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var result = {};
      Object.keys(this.selection).forEach(function (id) {
        result[id] = {};
        Object.keys(attrs).forEach(function (key) {
          result[id][key] = _this.selection[id][key];
        });
      });
      return result;
    }
  }, {
    key: "getUndoValuesForMulti",
    value: function getUndoValuesForMulti() {
      var _this2 = this;

      var multiAttrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var result = {};
      Object.keys(multiAttrs).forEach(function (id) {
        result[id] = {};

        var selectedObject = _this2.selection[id] || _this2.$editor.selection.itemsByIds(id)[0];

        var attrs = multiAttrs[id];
        Object.keys(attrs).forEach(function (key) {
          result[id][key] = selectedObject[key];
        });
      });
      return result;
    }
    /**
     * 
     * @param {string} message 
     * @param {CommandObject} command 
     * @param {{currentValues: any, undoValues: any, redoValues: any}} data 
     */

  }, {
    key: "add",
    value: function add(message, command, data) {
      var historyObject = {
        message: message,
        command: command,
        data: data
      };
      this.undoHistories.push(historyObject);
      this.currentIndex++;
      this.undoHistories.length = this.currentIndex + 1;
      this.$editor.emit('refreshHistory', command.command);
      return historyObject;
    }
    /**
     * undo, redo 히스토리 리스트를 만든다. 
     * 
     * @param {Function} callback 
     */

  }, {
    key: "map",
    value: function map(callback) {
      var results = [].concat(toConsumableArray_default()(this.undoHistories.map(callback)), ['-'], toConsumableArray_default()(this.redoHistories.map(callback))).reverse();
      return results;
    }
    /**
     * undo 를 수행한다. 
     */

  }, {
    key: "undo",
    value: function undo() {
      var _this3 = this;

      if (this.currentIndex < -1) return;
      this.currentIndex--;
      var commandObject = this.undoHistories.pop();

      if (commandObject && commandObject.command) {
        commandObject.command.undo(this.$editor, commandObject.data);
      }

      this.$editor.nextTick(function () {
        _this3.$editor.emit('refreshHistory', commandObject.command);
      });
    }
    /**
     * redo를 수행한다.
     */

  }, {
    key: "redo",
    value: function redo() {
      var _this4 = this;

      if (this.currentIndex > this.length) return; // currentIndex 가 -1 부터 시작하기 때문에 ++this.currentIndex 로 index 를 하나 올리고 시작한다. 

      if (this.currentIndex < 0) {
        this.currentIndex++;
      }

      var commandObject = this.undoHistories[this.currentIndex];

      if (commandObject && commandObject.command) {
        commandObject.command.redo(this.$editor, commandObject.data);
        this.$editor.debug(commandObject);
      }

      this.$editor.nextTick(function () {
        _this4.$editor.emit('refreshHistory', commandObject.command);
      });
    }
  }]);

  return HistoryManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/SnapManager.js





var MAX_SNAP_DISTANCE = 3;
var DEFAULT_DIST_VECTOR = esm["d" /* vec3 */].fromValues(0, 0, 0);
var AXIS_X = 'x';
var AXIS_Y = 'y';

function checkXAxis(sourceVertext, targetVertext) {
  return Math.abs(sourceVertext[0] - targetVertext[0]) < 1;
}

function checkYAxis(sourceVertext, targetVertext) {
  return Math.abs(sourceVertext[1] - targetVertext[1]) < 1;
}

function checkZAxis(sourceVertext, targetVertext) {
  return Math.abs(sourceVertext[2] - targetVertext[2]) < 1;
}
/**
 * 드래그 하는 시점에 객체의 verties 를 캐쉬해두는 역할을 한다. 
 * 
 * @class SnapManager
 */


var SnapManager_SnapManager = /*#__PURE__*/function () {
  /**
   * 
   * @param {Editor} editor 
   */
  function SnapManager(editor) {
    var snapDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MAX_SNAP_DISTANCE;

    classCallCheck_default()(this, SnapManager);

    this.editor = editor;
    this.map = new Map();
    this.snapTargetLayers = [];
    this.snapDistance = snapDistance;
  }
  /**
   * 캐쉬된 item들의 matrix 정보를 삭제한다.
   */


  createClass_default()(SnapManager, [{
    key: "clear",
    value: function clear() {
      var _this = this;

      this.snapTargetLayers = this.editor.selection.snapTargetLayers.map(function (it) {
        return _this.convertMatrix(it);
      });
    }
  }, {
    key: "convertMatrix",
    value: function convertMatrix(item) {
      var verties = this.convertGuideAndPathMatrix(item);
      var xList = verties.map(function (it) {
        return it[0];
      });
      var yList = verties.map(function (it) {
        return it[1];
      });
      return {
        id: item.id,
        xList: xList,
        yList: yList,
        verties: verties
      };
    }
    /**
     * 가이드, path 포인트 구하기 
     * 
     * @param {MovableItem} item 
     * @returns {vec3[]}
     */

  }, {
    key: "convertGuideAndPathMatrix",
    value: function convertGuideAndPathMatrix(item) {
      var guideVerties = item.guideVerties();
      var pathVerties = item.pathVerties();
      return [].concat(toConsumableArray_default()(guideVerties), toConsumableArray_default()(pathVerties));
    }
    /**
     * snap 포인트 모으기 
     * 
     * @returns {vec3[]}
     */

  }, {
    key: "getSnapPoints",
    value: function getSnapPoints() {
      var _this2 = this;

      var points = [];
      this.editor.selection.snapTargetLayersWithSelection.forEach(function (it) {
        points.push.apply(points, _this2.convertGuideAndPathMatrix(it));
      });
      return points;
    }
  }, {
    key: "checkX",
    value: function checkX(targetXList, sourceXList) {
      var dist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var checkXList = [];
      targetXList.forEach(function (targetX, targetIndex) {
        sourceXList.forEach(function (sourceX, sourceIndex) {
          var localDistX = targetX - sourceX;

          if (Math.abs(localDistX) <= dist) {
            checkXList.push({
              targetX: targetX,
              sourceX: sourceX,
              sourceIndex: sourceIndex,
              targetIndex: targetIndex,
              dx: localDistX
            });
          }
        });
      });
      return checkXList;
    }
  }, {
    key: "checkY",
    value: function checkY(targetYList, sourceYList) {
      var dist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var checkYList = [];
      targetYList.forEach(function (targetY, targetIndex) {
        sourceYList.forEach(function (sourceY, sourceIndex) {
          var localDistY = targetY - sourceY;

          if (Math.abs(localDistY) <= dist) {
            checkYList.push({
              targetY: targetY,
              sourceY: sourceY,
              sourceIndex: sourceIndex,
              targetIndex: targetIndex,
              dy: localDistY
            });
          }
        });
      });
      return checkYList;
    }
    /**
     * 
     * check target verties 
     * 
     * @param {vec3[]} sourceVerties 
     */

  }, {
    key: "check",
    value: function check(sourceVerties) {
      var _this3 = this;

      var snaps = [];
      var dist = this.snapDistance;
      var sourceXList = sourceVerties.map(function (it) {
        return it[0];
      });
      var sourceYList = sourceVerties.map(function (it) {
        return it[1];
      });
      this.snapTargetLayers.forEach(function (target) {
        var x = _this3.checkX(target.xList, sourceXList, dist)[0];

        var y = _this3.checkY(target.yList, sourceYList, dist)[0];

        snaps.push(esm["d" /* vec3 */].fromValues(x ? x.dx : 0, y ? y.dy : 0, 0));
      });
      return snaps.find(function (it) {
        return Object(func["isNotZero"])(it[0]) || Object(func["isNotZero"])(it[1]);
      }) || DEFAULT_DIST_VECTOR;
    }
  }, {
    key: "checkPoint",
    value: function checkPoint(sourceVertex) {
      var snap = this.check([sourceVertex]);
      return esm["d" /* vec3 */].add([], sourceVertex, snap);
    }
    /**
     * 점을 기준으로 가이드 라인 포인트 얻기 
     * 
     * @param {vec3[]} sourceVerties 
     * @param {vec3[]} targetVerties 
     * @returns {Array} [sourceVertex, targetVertex, AXIS_X or AXIS_Y ]
     */

  }, {
    key: "getGuidesByPointPoint",
    value: function getGuidesByPointPoint(sourceVerties, targetVerties) {
      var points = [];
      var sourceVertext, targetVertext;

      for (var sourceIndex = 0, sourceLength = sourceVerties.length; sourceIndex < sourceLength; sourceIndex++) {
        sourceVertext = sourceVerties[sourceIndex];

        for (var targetIndex = 0, targetLength = targetVerties.length; targetIndex < targetLength; targetIndex++) {
          targetVertext = targetVerties[targetIndex];

          if (checkXAxis(sourceVertext, targetVertext)) {
            // x 좌표가 같을 때 , y 는 다를 때 
            points.push([sourceVertext, targetVertext, AXIS_X]);
          }

          if (checkYAxis(sourceVertext, targetVertext)) {
            // x 좌표가 같을 때 , y 는 다를 때 
            points.push([sourceVertext, targetVertext, AXIS_Y]);
          }
        }
      }

      return points;
    }
  }, {
    key: "findGuide",
    value: function findGuide(sourceVerties) {
      var _this4 = this;

      var guides = [];
      this.snapTargetLayers.forEach(function (target) {
        // vertext 대 vertext 를 기준으로 좌표 설정 
        var points = _this4.getGuidesByPointPoint(sourceVerties, target.verties);

        guides.push.apply(guides, points);
      });
      return guides;
    }
  }, {
    key: "findGuideOne",
    value: function findGuideOne(sourceVerties) {
      return [this.findGuide(sourceVerties)[0]];
    }
  }]);

  return SnapManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/KeyboardManager.js



/**
 * @class KeyBoardManager 
 */
var KeyboardManager_KeyBoardManager = /*#__PURE__*/function () {
  function KeyBoardManager(editor) {
    classCallCheck_default()(this, KeyBoardManager);

    this.editor = editor;
    this.codeSet = new Set();
    this.keyCodeSet = new Set();
  }
  /**
   * 키 이벤트가 발생 했을 때 키, 키코드 추가 하기 
   * 
   * @param {string} key 
   * @param {number} keyCode 
   */


  createClass_default()(KeyBoardManager, [{
    key: "add",
    value: function add(key, keyCode) {
      if (this.codeSet.has(key) === false) {
        this.codeSet.add(key);
      }

      if (this.keyCodeSet.has(keyCode) === false) {
        this.keyCodeSet.add(keyCode);
      }
    }
  }, {
    key: "remove",
    value: function remove(key, keyCode) {
      this.codeSet["delete"](key);
      this.keyCodeSet["delete"](keyCode);
    }
    /**
     * 눌러진 키 체크하기 
     * @param {string|number} keyOrKeyCode 
     */

  }, {
    key: "hasKey",
    value: function hasKey(keyOrKeyCode) {
      return this.codeSet.has(keyOrKeyCode) || this.keyCodeSet.has(keyOrKeyCode);
    }
    /**
     * key, keycode 가 눌러져있는지 체크 
     * @param {string|number} keyOrKeyCode 
     */

  }, {
    key: "check",
    value: function check() {
      var _this = this;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return args.some(function (keyOrKeyCode) {
        return _this.hasKey(keyOrKeyCode);
      });
    }
  }]);

  return KeyBoardManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/ViewportManager.js





/**
 * editor 의 viewport 를 관리한다. 
 * 
 * 
 * @class ViewportManager 
 */

var ViewportManager_ViewportManager = /*#__PURE__*/function () {
  function ViewportManager(editor) {
    classCallCheck_default()(this, ViewportManager);

    this.editor = editor;
    this.canvasSize = null;
    this.cachedViewport = Object(collision["e" /* rectToVerties */])(0, 0, 0, 0);
    this.mouse = esm["d" /* vec3 */].create();
    this.scale = 1;
    this.translate = esm["d" /* vec3 */].create(), this.transformOrigin = esm["d" /* vec3 */].create(), this.maxScale = 250;
    this.minScale = 0.2;
    this.zoomFactor = 1;
    this.resetWorldMatrix();
  }
  /**
   * transform origin 을 설정 
   * 
   * @param {vec3} originVec 
   */


  createClass_default()(ViewportManager, [{
    key: "setTransformOrigin",
    value: function setTransformOrigin(originVec) {
      this.transformOrigin = originVec;
      this.resetWorldMatrix();
    }
    /**
     * transformOrigin 을 설정하면서 translate 로 화면까지 옮김 
     * 
     * @param {vec3} newOrigin 
     */

  }, {
    key: "setTransformOriginWithTranslate",
    value: function setTransformOriginWithTranslate(newOrigin) {
      var oldOrigin = esm["d" /* vec3 */].clone(this.transformOrigin);
      this.setTransformOrigin(newOrigin);
      this.setTranslate(esm["d" /* vec3 */].add([], this.translate, esm["d" /* vec3 */].subtract([], oldOrigin, newOrigin)));
    }
    /**
     * scale 설정 
     * 
     * @param {number} scale 0.3...5
     */

  }, {
    key: "setScale",
    value: function setScale(scale) {
      this.scale = Math.min(Math.max(this.minScale, scale), this.maxScale);
      this.resetWorldMatrix();
    }
    /**
     * viewport 이동 
     * 
     * @param {vec3} translate 
     */

  }, {
    key: "setTranslate",
    value: function setTranslate(translate) {
      this.translate = translate;
      this.resetWorldMatrix();
    }
    /**
     * 2가지 기본 matrix 를 설정한다. 
     * 
     * 1. world matrix 
     * 2. scale matrix - 이동 간격을 계산할 때 주로 사용 
     * 
     */

  }, {
    key: "resetWorldMatrix",
    value: function resetWorldMatrix() {
      this.matrix = Object(math["calculateMatrix"])(esm["a" /* mat4 */].fromTranslation([], this.translate), esm["a" /* mat4 */].fromTranslation([], this.transformOrigin), esm["a" /* mat4 */].fromScaling([], [this.scale, this.scale, 1]), esm["a" /* mat4 */].fromTranslation([], esm["d" /* vec3 */].negate([], this.transformOrigin)));
      this.matrixInverse = esm["a" /* mat4 */].invert([], this.matrix);
      this.scaleMatrix = Object(math["calculateMatrix"])(esm["a" /* mat4 */].fromScaling([], [this.scale, this.scale, 1]));
      this.scaleMatrixInverse = esm["a" /* mat4 */].invert([], this.scaleMatrix);
      this.refresh();
    }
    /**
     * 
     * canvas 크기 재설정하기 
     * 
     * window 의 크기가 바뀌거나 레이아웃이 바뀌면 전체 canvas의 크기도 같이 변경해준다. 
     * 
     * @param {object} rect 
     * @param {number} rect.x
     * @param {number} rect.y
     * @param {number} rect.width
     * @param {number} rect.height
     */

  }, {
    key: "refreshCanvasSize",
    value: function refreshCanvasSize(rect) {
      if (this.canvasSize) {
        this.canvasSize = {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
        this.cachedViewport = Object(collision["e" /* rectToVerties */])(0, 0, this.canvasSize.width, this.canvasSize.height);
        var newVerties = esm["d" /* vec3 */].transformMat4([], [this.canvasSize.width, this.canvasSize.height, 0], this.scaleMatrixInverse);
        var newTransformOrigin = esm["d" /* vec3 */].add([], this.verties[0], [newVerties[0] / 2, newVerties[1] / 2, 0]); // translate * translateOrigin * scale * -translateOrigin = translate? * translateOrigin * scale * translateOrigin
        // matrix = translate? * translateOrigin * scale * -translateOrigin
        // matrix = translate? * newTransformOriginMatrix
        // matrix * -newTransformOriginMatrix = translate 

        var newTranslate = esm["a" /* mat4 */].getTranslation([], Object(math["calculateMatrix"])(this.matrix, Object(math["calculateMatrixInverse"])(esm["a" /* mat4 */].fromTranslation([], newTransformOrigin), this.scaleMatrix, esm["a" /* mat4 */].invert([], esm["a" /* mat4 */].fromTranslation([], newTransformOrigin)))));
        this.setTranslate(newTranslate);
        this.setTransformOrigin(newTransformOrigin);
      } else {
        this.canvasSize = {
          x: rect.x,
          y: rect.y,
          width: rect.width,
          height: rect.height
        };
        this.cachedViewport = Object(collision["e" /* rectToVerties */])(0, 0, this.canvasSize.width, this.canvasSize.height);
        this.setTransformOrigin([this.canvasSize.width / 2, this.canvasSize.height / 2, 0]);
      }

      this.editor.emit('updateViewport');
    }
    /**
     * 
     * 마지막 시점의 translate, origin, scale 을 적용한 viewport 의 verties 를 생성한다.  
     * 
     */

  }, {
    key: "refresh",
    value: function refresh() {
      if (this.cachedViewport) {
        this.verties = Object(math["vertiesMap"])(this.cachedViewport, this.matrixInverse);
      }
    }
    /**
     * mousePoint{x, y} 를 가지고 실제 좌표를 구한다. 
     * 
     * @param {number} x 
     * @param {number} y 
     */

  }, {
    key: "createWorldPosition",
    value: function createWorldPosition(x, y) {
      var origin = {
        x: x - this.canvasSize.x,
        y: y - this.canvasSize.y
      };
      var mouseX = this.verties[0][0] + (this.verties[2][0] - this.verties[0][0]) * (origin.x / this.canvasSize.width);
      var mouseY = this.verties[0][1] + (this.verties[2][1] - this.verties[0][1]) * (origin.y / this.canvasSize.height);
      return [mouseX, mouseY, 0];
    }
    /**
     * 마우스 point{x, y} 를 기준으로 viewport 를 다시 맞춤 
     * 
     * @param {number} x 
     * @param {number} y 
     */

  }, {
    key: "setMousePoint",
    value: function setMousePoint(x, y) {
      this.mouse = this.createWorldPosition(x, y);
      this.setTransformOriginWithTranslate(esm["d" /* vec3 */].lerp([], this.verties[0], this.verties[2], 0.5));
      this.editor.emit('updateViewport');
    }
  }, {
    key: "zoom",
    value: function zoom(zoomFactor) {
      var oldScale = this.scale;
      var newScale = oldScale * zoomFactor;
      this.setScale(newScale);
      var newZoomFactor = this.scale / oldScale;
      this.zoomFactor = newZoomFactor;

      if (newZoomFactor !== 1) {
        this.setTransformOriginWithTranslate(esm["d" /* vec3 */].lerp([], this.mouse, this.transformOrigin, 1 / zoomFactor));
        this.editor.emit('updateViewport');
      }
    }
    /**
     * 
     * pan 움직이기 
     * 
     * @param {number} x 
     * @param {number} y 
     * @param {number} z 
     */

  }, {
    key: "pan",
    value: function pan(x, y) {
      var z = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      this.setTransformOriginWithTranslate(esm["d" /* vec3 */].add([], this.transformOrigin, [x, y, 0]));
      this.editor.emit('updateViewport');
    }
    /**
     * 특정 영역의 center 로 보내기 
     * 
     * @param {vec3[]} areaVerties 
     */

  }, {
    key: "moveLayerToCenter",
    value: function moveLayerToCenter(areaVerties) {
      var scaleRate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -0.2;
      var withScale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var areaCenter = esm["d" /* vec3 */].lerp([], areaVerties[0], areaVerties[2], 0.5);
      var width = esm["d" /* vec3 */].dist(areaVerties[0], areaVerties[1]);
      var height = esm["d" /* vec3 */].dist(areaVerties[0], areaVerties[3]);
      var viewportCenter = esm["d" /* vec3 */].lerp([], this.verties[0], this.verties[2], 0.5);
      var viewportWidth = esm["d" /* vec3 */].dist(this.verties[0], this.verties[1]);
      var viewportHeight = esm["d" /* vec3 */].dist(this.verties[0], this.verties[3]);
      var minRate = withScale ? Math.min(viewportWidth / width, viewportHeight / height) + scaleRate : 1;
      this.setTranslate(esm["d" /* vec3 */].add([], this.translate, esm["d" /* vec3 */].subtract([], viewportCenter, areaCenter)));
      this.setTransformOrigin(areaCenter);
      this.setScale(this.scale * minRate);
      this.editor.emit('updateViewport');
    }
    /**
     * 현재 mouse 포인트를 x, y 로 변환해서 넘겨준다. 
     * 
     * @type {number}
     * @returns {vec3}
     */

  }, {
    key: "pos",
    get: function get() {
      var mouseX = (this.mouse[0] - this.verties[0][0]) / (this.verties[2][0] - this.verties[0][0]) * 100;
      var mouseY = (this.mouse[1] - this.verties[0][1]) / (this.verties[2][1] - this.verties[0][1]) * 100;
      return [mouseX, mouseY, 0];
    }
  }, {
    key: "minX",
    get: function get() {
      return this.verties[0][0];
    }
  }, {
    key: "maxX",
    get: function get() {
      return this.verties[2][0];
    }
  }, {
    key: "minY",
    get: function get() {
      return this.verties[0][1];
    }
  }, {
    key: "maxY",
    get: function get() {
      return this.verties[2][1];
    }
  }, {
    key: "center",
    get: function get() {
      return this.verties[4];
    }
  }, {
    key: "height",
    get: function get() {
      return this.maxY - this.minY;
    }
  }, {
    key: "width",
    get: function get() {
      return this.maxX - this.minX;
    }
  }, {
    key: "applyVertex",
    value: function applyVertex(vertex) {
      return esm["d" /* vec3 */].transformMat4([], vertex, this.matrix);
    }
  }, {
    key: "applyVertexInverse",
    value: function applyVertexInverse(vertex) {
      return esm["d" /* vec3 */].transformMat4([], vertex, this.matrixInverse);
    }
  }, {
    key: "applyVerties",
    value: function applyVerties(verties) {
      return Object(math["vertiesMap"])(verties, this.matrix);
    }
  }, {
    key: "applyScaleVerties",
    value: function applyScaleVerties(verties) {
      return Object(math["vertiesMap"])(verties, this.scaleMatrix);
    }
  }, {
    key: "applyVertiesInverse",
    value: function applyVertiesInverse(verties) {
      return Object(math["vertiesMap"])(verties, this.matrixInverse);
    }
  }, {
    key: "applyScaleVertiesInverse",
    value: function applyScaleVertiesInverse(verties) {
      return Object(math["vertiesMap"])(verties, this.scaleMatrixInverse);
    }
    /**
     * viewport 좌표로 변환 
     * 
     * @param {number} x 
     * @param {number} y 
     * @param {number} width 
     * @param {number} height 
     * @returns {vec3[]}
     */

  }, {
    key: "createAreaVerties",
    value: function createAreaVerties(x, y, width, height) {
      return this.applyVertiesInverse(Object(collision["f" /* rectToVertiesForArea */])(x, y, width, height));
    }
  }]);

  return ViewportManager;
}();
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var helpers_get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(helpers_get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/ItemRender.js






var ItemRender_ItemRender = /*#__PURE__*/function () {
  function ItemRender() {
    classCallCheck_default()(this, ItemRender);
  }

  createClass_default()(ItemRender, [{
    key: "render",
    value: function () {
      var _render = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.toCloneObject(item, renderer);

              case 2:
                return _context.abrupt("return", _context.sent);

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function render(_x, _x2) {
        return _render.apply(this, arguments);
      }

      return render;
    }()
  }, {
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2(item, renderer) {
        var json, layers, i, len;
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                json = item.attrs('itemType', 'elementType', 'type', 'visible', 'lock', 'selected');
                json.referenceId = item.id;
                json.newTargetId = Object(math["uuid"])();
                layers = [];
                i = 0, len = item.layers.length;

              case 5:
                if (!(i < len)) {
                  _context2.next = 14;
                  break;
                }

                _context2.t0 = layers;
                _context2.next = 9;
                return renderer.render(item.layers[i], renderer);

              case 9:
                _context2.t1 = _context2.sent;

                _context2.t0.push.call(_context2.t0, _context2.t1);

              case 11:
                i++;
                _context2.next = 5;
                break;

              case 14:
                json.layers = layers;
                return _context2.abrupt("return", json);

              case 16:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function toCloneObject(_x3, _x4) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return ItemRender;
}();


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/MovableRender.js










function MovableRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function MovableRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { MovableRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { MovableRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var MovableRender_MovableRender = /*#__PURE__*/function (_ItemRender) {
  inherits_default()(MovableRender, _ItemRender);

  var _super = _createSuper(MovableRender);

  function MovableRender() {
    classCallCheck_default()(this, MovableRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(MovableRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = MovableRender_objectSpread;
                _context.t1 = MovableRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(MovableRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('x', 'y', 'width', 'height');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return MovableRender;
}(ItemRender_ItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/DomRender.js










function DomRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function DomRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { DomRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { DomRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function DomRender_createSuper(Derived) { var hasNativeReflectConstruct = DomRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DomRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var DomRender_DomRender = /*#__PURE__*/function (_MovableRender) {
  inherits_default()(DomRender, _MovableRender);

  var _super = DomRender_createSuper(DomRender);

  function DomRender() {
    classCallCheck_default()(this, DomRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(DomRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = DomRender_objectSpread;
                _context.t1 = DomRender_objectSpread;
                _context.t2 = DomRender_objectSpread;
                _context.t3 = {};
                _context.next = 6;
                return get_default()(getPrototypeOf_default()(DomRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 6:
                _context.t4 = _context.sent;
                _context.t5 = (0, _context.t2)(_context.t3, _context.t4);
                _context.t6 = item.attrs('position', 'right', 'bottom', 'rootVariable', 'variable', 'transform', 'filter', 'backdrop-filter', 'background-color', 'background-image', 'text-clip', 'border-radius', 'border', 'box-shadow', 'text-shadow', 'clip-path', 'color', 'font-size', 'font-stretch', 'line-height', 'text-align', 'text-transform', 'text-decoration', 'letter-spacing', 'word-spacing', 'text-indent', 'perspective-origin', 'transform-origin', 'transform-style', 'perspective', 'mix-blend-mode', 'overflow', 'opacity', 'rotate', 'flex-layout', 'grid-layout', 'animation', 'transition');
                _context.t7 = (0, _context.t1)(_context.t5, _context.t6);
                _context.t8 = {};
                _context.t9 = {
                  selectors: item.selectors.map(function (selector) {
                    return selector.clone();
                  }),
                  svg: item.svg.map(function (svg) {
                    return svg.clone();
                  })
                };
                return _context.abrupt("return", (0, _context.t0)(_context.t7, _context.t8, _context.t9));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return DomRender;
}(MovableRender_MovableRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/ArtBoardRender.js










function ArtBoardRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ArtBoardRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ArtBoardRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ArtBoardRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ArtBoardRender_createSuper(Derived) { var hasNativeReflectConstruct = ArtBoardRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ArtBoardRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ArtBoardRender_ArtBoardRender = /*#__PURE__*/function (_DomRender) {
  inherits_default()(ArtBoardRender, _DomRender);

  var _super = ArtBoardRender_createSuper(ArtBoardRender);

  function ArtBoardRender() {
    classCallCheck_default()(this, ArtBoardRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ArtBoardRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = ArtBoardRender_objectSpread;
                _context.t1 = ArtBoardRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(ArtBoardRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('name');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return ArtBoardRender;
}(DomRender_DomRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/LayerRender.js










function LayerRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function LayerRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LayerRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LayerRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function LayerRender_createSuper(Derived) { var hasNativeReflectConstruct = LayerRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayerRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var LayerRender_LayerRender = /*#__PURE__*/function (_DomRender) {
  inherits_default()(LayerRender, _DomRender);

  var _super = LayerRender_createSuper(LayerRender);

  function LayerRender() {
    classCallCheck_default()(this, LayerRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayerRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = LayerRender_objectSpread;
                _context.t1 = LayerRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(LayerRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('tagName');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return LayerRender;
}(DomRender_DomRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/CircleRender.js





function CircleRender_createSuper(Derived) { var hasNativeReflectConstruct = CircleRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CircleRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var CircleRender_CircleRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(CircleRender, _LayerRender);

  var _super = CircleRender_createSuper(CircleRender);

  function CircleRender() {
    classCallCheck_default()(this, CircleRender);

    return _super.apply(this, arguments);
  }

  return CircleRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/ImageRender.js










function ImageRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ImageRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ImageRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ImageRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ImageRender_createSuper(Derived) { var hasNativeReflectConstruct = ImageRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ImageRender_ImageRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(ImageRender, _LayerRender);

  var _super = ImageRender_createSuper(ImageRender);

  function ImageRender() {
    classCallCheck_default()(this, ImageRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        var project, image, src;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                project = item.project;
                image = project.imageKeys[item.src];
                src = image.original;
                _context.t0 = ImageRender_objectSpread;
                _context.t1 = ImageRender_objectSpread;
                _context.t2 = {};
                _context.next = 8;
                return get_default()(getPrototypeOf_default()(ImageRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 8:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = {};
                _context.t6 = {
                  src: src
                };
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5, _context.t6));

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return ImageRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/AssetRender.js










function AssetRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function AssetRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { AssetRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { AssetRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function AssetRender_createSuper(Derived) { var hasNativeReflectConstruct = AssetRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AssetRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var AssetRender_AssetRender = /*#__PURE__*/function (_ItemRender) {
  inherits_default()(AssetRender, _ItemRender);

  var _super = AssetRender_createSuper(AssetRender);

  function AssetRender() {
    classCallCheck_default()(this, AssetRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(AssetRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = AssetRender_objectSpread;
                _context.t1 = AssetRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(AssetRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('colors', 'gradients', 'svgfilters', 'svgimages', 'images', 'keyframes');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return AssetRender;
}(ItemRender_ItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/TimelineRender.js










function TimelineRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TimelineRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TimelineRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TimelineRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TimelineRender_createSuper(Derived) { var hasNativeReflectConstruct = TimelineRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var TimelineRender_TimelineRender = /*#__PURE__*/function (_AssetRender) {
  inherits_default()(TimelineRender, _AssetRender);

  var _super = TimelineRender_createSuper(TimelineRender);

  function TimelineRender() {
    classCallCheck_default()(this, TimelineRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = TimelineRender_objectSpread;
                _context.t1 = TimelineRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(TimelineRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('timeline');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return TimelineRender;
}(AssetRender_AssetRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/ProjectRender.js










function ProjectRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ProjectRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ProjectRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ProjectRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ProjectRender_createSuper(Derived) { var hasNativeReflectConstruct = ProjectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ProjectRender_ProjectRender = /*#__PURE__*/function (_TimelineRender) {
  inherits_default()(ProjectRender, _TimelineRender);

  var _super = ProjectRender_createSuper(ProjectRender);

  function ProjectRender() {
    classCallCheck_default()(this, ProjectRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = ProjectRender_objectSpread;
                _context.t1 = ProjectRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(ProjectRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('name', 'description', 'rootVariable');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return ProjectRender;
}(TimelineRender_TimelineRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/RectRender.js





function RectRender_createSuper(Derived) { var hasNativeReflectConstruct = RectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var RectRender_RectRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(RectRender, _LayerRender);

  var _super = RectRender_createSuper(RectRender);

  function RectRender() {
    classCallCheck_default()(this, RectRender);

    return _super.apply(this, arguments);
  }

  return RectRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/SVGItemRender.js










function SVGItemRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGItemRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGItemRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGItemRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGItemRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGItemRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGItemRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGItemRender_SVGItemRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(SVGItemRender, _LayerRender);

  var _super = SVGItemRender_createSuper(SVGItemRender);

  function SVGItemRender() {
    classCallCheck_default()(this, SVGItemRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGItemRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = SVGItemRender_objectSpread;
                _context.t1 = SVGItemRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(SVGItemRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('overflow', 'stroke', 'stroke-width', 'svgfilter', 'fill', 'fill-rule', 'fill-opacity', 'stroke-linecap', 'stroke-linejoin', 'stroke-dashoffset', 'stroke-dasharray', 'text-anchor');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return SVGItemRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/SVGPathRender.js










function SVGPathRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGPathRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGPathRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGPathRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGPathRender_SVGPathItemRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGPathItemRender, _SVGItemRender);

  var _super = SVGPathRender_createSuper(SVGPathItemRender);

  function SVGPathItemRender() {
    classCallCheck_default()(this, SVGPathItemRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGPathItemRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = SVGPathRender_objectSpread;
                _context.t1 = SVGPathRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(SVGPathItemRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('d');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return SVGPathItemRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/SVGTextPathRender.js










function SVGTextPathRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextPathRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextPathRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextPathRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGTextPathRender_SVGTextPathRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextPathRender, _SVGItemRender);

  var _super = SVGTextPathRender_createSuper(SVGTextPathRender);

  function SVGTextPathRender() {
    classCallCheck_default()(this, SVGTextPathRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextPathRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = SVGTextPathRender_objectSpread;
                _context.t1 = SVGTextPathRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(SVGTextPathRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('totalLength', 'd', 'text', 'textLength', 'lengthAdjust', 'startOffset');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return SVGTextPathRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/SVGTextRender.js










function SVGTextRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGTextRender_SVGTextRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextRender, _SVGItemRender);

  var _super = SVGTextRender_createSuper(SVGTextRender);

  function SVGTextRender() {
    classCallCheck_default()(this, SVGTextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = SVGTextRender_objectSpread;
                _context.t1 = SVGTextRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(SVGTextRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('totalLength', 'text', 'textLength', 'lengthAdjust', 'shape-inside');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return SVGTextRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/TextRender.js










function TextRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TextRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TextRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TextRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TextRender_createSuper(Derived) { var hasNativeReflectConstruct = TextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var TextRender_TextRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(TextRender, _LayerRender);

  var _super = TextRender_createSuper(TextRender);

  function TextRender() {
    classCallCheck_default()(this, TextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = TextRender_objectSpread;
                _context.t1 = TextRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(TextRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('content');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return TextRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/VideoRender.js










function VideoRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function VideoRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { VideoRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { VideoRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function VideoRender_createSuper(Derived) { var hasNativeReflectConstruct = VideoRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var VideoRender_VideoRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(VideoRender, _LayerRender);

  var _super = VideoRender_createSuper(VideoRender);

  function VideoRender() {
    classCallCheck_default()(this, VideoRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = VideoRender_objectSpread;
                _context.t1 = VideoRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(VideoRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('src');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return VideoRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/TemplateRender.js










function TemplateRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TemplateRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TemplateRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TemplateRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TemplateRender_createSuper(Derived) { var hasNativeReflectConstruct = TemplateRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TemplateRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var TemplateRender_TemplateRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(TemplateRender, _LayerRender);

  var _super = TemplateRender_createSuper(TemplateRender);

  function TemplateRender() {
    classCallCheck_default()(this, TemplateRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TemplateRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = TemplateRender_objectSpread;
                _context.t1 = TemplateRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(TemplateRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('engine', 'template', 'params');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return TemplateRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/IFrameRender.js










function IFrameRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function IFrameRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { IFrameRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { IFrameRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function IFrameRender_createSuper(Derived) { var hasNativeReflectConstruct = IFrameRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function IFrameRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var IFrameRender_IFrameRender = /*#__PURE__*/function (_LayerRender) {
  inherits_default()(IFrameRender, _LayerRender);

  var _super = IFrameRender_createSuper(IFrameRender);

  function IFrameRender() {
    classCallCheck_default()(this, IFrameRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(IFrameRender, [{
    key: "toCloneObject",
    value: function () {
      var _toCloneObject = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee(item, renderer) {
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.t0 = IFrameRender_objectSpread;
                _context.t1 = IFrameRender_objectSpread;
                _context.t2 = {};
                _context.next = 5;
                return get_default()(getPrototypeOf_default()(IFrameRender.prototype), "toCloneObject", this).call(this, item, renderer);

              case 5:
                _context.t3 = _context.sent;
                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);
                _context.t5 = item.attrs('src');
                return _context.abrupt("return", (0, _context.t0)(_context.t4, _context.t5));

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function toCloneObject(_x, _x2) {
        return _toCloneObject.apply(this, arguments);
      }

      return toCloneObject;
    }()
  }]);

  return IFrameRender;
}(LayerRender_LayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/JSONRenderer/index.js















var renderers = {
  'project': new ProjectRender_ProjectRender(),
  'artboard': new ArtBoardRender_ArtBoardRender(),
  'rect': new RectRender_RectRender(),
  'circle': new CircleRender_CircleRender(),
  'image': new ImageRender_ImageRender(),
  'template': new TemplateRender_TemplateRender(),
  'iframe': new IFrameRender_IFrameRender(),
  'text': new TextRender_TextRender(),
  'video': new VideoRender_VideoRender(),
  'svg-path': new SVGPathRender_SVGPathItemRender(),
  'svg-text': new SVGTextRender_SVGTextRender(),
  'svg-textpath': new SVGTextPathRender_SVGTextPathRender()
};
/* harmony default export */ var JSONRenderer = ({
  /**
   * 
   * @param {Item} item 
   */
  render: function render(item, renderer) {
    var _this = this;

    return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
      var currentRenderer;
      return regenerator_default.a.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (item) {
                _context.next = 2;
                break;
              }

              return _context.abrupt("return");

            case 2:
              currentRenderer = renderers[item.itemType];

              if (!currentRenderer) {
                _context.next = 7;
                break;
              }

              _context.next = 6;
              return currentRenderer.render(item, renderer || _this);

            case 6:
              return _context.abrupt("return", _context.sent);

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }))();
  },
  getResourceDataURI: function getResourceDataURI(item, renderer) {
    return asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {
      return regenerator_default.a.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }))();
  }
});
// CONCATENATED MODULE: ./src/el/editor/manager/StorageManager.js







/**
 * localStorage Manager
 * 
 * @class StorageManager 
 */

var StorageManager_StorageManager = /*#__PURE__*/function () {
  function StorageManager(editor) {
    classCallCheck_default()(this, StorageManager);

    this.editor = editor;
  }

  createClass_default()(StorageManager, [{
    key: "getArtboardList",
    value: function () {
      var _getArtboardList = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var isNew, artboards;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                isNew = false;
                artboards = (this.editor.loadItem("artboards") || []).map(function (it) {
                  if (!it.id) {
                    it.id = Object(math["uuid"])();
                    isNew = true;
                  }

                  return it;
                });

                if (!isNew) {
                  _context.next = 5;
                  break;
                }

                _context.next = 5;
                return this.setArtboardList(artboards);

              case 5:
                return _context.abrupt("return", artboards);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getArtboardList() {
        return _getArtboardList.apply(this, arguments);
      }

      return getArtboardList;
    }()
  }, {
    key: "getCustomComponentList",
    value: function () {
      var _getCustomComponentList = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2() {
        var isNew, components;
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                isNew = false;
                components = (this.editor.loadItem("custom-components") || []).map(function (it) {
                  if (!it.id) {
                    it.id = Object(math["uuid"])();
                    isNew = true;
                  }

                  return it;
                });

                if (!isNew) {
                  _context2.next = 5;
                  break;
                }

                _context2.next = 5;
                return this.setCustomComponentList(components);

              case 5:
                return _context2.abrupt("return", components);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getCustomComponentList() {
        return _getCustomComponentList.apply(this, arguments);
      }

      return getCustomComponentList;
    }()
  }, {
    key: "setArtboardList",
    value: function () {
      var _setArtboardList = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee3(list) {
        return regenerator_default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                this.editor.saveItem('artboards', list);

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function setArtboardList(_x) {
        return _setArtboardList.apply(this, arguments);
      }

      return setArtboardList;
    }()
  }, {
    key: "setCustomComponentList",
    value: function () {
      var _setCustomComponentList = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee4(list) {
        return regenerator_default.a.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                this.editor.saveItem('custom-components', list);

              case 1:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function setCustomComponentList(_x2) {
        return _setCustomComponentList.apply(this, arguments);
      }

      return setCustomComponentList;
    }()
  }, {
    key: "getArtBoard",
    value: function () {
      var _getArtBoard = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee5(id) {
        var artboardList, it;
        return regenerator_default.a.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return this.getArtboardList();

              case 2:
                artboardList = _context5.sent;
                it = artboardList.find(function (it) {
                  return it.id === id;
                });

                if (!(it && it.artboard)) {
                  _context5.next = 6;
                  break;
                }

                return _context5.abrupt("return", it.artboard);

              case 6:
                return _context5.abrupt("return", null);

              case 7:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function getArtBoard(_x3) {
        return _getArtBoard.apply(this, arguments);
      }

      return getArtBoard;
    }()
  }, {
    key: "getCustomComponent",
    value: function () {
      var _getCustomComponent = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee6(id) {
        var componentList, it;
        return regenerator_default.a.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _context6.next = 2;
                return this.getCustomComponentList();

              case 2:
                componentList = _context6.sent;
                it = componentList.find(function (it) {
                  return it.id === id;
                });

                if (!(it && it.component)) {
                  _context6.next = 6;
                  break;
                }

                return _context6.abrupt("return", it.component);

              case 6:
                return _context6.abrupt("return", null);

              case 7:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getCustomComponent(_x4) {
        return _getCustomComponent.apply(this, arguments);
      }

      return getCustomComponent;
    }()
    /**
     * 저장될 preview 이미지를 포함해서 보여주기 
     * 
     * @param {string} datauri  image datauri 
     */

  }, {
    key: "saveArtboard",
    value: function () {
      var _saveArtboard = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee7() {
        var datauri,
            current,
            artboardList,
            json,
            _args7 = arguments;
        return regenerator_default.a.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                datauri = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : '';
                current = this.editor.selection.current;

                if (!current) {
                  _context7.next = 13;
                  break;
                }

                _context7.next = 5;
                return this.getArtboardList();

              case 5:
                artboardList = _context7.sent;
                _context7.next = 8;
                return JSONRenderer.render(current);

              case 8:
                json = _context7.sent;
                json.x = "0px";
                json.y = "0px";
                _context7.next = 13;
                return this.setArtboardList([].concat(toConsumableArray_default()(artboardList), [{
                  id: Object(math["uuid"])(),
                  preview: datauri,
                  artboard: json
                }]));

              case 13:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function saveArtboard() {
        return _saveArtboard.apply(this, arguments);
      }

      return saveArtboard;
    }()
    /**
     * 저장될 preview 이미지를 포함해서 보여주기 
     * 
     * @param {string} datauri  image datauri 
     */

  }, {
    key: "saveCustomComponent",
    value: function () {
      var _saveCustomComponent = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee8() {
        var datauri,
            current,
            componentList,
            json,
            _args8 = arguments;
        return regenerator_default.a.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                datauri = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : '';
                current = this.editor.selection.current;

                if (!current) {
                  _context8.next = 13;
                  break;
                }

                _context8.next = 5;
                return this.getCustomComponentList();

              case 5:
                componentList = _context8.sent;
                _context8.next = 8;
                return JSONRenderer.render(current);

              case 8:
                json = _context8.sent;
                json.x = "0px";
                json.y = "0px";
                _context8.next = 13;
                return this.setCustomComponentList([].concat(toConsumableArray_default()(componentList), [{
                  id: Object(math["uuid"])(),
                  preview: datauri,
                  component: json
                }]));

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function saveCustomComponent() {
        return _saveCustomComponent.apply(this, arguments);
      }

      return saveCustomComponent;
    }()
  }, {
    key: "removeArtboard",
    value: function () {
      var _removeArtboard = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee9(id) {
        var artboardList;
        return regenerator_default.a.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return this.getArtboardList();

              case 2:
                artboardList = _context9.sent;
                _context9.next = 5;
                return this.setArtboardList(artboardList.filter(function (it) {
                  return it.id !== id;
                }));

              case 5:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function removeArtboard(_x5) {
        return _removeArtboard.apply(this, arguments);
      }

      return removeArtboard;
    }()
  }, {
    key: "removeCustomComponent",
    value: function () {
      var _removeCustomComponent = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee10(id) {
        var componentList;
        return regenerator_default.a.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return this.getCustomComponentList();

              case 2:
                componentList = _context10.sent;
                _context10.next = 5;
                return this.setCustomComponentList(componentList.filter(function (it) {
                  return it.id !== id;
                }));

              case 5:
              case "end":
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));

      function removeCustomComponent(_x6) {
        return _removeCustomComponent.apply(this, arguments);
      }

      return removeCustomComponent;
    }()
  }]);

  return StorageManager;
}();
// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// CONCATENATED MODULE: ./src/el/editor/manager/CursorManager.js






var CursorManager_CursorManager = /*#__PURE__*/function () {
  function CursorManager() {
    classCallCheck_default()(this, CursorManager);
  }

  createClass_default()(CursorManager, [{
    key: "load",
    value: function () {
      var _load = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var iconName,
            _icon$iconName,
            _len,
            args,
            _key,
            iconContent,
            blob,
            _args = arguments;

        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                iconName = _args.length > 0 && _args[0] !== undefined ? _args[0] : 'default';

                if (!icon["a" /* default */][iconName]) {
                  _context.next = 8;
                  break;
                }

                for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = _args[_key];
                }

                iconContent = Object(func["isFunction"])(icon["a" /* default */][iconName]) ? (_icon$iconName = icon["a" /* default */][iconName]).call.apply(_icon$iconName, [icon["a" /* default */][iconName]].concat(args)) : icon["a" /* default */][iconName];
                blob = new Blob([iconContent], {
                  type: 'image/svg+xml'
                });
                return _context.abrupt("return", new Promise(function (resolve, reject) {
                  var reader = new FileReader();

                  reader.onload = function (e) {
                    var datauri = e.target.result;
                    resolve("url(".concat(datauri, ") 12 12, auto"));
                  };

                  reader.readAsDataURL(blob);
                }));

              case 8:
                return _context.abrupt("return", iconName);

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function load() {
        return _load.apply(this, arguments);
      }

      return load;
    }()
  }]);

  return CursorManager;
}();
// CONCATENATED MODULE: ./src/el/editor/manager/AssetManager.js




var AssetManager_AssetManager = /*#__PURE__*/function () {
  function AssetManager(editor) {
    classCallCheck_default()(this, AssetManager);

    this.$editor = editor;
  }

  createClass_default()(AssetManager, [{
    key: "project",
    get: function get() {
      return this.$editor.selection.currentProject;
    }
    /**
     * 
     * recover origin to local blob url for Asset 
     * 
     * @param {string} value JSON String for project list 
     */

  }, {
    key: "revokeResource",
    value: function revokeResource(value) {
      var _this = this;

      var json = JSON.parse(value || '[]');
      var assets = {};
      json.forEach(function (project) {
        project.images.forEach(function (it) {
          assets["#".concat(it.id)] = it;
        });
      });
      Object.keys(assets).map(function (idString) {
        var a = assets[idString];
        var info = AssetParser_AssetParser.parse(a.original, true);
        a.local = info.local;
      });
      json.forEach(function (project) {
        project.layers = _this.applyAsset(project.layers, assets);
      });
      return json;
    }
  }, {
    key: "applyAsset",
    value: function applyAsset(json, assets) {
      var _this2 = this;

      if (Object(func["isArray"])(json)) {
        json = json.map(function (it) {
          return _this2.applyAsset(it, assets);
        });
      } else if (Object(func["isObject"])(json)) {
        Object.keys(json).forEach(function (key) {
          json[key] = _this2.applyAsset(json[key], assets);
        });
      } else if (Object(func["isString"])(json)) {
        Object.keys(assets).forEach(function (idString) {
          var a = assets[idString];

          if (json.indexOf("#".concat(a.id)) > -1) {
            json = json.replace(new RegExp("#".concat(a.id), 'g'), a.local);
          }
        });
      }

      return json;
    }
  }]);

  return AssetManager;
}();
// EXTERNAL MODULE: ./src/el/editor/manager/PluginManager.js
var PluginManager = __webpack_require__(107);

// EXTERNAL MODULE: ./src/el/editor/manager/RendererManager.js
var RendererManager = __webpack_require__(83);

// CONCATENATED MODULE: ./src/el/editor/manager/MenuItemManager.js


var MenuItemManager_MenuItemManager = /*#__PURE__*/function () {
  function MenuItemManager(editor) {
    classCallCheck_default()(this, MenuItemManager);

    this.editor = editor;
    this.menuItems = {};
  }

  createClass_default()(MenuItemManager, [{
    key: "registerMenuItem",
    value: function registerMenuItem(target, obj) {
      var _this = this;

      if (!this.menuItems[target]) {
        this.menuItems[target] = [];
      }

      Object.keys(obj).forEach(function (refClass) {
        _this.menuItems[target].push({
          refClass: refClass,
          "class": obj[refClass]
        });
      });
    }
  }, {
    key: "getTargetMenuItems",
    value: function getTargetMenuItems(target) {
      return this.menuItems[target] || [];
    }
  }]);

  return MenuItemManager;
}();
;
// CONCATENATED MODULE: ./src/el/editor/manager/Editor.js


























var EDITOR_ID = "";
var EDIT_MODE_SELECTION = 'SELECTION';
var EDIT_MODE_ADD = 'ADD';
var DEFAULT_THEME = 'dark';
var Editor = new ( /*#__PURE__*/function () {
  /**
   * 
   * @param {object} [opt={}] 
   * @param {BaseStore} opt.store  Message 처리기 
   */
  function _class() {
    classCallCheck_default()(this, _class);

    this.EDITOR_ID = Object(math["uuid"])();
    this.projects = [];
    this.popupZIndex = 10000;
    this.canvasWidth = 100000;
    this.canvasHeight = 100000;
    this.symbols = {};
    this.images = {};
    this.openRightPanel = true;
    this.mode = EDIT_MODE_SELECTION;
    this.modeView = 'CanvasView';
    this.addComponentType = '';
    this.locale = this.loadItem('locale') || 'en_US';
    this.layout = this.loadItem('layout') || 'all';
    this.loadManagers();
  }
  /**
   * 에디터에서 공통으로 필요한 Manager 들을 로드 한다. 
   */


  createClass_default()(_class, [{
    key: "loadManagers",
    value: function loadManagers() {
      this.store = new BaseStore_BaseStore(this);
      this.config = new ConfigManager_ConfigManager(this);
      this.snapManager = new SnapManager_SnapManager(this);
      this.commands = new CommandManager_CommandManager(this);
      this.shortcuts = new ShortCutManager_ShortCutManager(this);
      this.selection = new SelectionManager_SelectionManager(this);
      this.timeline = new TimelineSelectionManager_TimelineSelectionManager(this);
      this.history = new HistoryManager_HistoryManager(this);
      this.keyboardManager = new KeyboardManager_KeyBoardManager(this);
      this.viewport = new ViewportManager_ViewportManager(this);
      this.storageManager = new StorageManager_StorageManager(this);
      this.cursorManager = new CursorManager_CursorManager(this);
      this.assetManager = new AssetManager_AssetManager(this);
      this.menuItemManager = new MenuItemManager_MenuItemManager(this);
      this.components = ComponentManager["a" /* ComponentManager */];
      this.plugins = PluginManager["a" /* PluginManager */];
      this.renderers = RendererManager["a" /* RendererManager */];
      this.initTheme();
      this.initPlugins();
      this.initData();
    }
  }, {
    key: "initData",
    value: function initData() {
      this.projects = [this.createProject()];
      this.selection.selectProject(this.projects[0]);
    }
  }, {
    key: "createProject",
    value: function createProject() {
      return this.createItem({
        itemType: 'project'
      });
    }
  }, {
    key: "i18n",
    value: function i18n(key) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var locale = arguments.length > 2 ? arguments[2] : undefined;
      return el_i18n.get(key, params, locale || this.locale);
    }
  }, {
    key: "hasI18nkey",
    value: function hasI18nkey(key, locale) {
      return el_i18n.hasKey(key, locale || this.locale);
    }
  }, {
    key: "initI18n",
    value: function initI18n() {
      var _this = this;

      var root = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return function (key) {
        var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var locale = arguments.length > 2 ? arguments[2] : undefined;
        var i18nKey = "".concat(root, ".").concat(key);

        if (_this.hasI18nkey(i18nKey, locale)) {
          return _this.$i18n("".concat(root, ".").concat(key), params, locale);
        } else {
          return _this.$i18n("".concat(key), params, locale);
        }
      };
    }
  }, {
    key: "setLocale",
    value: function setLocale() {
      var locale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en_US';
      this.locale = locale;
      this.saveItem('locale', this.locale);
    }
  }, {
    key: "setLayout",
    value: function setLayout() {
      var layout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'all';
      this.layout = layout;
      this.saveItem('layout', this.layout);
    }
  }, {
    key: "setUser",
    value: function setUser(user) {
      this.user = user;
    }
  }, {
    key: "initTheme",
    value: function initTheme() {
      var theme = DEFAULT_THEME;

      if (window.localStorage) {
        theme = window.localStorage.getItem('easylogic.studio.theme');
        theme = ['dark', 'light', 'toon'].includes(theme) ? theme : DEFAULT_THEME;
      }

      this.theme = theme || DEFAULT_THEME;
      window.localStorage.setItem('easylogic.studio.theme', this.theme);
    }
  }, {
    key: "initPlugins",
    value: function initPlugins() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.plugins.initializePlugin(this, options);
    }
  }, {
    key: "themeValue",
    value: function themeValue(key) {
      var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return theme[this.theme][key] || defaultValue;
    }
  }, {
    key: "changeMode",
    value: function changeMode() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EDIT_MODE_SELECTION;
      this.mode = mode; // add or selection  
    }
  }, {
    key: "changeModeView",
    value: function changeModeView() {
      var modeView = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'CanvasView';
      this.modeView = modeView;
    }
  }, {
    key: "isMode",
    value: function isMode(mode) {
      return this.mode === mode;
    }
  }, {
    key: "isAddMode",
    value: function isAddMode() {
      return this.isMode(EDIT_MODE_ADD);
    }
    /**
     * editor 의 모드를 
     */

  }, {
    key: "isSelectionMode",
    value: function isSelectionMode() {
      return this.isMode(EDIT_MODE_SELECTION);
    }
  }, {
    key: "changeAddType",
    value: function changeAddType() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var isComponent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.changeMode(EDIT_MODE_ADD);
      this.addComponentType = type;
      this.isComponent = isComponent;
    }
    /**
     * Theme 을 변경한다. 
     * 
     * @param {string} theme 
     */

  }, {
    key: "changeTheme",
    value: function changeTheme(theme) {
      theme = ['light', 'toon'].includes(theme) ? theme : 'dark';
      this.theme = theme;
      window.localStorage.setItem('easylogic.studio.theme', theme);
    } // 팝업의 zindex 를 계속 높여 주어 
    // 최근에 열린 팝업이 밑으로 가지 않게 한다. 

  }, {
    key: "zIndex",
    get: function get() {
      return this.popupZIndex++;
    }
    /**
     * 현재 Mouse Up 상태인지 체크 
     * 
     * @returns {boolean}
     */

  }, {
    key: "isPointerUp",
    get: function get() {
      if (!this.config.get('bodyEvent')) return true;
      return this.config.get('bodyEvent').type === 'pointerup';
    }
  }, {
    key: "isPointerMove",
    get: function get() {
      if (!this.config.get('bodyEvent')) return false;
      return this.config.get('bodyEvent').type === 'pointermove';
    }
  }, {
    key: "getFile",
    value: function getFile(url) {
      return this.images[url] || url;
    }
  }, {
    key: "setStore",
    value: function setStore(store) {
      this.store = store;
    }
    /**
     * 메세지를 실행한다. 
     * 나 자신은 제외하고 실행한다. 
     * 
     * FIXME: command 는 자신과 동일한 command 를 재귀적으로 날릴 수 없다. (구현해야할듯 )
     **/

  }, {
    key: "emit",
    value: function emit() {
      var _this$store;

      this.store.source = "EDITOR_ID";

      (_this$store = this.store).emit.apply(_this$store, arguments);
    }
  }, {
    key: "on",
    value: function on() {
      var _this$store2;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var name = args[0],
          callback = args[1],
          rest = args.slice(2);

      (_this$store2 = this.store).on.apply(_this$store2, [name, callback, this].concat(toConsumableArray_default()(rest)));
    }
  }, {
    key: "off",
    value: function off() {
      var _this$store3;

      (_this$store3 = this.store).off.apply(_this$store3, arguments);
    }
  }, {
    key: "offAll",
    value: function offAll() {
      var _this$store4;

      (_this$store4 = this.store).offAll.apply(_this$store4, arguments);
    }
  }, {
    key: "debug",
    value: function debug() {
      if (this.config.get('debug')) {
        var _console;

        (_console = console).log.apply(_console, arguments);
      }
    }
  }, {
    key: "command",
    value: function command(_command, message) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
        args[_key2 - 2] = arguments[_key2];
      }

      if (this.isPointerUp) {
        var _this$store5;

        return (_this$store5 = this.store).emit.apply(_this$store5, ["history.".concat(_command), message].concat(args));
      } else {
        var _this$store6;

        return (_this$store6 = this.store).emit.apply(_this$store6, [_command].concat(args));
      }
    }
    /**
     * store 의 nextTick 을 실행한다. 
     * 
     * @param {Function} callback 
     */

  }, {
    key: "nextTick",
    value: function nextTick(callback) {
      if (this.store) {
        this.store.nextTick(callback);
      }
    }
    /**
     * project 리스트를 설정한다. 
     * 
     * @param {Item[]} projects 
     */

  }, {
    key: "load",
    value: function load() {
      var projects = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.projects = projects;
    }
    /**
     * Project 추가 하기 
     * add project 
     *
     * @param {Item} item
     * @return {Item}
     */

  }, {
    key: "add",
    value: function add(item) {
      this.projects.push(item);
      return item;
    }
    /**
     * remove Item  with all children
     *
     * @param {string} id
     */

  }, {
    key: "remove",
    value: function remove(index) {
      this.projects.splice(index, 1);
    }
  }, {
    key: "clear",
    value: function clear() {
      this.projects = [];
    }
    /**
     * get project 
     *
     * @param {number} index
     */

  }, {
    key: "get",
    value: function get(index) {
      return this.projects[index];
    }
  }, {
    key: "replaceLocalUrltoRealUrl",
    value: function replaceLocalUrltoRealUrl(str) {
      var project = this.selection.currentProject;
      var images = {};
      project.images.forEach(function (a) {
        if (str.indexOf(a.local) > -1) {
          images[a.local] = a.original;
        }
      });
      Object.keys(images).forEach(function (local) {
        if (str.indexOf(local) > -1) {
          str = str.replace(new RegExp(local, 'g'), images[local]);
        }
      });
      return str;
    }
  }, {
    key: "replaceLocalUrltoId",
    value: function replaceLocalUrltoId(str) {
      var projects = this.projects;
      var images = {};
      projects.forEach(function (project) {
        project.images.forEach(function (a) {
          if (str.indexOf(a.local) > -1) {
            images[a.local] = '#' + a.id;
          }
        });
      });
      Object.keys(images).forEach(function (local) {
        if (str.indexOf(local) > -1) {
          str = str.replace(new RegExp(local, 'g'), images[local]);
        }
      });
      return str;
    }
  }, {
    key: "makeResource",
    value: function makeResource(json) {
      var result = JSON.stringify(json); // image check 

      result = this.replaceLocalUrltoId(result);
      return result;
    }
    /** 
     * item 목록을 json 으로  를 한다. 
     * 
     * 이때 parent는  parentId 로 치환된다. 
     * 
     * deserialize 할 때 parentId 에 맞는 parent 를 복구 시켜준다. 
     * 
     * @param {Item[]} items
     * @returns string
     */

  }, {
    key: "serialize",
    value: function serialize() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var newItems = [];
      items.forEach(function (it) {
        var json = it.toJSON(); // parent 객체를 id 로 치환 

        json._parentId = it.parent ? it.parent.id : undefined; // parent 안에서 나의 위치 저장 (z-index 관련해서 순서를 지켜야함)

        json._positionInParent = it.positionInParent;
        newItems.push(json);
      });
      return JSON.stringify(newItems);
    }
    /**
     * itemObject (객체)를 가지고 itemType 에 따른  실제 Component 객체를 생성해준다. 
     * 
     * @param {object} itemObject 
     * @param {Boolean} isRecoverPosition 
     */

  }, {
    key: "createItem",
    value: function createItem(itemObject) {
      var _this2 = this;

      var isRecoverPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (itemObject._parentId) {
        itemObject.parent = this.searchItem(itemObject._parentId);
        delete itemObject._parentId;
      }

      itemObject.layers = (itemObject.layers || []).map(function (it) {
        return _this2.createItem(it);
      });
      var item = this.components.createComponent(itemObject.itemType, itemObject);

      if (isRecoverPosition) {
        item.parent.setPositionInPlace(itemObject._positionInParent, item);
      }

      return item;
    }
    /**
     * id 로 객체를 탐색한다. 
     * 모든 프로젝트를 탐색하도록 한다. 
     * 
     * @param {string|string[]} id 
     * @return {string} JSON 문자열 
     */

  }, {
    key: "searchItem",
    value: function searchItem(id) {
      var ids = [];

      if (Object(func["isString"])(id)) {
        ids.push(id);
      } else if (Object(func["isArray"])(id)) {
        ids = toConsumableArray_default()(id);
      }

      var project = this.selection.currentProject;
      var results = project.getSearchedIndexItemList(ids).filter(Boolean);
      return results[0];
    }
    /**
     * JSON 형태로 serialize 된 객체를 실제 Item 객체로 복원한다. 
     * 
     * @param {string} jsonString 
     * @param {Boolean} isRecoverPosition 객체를 복구 시킬 때 parent 상에서 위치도 같이 복구할지 결정, true 는 위치 복구 
     * @returns {Item[]}
     */

  }, {
    key: "deserialize",
    value: function deserialize(jsonString) {
      var _this3 = this;

      var isRecoverPosition = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var items = JSON.parse(jsonString) || [];
      return items.map(function (it) {
        return _this3.createItem(it, isRecoverPosition);
      });
    }
  }, {
    key: "saveResource",
    value: function saveResource(key, value) {
      window.localStorage.setItem("easylogic.studio.".concat(key), this.makeResource(value));
    }
  }, {
    key: "saveItem",
    value: function saveItem(key, value) {
      window.localStorage.setItem("easylogic.studio.".concat(key), JSON.stringify(value));
    }
  }, {
    key: "loadResource",
    value: function loadResource(key) {
      return this.assetManager.revokeResource(window.localStorage.getItem("easylogic.studio.".concat(key)));
    }
  }, {
    key: "loadItem",
    value: function loadItem(key) {
      return JSON.parse(window.localStorage.getItem("easylogic.studio.".concat(key)) || JSON.stringify(""));
    }
  }, {
    key: "registElement",
    value: function registElement(obj) {
      Object(base_registElement["a" /* registElement */])(obj);
    }
  }, {
    key: "registerMenuItem",
    value: function registerMenuItem(target, obj) {
      this.menuItemManager.registerMenuItem(target, obj);
      this.registElement(obj);
    }
  }, {
    key: "registerComponent",
    value: function registerComponent(name, component) {
      this.components.registerComponent(name, component);
    }
  }, {
    key: "registerItem",
    value: function registerItem(name, item) {
      this.registerComponent(name, item);
    }
  }, {
    key: "registerInspector",
    value: function registerInspector(name, inspectorCallback) {
      this.components.registerInspector(name, inspectorCallback);
    }
  }, {
    key: "registerRenderer",
    value: function registerRenderer(rendererType, name, rendererInstance) {
      this.renderers.registerRenderer(rendererType, name, rendererInstance);
    }
  }, {
    key: "registerCommand",
    value: function registerCommand(commandObject) {
      this.commands.registerCommand(commandObject);
    }
  }, {
    key: "registerShortCut",
    value: function registerShortCut(shortcut) {
      this.shortcuts.registerShortCut(shortcut);
    }
    /**
     * 
     * @param {Function} createPluginFunction  
     */

  }, {
    key: "registerPlugin",
    value: function registerPlugin(createPluginFunction) {
      PluginManager["a" /* PluginManager */].registerPlugin(createPluginFunction);
    }
  }, {
    key: "registerPluginList",
    value: function registerPluginList() {
      var _this4 = this;

      var plugins = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      plugins.forEach(function (p) {
        return _this4.registerPlugin(p);
      });
    }
  }]);

  return _class;
}())();

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ DomRender_DomRender; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/items/Item.js
var Item = __webpack_require__(35);

// EXTERNAL MODULE: ./src/el/editor/property-parser/BackgroundImage.js + 1 modules
var BackgroundImage = __webpack_require__(36);

// EXTERNAL MODULE: ./src/el/editor/property-parser/ClipPath.js
var ClipPath = __webpack_require__(40);

// EXTERNAL MODULE: ./src/el/editor/property-parser/Pattern.js + 1 modules
var Pattern = __webpack_require__(50);

// EXTERNAL MODULE: ./src/el/editor/property-parser/Transform.js + 1 modules
var Transform = __webpack_require__(30);

// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/ItemRender.js




var ItemRender_ItemRender = /*#__PURE__*/function () {
  function ItemRender() {
    classCallCheck_default()(this, ItemRender);
  }

  createClass_default()(ItemRender, [{
    key: "getInnerId",
    value:
    /**
     * id 기반 문자열 id 생성
     * 
     * @param {Item} item
     * @param {string} postfix 
     */
    function getInnerId(item) {
      var postfix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return item.id + postfix;
    }
  }]);

  return ItemRender;
}();


// CONCATENATED MODULE: ./src/el/editor/renderer/HTMLRenderer/DomRender.js








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var ZERO_CONFIG = {};
var WEBKIT_ATTRIBUTE_FOR_CSS = ['text-fill-color', 'text-stroke-color', 'text-stroke-width', 'background-clip'];

var DomRender_DomRender = /*#__PURE__*/function (_ItemRender) {
  inherits_default()(DomRender, _ItemRender);

  var _super = _createSuper(DomRender);

  function DomRender() {
    classCallCheck_default()(this, DomRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(DomRender, [{
    key: "toStringPropertyCSS",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {string} field 
     */
    function toStringPropertyCSS(item, field) {
      return Object(func["STRING_TO_CSS"])(item[field]);
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toBackgroundImageCSS",
    value: function toBackgroundImageCSS(item) {
      if (item['background-image'] === '' && item.pattern === '') {
        return ZERO_CONFIG;
      }

      var list = [];

      if (item.pattern) {
        var patternList = Pattern["a" /* Pattern */].parseStyle(item.pattern);

        for (var i = 0, len = patternList.length; i < len; i++) {
          list.push.apply(list, BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(func["STRING_TO_CSS"])(patternList[i].toCSS())));
        }
      }

      if (item['background-image']) {
        list.push.apply(list, BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(func["STRING_TO_CSS"])(item['background-image'])));
      }

      if (list.length) {
        return BackgroundImage["a" /* BackgroundImage */].joinCSS(list);
      }

      return {};
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toLayoutCSS",
    value: function toLayoutCSS(item) {
      var layout = item.layout;

      if (item.hasLayout()) {
        if (layout === 'flex') {
          return this.toFlexLayoutCSS(item);
        } else if (layout === 'grid') {
          return this.toGridLayoutCSS(item);
        }
      }

      return {};
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toLayoutItemCSS",
    value: function toLayoutItemCSS(item) {
      var parentLayout = item.parent['layout'];
      var obj = {};

      if (parentLayout === 'flex') {
        // 부모가  layout 이  지정 됐을 때 자식item 들은 position: relative 기준으로 동작한다. , left, top 은  속성에서 삭제 
        obj = {
          position: 'relative',
          left: 'auto !important',
          top: 'auto !important'
        };
      } else if (parentLayout === 'grid') {
        // 부모가  layout 이  지정 됐을 때 자식item 들은 position: relative 기준으로 동작한다. , left, top 은  속성에서 삭제 
        obj = {
          position: 'relative',
          left: 'auto !important',
          top: 'auto !important',
          width: 'auto !important',
          height: 'auto !important'
        };
      }

      if (parentLayout === 'flex') {
        obj = _objectSpread(_objectSpread({}, obj), Object(func["STRING_TO_CSS"])(item['flex-layout-item']));
      } else if (parentLayout === 'grid') {
        obj = _objectSpread(_objectSpread({}, obj), Object(func["STRING_TO_CSS"])(item['grid-layout-item']));
      }

      return obj;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toFlexLayoutCSS",
    value: function toFlexLayoutCSS(item) {
      return _objectSpread({
        display: 'flex'
      }, this.toStringPropertyCSS(item, 'flex-layout'));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toGridLayoutCSS",
    value: function toGridLayoutCSS(item) {
      return _objectSpread({
        display: 'grid'
      }, this.toStringPropertyCSS(item, 'grid-layout'));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toBorderCSS",
    value: function toBorderCSS(item) {
      return this.toStringPropertyCSS(item, 'border');
    }
  }, {
    key: "toKeyCSS",
    value: function toKeyCSS(key) {
      if (!item[key]) return {};
      return defineProperty_default()({}, key, item[key]);
    }
  }, {
    key: "toBoxModelCSS",
    value: function toBoxModelCSS(item) {
      var obj = {};
      if (item['margin-top']) obj["margin-top"] = item['margin-top'];
      if (item['margin-bottom']) obj["margin-bottom"] = item['margin-bottom'];
      if (item['margin-left']) obj["margin-left"] = item['margin-left'];
      if (item['margin-right']) obj["margin-right"] = item['margin-right'];
      if (item['padding-top']) obj["padding-top"] = item['padding-top'];
      if (item['padding-bottom']) obj["padding-bottom"] = item['padding-bottom'];
      if (item['padding-left']) obj["padding-left"] = item['padding-left'];
      if (item['padding-right']) obj["padding-right"] = item['padding-right'];
      return obj;
    }
    /**
     * 
     * @param {Item} item 
     * @param {string[]} parameters 표현될 속성 리스트   
     */

  }, {
    key: "toKeyListCSS",
    value: function toKeyListCSS(item) {
      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var obj = {};
      args.filter(function (it) {
        return Object(func["isNotUndefined"])(item[it]);
      }).forEach(function (it) {
        obj[it] = item[it];
      });
      return obj;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefaultCSS",
    value: function toDefaultCSS(item) {
      var obj = {};

      if (item.isAbsolute) {
        if (item.x) {
          obj.left = item.x;
        }

        if (item.y) {
          obj.top = item.y;
        }
      }

      obj.visibility = item.visible ? 'visible' : 'hidden';
      return _objectSpread(_objectSpread({}, obj), this.toKeyListCSS(item, ['position', // 'right',
      // 'bottom', 
      'width', 'height', 'overflow', 'z-index', 'box-sizing', 'background-color', 'color', 'opacity', 'mix-blend-mode', 'transform-origin', 'transform-style', 'perspective', 'perspective-origin', 'font-size', 'font-stretch', 'line-height', 'font-weight', 'font-family', 'font-style', 'text-align', 'text-transform', 'text-decoration', 'letter-spacing', 'word-spacing', 'text-indent', 'border-radius', 'filter', 'backdrop-filter', 'box-shadow', 'text-shadow', 'offset-path', 'animation', 'transition']));
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toVariableCSS",
    value: function toVariableCSS(item) {
      var obj = {};
      item.variable.split(';').filter(function (it) {
        return it.trim();
      }).forEach(function (it) {
        var _it$split = it.split(':'),
            _it$split2 = slicedToArray_default()(_it$split, 2),
            key = _it$split2[0],
            value = _it$split2[1];

        obj["--".concat(key)] = value;
      });
      return obj;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toRootVariableCSS",
    value: function toRootVariableCSS(item) {
      var obj = {};
      item.rootVariable.split(';').filter(function (it) {
        return it.trim();
      }).forEach(function (it) {
        var _it$split3 = it.split(':'),
            _it$split4 = slicedToArray_default()(_it$split3, 2),
            key = _it$split4[0],
            value = _it$split4[1];

        obj["--".concat(key)] = value;
      });
      return obj;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toRootVariableString",
    value: function toRootVariableString(item) {
      return Object(func["CSS_TO_STRING"])(this.toRootVariableCSS(item));
    }
    /**
     * convert to only webket css property 
     * @param {*} item 
     */

  }, {
    key: "toWebkitCSS",
    value: function toWebkitCSS(item) {
      var results = {};
      WEBKIT_ATTRIBUTE_FOR_CSS.forEach(function (key) {
        results["-webkit-".concat(key)] = item[key];
      });
      return results;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toTextClipCSS",
    value: function toTextClipCSS(item) {
      var results = {};

      if (item['text-clip'] === 'text') {
        results['-webkit-background-clip'] = 'text';
        results['-webkit-text-fill-color'] = 'transparent';
        results['color'] = 'transparent';
      }

      return results;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toTransformCSS",
    value: function toTransformCSS(item) {
      // transform 이 없을 때는 공백 리턴 
      if (item.rotate === '0deg' && item.transform === '') {
        return ZERO_CONFIG;
      } else if (item.rotate.value === 0 && item.transform === '') {
        return ZERO_CONFIG;
      }

      var key = [item['transform'], item['rotate']].join(":::");

      if (key != this._transformCacheKey) {
        this._transformCache = Transform["a" /* Transform */].rotate(item['transform'], item['rotate']);
        this._transformCacheKey = key;
      }

      var results = {
        transform: this._transformCache
      };

      if (results.transform === 'rotate(0deg)') {
        delete results.transform;
      }

      return results;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefInnerString",
    value: function toDefInnerString(item) {
      return (
        /*html*/
        "\n      ".concat(this.toClipPath(item), "\n    ").trim()
      );
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toClipPath",
    value: function toClipPath(item) {
      if (item['clip-path'] === '') return '';
      var obj = ClipPath["a" /* ClipPath */].parseStyle(item['clip-path']);
      var value = obj.value;

      switch (obj.type) {
        case 'path':
          return (
            /*html*/
            "<clipPath id=\"".concat(this.clipPathId(item), "\"><path d=\"").concat(value, "\" /></clipPath>")
          );

        case 'svg':
          return (
            /*html*/
            "<clipPath id=\"".concat(this.clipPathId(item), "\">").concat(value, "</clipPath>")
          );
      }

      return "";
    }
  }, {
    key: "toClipPathCSS",
    value: function toClipPathCSS(item) {
      var str = item['clip-path'];

      if (Boolean(str) === false) {
        return null;
      }

      var obj = ClipPath["a" /* ClipPath */].parseStyle(str);

      switch (obj.type) {
        case 'path':
        case 'svg':
          str = "url(#".concat(this.clipPathId(item), ")");
          break;
      }

      return {
        'clip-path': str
      };
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "innerSVGId",
    value: function innerSVGId(item) {
      return item.id + 'inner-svg';
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "clipPathId",
    value: function clipPathId(item) {
      return item.id + 'clip-path';
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefString",
    value: function toDefString(item) {
      var str = this.toDefInnerString(item);
      return str ?
      /*html*/
      "\n    <svg class='inner-svg-element' data-id=\"".concat(this.innerSVGId(item), "\" width=\"0\" height=\"0\">\n      <defs>\n        ").concat(str, "\n      </defs>\n    </svg>\n    ") : '';
    }
    /**
     * 
     * @param {DomItem} item 
     * @param {string} prefix 
     */

  }, {
    key: "toSelectorString",
    value: function toSelectorString(item) {
      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      return item.selectors.map(function (selector) {
        return selector.toString(prefix);
      }).join('\n\n');
    }
    /**
     * 
     * @param {Item} item 
     * @param {string} prefix 
     * @param {string} appendCSS 
     */

  }, {
    key: "generateView",
    value: function generateView(item) {
      var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var appendCSS = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      //1. 원본 객체의 css 를 생성 
      //2. 원본이 하나의 객체가 아니라 복합 객체일때 중첩 CSS 를 자체 정의해서 생성 
      //3. 이외에 selector 로 생성할 수 있는 css 를 생성 (:hover, :active 등등 )
      var cssString = "\n  ".concat(prefix, " {  /* ").concat(item.itemType, " */\n      ").concat(Object(func["CSS_TO_STRING"])(this.toCSS(item), '\n    '), "; \n      ").concat(appendCSS, "\n  }\n  ").concat(this.toNestedCSS(item).map(function (it) {
        return "".concat(prefix, " ").concat(it.selector, " { \n        ").concat(it.cssText ? it.cssText : Object(func["CSS_TO_STRING"])(it.css || {}, '\n\t\t'), "; \n    }");
      }).join('\n'), "\n  ").concat(this.toSelectorString(item, prefix), "\n    ");
      return cssString;
    }
    /**
     * CSS 리턴 
     * @param {Item} item 
     * @override
     */

  }, {
    key: "toCSS",
    value: function toCSS(item) {
      return Object.assign({}, this.toVariableCSS(item), this.toDefaultCSS(item), this.toClipPathCSS(item), this.toWebkitCSS(item), this.toTextClipCSS(item), this.toBoxModelCSS(item), this.toBorderCSS(item), this.toBackgroundImageCSS(item), this.toLayoutCSS(item), this.toTransformCSS(item), this.toLayoutItemCSS(item));
    }
    /**
     * 
     * @param {Item} item 
     * @param {HtmlRenderer} renderer 
     */

  }, {
    key: "toStyle",
    value: function toStyle(item, renderer) {
      var cssString = this.generateView(item, ".element-item[data-id='".concat(item.id, "']"));
      return (
        /*html*/
        "\n<style type='text/css' data-renderer-type=\"html\" data-id='".concat(item.id, "' data-timestamp='").concat(item.timestamp, "'>\n").concat(cssString, "\n</style>\n    ") + item.layers.map(function (it) {
          return renderer.toStyle(it, renderer);
        }).join('')
      );
    }
    /**
     * 처음 렌더링 할 때 
     * 
     * @param {Item} item 
     * @param {Renderer} renderer
     * @override
     */

  }, {
    key: "render",
    value: function render(item, renderer) {
      var elementType = item.elementType,
          id = item.id,
          name = item.name,
          itemType = item.itemType;
      var tagName = elementType || 'div';
      return (
        /*html*/
        "    \n<".concat(tagName, " class=\"element-item ").concat(itemType, "\" data-id=\"").concat(id, "\" data-title=\"").concat(name, "\">\n  ").concat(this.toDefString(item), "\n  ").concat(item.layers.map(function (it) {
          return renderer.render(it, renderer);
        }).join('\n\t'), "\n</").concat(tagName, ">\n    ")
      );
    }
  }, {
    key: "renderSVG",
    value: function renderSVG(item, renderer) {}
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toNestedCSS",
    value: function toNestedCSS(item) {
      return [];
    }
    /**
     * 초기 렌더링 이후 업데이트만 할 때 
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     * @override
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      if (!currentElement) return; // x, y 만 움직이면 변경하지 않음. 

      if (item.hasChangedField('x', 'y')) {
        return;
      }

      var $svg = currentElement.el.$svg;

      if (!$svg) {
        currentElement.el.$svg = currentElement.$("[data-id=\"".concat(this.innerSVGId(item), "\"]"));
        $svg = currentElement.el.$svg;
      }

      if ($svg) {
        var defInnerString = this.toDefInnerString(item);

        if (defInnerString) {
          var $defs = $svg.$('defs');
          $defs.html(defInnerString);
        }
      } else {
        var defString = this.toDefString(item);

        if (defString) {
          var a = Dom["a" /* default */].createByHTML(defString);

          if (a) {
            currentElement.prepend(a);
          }
        }
      }
    }
  }]);

  return DomRender;
}(ItemRender_ItemRender);



/***/ }),
/* 63 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "format", function() { return format; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hex", function() { return hex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb", function() { return rgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsl", function() { return hsl; });
/* harmony import */ var _func__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);

/**
 * @method format
 *
 * convert color to format string
 *
 *     // hex
 *     color.format({ r : 255, g : 255, b : 255 }, 'hex')  // #FFFFFF
 *
 *     // rgb
 *     color.format({ r : 255, g : 255, b : 255 }, 'rgb') // rgba(255, 255, 255, 0.5);
 *
 *     // rgba
 *     color.format({ r : 255, g : 255, b : 255, a : 0.5 }, 'rgb') // rgba(255, 255, 255, 0.5);
 *
 * @param {Object} obj  obj has r, g, b and a attributes
 * @param {"hex"/"rgb"} type  format string type
 * @returns {*}
 */

function format(obj, type) {
  var defaultColor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgba(0, 0, 0, 0)';

  if (Array.isArray(obj)) {
    obj = {
      r: obj[0],
      g: obj[1],
      b: obj[2],
      a: obj[3]
    };
  }

  if (type == 'hex') {
    return hex(obj);
  } else if (type == 'rgb') {
    return rgb(obj, defaultColor);
  } else if (type == 'hsl') {
    return hsl(obj);
  }

  return obj;
}
function hex(obj) {
  if (Array.isArray(obj)) {
    obj = {
      r: obj[0],
      g: obj[1],
      b: obj[2],
      a: obj[3]
    };
  }

  var r = obj.r.toString(16);
  if (obj.r < 16) r = "0" + r;
  var g = obj.g.toString(16);
  if (obj.g < 16) g = "0" + g;
  var b = obj.b.toString(16);
  if (obj.b < 16) b = "0" + b;

  if (obj.a == 1 || Object(_func__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(obj.a)) {
    return "#".concat(r).concat(g).concat(b);
  } else {
    var alpha = Math.ceil(obj.a * 255);
    var a = alpha.toString(16);
    if (alpha < 16) a = "0" + a;
    return "#".concat(r).concat(g).concat(b).concat(a);
  }
}
function rgb(obj) {
  var defaultColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'rgba(0, 0, 0, 0)';

  if (Object(_func__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
    obj = {
      r: obj[0],
      g: obj[1],
      b: obj[2],
      a: obj[3]
    };
  }

  if (Object(_func__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(obj)) {
    return undefined;
  }

  if (obj.a == 1 || Object(_func__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(obj.a)) {
    if (isNaN(obj.r)) {
      return defaultColor;
    }

    return "rgb(".concat(obj.r, ",").concat(obj.g, ",").concat(obj.b, ")");
  } else {
    return "rgba(".concat(obj.r, ",").concat(obj.g, ",").concat(obj.b, ",").concat(obj.a, ")");
  }
}
function hsl(obj) {
  if (Object(_func__WEBPACK_IMPORTED_MODULE_0__["isArray"])(obj)) {
    obj = {
      r: obj[0],
      g: obj[1],
      b: obj[2],
      a: obj[3]
    };
  }

  if (obj.a == 1 || Object(_func__WEBPACK_IMPORTED_MODULE_0__["isUndefined"])(obj.a)) {
    return "hsl(".concat(obj.h, ",").concat(obj.s, "%,").concat(obj.l, "%)");
  } else {
    return "hsla(".concat(obj.h, ",").concat(obj.s, "%,").concat(obj.l, "%,").concat(obj.a, ")");
  }
}

/***/ }),
/* 64 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DirectionLength; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);



var DirectionLength = /*#__PURE__*/function () {
  function DirectionLength() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, DirectionLength);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(DirectionLength, null, [{
    key: "parse",
    value: function parse(str) {
      var temp = str.split(' ').filter(function (it) {
        return it.trim();
      }).map(function (it) {
        return _Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].parse(it);
      });
      var top = _Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].percent(0),
          right = _Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].percent(0),
          bottom = _Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].percent(0),
          left = _Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].percent(0);

      if (temp.length === 1) {
        top = temp[0].clone();
        right = temp[0].clone();
        bottom = temp[0].clone();
        left = temp[0].clone();
      } else if (temp.length === 2) {
        top = temp[0].clone();
        right = temp[1].clone();
        bottom = temp[0].clone();
        left = temp[1].clone();
      } else if (temp.length === 3) {
        top = temp[0].clone();
        right = temp[1].clone();
        bottom = temp[2].clone();
        left = temp[1].clone();
      } else if (temp.length === 4) {
        top = temp[0].clone();
        right = temp[1].clone();
        bottom = temp[2].clone();
        left = temp[3].clone();
      }

      return [temp.length, top, right, bottom, left];
    }
  }]);

  return DirectionLength;
}();

/***/ }),
/* 65 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Border; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var el_base_Color__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(26);




var BorderStyles = {
  "none": true,
  "hidden": true,
  "dotted": true,
  "dashed": true,
  "solid": true,
  "double": true,
  "groove": true,
  "ridge": true,
  "inset": true,
  "outset": true
};

var Border = /*#__PURE__*/function () {
  function Border() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, Border);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(Border, null, [{
    key: "parseStyle",
    value: function parseStyle(str) {
      return Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_2__["STRING_TO_CSS"])(str);
    }
  }, {
    key: "parseValue",
    value: function parseValue(str) {
      var style = '';
      var width = '';
      var color = '';
      str.split(' ').filter(function (it) {
        return it.trim();
      }).forEach(function (value) {
        if (BorderStyles[value]) {
          style = value;
        } else if (el_base_Color__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"].isColor(value)) {
          color = value;
        } else {
          width = value;
        }
      });
      return {
        style: style,
        color: color,
        width: width
      };
    }
  }, {
    key: "joinValue",
    value: function joinValue(obj) {
      return "".concat(obj.width, " ").concat(obj.style || 'solid', " ").concat(obj.color);
    }
  }, {
    key: "join",
    value: function join(obj) {
      var arr = [obj['border'] ? "border: ".concat(obj['border']) : '', obj['border-top'] ? "border-top: ".concat(obj['border-top']) : '', obj['border-left'] ? "border-left: ".concat(obj['border-left']) : '', obj['border-right'] ? "border-right: ".concat(obj['border-right']) : '', obj['border-bottom'] ? "border-bottom: ".concat(obj['border-bottom']) : ''].filter(function (it) {
        return it;
      });
      return arr.join(';');
    }
  }]);

  return Border;
}();



/***/ }),
/* 66 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BackgroundImageEditor.js
var BackgroundImageEditor = __webpack_require__(111);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BoxShadowEditor.js
var BoxShadowEditor = __webpack_require__(112);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderRadiusEditor.js
var BorderRadiusEditor = __webpack_require__(113);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorSingleEditor.js
var ColorSingleEditor = __webpack_require__(114);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorViewEditor.js
var ColorViewEditor = __webpack_require__(79);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CubicBezierEditor.js
var CubicBezierEditor = __webpack_require__(92);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FilterEditor.js
var FilterEditor = __webpack_require__(115);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/GradientEditor.js
var GradientEditor = __webpack_require__(95);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/IterationCountEditor.js
var IterationCountEditor = __webpack_require__(116);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/OffsetEditor.js
var OffsetEditor = __webpack_require__(117);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CSSPropertyEditor.js + 1 modules
var CSSPropertyEditor = __webpack_require__(94);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PerspectiveOriginEditor.js
var PerspectiveOriginEditor = __webpack_require__(121);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/RangeEditor.js
var RangeEditor = __webpack_require__(37);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SelectEditor.js
var SelectEditor = __webpack_require__(39);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TextShadowEditor.js
var TextShadowEditor = __webpack_require__(122);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TransformEditor.js
var TransformEditor = __webpack_require__(119);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TransformOriginEditor.js
var TransformOriginEditor = __webpack_require__(120);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/VarEditor.js
var VarEditor = __webpack_require__(118);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/clip-path/CircleEditor.js
var CircleEditor = __webpack_require__(127);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SVGFilterEditor.js + 6 modules
var SVGFilterEditor = __webpack_require__(135);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TextEditor.js
var TextEditor = __webpack_require__(96);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/NumberRangeEditor.js
var NumberRangeEditor = __webpack_require__(68);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/IconListViewEditor.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var IconListViewEditor_IconListViewEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(IconListViewEditor, _EditorElement);

  var _super = _createSuper(IconListViewEditor);

  function IconListViewEditor() {
    classCallCheck_default()(this, IconListViewEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(IconListViewEditor, [{
    key: "initState",
    value: function initState() {
      return {
        value: this.props.value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='select-editor list-view-editor' ref='$body'></div>"
      );
    }
  }, {
    key: Object(Event["BIND"])('$body'),
    value: function value() {
      return {
        'data-column': this.props.column || 1
      };
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var _this = this;

      return Object.keys(icon["a" /* default */]).map(function (key) {
        var html = icon["a" /* default */][key];
        var selected = key === _this.state.value ? 'selected' : '';
        return (
          /*html*/
          "<div class='list-view-item ".concat(selected, "'  data-key='").concat(key, "'>").concat(html, "</div>")
        );
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.state.value = value;
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$body .list-view-item'),
    value: function value(e) {
      var key = e.$dt.attr('data-key');
      e.$dt.onlyOneClass('selected');
      this.updateData({
        value: key
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }]);

  return IconListViewEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  IconListViewEditor: IconListViewEditor_IconListViewEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/SVGClipPathEditor.js






function SVGClipPathEditor_createSuper(Derived) { var hasNativeReflectConstruct = SVGClipPathEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGClipPathEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGClipPathEditor_SVGClipPathEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SVGClipPathEditor, _EditorElement);

  var _super = SVGClipPathEditor_createSuper(SVGClipPathEditor);

  function SVGClipPathEditor() {
    classCallCheck_default()(this, SVGClipPathEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGClipPathEditor, [{
    key: "initState",
    value: function initState() {
      return {
        fit: !!this.props.value.fit,
        icon: this.props.value.icon || ''
      };
    }
  }, {
    key: "template",
    value: function template() {
      var checked = this.state.fit ? 'checked="checked"' : '';
      return (
        /*html*/
        "\n      <div class='svg-clip-path-editor clippath-list'>\n          <div class='label' >\n              <label>".concat(this.props.title || '', "</label>\n              <div class='tools'>\n              </div>\n          </div>\n          <div>\n            <label>Fit to size <input type='checkbox' ref='$fit' ").concat(checked, "  /> </label>\n          </div>\n          <div>\n            <object refClass=\"IconListViewEditor\" ref='$svg' key='svg' value=\"").concat(this.state.icon, "\" column=\"6\" onchange='changeClipPath' />\n          </div>\n      </div>")
      );
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(data, false);
      this.modifyClipPath();
    }
  }, {
    key: Object(Event["CLICK"])('$fit'),
    value: function value() {
      this.updateData({
        fit: this.refs.$fit.checked()
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeClipPath'),
    value: function value(key, icon) {
      this.updateData({
        icon: icon
      });
    }
  }, {
    key: "modifyClipPath",
    value: function modifyClipPath() {
      var _this$state = this.state,
          icon = _this$state.icon,
          fit = _this$state.fit;
      this.parent.trigger(this.props.onchange, this.props.key, {
        icon: icon,
        fit: fit
      });
    }
  }]);

  return SVGClipPathEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SVGClipPathEditor: SVGClipPathEditor_SVGClipPathEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/DirectionEditor.js
var DirectionEditor = __webpack_require__(132);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/InputArrayEditor.js
var InputArrayEditor = __webpack_require__(128);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ImageSelectEditor.js
var ImageSelectEditor = __webpack_require__(130);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SelectIconEditor.js
var SelectIconEditor = __webpack_require__(69);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/InputRangeEditor.js
var InputRangeEditor = __webpack_require__(67);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/StrokeDashArrayEditor.js
var StrokeDashArrayEditor = __webpack_require__(123);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PathDataEditor.js
var PathDataEditor = __webpack_require__(104);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PolygonDataEditor.js
var PolygonDataEditor = __webpack_require__(124);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/OffsetPathListEditor.js
var OffsetPathListEditor = __webpack_require__(105);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./src/el/base/UIElement.js + 4 modules
var UIElement = __webpack_require__(28);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/BackgroundPositionEditor.js







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function BackgroundPositionEditor_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundPositionEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundPositionEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BackgroundPositionEditor_BackgroundPositionEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(BackgroundPositionEditor, _EditorElement);

  var _super = BackgroundPositionEditor_createSuper(BackgroundPositionEditor);

  function BackgroundPositionEditor() {
    classCallCheck_default()(this, BackgroundPositionEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundPositionEditor, [{
    key: "initState",
    value: function initState() {
      return {
        index: this.props.index,
        x: this.props.x,
        y: this.props.y,
        width: this.props.width,
        height: this.props.height,
        repeat: this.props.repeat,
        size: this.props.size,
        blendMode: this.props.blendMode,
        color: 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyValue(opt);
    }
  }, {
    key: "modifyValue",
    value: function modifyValue(value) {
      this.parent.trigger(this.props.onchange, this.props.key, value, this.state.index);
    }
  }, {
    key: "setValue",
    value: function setValue(obj) {
      this.setState(_objectSpread({}, obj));
    }
  }, {
    key: Object(Event["BIND"])('$miniView'),
    value: function value() {
      return {
        style: {
          'background-image': 'linear-gradient(to top right, black, white)',
          'background-repeat': this.state.repeat,
          'background-size': '7px 7px'
        }
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='background-position-editor'>\n                <div class='preview' ref='$preview'>\n                    <div class='mini-view'>\n                        <div class='color-view' style=\"background-color: ".concat(this.state.color, "\" ref='$miniView'></div>\n                    </div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$preview"),
    value: function value(e) {
      this.viewBackgroundPositionPopup();
    }
  }, {
    key: "viewBackgroundPositionPopup",
    value: function viewBackgroundPositionPopup() {
      this.emit("showBackgroundImagePositionPopup", {
        changeEvent: 'changeBackgroundPositionPattern',
        data: this.state
      }, {
        id: this.id
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeBackgroundPositionPattern"),
    value: function value(pattern, params) {
      if (params.id === this.id) {
        // this.refs.$miniView.cssText(`background-color: ${color}`);
        this.updateData(_objectSpread({}, pattern));
      }
    }
  }]);

  return BackgroundPositionEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  BackgroundPositionEditor: BackgroundPositionEditor_BackgroundPositionEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/GradientSingleEditor.js







function GradientSingleEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function GradientSingleEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { GradientSingleEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { GradientSingleEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function GradientSingleEditor_createSuper(Derived) { var hasNativeReflectConstruct = GradientSingleEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GradientSingleEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var GradientSingleEditor_GradientSingleEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GradientSingleEditor, _EditorElement);

  var _super = GradientSingleEditor_createSuper(GradientSingleEditor);

  function GradientSingleEditor() {
    classCallCheck_default()(this, GradientSingleEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(GradientSingleEditor, [{
    key: "initState",
    value: function initState() {
      return {
        index: this.props.index,
        image: this.props.image,
        color: 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyValue(opt);
    }
  }, {
    key: "modifyValue",
    value: function modifyValue(value) {
      this.parent.trigger(this.props.onchange, this.props.key, value, this.state.index);
    }
  }, {
    key: "setValue",
    value: function setValue(obj) {
      this.setState(GradientSingleEditor_objectSpread({}, obj));
    }
  }, {
    key: Object(Event["BIND"])('$miniView'),
    value: function value() {
      return {
        style: {
          'background-image': this.state.image,
          'background-size': 'cover',
          'color': this.props.color
        }
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='gradient-single-editor'>\n                <div class='preview' ref='$preview'>\n                    <div class='mini-view'>\n                        <div class='color-view' style=\"background-color: ".concat(this.state.color, "\" ref='$miniView'></div>\n                    </div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$preview"),
    value: function value(e) {
      this.viewGradientPopup();
    }
  }, {
    key: "viewGradientPopup",
    value: function viewGradientPopup() {
      this.emit("showGradientPickerPopup", {
        instance: this,
        changeEvent: 'changeGradientSingle',
        gradient: this.state.image
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeGradientSingle'),
    value: function value(image, params) {
      this.updateData({
        image: image
      });
      this.refresh();
    }
  }]);

  return GradientSingleEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GradientSingleEditor: GradientSingleEditor_GradientSingleEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderEditor.js
var BorderEditor = __webpack_require__(106);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderValueEditor.js
var BorderValueEditor = __webpack_require__(125);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFill.js + 3 modules
var SVGFill = __webpack_require__(42);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/FillSingleEditor.js






function FillSingleEditor_createSuper(Derived) { var hasNativeReflectConstruct = FillSingleEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FillSingleEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var FillSingleEditor_FillSingleEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(FillSingleEditor, _EditorElement);

  var _super = FillSingleEditor_createSuper(FillSingleEditor);

  function FillSingleEditor() {
    classCallCheck_default()(this, FillSingleEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(FillSingleEditor, [{
    key: "initState",
    value: function initState() {
      return {
        index: this.props.index,
        label: this.props.label,
        simple: this.props.simple === 'true' ? true : false,
        image: SVGFill["a" /* SVGFill */].parseImage(this.props.image || 'transparent')
      };
    }
  }, {
    key: "fillId",
    get: function get() {
      return this.id + 'fill';
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyValue(opt);
    }
  }, {
    key: "modifyValue",
    value: function modifyValue(value) {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.state.index);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.image.toString();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        image: SVGFill["a" /* SVGFill */].parseImage(value)
      });
    }
  }, {
    key: Object(Event["BIND"])('$fillView'),
    value: function value() {
      var image = this.state.image;
      if (!image) return {
        innerHTML: ''
      };
      return {
        innerHTML: image.toSVGString(this.fillId)
      };
    }
  }, {
    key: Object(Event["BIND"])('$fillColor'),
    value: function value() {
      var image = this.state.image;
      if (!image) return {
        fill: 'transparent'
      };
      return {
        fill: image.toFillValue(this.fillId)
      };
    }
  }, {
    key: Object(Event["BIND"])('$colors'),
    value: function value() {
      var image = this.state.image;
      if (!image) return {
        fill: 'transparent'
      };
      var colors = image.type != 'url' ? "".concat(image.colorsteps[0].color) : 'transparent';

      if (image.type.includes('linear') || image.type.includes('radial')) {
        colors = image.colorsteps.map(function (it) {
          return (
            /*html*/
            "<span class='color' style='background-color: ".concat(it.color, "' title='").concat(it.color, "'></span>")
          );
        }).join('');
      }

      return {
        innerHTML: "<div> ".concat(colors, " </div>")
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          removable = _this$state.removable,
          simple = _this$state.simple;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='fill-single-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "            \n                <div class='preview' ref='$preview'>\n                    <div class='mini-view'>\n\n                        <svg class='color-view' ref='$miniView'>\n                            <defs ref='$fillView'></defs>\n                            <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ref='$fillColor' fill='url(#").concat(this.fillId, ")' />\n                        </svg>\n                    </div>\n                </div>\n                <div class='colors ").concat(simple ? 'simple' : '', "' ref='$colors'></div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$preview"),
    value: function value(e) {
      this.viewGradientPopup();
    }
  }, {
    key: "viewGradientPopup",
    value: function viewGradientPopup() {
      this.emit("showFillPickerPopup", {
        instance: this,
        changeEvent: 'changeFillSingle',
        image: this.state.image
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFillSingle'),
    value: function value(image, params) {
      this.updateData({
        image: SVGFill["a" /* SVGFill */].parseImage(image)
      });
      this.refresh();
    }
  }]);

  return FillSingleEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  FillSingleEditor: FillSingleEditor_FillSingleEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FillEditor.js
var FillEditor = __webpack_require__(133);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/SVGFilterSelectEditor.js







function SVGFilterSelectEditor_createSuper(Derived) { var hasNativeReflectConstruct = SVGFilterSelectEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGFilterSelectEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SVGFilterSelectEditor_SVGFilterSelectEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SVGFilterSelectEditor, _EditorElement);

  var _super = SVGFilterSelectEditor_createSuper(SVGFilterSelectEditor);

  function SVGFilterSelectEditor() {
    classCallCheck_default()(this, SVGFilterSelectEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFilterSelectEditor, [{
    key: "initState",
    value: function initState() {
      var value = this.props.value;
      return {
        options: [],
        label: this.props.label || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var label = this.state.label;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='svg-filter-select-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "\n                <select ref='$options'></select>\n                <button type='button' class='open thin' ref='$open' title='Open SVG Filter Editor'>").concat(icon["a" /* default */].fullscreen, "</button>\n                <button type='button' class='remove thin' ref='$remove' title='Remove'>").concat(icon["a" /* default */].remove, "</button>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$remove'),
    value: function value(e) {
      this.updateData({
        value: ''
      });
    }
  }, {
    key: Object(Event["CLICK"])('$open'),
    value: function value(e) {
      var value = this.state.value;

      if (value.includes('id')) {
        var currentProject = this.$selection.currentProject;
        var index = currentProject.getSVGFilterIndex(value);

        if (index > -1) {
          this.trigger('openSVGFilterPopup', index);
        }
      }
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var reload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.load();
    }
  }, {
    key: Object(Event["BIND"])('$options'),
    value: function value() {
      return {
        'data-count': this.state.options.length.toString()
      };
    }
  }, {
    key: Object(Event["LOAD"])('$options'),
    value: function value() {
      var _this = this;

      var current = this.$selection.currentProject;
      var options = '';

      if (current) {
        options = current.svgfilters.map(function (it) {
          return it.id;
        });
        options = options.length ? ',' + options.join(',') : '';
      }

      options += ',-,new';
      options = options.split(',');
      var arr = options.map(function (it) {
        var value = it;
        var label = it;

        if (value.includes(":")) {
          var _value$split = value.split(':'),
              _value$split2 = slicedToArray_default()(_value$split, 2),
              value = _value$split2[0],
              label = _value$split2[1];
        }

        if (label === '') {
          label = _this.props['none-value'] ? _this.props['none-value'] : '';
        } else if (label === '-') {
          label = '----------';
          value = '';
        }

        var selected = value === _this.state.value ? 'selected' : '';
        return "<option ".concat(selected, " value=\"").concat(value, "\">").concat(label, "</option>");
      });
      return arr;
    }
  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.setState({
        options: options.split(this.state.splitChar).map(function (it) {
          return it.trim();
        })
      });
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(type) {
      if (type === 'new') {
        this.emit('addStatusBarMessage', this.$i18n('svgfilter.select.editor.message.create'));
      } else if (type === '-') {
        this.emit('addStatusBarMessage', this.$i18n('svgfilter.select.editor.message.select'));
      } else {
        this.emit('addStatusBarMessage', '');
      }
    }
  }, {
    key: Object(Event["CHANGE"])('$options'),
    value: function value() {
      var _this2 = this;

      var value = this.refs.$options.value;

      if (value == 'new') {
        this.emit('addSVGFilterAssetItem', function (index, id) {
          _this2.updateData({
            value: id
          });

          _this2.refresh();

          _this2.trigger('openSVGFilterPopup', index);
        });
      } else if (value === '-') {} else {
        this.updateData({
          value: value
        });
      }
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSVGArea') + Object(Event["DEBOUNCE"])(1000),
    value: function value() {
      this.load('$options');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('openSVGFilterPopup'),
    value: function value(index) {
      this.emit('refreshSVGFilterAssets');
      this.emit('refreshSVGArea');
      var currentProject = this.$selection.currentProject || {
        svgfilters: []
      };
      var svgfilter = currentProject.svgfilters[index];
      this.emit("showSVGFilterPopup", {
        changeEvent: 'changeSVGFilterEditorRealUpdate',
        preview: false,
        index: index,
        filters: svgfilter.filters
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSVGFilterEditorRealUpdate'),
    value: function value(params) {
      var project = this.$selection.currentProject;

      if (project) {
        project.setSVGFilterValue(params.index, {
          filters: params.filters
        });
        this.emit('refreshSVGFilterAssets');
        this.emit('refreshSVGArea');
      }
    }
  }]);

  return SVGFilterSelectEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SVGFilterSelectEditor: SVGFilterSelectEditor_SVGFilterSelectEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FuncFilterEditor.js
var FuncFilterEditor = __webpack_require__(129);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorMatrixEditor.js + 25 modules
var ColorMatrixEditor = __webpack_require__(134);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/TextAreaEditor.js






function TextAreaEditor_createSuper(Derived) { var hasNativeReflectConstruct = TextAreaEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextAreaEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var TextAreaEditor_TextAreaEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TextAreaEditor, _EditorElement);

  var _super = TextAreaEditor_createSuper(TextAreaEditor);

  function TextAreaEditor() {
    classCallCheck_default()(this, TextAreaEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextAreaEditor, [{
    key: "initState",
    value: function initState() {
      var value = this.props.value;
      return {
        label: this.props.label || '',
        height: Length["a" /* Length */].px(100),
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          height = _this$state.height,
          value = _this$state.value;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='text-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "\n                <textarea ref='$text' style='height:").concat(height, "'>").concat(value, "</textarea>\n            </div>\n        ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.refs.$options.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value, height) {
      this.setState({
        value: value
      }, false);

      if (height) {
        this.setState({
          height: height
        }, false);
      }

      this.refresh();
    }
  }, {
    key: Object(Event["BIND"])('$text'),
    value: function value() {
      return {
        'text': this.state.value || '',
        style: {
          height: this.state.height
        }
      };
    }
  }, {
    key: Object(Event["INPUT"])('$text'),
    value: function value() {
      this.updateData({
        value: this.refs.$text.value
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }]);

  return TextAreaEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TextAreaEditor: TextAreaEditor_TextAreaEditor
});
// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/FlexLayoutEditor.js







function FlexLayoutEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function FlexLayoutEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FlexLayoutEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FlexLayoutEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function FlexLayoutEditor_createSuper(Derived) { var hasNativeReflectConstruct = FlexLayoutEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FlexLayoutEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var FlexLayoutEditor_FlexLayoutEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(FlexLayoutEditor, _EditorElement);

  var _super = FlexLayoutEditor_createSuper(FlexLayoutEditor);

  function FlexLayoutEditor() {
    classCallCheck_default()(this, FlexLayoutEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(FlexLayoutEditor, [{
    key: "getDirectionOptions",
    value: function getDirectionOptions() {
      return this.makeOptionsFunction('row,column,row-reverse,column-reverse');
    }
  }, {
    key: "getWrapOptions",
    value: function getWrapOptions() {
      return this.makeOptionsFunction('nowrap,wrap,wrap-reverse');
    }
  }, {
    key: "getJustifyContentOptions",
    value: function getJustifyContentOptions() {
      return this.makeOptionsFunction('flex-start,flex-end,center,space-between,space-around');
    }
  }, {
    key: "getAlignItemsOptions",
    value: function getAlignItemsOptions() {
      return this.makeOptionsFunction('flex-start,flex-end,center,baseline,stretch');
    }
  }, {
    key: "getAlignContentOptions",
    value: function getAlignContentOptions() {
      return this.makeOptionsFunction('flex-start,flex-end,center,space-between,space-around,stretch');
    }
  }, {
    key: "makeOptionsFunction",
    value: function makeOptionsFunction(options) {
      var _this = this;

      return options.split(',').map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n('flex.layout.editor.' + it));
      }).join(',');
    }
  }, {
    key: "initState",
    value: function initState() {
      return FlexLayoutEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(this.props.value));
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState(FlexLayoutEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(value)));
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return Object(func["CSS_TO_STRING"])(this.state);
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      return (
        /*html*/
        "\n            <div class='flex-layout-item'>\n                <div class='label'><label>".concat(this.$i18n('flex.layout.editor.direction'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='flex-direction'\n                    value=\"").concat(this.state['flex-direction'] || 'row', "\"\n                    options=\"").concat(this.getDirectionOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.editor.wrap'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='flex-wrap'\n                    value=\"").concat(this.state['flex-wrap'] || 'wrap', "\"\n                    options=\"").concat(this.getWrapOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.editor.justify-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='justify-content'\n                    value=\"").concat(this.state['justify-content'] || 'flex-start', "\"\n                    options=\"").concat(this.getJustifyContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.editor.align-items'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-items'\n                    value=\"").concat(this.state['align-items'] || 'flex-start', "\"\n                    options=\"").concat(this.getAlignItemsOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.editor.align-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-content'\n                    value=\"").concat(this.state['align-content'] || 'flex-start', "\"\n                    options=\"").concat(this.getAlignContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>    \n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='flex-layout-editor' ref='$body' ></div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value, params) {
      this.setState(defineProperty_default()({}, key, _value), false);
      this.modifyData();
    }
  }]);

  return FlexLayoutEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  FlexLayoutEditor: FlexLayoutEditor_FlexLayoutEditor
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toArray.js
var toArray = __webpack_require__(46);
var toArray_default = /*#__PURE__*/__webpack_require__.n(toArray);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/NumberInputEditor.js
var NumberInputEditor = __webpack_require__(93);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/GridBoxEditor.js







function GridBoxEditor_createSuper(Derived) { var hasNativeReflectConstruct = GridBoxEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridBoxEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var REG_CSS_UNIT = /(auto)|(repeat\([^\)]*\))|(([\d.]+)(px|pt|fr|r?em|deg|vh|vw|%))/gi;

var GridBoxEditor_GridBoxEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GridBoxEditor, _EditorElement);

  var _super = GridBoxEditor_createSuper(GridBoxEditor);

  function GridBoxEditor() {
    classCallCheck_default()(this, GridBoxEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridBoxEditor, [{
    key: "getLayoutItemOptions",
    value: function getLayoutItemOptions() {
      var _this = this;

      return 'none,auto,repeat,length'.split(',').map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("grid.box.editor.".concat(it)));
      }).join(',');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        label: this.props.label,
        list: this.parseValue(this.props.value)
      };
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        list: this.parseValue(value)
      });
    }
  }, {
    key: "parseValue",
    value: function parseValue(value) {
      var arr = null;
      var target = [];

      while ((arr = REG_CSS_UNIT.exec(value)) !== null) {
        var text = arr[0];

        if (text === 'auto') {
          target.push({
            type: 'auto',
            count: 0,
            value: '0px'
          });
        } else if (text.includes('repeat')) {
          var tempArray = text.split('repeat(')[1].split(')');
          tempArray.pop();

          var _tempArray$join$split = tempArray.join('').split(','),
              _tempArray$join$split2 = toArray_default()(_tempArray$join$split),
              count = _tempArray$join$split2[0],
              size = _tempArray$join$split2.slice(1);

          target.push({
            type: 'repeat',
            count: count,
            value: size.join(', ')
          });
        } else {
          target.push({
            type: 'length',
            count: 1,
            value: text
          });
        }
      }

      return target;
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.list.map(function (it) {
        if (it.type === 'repeat') {
          return "repeat(".concat(it.count, ", ").concat(it.value, ")");
        } else if (it.type === 'auto' || it.type === 'none') {
          return it.type;
        } else {
          return it.value;
        }
      }).join(' ');
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: "makeItem",
    value: function makeItem(it, index) {
      return (
        /*html*/
        "\n            <div class='item' data-repeat-type='".concat(it.type, "' data-index='").concat(index, "' >\n                <div class='repeat'>\n                    <object refClass=\"SelectEditor\" \n                        ref='$").concat(index, "-type' \n                        options=\"").concat(this.getLayoutItemOptions(), "\" \n                        key=\"type\" \n                        value=\"").concat(it.type || 'auto', "\" \n                        params=\"").concat(index, "\" \n                        onchange=\"changeKeyValue\" />\n                </div>\n                <div class='count'>\n                    <object refClass=\"NumberInputEditor\" \n                        ref='$").concat(index, "-count' \n                        key=\"count\" \n                        value=\"").concat(it.count, "\" \n                        params=\"").concat(index, "\" \n                        max='1000'\n                        onchange=\"changeKeyValue\" />\n                </div>                \n                <div class='value'>\n                    <object refClass=\"InputRangeEditor\" \n                        ref='$").concat(index, "-value' \n                        key=\"value\" \n                        value=\"").concat(it.value, "\" \n                        params=\"").concat(index, "\" \n                        units='auto,fr,px,em,%'\n                        onchange=\"changeKeyValue\" />\n                </div>\n                <div class='tools'>\n                    <button type=\"button\" class='copy'>").concat(icon["a" /* default */].copy, "</button>                \n                    <button type=\"button\" class='remove'>").concat(icon["a" /* default */].remove2, "</button>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$list'),
    value: function value() {
      var _this2 = this;

      return this.state.list.map(function (it, index) {
        return _this2.makeItem(it, index);
      });
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='grid-box-editor' ref='$body' >\n                <div class='grid-box-editor-item'>\n                    <div class='item header'>\n                        <div class='repeat'>\n                            <label>".concat(this.state.label, " </label>\n                            <button type='button' ref='$add'>").concat(icon["a" /* default */].add, "</button>\n                        </div>\n                        <div class='count'>").concat(this.$i18n('grid.box.editor.count'), "</div>\n                        <div class='value'>").concat(this.$i18n('grid.box.editor.value'), "</div>\n                        <div class='tools'></div>\n                    </div>\n                    <div ref='$list'></div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$list .remove'),
    value: function value(e) {
      var index = +e.$dt.closest('item').attr('data-index');
      this.state.list.splice(index, 1);
      this.refresh();
      this.modifyData();
    }
  }, {
    key: Object(Event["CLICK"])('$list .copy'),
    value: function value(e) {
      var index = +e.$dt.closest('item').attr('data-index');
      var newObj = clone(this.state.list[index]);
      this.state.list.splice(index, 0, newObj);
      this.refresh();
      this.modifyData();
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('add'),
    value: function value() {
      this.state.list.push({
        type: 'auto',
        count: 0,
        value: '0px'
      });
      this.refresh();
      this.modifyData();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value, params) {
      var index = +params;
      var item = this.state.list[index];

      if (item) {
        if (key === 'type') {
          this.refs.$list.$("[data-index=\"".concat(index, "\"]")).attr('data-repeat-type', _value);
        }

        item[key] = _value;
      }

      this.modifyData();
    }
  }]);

  return GridBoxEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GridBoxEditor: GridBoxEditor_GridBoxEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/GridGapEditor.js






function GridGapEditor_createSuper(Derived) { var hasNativeReflectConstruct = GridGapEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridGapEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var GridGapEditor_GridGapEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GridGapEditor, _EditorElement);

  var _super = GridGapEditor_createSuper(GridGapEditor);

  function GridGapEditor() {
    classCallCheck_default()(this, GridGapEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridGapEditor, [{
    key: "initState",
    value: function initState() {
      return {
        label: this.props.label,
        value: this.parseValue(this.props.value)
      };
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        list: this.parseValue(value)
      });
    }
  }, {
    key: "parseValue",
    value: function parseValue(value) {
      return Length["a" /* Length */].parse(value);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: "makeItem",
    value: function makeItem() {
      return (
        /*html*/
        "\n            <div class='item'>\n                <div class='value'>\n                    <object refClass=\"RangeEditor\" \n                        label='".concat(this.state.label, "' \n                        ref='$value' \n                        key=\"value\" \n                        value=\"").concat(this.state.value, "\" \n                        units='px,em,%'\n                        onchange=\"changeKeyValue\" />\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$list'),
    value: function value() {
      return this.makeItem();
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='grid-gap-editor' ref='$body' >\n                <div class='grid-gap-editor-item'>\n                    <div ref='$list'></div>\n                </div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      this.state.value = _value;
      this.modifyData();
    }
  }]);

  return GridGapEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GridGapEditor: GridGapEditor_GridGapEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/GridLayoutEditor.js







function GridLayoutEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function GridLayoutEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { GridLayoutEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { GridLayoutEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function GridLayoutEditor_createSuper(Derived) { var hasNativeReflectConstruct = GridLayoutEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridLayoutEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var GridLayoutEditor_GridLayoutEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GridLayoutEditor, _EditorElement);

  var _super = GridLayoutEditor_createSuper(GridLayoutEditor);

  function GridLayoutEditor() {
    classCallCheck_default()(this, GridLayoutEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridLayoutEditor, [{
    key: "initState",
    value: function initState() {
      return GridLayoutEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(this.props.value));
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState(GridLayoutEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(value)));
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return Object(func["CSS_TO_STRING"])(this.state);
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      return (
        /*html*/
        "\n            <div class='grid-layout-item'>\n                <object refClass=\"GridBoxEditor\" \n                    label='".concat(this.$i18n('grid.layout.editor.template.columns'), "'\n                    ref='$columnBox'\n                    key='grid-template-columns'\n                    value=\"").concat(this.state['grid-template-columns'] || '', "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='grid-layout-item'>\n                <object refClass=\"GridGapEditor\" \n                    label='").concat(this.$i18n('grid.layout.editor.column.gap'), "'\n                    key='grid-column-gap'\n                    value=\"").concat(this.state['grid-column-gap'] || '', "\"\n                    onchange='changeKeyValue'\n                />\n            </div>            \n            <div class='grid-layout-item'>\n                <object refClass=\"GridBoxEditor\" \n                    label='").concat(this.$i18n('grid.layout.editor.template.rows'), "'\n                    ref='$rowBox'\n                    key='grid-template-rows'\n                    value=\"").concat(this.state['grid-template-rows'] || '', "\"\n                    onchange='changeKeyValue'\n                />\n            </div>            \n            <div class='grid-layout-item'>\n                <object refClass=\"GridGapEditor\" \n                    label='").concat(this.$i18n('grid.layout.editor.row.gap'), "'                \n                    key='grid-row-gap'\n                    value=\"").concat(this.state['grid-row-gap'] || '', "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='grid-layout-editor' ref='$body' ></div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value, params) {
      this.setState(defineProperty_default()({}, key, _value), false);
      this.modifyData();
    }
  }]);

  return GridLayoutEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GridLayoutEditor: GridLayoutEditor_GridLayoutEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/FlexLayoutItemEditor.js







function FlexLayoutItemEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function FlexLayoutItemEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FlexLayoutItemEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FlexLayoutItemEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function FlexLayoutItemEditor_createSuper(Derived) { var hasNativeReflectConstruct = FlexLayoutItemEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FlexLayoutItemEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var FlexLayoutItemEditor_FlexLayoutItemEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(FlexLayoutItemEditor, _EditorElement);

  var _super = FlexLayoutItemEditor_createSuper(FlexLayoutItemEditor);

  function FlexLayoutItemEditor() {
    classCallCheck_default()(this, FlexLayoutItemEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(FlexLayoutItemEditor, [{
    key: "initState",
    value: function initState() {
      return FlexLayoutItemEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(this.props.value));
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState(Object(func["STRING_TO_CSS"])(value));
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return Object(func["CSS_TO_STRING"])(this.state);
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      return (
        /*html*/
        "\n            <div class='flex-layout-item'>\n                <div class='label'><label>".concat(this.$i18n('flex.layout.item.editor.direction'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='flex-direction'\n                    value=\"").concat(this.state['flex-direction'] || 'row', "\"\n                    options=\"").concat(getDirectionOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.item.editor.wrap'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='flex-wrap'\n                    value=\"").concat(this.state['flex-wrap'] || 'wrap', "\"\n                    options=\"").concat(getWrapOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.item.editor.justify-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='justify-content'\n                    value=\"").concat(this.state['justify-content'], "\"\n                    options=\"").concat(getJustifyContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.item.editor.align-items'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-items'\n                    value=\"").concat(this.state['align-items'], "\"\n                    options=\"").concat(getAlignItemsOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='flex-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('flex.layout.item.editor.align-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-content'\n                    value=\"").concat(this.state['align-content'], "\"\n                    options=\"").concat(getAlignContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>    \n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='flex-layout-editor' ref='$body' ></div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value, params) {
      this.setState(defineProperty_default()({}, key, _value), false);
      this.modifyData();
    }
  }]);

  return FlexLayoutItemEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  FlexLayoutItemEditor: FlexLayoutItemEditor_FlexLayoutItemEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/GridLayoutItemEditor.js







function GridLayoutItemEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function GridLayoutItemEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { GridLayoutItemEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { GridLayoutItemEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function GridLayoutItemEditor_createSuper(Derived) { var hasNativeReflectConstruct = GridLayoutItemEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridLayoutItemEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var GridLayoutItemEditor_GridLayoutItemEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GridLayoutItemEditor, _EditorElement);

  var _super = GridLayoutItemEditor_createSuper(GridLayoutItemEditor);

  function GridLayoutItemEditor() {
    classCallCheck_default()(this, GridLayoutItemEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridLayoutItemEditor, [{
    key: "initState",
    value: function initState() {
      return GridLayoutItemEditor_objectSpread({}, Object(func["STRING_TO_CSS"])(this.props.value));
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState(Object(func["STRING_TO_CSS"])(value));
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return Object(func["CSS_TO_STRING"])(this.state);
    }
  }, {
    key: "modifyData",
    value: function modifyData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue());
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      return (
        /*html*/
        "\n            <div class='grid-layout-item'>\n                <div class='label'><label>".concat(this.$i18n('grid.layout.item.editor.direction'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='grid-direction'\n                    value=\"").concat(this.state['grid-direction'] || 'row', "\"\n                    options=\"").concat(getDirectionOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='grid-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('grid.layout.item.editor.wrap'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='grid-wrap'\n                    value=\"").concat(this.state['grid-wrap'] || 'wrap', "\"\n                    options=\"").concat(getWrapOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='grid-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('grid.layout.item.editor.justify-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='justify-content'\n                    value=\"").concat(this.state['justify-content'], "\"\n                    options=\"").concat(getJustifyContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='grid-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('grid.layout.item.editor.align-items'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-items'\n                    value=\"").concat(this.state['align-items'], "\"\n                    options=\"").concat(getAlignItemsOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>\n            <div class='grid-layout-item'>\n                <div class='label'><label>").concat(this.$i18n('grid.layout.item.editor.align-content'), "</label></div>\n                <object refClass=\"SelectIconEditor\" \n                    key='align-content'\n                    value=\"").concat(this.state['align-content'], "\"\n                    options=\"").concat(getAlignContentOptions(), "\"\n                    onchange='changeKeyValue'\n                />\n            </div>    \n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='grid-layout-editor' ref='$body' ></div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value, params) {
      this.setState(defineProperty_default()({}, key, _value), false);
      this.modifyData();
    }
  }]);

  return GridLayoutItemEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GridLayoutItemEditor: GridLayoutItemEditor_GridLayoutItemEditor
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./src/el/editor/property-parser/Pattern.js + 1 modules
var Pattern = __webpack_require__(50);

// EXTERNAL MODULE: ./src/el/editor/preset/patterns/index.js + 7 modules
var patterns = __webpack_require__(108);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/PatternSizeEditor.js







function PatternSizeEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function PatternSizeEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PatternSizeEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PatternSizeEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PatternSizeEditor_createSuper(Derived) { var hasNativeReflectConstruct = PatternSizeEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PatternSizeEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PatternSizeEditor_PatternSizeEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PatternSizeEditor, _EditorElement);

  var _super = PatternSizeEditor_createSuper(PatternSizeEditor);

  function PatternSizeEditor() {
    classCallCheck_default()(this, PatternSizeEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(PatternSizeEditor, [{
    key: "initState",
    value: function initState() {
      return {
        index: this.props.index,
        x: Length["a" /* Length */].parse(this.props.x),
        y: Length["a" /* Length */].parse(this.props.y),
        width: Length["a" /* Length */].parse(this.props.width),
        height: Length["a" /* Length */].parse(this.props.height),
        lineWidth: Length["a" /* Length */].parse(this.props.linewidth),
        lineHeight: Length["a" /* Length */].parse(this.props.lineheight),
        backColor: this.props.backcolor,
        foreColor: this.props.forecolor,
        blendMode: this.props.blendmode,
        type: this.props.type
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyValue(opt);
    }
  }, {
    key: "modifyValue",
    value: function modifyValue(value) {
      this.parent.trigger(this.props.onchange, this.props.key, value, this.state.index);
    }
  }, {
    key: "setValue",
    value: function setValue(obj) {
      this.setState(PatternSizeEditor_objectSpread({}, obj));
    }
  }, {
    key: Object(Event["BIND"])('$miniView'),
    value: function value() {
      var obj = PatternSizeEditor_objectSpread({}, this.state);

      if (this.state.width.value > 80) {
        obj.width = Length["a" /* Length */].px(80);
        obj.x = Length["a" /* Length */].px(obj.x.value / this.state.width.value / 80);
      }

      if (this.state.height.value > 80) {
        obj.height = Length["a" /* Length */].px(80);
        obj.y = Length["a" /* Length */].px(this.state.y.value / this.state.height.value / 80);
      }

      var pattern = Pattern["a" /* Pattern */].parse(obj);
      return {
        cssText: pattern.toCSS()
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='pattern-size-editor'>\n                <div class='preview' ref='$preview'>\n                    <div class='mini-view'>\n                        <div class='color-view' style=\"background-color: ".concat(this.state.color, "\" ref='$miniView'></div>\n                    </div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$preview"),
    value: function value(e) {
      this.viewBackgroundPositionPopup();
    }
  }, {
    key: "viewBackgroundPositionPopup",
    value: function viewBackgroundPositionPopup() {
      this.emit("showPatternInfoPopup", {
        changeEvent: 'changePatternInfo',
        data: this.state,
        instance: this
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changePatternInfo"),
    value: function value(pattern) {
      this.updateData(PatternSizeEditor_objectSpread({}, pattern));
    }
  }]);

  return PatternSizeEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PatternSizeEditor: PatternSizeEditor_PatternSizeEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/PatternEditor.js







function PatternEditor_createSuper(Derived) { var hasNativeReflectConstruct = PatternEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PatternEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var PatternEditor_PatternEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PatternEditor, _EditorElement);

  var _super = PatternEditor_createSuper(PatternEditor);

  function PatternEditor() {
    classCallCheck_default()(this, PatternEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(PatternEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        value: this.props.value,
        patterns: this.parsePattern(this.props.value)
      };
    }
  }, {
    key: "parsePattern",
    value: function parsePattern(str) {
      return Pattern["a" /* Pattern */].parseStyle(str);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value,
        patterns: this.parsePattern(value)
      });
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n            <div class='pattern-editor' >\n                <div class='label ".concat(labelClass, "'>\n                    <label>").concat(this.props.title || '', "</label>\n                    <div class='tools'>\n                        <button type=\"button\" ref='$add'>").concat(icon["a" /* default */].add, " ").concat(this.props.title ? '' : 'Add', "</button>\n                    </div>\n                </div>\n                <div class='pattern-list' ref='$patternList'></div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$patternList'),
    value: function value() {
      var _this = this;

      return this.state.patterns.map(function (it, index) {
        var selectedClass = it.selected ? "selected" : "";

        if (it.selected) {
          _this.selectedIndex = index;
        }

        return (
          /*html*/
          "\n            <div class='pattern-item ".concat(selectedClass, "' data-index='").concat(index, "' ref=\"fillIndex").concat(index, "\"  draggable='true'>\n                <object refClass=\"PatternSizeEditor\" \n                    key=\"pattern-size\"\n                    ref=\"$bp").concat(index, "\"\n                    type=\"").concat(it.type, "\"\n                    x=\"").concat(it.x, "\"\n                    y=\"").concat(it.y, "\"\n                    width=\"").concat(it.width, "\"\n                    height=\"").concat(it.height, "\"\n                    index=\"").concat(index, "\"\n                    foreColor=\"").concat(it.foreColor, "\"\n                    backColor=\"").concat(it.backColor, "\"\n                    blendMode=\"").concat(it.blendMode, "\"\n                    lineWidth=\"").concat(it.lineWidth, "\"\n                    lineHeight=\"").concat(it.lineHeight, "\"\n                    onchange='changePatternSizeInfo' />\n                <div class='tools'>\n                    <button type=\"button\" class='remove' title='Remove a pattern' data-index='").concat(index, "'>").concat(icon["a" /* default */].remove, "</button>\n                </div>\n            </div>\n            ")
        );
      });
    }
  }, {
    key: "modifyPattern",
    value: function modifyPattern() {
      var value = Pattern["a" /* Pattern */].join(this.state.patterns);
      this.parent.trigger(this.props.onchange, this.props.key, value);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('add'),
    value: function value() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'check';
      var pattern = patterns["a" /* default */].find(function (it) {
        return it.key === type;
      });

      if (pattern) {
        this.state.patterns.push.apply(this.state.patterns, Pattern["a" /* Pattern */].parseStyle(pattern.execute()[0].pattern));
        this.refresh();
        this.modifyPattern();
      }
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(Event["DRAGSTART"])("$patternList .pattern-item"),
    value: function value(e) {
      this.startIndex = +e.$dt.attr("data-index");
    }
  }, {
    key: Object(Event["DRAGOVER"])("$patternList .pattern-item") + Event["PREVENT"],
    value: function value(e) {}
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(toConsumableArray_default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortPattern",
    value: function sortPattern(startIndex, targetIndex) {
      this.sortItem(this.state.patterns, startIndex, targetIndex);
    }
  }, {
    key: Object(Event["DROP"])("$patternList .pattern-item") + Event["PREVENT"],
    value: function value(e) {
      var targetIndex = +e.$dt.attr("data-index");
      this.selectItem(this.startIndex, true);
      this.sortPattern(this.startIndex, targetIndex);
      this.modifyPattern();
      this.refresh();
    }
  }, {
    key: "getCurrentPattern",
    value: function getCurrentPattern() {
      return this.state.patterns[this.selectedIndex];
    }
  }, {
    key: Object(Event["CLICK"])("$patternList .tools .remove"),
    value: function value(e) {
      var removeIndex = +e.$dt.attr("data-index");
      this.state.patterns.splice(removeIndex, 1);
      this.modifyPattern();
      this.refresh();
    }
  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.refs["fillIndex".concat(selectedIndex)].addClass("selected");
      } else {
        this.refs["fillIndex".concat(selectedIndex)].removeClass("selected");
      }

      this.state.patterns.forEach(function (it, index) {
        it.selected = index === selectedIndex;
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePatternSizeInfo') + Object(Event["DEBOUNCE"])(10),
    value: function value(key, _value, index) {
      var pattern = this.state.patterns[index];
      pattern.reset(_value);
      this.modifyPattern();
      this.refresh();
    }
  }]);

  return PatternEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PatternEditor: PatternEditor_PatternEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BlendSelectEditor.js
var BlendSelectEditor = __webpack_require__(131);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/MediaProgressEditor.js
var MediaProgressEditor = __webpack_require__(126);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/CheckBoxEditor.js






function CheckBoxEditor_createSuper(Derived) { var hasNativeReflectConstruct = CheckBoxEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CheckBoxEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var CheckBoxEditor_CheckBoxEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(CheckBoxEditor, _EditorElement);

  var _super = CheckBoxEditor_createSuper(CheckBoxEditor);

  function CheckBoxEditor() {
    classCallCheck_default()(this, CheckBoxEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(CheckBoxEditor, [{
    key: "initState",
    value: function initState() {
      var value = "".concat(this.props.value) === 'true';
      return {
        label: this.props.label || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          value = _this$state.value;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='text-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "\n                <input type='checkbox' ref='$checkbox' ").concat(value ? 'checked' : '', " />\n            </div>\n        ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: Object(Event["CLICK"])('$checkbox'),
    value: function value() {
      this.updateData({
        value: this.refs.$checkbox.checked()
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }]);

  return CheckBoxEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  CheckBoxEditor: CheckBoxEditor_CheckBoxEditor
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./src/el/editor/util/Resource.js
var Resource = __webpack_require__(38);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/FontSelectEditor.js








function FontSelectEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function FontSelectEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FontSelectEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FontSelectEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function FontSelectEditor_createSuper(Derived) { var hasNativeReflectConstruct = FontSelectEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FontSelectEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var FontSelectEditor_FontSelectEditor = /*#__PURE__*/function (_SelectEditor) {
  inherits_default()(FontSelectEditor, _SelectEditor);

  var _super = FontSelectEditor_createSuper(FontSelectEditor);

  function FontSelectEditor() {
    classCallCheck_default()(this, FontSelectEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(FontSelectEditor, [{
    key: "getFontList",
    value: function getFontList() {
      return Resource["d" /* font_list */].split(',');
    }
  }, {
    key: "initState",
    value: function initState() {
      return FontSelectEditor_objectSpread(FontSelectEditor_objectSpread({}, get_default()(getPrototypeOf_default()(FontSelectEditor.prototype), "initState", this).call(this)), {}, {
        options: this.getFontList()
      });
    }
  }]);

  return FontSelectEditor;
}(SelectEditor["a" /* default */]);


Object(registElement["a" /* registElement */])({
  FontSelectEditor: FontSelectEditor_FontSelectEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/index.js

























 // import EmbedColorPicker from "./EmbedColorPicker";































/* harmony default export */ var property_editor = ({
  FontSelectEditor: FontSelectEditor_FontSelectEditor,
  CheckBoxEditor: CheckBoxEditor_CheckBoxEditor,
  MediaProgressEditor: MediaProgressEditor["a" /* default */],
  BlendSelectEditor: BlendSelectEditor["a" /* default */],
  PatternEditor: PatternEditor_PatternEditor,
  PatternSizeEditor: PatternSizeEditor_PatternSizeEditor,
  GridGapEditor: GridGapEditor_GridGapEditor,
  NumberInputEditor: NumberInputEditor["a" /* default */],
  GridLayoutItemEditor: GridLayoutItemEditor_GridLayoutItemEditor,
  GridBoxEditor: GridBoxEditor_GridBoxEditor,
  FlexLayoutItemEditor: FlexLayoutItemEditor_FlexLayoutItemEditor,
  GridLayoutEditor: GridLayoutEditor_GridLayoutEditor,
  FlexLayoutEditor: FlexLayoutEditor_FlexLayoutEditor,
  TextAreaEditor: TextAreaEditor_TextAreaEditor,
  ColorMatrixEditor: ColorMatrixEditor["a" /* default */],
  FuncFilterEditor: FuncFilterEditor["a" /* default */],
  SVGFilterSelectEditor: SVGFilterSelectEditor_SVGFilterSelectEditor,
  FillEditor: FillEditor["a" /* default */],
  FillSingleEditor: FillSingleEditor_FillSingleEditor,
  BorderEditor: BorderEditor["a" /* default */],
  BorderValueEditor: BorderValueEditor["a" /* default */],
  GradientSingleEditor: GradientSingleEditor_GradientSingleEditor,
  BackgroundPositionEditor: BackgroundPositionEditor_BackgroundPositionEditor,
  OffsetPathListEditor: OffsetPathListEditor["a" /* default */],
  PolygonDataEditor: PolygonDataEditor["a" /* default */],
  PathDataEditor: PathDataEditor["a" /* default */],
  StrokeDashArrayEditor: StrokeDashArrayEditor["a" /* default */],
  InputRangeEditor: InputRangeEditor["a" /* default */],
  SelectIconEditor: SelectIconEditor["a" /* default */],
  ImageSelectEditor: ImageSelectEditor["a" /* default */],
  // EmbedColorPicker,
  IconListViewEditor: IconListViewEditor_IconListViewEditor,
  InputArrayEditor: InputArrayEditor["a" /* default */],
  DirectionEditor: DirectionEditor["a" /* default */],
  SVGClipPathEditor: SVGClipPathEditor_SVGClipPathEditor,
  NumberRangeEditor: NumberRangeEditor["a" /* default */],
  TextEditor: TextEditor["a" /* default */],
  SVGFilterEditor: SVGFilterEditor["a" /* default */],
  CircleEditor: CircleEditor["a" /* default */],
  BackgroundImageEditor: BackgroundImageEditor["a" /* default */],
  BoxShadowEditor: BoxShadowEditor["a" /* default */],
  BorderRadiusEditor: BorderRadiusEditor["a" /* default */],
  ColorSingleEditor: ColorSingleEditor["a" /* default */],
  ColorViewEditor: ColorViewEditor["a" /* default */],
  CubicBezierEditor: CubicBezierEditor["a" /* default */],
  FilterEditor: FilterEditor["a" /* default */],
  GradientEditor: GradientEditor["a" /* default */],
  IterationCountEditor: IterationCountEditor["a" /* default */],
  OffsetEditor: OffsetEditor["a" /* default */],
  CSSPropertyEditor: CSSPropertyEditor["a" /* default */],
  PerspectiveOriginEditor: PerspectiveOriginEditor["a" /* default */],
  RangeEditor: RangeEditor["a" /* default */],
  SelectEditor: SelectEditor["a" /* default */],
  TextShadowEditor: TextShadowEditor["a" /* default */],
  TransformEditor: TransformEditor["a" /* default */],
  TransformOriginEditor: TransformOriginEditor["a" /* default */],
  VarEditor: VarEditor["a" /* default */]
});

/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InputRangeEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var InputRangeEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(InputRangeEditor, _EditorElement);

  var _super = _createSuper(InputRangeEditor);

  function InputRangeEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, InputRangeEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(InputRangeEditor, [{
    key: "initState",
    value: function initState() {
      var units = this.props.units || 'px,em,%';
      var value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].parse(this.props.value || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].z());
      var label = this.props.label || '';

      if (el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"][label]) {
        label = el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"][label];
      }

      return {
        removable: this.props.removable === 'true',
        label: label,
        compact: this.props.compact === 'true',
        min: +this.props.min || 0,
        max: +this.props.max || 100,
        step: +this.props.step || 1,
        key: this.props.key,
        params: this.props.params || '',
        layout: this.props.layout || '',
        units: units,
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='small-editor' ref='$body'></div>"
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$body'),
    value: function value() {
      var _this$state = this.state,
          min = _this$state.min,
          max = _this$state.max,
          step = _this$state.step,
          label = _this$state.label,
          compact = _this$state.compact,
          removable = _this$state.removable,
          layout = _this$state.layout;
      var value = +this.state.value.value.toString();

      if (isNaN(value)) {
        value = 0;
      }

      var layoutClass = layout;
      var realValue = (+value).toString();
      return (
        /*html*/
        "\n        <div \n            ref=\"$range\",\n            class=\"".concat(Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["OBJECT_TO_CLASS"])(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({
          'input-range-editor': true,
          'has-label': !!label,
          'compact': !!compact,
          'is-removable': removable
        }, layoutClass, true)), "\"\n        >\n            ").concat(label ? "<label>".concat(label, "</label>") : '', "\n            <div class='range-editor-type' data-type='range'>\n                <div class='area'>\n                    <input type='number' ref='$propertyNumber' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" tabIndex=\"1\" />\n                    \n                    <object refClass=\"SelectEditor\"  ref='$unit' key='unit' value=\"").concat(this.state.selectedUnit || this.state.value.unit, "\" options=\"").concat(this.state.units, "\" onchange='changeUnit' />\n                    \n                </div>\n            </div>\n            <button type='button' class='remove' ref='$remove' title='Remove'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].remove, "</button>\n        </div>\n    ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value.clone();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].parse(value)
      }, false);
      this.refs.$propertyNumber.val(this.state.value.value);
      this.refs.$unit.val(this.state.value.unit);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["FOCUS"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$range.addClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BLUR"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$range.removeClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$remove'),
    value: function value(e) {
      this.updateData({
        value: ''
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: "initValue",
    value: function initValue() {
      if (this.state.value == '') {
        this.state.value = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](0, this.children.$unit.getValue());
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["INPUT"])('$propertyNumber'),
    value: function value(e) {
      var value = +this.getRef('$propertyNumber').value;
      this.initValue();
      this.updateData({
        value: new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](value, this.children.$unit.getValue())
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeUnit'),
    value: function value(key, _value) {
      this.initValue();
      this.updateData({
        value: this.state.value.toUnit(_value)
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeVarType'),
    value: function value(key, unit) {
      this.updateData({
        value: new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"](this.refs.$calc.value, unit)
      });
    }
  }]);

  return InputRangeEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_12__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_11__[/* registElement */ "a"])({
  InputRangeEditor: InputRangeEditor
});

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NumberRangeEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var NumberRangeEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(NumberRangeEditor, _EditorElement);

  var _super = _createSuper(NumberRangeEditor);

  function NumberRangeEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, NumberRangeEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(NumberRangeEditor, [{
    key: "initState",
    value: function initState() {
      var value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(this.props.value || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].number(0));
      value = value.toUnit('number');
      return {
        removable: this.props.removable === 'true',
        clamp: this.props.clamp === 'true',
        label: this.props.label || '',
        min: +this.props.min || 0,
        max: +this.props.max || 100,
        step: +this.props.step || 1,
        key: this.props.key,
        params: this.props.params || '',
        layout: this.props.layout || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return "<div class='small-editor' ref='$body'></div>";
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$body'),
    value: function value() {
      var _this$state = this.state,
          min = _this$state.min,
          max = _this$state.max,
          step = _this$state.step,
          label = _this$state.label,
          type = _this$state.type,
          removable = _this$state.removable,
          layout = _this$state.layout;
      var value = +this.state.value.value.toString();

      if (isNaN(value)) {
        value = 0;
      }

      var hasLabel = !!label ? 'has-label' : '';
      var isRemovable = removable ? 'is-removable' : '';
      var layoutClass = layout;
      var realValue = (+value).toString();
      return (
        /*html*/
        "\n        <div class='number-range-editor ".concat(hasLabel, " ").concat(isRemovable, " ").concat(layoutClass, "' data-selected-type='").concat(type, "'>\n            ").concat(label ? "<label title=\"".concat(label, "\">").concat(label, "</label>") : '', "\n            <div class='range-editor-type' data-type='range'>\n                <div class='area'>\n                    <input type='range' ref='$property' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" />\n                    <input type='number' ref='$propertyNumber' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" tabIndex=\"1\" />\n                </div>\n            </div>\n            <button type='button' class='remove' ref='$remove' title='Remove'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove, "</button>\n        </div>\n    ")
      );
    }
  }, {
    key: "setMin",
    value: function setMin(value) {
      this.setState({
        min: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(value)
      });
    }
  }, {
    key: "setMax",
    value: function setMax(value) {
      this.setState({
        max: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(value)
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      if (this.state.clamp) {
        return this.state.value.clamp(this.state.min, this.state.max);
      }

      return this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(value)
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["FOCUS"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$propertyNumber.addClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BLUR"])('$propertyNumber'),
    value: function value(e) {
      this.refs.$propertyNumber.removeClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$remove'),
    value: function value(e) {
      this.updateData({
        value: ''
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["INPUT"])('$propertyNumber'),
    value: function value(e) {
      var value = +this.getRef('$propertyNumber').value;
      this.getRef('$property').val(value);
      this.updateData({
        value: this.state.value.set(value)
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["POINTERSTART"])('$property') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["MOVE"])('moveRange') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["END"])('moveRange'),
    value: function value() {}
  }, {
    key: "moveRange",
    value: function moveRange() {
      this.trigger('changeValue');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changeValue') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["THROTTLE"])(100),
    value: function value() {
      var value = +this.getRef('$property').value;
      this.getRef('$propertyNumber').val(value);

      if (this.state.value === '') {
        this.state.value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].number(0);
      }

      this.updateData({
        value: this.state.value.set(value)
      });
    }
  }]);

  return NumberRangeEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_9__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_8__[/* registElement */ "a"])({
  NumberRangeEditor: NumberRangeEditor
});

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SelectIconEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SelectIconEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(SelectIconEditor, _EditorElement);

  var _super = _createSuper(SelectIconEditor);

  function SelectIconEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SelectIconEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SelectIconEditor, [{
    key: "initState",
    value: function initState() {
      var keyValueChar = this.props['key-value-char'] || ':';
      var splitChar = this.props.split || ',';
      var options = (this.props.options || '').split(splitChar).map(function (it) {
        return it.trim();
      });
      var icons = (this.props.icons || '').split(splitChar).map(function (it) {
        return it.trim();
      });
      var colors = (this.props.colors || '').split(splitChar).map(function (it) {
        return it.trim();
      });
      var value = this.props.value || '';
      return {
        keyValueChar: keyValueChar,
        label: this.props.label || '',
        compact: this.props.compact === 'true',
        options: options,
        icons: icons,
        colors: colors,
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          compact = _this$state.compact;
      var hasLabel = !!label ? 'has-label' : '';
      var hasCompact = !!compact ? 'compact' : '';
      return (
        /*html*/
        "\n            <div class='select-icon-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label title=\"".concat(label, "\">").concat(label, "</label>") : '', "\n                <div class='items ").concat(hasCompact, "' ref='$options'></div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$close'),
    value: function value() {
      this.updateData({
        value: ''
      });
      this.refresh();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value || '';
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$options') + el_base_Event__WEBPACK_IMPORTED_MODULE_6__["DOMDIFF"],
    value: function value() {
      var _this = this;

      return this.state.options.map(function (it, index) {
        var value = it;
        var label = it;
        var title = it;
        var iconClass = '';

        if (value.includes(_this.state.keyValueChar)) {
          var _value$split = value.split(_this.state.keyValueChar),
              _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_value$split, 2),
              value = _value$split2[0],
              label = _value$split2[1];
        }

        var isSelected = value === _this.state.value;
        var selected = isSelected ? 'selected' : '';

        if (it === '') {
          var label = el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].close;
          title = 'close';
        } else {
          var iconKey = _this.state.icons[index];

          if (el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"][iconKey]) {
            iconClass = 'icon';
          }

          title = label;
          label = el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"][iconKey] || label || iconKey || it;
        }

        var color = _this.state.colors[index];
        var css = {};

        if (isSelected && color) {
          css['background-color'] = color;
        }

        return (
          /*html*/
          "<div class='select-icon-item ".concat(selected, " ").concat(iconClass, "' style='").concat(Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["CSS_TO_STRING"])(css), "' data-value=\"").concat(value, "\" title='").concat(title, "'>").concat(label, "</div>")
        );
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$options .select-icon-item'),
    value: function value(e) {
      var value = e.$dt.attr('data-value');
      this.updateData({
        value: value
      });
      this.refresh();
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }]);

  return SelectIconEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_9__[/* registElement */ "a"])({
  SelectIconEditor: SelectIconEditor
});

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ Project_Project; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var helpers_get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(helpers_get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/manager/ComponentManager.js
var ComponentManager = __webpack_require__(33);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var functions_func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/base/functions/time.js
var functions_time = __webpack_require__(29);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./src/el/base/functions/bezier.js
var bezier = __webpack_require__(24);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateNumber.js
var interpolate_functions_makeInterpolateNumber = __webpack_require__(23);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateIdentity.js
function makeInterpolateIdentity(layer, property, value) {
  return function (ratio, t) {
    return value;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateLength.js




function getRealAttributeValue(layer, property, value) {
  var refType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'width';
  var refElement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'parent';
  var refObject = null;

  if (refElement === 'parent') {
    refObject = layer[refElement][refType];
  } else if (refElement === 'self') {
    refObject = layer[refType];
  }

  if (refObject) {
    return value.toPx(refObject.value);
  }

  return value;
}

function rollbackRealAttributeValue(layer, property, value, unit) {
  var refType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'width';
  var refElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'parent';
  var refObject = null;

  if (refElement === 'parent') {
    refObject = layer[refElement][refType];
  } else if (refElement === 'self') {
    refObject = layer[refType];
  }

  if (refObject) {
    return value.to(unit, refObject.value);
  }

  return value;
}

function makeInterpolateLength(layer, property, startNumber, endNumber) {
  var refType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'width';
  var refElement = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'parent';
  var s = Length["a" /* Length */].parse(startNumber);
  var e = Length["a" /* Length */].parse(endNumber);

  if (s.unit === e.unit) {
    return Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.value, e.value, s.unit);
  } else if (s.equals(e)) {
    return makeInterpolateIdentity(layer, property, s);
  }

  return function (rate, t) {
    var realStartValue = getRealAttributeValue(layer, property, s, refType, refElement);
    var realEndValue = getRealAttributeValue(layer, property, e, refType, refElement);

    if (t === 0) {
      return realStartValue;
    } else if (t === 1) {
      return realEndValue;
    }

    return rollbackRealAttributeValue(layer, property, Length["a" /* Length */].px(realStartValue.value + (realEndValue.value - realStartValue.value) * rate), s.unit, refType, refElement);
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/BorderRadius.js
var BorderRadius = __webpack_require__(89);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateBorderRadius.js





var getBorderRadiusList = function getBorderRadiusList(radiusValue) {
  var startObject = [];

  if (radiusValue.isAll) {
    startObject = [radiusValue['border-radius'] || '0px', radiusValue['border-radius'] || '0px', radiusValue['border-radius'] || '0px', radiusValue['border-radius'] || '0px'];
  } else {
    startObject = [radiusValue['border-top-left-radius'] || '0px', radiusValue['border-top-right-radius'] || '0px', radiusValue['border-bottom-right-radius'] || '0px', radiusValue['border-bottom-left-radius'] || '0px'];
  }

  return startObject;
};

function makeInterpolateBorderRadius(layer, property, startValue, endValue) {
  var s = getBorderRadiusList(BorderRadius["a" /* default */].parseStyle(startValue));
  var e = getBorderRadiusList(BorderRadius["a" /* default */].parseStyle(endValue));
  var max = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    list[i] = makeInterpolateLength(layer, property, s[i], e[i]);
  }

  return function (rate, t) {
    return list.map(function (it) {
      return it(rate, t);
    }).join(' ');
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/BoxShadow.js
var BoxShadow = __webpack_require__(59);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateBoolean.js
function makeInterpolateBoolean(layer, property, s, e) {
  return function (ratio, t) {
    if (t === 1) {
      return e;
    }

    return s;
  };
}
// EXTERNAL MODULE: ./src/el/base/Color.js + 2 modules
var Color = __webpack_require__(26);

// EXTERNAL MODULE: ./src/el/base/functions/mixin.js
var mixin = __webpack_require__(99);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateColor.js


function makeInterpolateColor(layer, property, startColor, endColor) {
  var s = Color["a" /* default */].parse(startColor || 'rgba(0, 0, 0, 1)');
  var e = Color["a" /* default */].parse(endColor || 'rgba(0, 0, 0, 1)');
  return function (rate, t) {
    if (t === 0) {
      return startColor;
    } else if (t === 1) {
      return endColor;
    }

    return Object(mixin["interpolateRGB"])(s, e, rate, 'rgb');
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateBoxShadow.js




function makeInterpolateBoxShadow(layer, property, startValue, endValue) {
  var s = BoxShadow["a" /* BoxShadow */].parseStyle(startValue);
  var e = BoxShadow["a" /* BoxShadow */].parseStyle(endValue);
  var totalLength = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0, len = totalLength; i < len; i++) {
    var startObject = s[i] || BoxShadow["a" /* BoxShadow */].parseStyle('0px 0px 0px 0px rgba(0, 0, 0, 0)')[0];
    var endObject = e[i] || BoxShadow["a" /* BoxShadow */].parseStyle('0px 0px 0px 0px rgba(0, 0, 0, 0)')[0];
    list.push({
      inset: makeInterpolateBoolean(layer, property, startObject.inset, endObject.inset),
      offsetX: makeInterpolateLength(layer, property, startObject.offsetX, endObject.offsetX),
      offsetY: makeInterpolateLength(layer, property, startObject.offsetY, endObject.offsetY),
      blurRadius: makeInterpolateLength(layer, property, startObject.blurRadius, endObject.blurRadius),
      spreadRadius: makeInterpolateLength(layer, property, startObject.spreadRadius, endObject.spreadRadius),
      color: makeInterpolateColor(layer, property, startObject.color, endObject.color)
    });
  }

  return function (rate, t) {
    return BoxShadow["a" /* BoxShadow */].join(list.map(function (it) {
      return {
        inset: it.inset(rate, t),
        offsetX: it.offsetX(rate, t),
        offsetY: it.offsetY(rate, t),
        blurRadius: it.blurRadius(rate, t),
        spreadRadius: it.spreadRadius(rate, t),
        color: it.color(rate, t)
      };
    }));
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateString.js

function makeInterpolateString(layer, property, startString, endString) {
  return makeInterpolateBoolean(layer, property, startString, endString);
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/timing-functions/steps.js
var stepTimingFunction = function stepTimingFunction() {
  var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'end';
  step = +step;
  return function (rate) {
    var stepDist = 1 / step;

    if (direction == 'start') {
      return stepDist * Math.ceil(rate / stepDist);
    } else if (direction == 'end') {
      return stepDist * Math.floor(rate / stepDist);
    }
  };
};

function step() {
  var step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'end';
  return stepTimingFunction(step, direction);
}
function stepStart() {
  return stepTimingFunction(1, 'start');
}
function stepEnd() {
  return stepTimingFunction(1, 'end');
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/timing-functions/ease-out-elastic.js
/* harmony default export */ var ease_out_elastic = (function () {
  return function (rate) {
    return Math.pow(2, -10 * rate) * Math.sin((rate - .1) * 5 * Math.PI) + 1;
  };
});
// CONCATENATED MODULE: ./src/el/editor/interpolate/timing-functions/index.js


/* harmony default export */ var timing_functions = ({
  step: step,
  'step-start': stepStart,
  'step-end': stepEnd,
  stepStart: stepStart,
  stepEnd: stepEnd,
  'ease-out-elastic': ease_out_elastic,
  easeOutElastic: ease_out_elastic
});
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateRotate.js

function makeInterpolateRotate(layer, property, startNumber, endNumber) {
  var startValue = Length["a" /* Length */].parse(startNumber);
  var endValue = Length["a" /* Length */].parse(endNumber);
  return function (rate, t) {
    var realStartValue = startValue.value;
    var realEndValue = endValue.value;

    if (t === 0) {
      return Length["a" /* Length */].deg(realStartValue);
    } else if (t === 1) {
      return Length["a" /* Length */].deg(realEndValue);
    }

    return Length["a" /* Length */].deg(realStartValue + (realEndValue - realStartValue) * rate).to(startValue.unit);
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/TextShadow.js
var TextShadow = __webpack_require__(60);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateTextShadow.js



function makeInterpolateTextShadow(layer, property, startValue, endValue) {
  var s = TextShadow["a" /* TextShadow */].parseStyle(startValue);
  var e = TextShadow["a" /* TextShadow */].parseStyle(endValue);
  var totalLength = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0, len = totalLength; i < len; i++) {
    var startObject = s[i] || TextShadow["a" /* TextShadow */].parseStyle('0px 0px 0px rgba(0, 0, 0, 0)')[0];
    var endObject = e[i] || TextShadow["a" /* TextShadow */].parseStyle('0px 0px 0px rgba(0, 0, 0, 0)')[0];
    list.push({
      offsetX: makeInterpolateLength(layer, property, startObject.offsetX, endObject.offsetX, 'width', 'self'),
      offsetY: makeInterpolateLength(layer, property, startObject.offsetY, endObject.offsetY, 'height', 'self'),
      blurRadius: makeInterpolateLength(layer, property, startObject.blurRadius, endObject.blurRadius, 'radius'),
      color: makeInterpolateColor(layer, property, startObject.color, endObject.color)
    });
  }

  return function (rate, t) {
    return TextShadow["a" /* TextShadow */].join(list.map(function (it) {
      return {
        offsetX: it.offsetX(rate, t),
        offsetY: it.offsetY(rate, t),
        blurRadius: it.blurRadius(rate, t),
        color: it.color(rate, t)
      };
    }));
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/BackgroundImage.js + 1 modules
var BackgroundImage = __webpack_require__(36);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/LinearGradient.js
var LinearGradient = __webpack_require__(52);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ColorStep.js
var ColorStep = __webpack_require__(22);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateColorStep.js





function makeInterpolateColorStep(layer, property, startColorStep, endColorStep) {
  var obj = {
    cut: makeInterpolateBoolean(layer, property, startColorStep.cut, endColorStep.cut),
    percent: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startColorStep.percent, endColorStep.percent),
    px: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startColorStep.px, endColorStep.px),
    em: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startColorStep.em, endColorStep.em),
    unit: makeInterpolateString(layer, property, startColorStep.unit, endColorStep.unit),
    color: makeInterpolateColor(layer, property, startColorStep.color, endColorStep.color)
  }; // console.log(startColorStep.color, endColorStep.color)

  return function (rate, t) {
    return new ColorStep["a" /* ColorStep */]({
      cut: obj.cut(rate, t),
      percent: obj.percent(rate, t),
      px: obj.px(rate, t),
      em: obj.em(rate, t),
      unit: obj.unit(rate, t),
      color: obj.color(rate, t)
    });
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateColorStepList.js


function makeInterpolateColorStepList(layer, property) {
  var startColorsteps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var endColorsteps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var max = Math.max(startColorsteps.length, endColorsteps.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var s = startColorsteps[i];
    var e = endColorsteps[i];

    if (s && e) {
      list[i] = makeInterpolateColorStep(layer, property, s, e);
    } else {
      list[i] = makeInterpolateBoolean(layer, property, s, e);
    }
  }

  return function (rate, t) {
    return list.map(function (it) {
      return it(rate, t);
    });
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateLinearGradient.js



function makeInterpolateLinearGradient(layer, property, s, e) {
  // angle 이랑 
  // colorsteps 
  var obj = {
    angle: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.angle, e.angle),
    colorsteps: makeInterpolateColorStepList(layer, property, s.colorsteps, e.colorsteps)
  };
  return function (rate, t) {
    var colorsteps = obj.colorsteps(rate, t);
    return new LinearGradient["a" /* LinearGradient */]({
      angle: obj.angle(rate, t),
      colorsteps: colorsteps
    });
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingLinearGradient.js
var RepeatingLinearGradient = __webpack_require__(74);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateRepeatingLinearGradient.js


function makeInterpolateRepeatingLinearGradient(layer, property, s, e) {
  var func = makeInterpolateLinearGradient(layer, property, s, e);
  return function (rate, t) {
    var obj = func(rate, t);
    var results = new RepeatingLinearGradient["a" /* RepeatingLinearGradient */]({
      angle: obj.angle,
      colorsteps: obj.colorsteps
    });
    return results;
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RadialGradient.js
var RadialGradient = __webpack_require__(54);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateRadialGradient.js


var _DEFINED_POSITIONS;





var DEFINED_POSITIONS = (_DEFINED_POSITIONS = {}, defineProperty_default()(_DEFINED_POSITIONS, "center", true), defineProperty_default()(_DEFINED_POSITIONS, "top", true), defineProperty_default()(_DEFINED_POSITIONS, "left", true), defineProperty_default()(_DEFINED_POSITIONS, "right", true), defineProperty_default()(_DEFINED_POSITIONS, "bottom", true), _DEFINED_POSITIONS);
var DEFINED_ANGLES = {
  "to top": 0,
  "to top right": 45,
  "to right": 90,
  "to bottom right": 135,
  "to bottom": 180,
  "to bottom left": 225,
  "to left": 270,
  "to top left": 315
};

function convertPercent(value, type) {
  switch (type) {
    case 'width':
      if (value === 'center') {
        return '50%';
      } else if (value === 'left') {
        return '0%';
      } else if (value === 'right') {
        return '100%';
      }

      break;

    case 'height':
      if (value === 'center') {
        return '50%';
      } else if (value === 'top') {
        return '0%';
      } else if (value === 'bottom') {
        return '100%';
      }

      break;
  }

  return value;
}

function makeInterpolateRadialGradient(layer, property, s, e) {
  // angle 이랑 
  // colorsteps 
  // console.log(s, e);
  s.radialPosition[0] = convertPercent(s.radialPosition[0], 'width');
  s.radialPosition[1] = convertPercent(s.radialPosition[1], 'height');
  e.radialPosition[0] = convertPercent(e.radialPosition[0], 'width');
  e.radialPosition[1] = convertPercent(e.radialPosition[1], 'height');
  var obj = {
    radialType: makeInterpolateString(layer, property, s.radialType, e.radialType),
    radialPositionX: makeInterpolateLength(layer, property, s.radialPosition[0], e.radialPosition[0], 'width', 'self'),
    radialPositionY: makeInterpolateLength(layer, property, s.radialPosition[1], e.radialPosition[1], 'height', 'self'),
    colorsteps: makeInterpolateColorStepList(layer, property, s.colorsteps, e.colorsteps)
  };
  return function (rate, t) {
    var results = new RadialGradient["a" /* RadialGradient */]({
      radialType: obj.radialType(rate, t),
      radialPosition: [obj.radialPositionX(rate, t), obj.radialPositionY(rate, t)],
      colorsteps: obj.colorsteps(rate, t)
    });
    return results;
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingRadialGradient.js
var RepeatingRadialGradient = __webpack_require__(75);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateRepeatingRadialGradient.js


function makeInterpolateRepeatingRadialGradient(layer, property, s, e) {
  var func = makeInterpolateRadialGradient(layer, property, s, e);
  return function (rate, t) {
    var obj = func(rate, t);
    return new RepeatingRadialGradient["a" /* RepeatingRadialGradient */]({
      radialType: obj.radialType,
      radialPosition: obj.radialPosition,
      colorsteps: obj.colorsteps
    });
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ConicGradient.js
var ConicGradient = __webpack_require__(55);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateConicGradient.js




function makeInterpolateConicGradient(layer, property, s, e) {
  var obj = {
    angle: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.angle, e.angle),
    radialPositionX: makeInterpolateLength(layer, property, s.radialPosition[0], e.radialPosition[0], 'width', 'self'),
    radialPositionY: makeInterpolateLength(layer, property, s.radialPosition[1], e.radialPosition[1], 'height', 'self'),
    colorsteps: makeInterpolateColorStepList(layer, property, s.colorsteps, e.colorsteps)
  };
  return function (rate, t) {
    return new ConicGradient["a" /* ConicGradient */]({
      angle: obj.angle(rate, t),
      radialPosition: [obj.radialPositionX(rate, t), obj.radialPositionY(rate, t)],
      colorsteps: obj.colorsteps(rate, t)
    });
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/RepeatingConicGradient.js
var RepeatingConicGradient = __webpack_require__(76);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/gradient/makeInterpolateRepeatingConicGradient.js


function makeInterpolateRepeatingConicGradient(layer, property, s, e) {
  var func = makeInterpolateConicGradient(layer, property, s, e);
  return function (rate, t) {
    var obj = func(rate, t);
    return new RepeatingConicGradient["a" /* RepeatingConicGradient */]({
      angle: obj.angle,
      radialPosition: obj.radialPosition,
      colorsteps: obj.colorsteps
    });
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateImageResource.js







function makeInterpolateImageResource(layer, property, s, e) {
  var obj = {
    image: function image(rate, t) {
      return t;
    }
  };

  if (s.type === 'url' || e.type === 'url') {
    obj.image = makeInterpolateBoolean(layer, property, s, e);
  } else {
    if (s.type != e.type) {
      obj.image = makeInterpolateBoolean(layer, property, s, e);
    } else {
      // 타입이 같을 때만 interpolate 함 
      switch (s.type) {
        case 'linear-gradient':
          obj.image = makeInterpolateLinearGradient(layer, property, s, e);
          break;

        case 'repeating-linear-gradient':
          obj.image = makeInterpolateRepeatingLinearGradient(layer, property, s, e);
          break;

        case 'radial-gradient':
          obj.image = makeInterpolateRadialGradient(layer, property, s, e);
          break;

        case 'repeating-radial-gradient':
          obj.image = makeInterpolateRepeatingRadialGradient(layer, property, s, e);
          break;

        case 'conic-gradient':
          obj.image = makeInterpolateConicGradient(layer, property, s, e);
          break;

        case 'repeating-conic-gradient':
          obj.image = makeInterpolateRepeatingConicGradient(layer, property, s, e);
          break;
      }
    }
  }

  return function (rate, t) {
    return obj.image(rate, t);
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateBackgroundImage.js






function makeInterpolateBackgroundImage(layer, property, startValue, endValue) {
  var s = BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(functions_func["STRING_TO_CSS"])(startValue));
  var e = BackgroundImage["a" /* BackgroundImage */].parseStyle(Object(functions_func["STRING_TO_CSS"])(endValue));
  var totalLength = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0, len = totalLength; i < len; i++) {
    var startObject = s[i] || null;
    var endObject = e[i] || null;

    if (startObject && !endObject) {
      // 처음은 있고 끝이 없을 때 
      list.push({
        image: makeInterpolateIdentity(layer, property, startObject.image),
        size: makeInterpolateIdentity(layer, property, startObject.size),
        width: makeInterpolateIdentity(layer, property, startObject.width),
        height: makeInterpolateIdentity(layer, property, startObject.height),
        x: makeInterpolateIdentity(layer, property, startObject.x),
        y: makeInterpolateIdentity(layer, property, startObject.y),
        blendMode: makeInterpolateIdentity(layer, property, startObject.blendMode),
        repeat: makeInterpolateIdentity(layer, property, startObject.repeat)
      });
    } else if (!startObject && endObject) {
      // 처음은 없고 끝이 있을 때 
      list.push({
        image: makeInterpolateIdentity(layer, property, endObject.image),
        size: makeInterpolateIdentity(layer, property, endObject.size),
        width: makeInterpolateIdentity(layer, property, endObject.width),
        height: makeInterpolateIdentity(layer, property, endObject.height),
        x: makeInterpolateIdentity(layer, property, endObject.x),
        y: makeInterpolateIdentity(layer, property, endObject.y),
        blendMode: makeInterpolateIdentity(layer, property, endObject.blendMode),
        repeat: makeInterpolateIdentity(layer, property, endObject.repeat)
      });
    } else if (startObject && endObject) {
      // 처음도 있고 끝도 있을 때 
      list.push({
        image: makeInterpolateImageResource(layer, property, startObject.image, endObject.image),
        size: makeInterpolateString(layer, property, startObject.size, endObject.size),
        width: makeInterpolateLength(layer, property, startObject.width, endObject.width, 'width', 'self'),
        height: makeInterpolateLength(layer, property, startObject.height, endObject.height, 'height', 'self'),
        x: makeInterpolateLength(layer, property, startObject.x, endObject.x, 'width', 'self'),
        y: makeInterpolateLength(layer, property, startObject.y, endObject.y, 'height', 'self'),
        blendMode: makeInterpolateString(layer, property, startObject.blendMode, endObject.blendMode),
        repeat: makeInterpolateString(layer, property, startObject.repeat, endObject.repeat)
      });
    }
  }

  return function (rate, t) {
    return BackgroundImage["a" /* BackgroundImage */].join(list.map(function (it) {
      var data = {
        image: it.image(rate, t),
        size: it.size(rate, t),
        x: it.x(rate, t),
        y: it.y(rate, t),
        width: it.width(rate, t),
        height: it.height(rate, t),
        blendMode: it.blendMode(rate, t),
        repeat: it.repeat(rate, t)
      };
      return data;
    }));
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/Filter.js
var Filter = __webpack_require__(44);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateFilterItem.js





function makeInterpolateFilterItem(layer, property, startValue, endValue) {
  var obj = {
    type: makeInterpolateString(layer, property, startValue.type, endValue.type),
    value: makeInterpolateBoolean(layer, property, startValue.value, endValue.value)
  };

  switch (startValue.type) {
    case 'blur':
      obj.value = makeInterpolateLength(layer, property, startValue.value, endValue.value);
      break;

    case 'grayscale':
    case 'invert':
    case 'brightness':
    case 'contrast':
    case 'opacity':
    case 'saturate':
    case 'sepia':
    case 'hue-rotate':
      obj.value = Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startValue.value.value, endValue.value.value, startValue.value.unit);
      break;

    case 'drop-shadow':
      obj.offsetX = makeInterpolateLength(layer, property, startValue.offsetX, endValue.offsetX, 'width', 'self');
      obj.offsetY = makeInterpolateLength(layer, property, startValue.offsetY, endValue.offsetY, 'height', 'self');
      obj.blurRadius = makeInterpolateLength(layer, property, startValue.blurRadius, endValue.blurRadius, 'width', 'self');
      obj.spreadRadius = makeInterpolateLength(layer, property, startValue.spreadRadius, endValue.spreadRadius, 'width', 'self');
      obj.color = makeInterpolateColor(layer, property, startValue.color, endValue.color);
      break;
  }

  return function (rate, t) {
    var type = obj.type(rate, t);

    if (type === 'drop-shadow') {
      return {
        type: obj.type(rate, t),
        offsetX: obj.offsetX(rate, t),
        offsetY: obj.offsetY(rate, t),
        blurRadius: obj.blurRadius(rate, t),
        spreadRadius: obj.spreadRadius(rate, t),
        color: obj.color(rate, t)
      };
    } else {
      return {
        type: obj.type(rate, t),
        value: obj.value(rate, t)
      };
    }
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateFilter.js




function makeInterpolateFilter(layer, property, startValue, endValue) {
  var s = Filter["e" /* Filter */].parseStyle(startValue);
  var e = Filter["e" /* Filter */].parseStyle(endValue);
  var totalLength = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0, len = totalLength; i < len; i++) {
    var startObject = s[i];
    var endObject = e[i];

    if (startObject && !endObject) {
      list.push(makeInterpolateIdentity(layer, property, startObject));
    } else if (!startObject && endObject) {
      list.push(makeInterpolateIdentity(layer, property, endObject));
    } else {
      if (startObject.type != endObject.type || startObject.type === 'svg' || endObject.type === 'svg') {
        list.push(makeInterpolateBoolean(layer, property, startObject, endObject));
      } else {
        list.push(makeInterpolateFilterItem(layer, property, startObject, endObject));
      }
    }
  }

  return function (rate, t) {
    return Filter["e" /* Filter */].join(list.map(function (it) {
      return it(rate, t);
    }));
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/ClipPath.js
var ClipPath = __webpack_require__(40);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/clip-path/makeInterpolateClipPathCircle.js


function makeInterpolateClipPathCircle(layer, property, s, e) {
  //radius, x, y
  // radius : length - percent closest-side | farthest-side
  var obj = {};

  if (s.radius === 'closest-side' || s.radius === 'farthest-side' || e.radius === 'closest-side' || e.radius === 'farthest-side') {
    obj.radius = makeInterpolateBoolean(layer, property, s.radius, e.radius);
  } else {
    if (s.radius.unit === e.radius.unit) {
      obj.radius = makeInterpolateNumber(layer, property, s.radius.value, e.radius.value, s.radius.unit);
    } else {
      obj.radius = makeInterpolateLength(layer, property, s.radius, e.radius, 'width', 'self');
    }
  }

  obj.x = makeInterpolateLength(layer, property, s.x, e.x, 'width', 'self');
  obj.y = makeInterpolateLength(layer, property, s.y, e.y, 'height', 'self');
  return function (rate, t) {
    var radius = obj.radius(rate, t);
    var x = obj.x(rate, t);
    var y = obj.y(rate, t);
    var results = "".concat(x, " ").concat(y);
    var radiusString = radius + '';

    if (radiusString.includes('closest-side')) {
      radiusString = 'closest-side';
    } else if (radiusString.includes('farthest-side')) {
      radiusString = 'farthest-side';
    }

    return radius ? "".concat(radiusString, " at ").concat(results) : "".concat(results);
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/clip-path/makeInterpolateClipPathEllipse.js

function makeInterpolateClipPathEllipse(layer, property, s, e) {
  var obj = {
    radiusX: makeInterpolateLength(layer, property, s.radiusX, e.radiusX, 'width', 'self'),
    radiusY: makeInterpolateLength(layer, property, s.radiusY, e.radiusY, 'height', 'self'),
    x: makeInterpolateLength(layer, property, s.x, e.x, 'width', 'self'),
    y: makeInterpolateLength(layer, property, s.y, e.y, 'height', 'self')
  };
  return function (rate, t) {
    var radiusX = obj.radiusX(rate, t);
    var radiusY = obj.radiusY(rate, t);
    var x = obj.x(rate, t);
    var y = obj.y(rate, t);
    return "".concat(radiusX, " ").concat(radiusY, " at ").concat(x, " ").concat(y);
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/clip-path/makeInterpolateClipPathPolygon.js


function makeInterpolateClipPathPolygon(layer, property, s, e) {
  var max = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var startPos = s[i];
    var endPos = e[i];

    if (startPos && !endPos) {
      list.push({
        x: makeInterpolateIdentity(layer, property, startPos.x),
        y: makeInterpolateIdentity(layer, property, startPos.y)
      });
    } else if (!startPos && endPos) {
      list.push({
        x: makeInterpolateIdentity(layer, property, endPos.x),
        y: makeInterpolateIdentity(layer, property, endPos.y)
      });
    } else {
      list.push({
        x: makeInterpolateLength(layer, property, startPos.x, endPos.x, 'width', 'self'),
        y: makeInterpolateLength(layer, property, startPos.y, endPos.y, 'height', 'self')
      });
    }
  }

  return function (rate, t) {
    return list.map(function (it) {
      return "".concat(it.x(rate, t), " ").concat(it.y(rate, t));
    }).join(',');
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/clip-path/makeInterpolateClipPathInset.js


function makeInterpolateClipPathInset(layer, property, s, e) {
  var obj = {
    top: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.top.value, e.top.value, s.top.unit),
    left: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.left.value, e.left.value, s.left.unit),
    right: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.right.value, e.right.value, s.right.unit),
    bottom: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.bottom.value, e.bottom.value, s.bottom.unit),
    round: makeInterpolateBoolean(layer, property, s.round, e.round),
    topRadius: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.topRadius.value, e.topRadius.value, s.topRadius.unit),
    leftRadius: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.leftRadius.value, e.leftRadius.value, s.leftRadius.unit),
    rightRadius: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.rightRadius.value, e.rightRadius.value, s.rightRadius.unit),
    bottomRadius: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.bottomRadius.value, e.bottomRadius.value, s.bottomRadius.unit)
  };
  return function (rate, t) {
    var top = obj.top(rate, t);
    var right = obj.right(rate, t);
    var bottom = obj.bottom(rate, t);
    var left = obj.left(rate, t);
    var round = obj.round(rate, t);
    var topRadius = obj.topRadius(rate, t);
    var leftRadius = obj.leftRadius(rate, t);
    var bottomRadius = obj.bottomRadius(rate, t);
    var rightRadius = obj.rightRadius(rate, t);
    var position = [top, right, bottom, left].join(' ');
    var radius = [topRadius, rightRadius, bottomRadius, leftRadius].join(' ');
    var results = "".concat(position, " ").concat(round && radius.trim() ? "round ".concat(radius) : '');
    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateClipPath.js






function makeInterpolateClipPath(layer, property, startValue, endValue) {
  var startObject = ClipPath["a" /* ClipPath */].parseStyle(startValue);
  var endObject = ClipPath["a" /* ClipPath */].parseStyle(endValue);
  var obj = {
    type: makeInterpolateBoolean(layer, property, startObject.type, startObject.type),
    value: makeInterpolateBoolean(layer, property, startValue, endValue)
  };

  if (startObject.type == endObject.type && startObject != 'none') {
    switch (startObject.type) {
      case 'circle':
        startObject.value = ClipPath["a" /* ClipPath */].parseStyleForCircle(startObject.value);
        endObject.value = ClipPath["a" /* ClipPath */].parseStyleForCircle(endObject.value);
        obj.value = makeInterpolateClipPathCircle(layer, property, startObject.value, endObject.value);
        break;

      case 'ellipse':
        startObject.value = ClipPath["a" /* ClipPath */].parseStyleForEllipse(startObject.value);
        endObject.value = ClipPath["a" /* ClipPath */].parseStyleForEllipse(endObject.value);
        obj.value = makeInterpolateClipPathEllipse(layer, property, startObject.value, endObject.value);
        break;

      case 'inset':
        // 구현 해야함 
        startObject.value = ClipPath["a" /* ClipPath */].parseStyleForInset(startObject.value);
        endObject.value = ClipPath["a" /* ClipPath */].parseStyleForInset(endObject.value);
        obj.value = makeInterpolateClipPathInset(layer, property, startObject.value, endObject.value);
        break;

      case 'polygon':
        // 구현 해야함 
        startObject.value = ClipPath["a" /* ClipPath */].parseStyleForPolygon(startObject.value);
        endObject.value = ClipPath["a" /* ClipPath */].parseStyleForPolygon(endObject.value);
        obj.value = makeInterpolateClipPathPolygon(layer, property, startObject.value, endObject.value);
        break;

      case 'path':
        // 구현 해야함 
        startObject.value = ClipPath["a" /* ClipPath */].parseStyleForPath(startObject.value);
        endObject.value = ClipPath["a" /* ClipPath */].parseStyleForPath(endObject.value);
        obj.value = makeInterpolateClipPathPath(layer, property, startObject.value, endObject.value);
        break;
    }
  }

  return function (rate, t) {
    var type = obj.type(rate, t);
    var value = obj.value(rate, t);

    if (type === 'none') {
      return type;
    }

    return "".concat(type, "(").concat(value, ")");
  };
}
// EXTERNAL MODULE: ./src/el/editor/property-parser/Transform.js + 1 modules
var Transform = __webpack_require__(30);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/transform/makeInterpolateTransformLength.js


function makeInterpolateTransformLength(layer, property, startValue, endValue) {
  var obj = {
    type: makeInterpolateBoolean(layer, property, startValue.type, endValue.type)
  };
  var value = [];
  var max = Math.max(startValue.value.length, endValue.value.length);

  for (var i = 0; i < max; i++) {
    var s = startValue.value[i];
    var e = endValue.value[i];

    if (s && e) {
      value.push(makeInterpolateLength(layer, property, s, e, startValue.type));
    } else {
      value.push(makeInterpolateLength(layer, property, startValue.value[i] || startValue.value[i - 1] || startValue.value[i - 2], endValue.value[i] || endValue.value[i - 1] || endValue.value[i - 2], startValue.type));
    }
  }

  obj.value = value;
  return function (rate, t) {
    return {
      type: obj.type(rate, t),
      value: obj.value.map(function (it) {
        return it(rate, t);
      })
    };
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/transform/makeInterpolateTransformNumber.js




function makeInterpolateTransformNumber(layer, property, startValue, endValue) {
  var obj = {
    type: makeInterpolateBoolean(layer, property, startValue.type, endValue.type)
  };
  var value = [];
  var max = Math.max(startValue.value.length, endValue.value.length);

  for (var i = 0; i < max; i++) {
    var s = startValue.value[i];
    var e = endValue.value[i];

    if (s && e) {
      value.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, s.value, e.value));
    } else {
      var ss = startValue.value[i].value || startValue.value[i - 1].value || startValue.value[i - 2].value;
      var ee = endValue.value[i].value || endValue.value[i - 1].value || startValue.value[i - 2].value;
      value.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, ss, ee));
    }
  }

  obj.value = value;
  return function (rate, t) {
    var value = obj.value.map(function (it) {
      return it(rate, t);
    });
    var type = obj.type(rate, t);

    if (type.includes('matrix') || type.includes('scale')) {
      value = value.map(function (it) {
        return Length["a" /* Length */].number(it);
      });
    }

    return {
      type: type,
      value: value
    };
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/transform/makeInterpolateTransformRotate.js



function makeInterpolateTransformRotate(layer, property, startValue, endValue) {
  var obj = {
    type: makeInterpolateBoolean(layer, property, startValue.type, endValue.type)
  };
  var value = [];
  var max = Math.max(startValue.value.length, endValue.value.length);

  for (var i = 0; i < max; i++) {
    var tempStartValue = startValue.value[i];
    var tempEndValue = endValue.value[i];

    if (tempStartValue && tempEndValue) {
      value.push(makeInterpolateRotate(layer, property, tempStartValue, tempEndValue));
    } else {
      value.push(makeInterpolateRotate(layer, property, startValue.value[i] || startValue.value[i - 1] || startValue.value[i - 2], endValue.value[i] || endValue.value[i - 1] || startValue.value[i - 2]));
    }
  }

  obj.value = value;
  return function (rate, t) {
    var results = {
      type: obj.type(rate, t),
      value: obj.value.map(function (it) {
        return it(rate, t);
      })
    };
    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateTransform.js







function makeInterpolateTransform(layer, property, startValue, endValue) {
  var startObject = Transform["a" /* Transform */].parseStyle(startValue.trim());
  var endObject = Transform["a" /* Transform */].parseStyle(endValue.trim());
  var max = Math.max(startObject.length, endObject.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var s = startObject[i];
    var e = endObject[i];

    if (s && !e) {
      list.push(makeInterpolateIdentity(layer, property, s));
    } else if (!s && e) {
      list.push(makeInterpolateIdentity(layer, property, e));
    } else if (s.type != e.type) {
      list.push(makeInterpolateBoolean(layer, property, s, e));
    } else {
      switch (s.type) {
        // case 'skewX': 
        // case 'skewY': 
        case 'translate':
        case 'translateX':
        case 'translateY':
        case 'translateZ':
        case 'translate3d':
        case 'perspective':
          list.push(makeInterpolateTransformLength(layer, property, s, e));
          break;

        case 'rotate':
        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate3d':
          list.push(makeInterpolateTransformRotate(layer, property, s, e));
          break;

        case 'scale':
        case 'scaleX':
        case 'scaleY':
        case 'scaleZ':
        case 'scale3d':
        case 'matrix':
        case 'matrix3d':
          list.push(makeInterpolateTransformNumber(layer, property, s, e));
          break;
      }
    }
  }

  return function (rate, t) {
    var results = Transform["a" /* Transform */].join(list.map(function (it) {
      return it(rate, t);
    }));
    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateTransformOrigin.js


function makeInterpolateTransformOrigin(layer, property, startValue, endValue) {
  var s = startValue.split(' ').map(function (it) {
    return Length["a" /* Length */].parse(it);
  });
  var e = endValue.split(' ').map(function (it) {
    return Length["a" /* Length */].parse(it);
  });
  var max = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var startPos = s[i];
    var endPos = e[i];
    list.push(makeInterpolateLength(layer, property, startPos, endPos, 'transform-origin'));
  }

  return function (rate, t) {
    var results = list.map(function (it) {
      return it(rate, t);
    }).join(' ');
    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolatePerspectiveOrigin.js


function makeInterpolatePerspectiveOrigin(layer, property, startValue, endValue) {
  var s = startValue.split(' ').map(function (it) {
    return Length["a" /* Length */].parse(it);
  });
  var e = endValue.split(' ').map(function (it) {
    return Length["a" /* Length */].parse(it);
  });
  var max = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var startPos = s[i];
    var endPos = e[i];
    list.push(makeInterpolateLength(layer, property, startPos, endPos, 'perspective-origin'));
  }

  return function (rate, t) {
    var results = list.map(function (it) {
      return it(rate, t);
    }).join(' ');
    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateStrokeDashArray.js

function makeInterpolateStrokeDashArrray(layer, property, startValue, endValue) {
  var s = startValue.split(' ').map(function (it) {
    return +it;
  });
  var e = endValue.split(' ').map(function (it) {
    return +it;
  });
  var max = Math.max(s.length, e.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var startPos = s[i];
    var endPos = e[i];
    list.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos, endPos));
  }

  return function (rate, t) {
    var results = list.map(function (it) {
      return it(rate, t);
    }).join(' ');
    return results;
  };
}
// EXTERNAL MODULE: ./src/el/editor/parser/PathParser.js
var PathParser = __webpack_require__(32);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/svg/makeInterpolatePathValues.js

function makeInterpolatePathValues(layer, property, s, e) {
  var max = Math.max(s.length, e.length);
  var list = [];
  var startLastPos = s[s.length - 1];
  var endLastPos = e[e.length - 1];

  for (var i = 0; i < max; i++) {
    var startPos = s[i];
    var endPos = e[i];

    if (startPos && !endPos) {
      list.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos, endLastPos));
    } else if (!startPos && endPos) {
      list.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startLastPos, endPos));
    } else {
      list.push(Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos, endPos));
    }
  }

  return function (rate, t) {
    return list.map(function (it) {
      return it(rate, t);
    });
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/svg/makeInterpolatePath.js




function makeInterpolatePath(layer, property, startValue, endValue) {
  var returnParser = new PathParser["a" /* default */]();
  var s = new PathParser["a" /* default */](startValue);
  var e = new PathParser["a" /* default */](endValue);
  var max = Math.max(s.segments.length, e.segments.length);
  var list = [];

  for (var i = 0; i < max; i++) {
    var sc = s.segments[i];
    var ec = e.segments[i];

    if (sc.command === ec.command) {
      if (sc.values.length === ec.values.length) {
        list.push({
          command: makeInterpolateIdentity(layer, property, sc.command),
          values: makeInterpolatePathValues(layer, property, sc.values, ec.values)
        });
      } else {
        list.push({
          command: makeInterpolateIdentity(layer, property, sc.command),
          values: makeInterpolateIdentity(layer, property, sc.values)
        });
      }
    } else {
      list.push({
        command: makeInterpolateBoolean(layer, property, sc.command, ec.command),
        values: makeInterpolateBoolean(layer, property, sc.values, ec.values)
      });
    }
  }

  return function (rate, t) {
    var segments = list.map(function (it) {
      return {
        command: it.command(rate, t),
        values: it.values(rate, t)
      };
    });
    var results = returnParser.joinPath(segments);
    return results;
  };
}
// EXTERNAL MODULE: ./src/el/editor/parser/PolygonParser.js
var PolygonParser = __webpack_require__(77);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/svg/makeInterpolatePolygon.js


function makeInterpolatePolygon(layer, property, startValue, endValue) {
  var returnParser = new PolygonParser["a" /* default */]();
  var s = new PolygonParser["a" /* default */](startValue);
  var e = new PolygonParser["a" /* default */](endValue);
  var max = Math.max(s.segments.length, e.segments.length);
  var list = [];
  var startLastX = s.segments[s.segments.length - 1].x;
  var startLastY = s.segments[s.segments.length - 1].y;
  var endLastX = e.segments[e.segments.length - 1].x;
  var endLastY = e.segments[e.segments.length - 1].y;

  for (var i = 0; i < max; i++) {
    var startPos = s.segments[i];
    var endPos = e.segments[i];

    if (startPos && !endPos) {
      list.push({
        x: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos.x, endLastX),
        y: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos.y, endLastY)
      });
    } else if (!startPos && endPos) {
      list.push({
        x: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startLastX, endPos.x),
        y: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startLastY, endPos.y)
      });
    } else {
      list.push({
        x: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos.x, endPos.x),
        y: Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, startPos.y, endPos.y)
      });
    }
  }

  return function (rate, t) {
    var points = returnParser.joinPoints(list.map(function (it) {
      return {
        x: it.x(rate, t),
        y: it.y(rate, t)
      };
    }));
    return points;
  };
}
// EXTERNAL MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateOffset.js + 3 modules
var makeInterpolateOffset = __webpack_require__(139);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateOffsetPath.js



function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }






function makeInterpolateOffsetPath(layer, property, startValue, endValue, artboard) {
  var _startValue$split$map = startValue.split(',').map(function (it) {
    return it.trim();
  }),
      _startValue$split$map2 = slicedToArray_default()(_startValue$split$map, 4),
      id = _startValue$split$map2[0],
      distance = _startValue$split$map2[1],
      rotateStatus = _startValue$split$map2[2],
      rotate = _startValue$split$map2[3];

  var startObject = {
    id: id,
    distance: Length["a" /* Length */].parse(distance || '0%'),
    rotateStatus: rotateStatus || 'auto',
    rotate: Length["a" /* Length */].parse(rotate || '0deg')
  };

  var innerInterpolate = function innerInterpolate(rate, t) {
    return {
      x: x,
      y: y
    };
  };

  var innerInterpolateAngle = function innerInterpolateAngle(rotateStatus, currentAngle) {
    var resultAngle = 0;

    switch (rotateStatus) {
      case 'angle':
        resultAngle = startObject.rotate.value;
        break;

      case 'auto angle':
        resultAngle = currentAngle + startObject.rotate.value;
        break;

      case 'reverse':
        resultAngle = currentAngle + 180;
        break;

      case 'auto':
        resultAngle = currentAngle;
        break;
    }

    return resultAngle;
  };

  var screenX = 0,
      screenY = 0;

  if (artboard) {
    var pathLayer = artboard.searchById(startObject.id);

    if (pathLayer) {
      screenX = pathLayer.screenX.value;
      screenY = pathLayer.screenY.value;
    }

    innerInterpolate = function innerInterpolate(rate, t, timing) {
      var parser = new PathParser["a" /* default */](pathLayer.d || '');

      var _makeInterpolateOffse = Object(makeInterpolateOffset["a" /* default */])(parser.segments),
          totalLength = _makeInterpolateOffse.totalLength,
          interpolateList = _makeInterpolateOffse.interpolateList;

      var distance = startObject.distance.toPx(totalLength);
      var dt = distance / totalLength;
      t = t + dt;

      if (t > 1) {
        t -= 1;
      }

      var obj = interpolateList[0];

      if (t === 0) {
        obj = interpolateList[0];
      } else if (t === 1) {
        obj = interpolateList[interpolateList.length - 1];
      }

      var arr = interpolateList.find(function (it) {
        return it.startT <= t && t < it.endT;
      });

      if (arr) {
        obj = arr;
      }

      var newT = (t - obj.startT) / (obj.endT - obj.startT);
      var newRate = timing(newT);
      return _objectSpread(_objectSpread({}, obj.interpolate(newRate, newT, timing)), {}, {
        totalLength: obj.totalLength
      });
    };
  }

  return function (rate, t, timing) {
    // apply tranform-origin in real time 
    var arr = (layer['transform-origin'] || '50% 50%').split(' ').map(function (it) {
      return Length["a" /* Length */].parse(it);
    });
    var tx = arr[0].toPx(layer.width.value);
    var ty = arr[1].toPx(layer.height.value);
    var obj = innerInterpolate(rate, t, timing);
    var results = {
      x: obj.x + screenX - tx.value,
      y: obj.y + screenY - ty.value
    };
    layer.setScreenX(results.x);
    layer.setScreenY(results.y);

    if (startObject.rotateStatus === 'element') {// NOOP 
    } else {
      var current = obj;
      var distValue = 0;

      if (t < 1) {
        distValue = 1 / obj.totalLength;
      }

      var next = innerInterpolate(rate + distValue, t + distValue, timing);
      var angle = Object(math["calculateAngle"])(next.x - current.x, next.y - current.y);
      var newAngle = Length["a" /* Length */].deg(innerInterpolateAngle(startObject.rotateStatus, angle));
      layer.reset({
        transform: Transform["a" /* Transform */].rotate(layer.transform, newAngle)
      });
    }

    return results;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateText.js
function makeInterpolateText(layer, property, startText, endText) {
  var unit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
  var max = endText.length - 1;
  var min = 0;
  return function (rate, t) {
    var result = 0;

    if (t === 0) {
      result = '';
    } else if (t === 1) {
      result = endText;
    } else {
      result = endText.substring(min, Math.floor((max - min) * t));
    }

    return result;
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolatePlayTime.js

function makeInterpolatePlayTime(layer, property, startValue, endValue, artboard, layerElement) {
  // media 플레이에 필요한 것 
  // 시작 시점(startTime), 끝나는 시점 (endTime);
  // 시점에 따른 playbackRate 자동 계산 
  // 단순 seek 는 움직임을 보여주지 않음. 이상하게 보일 수도 있으니 참고 
  var mediaElement = layerElement.$('video').el;

  var _startValue$split = startValue.split(":"),
      _startValue$split2 = slicedToArray_default()(_startValue$split, 3),
      sTime = _startValue$split2[0],
      eTime = _startValue$split2[1],
      durationTime = _startValue$split2[2];

  var duration = +(durationTime || 1);
  var startTime = +(sTime || 0) * duration;
  return function (rate, t) {
    if (t === 0) {
      mediaElement.currentTime = startTime;

      if (mediaElement.paused) {
        mediaElement.play();
      }
    } else if (t === 1) {
      layer.reset({
        currentTime: mediaElement.currentTime
      });
      mediaElement.pause();
    } else {
      if (mediaElement.paused) {
        mediaElement.play();
      }
    }
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/index.js

























var DEFAULT_FUCTION = function DEFAULT_FUCTION() {
  return function (rate, t) {};
};

function makeInterpolateCustom(property) {
  switch (property) {
    case 'border-radius':
      return makeInterpolateBorderRadius;

    case 'border':
      return makeInterpolateBorder;

    case 'box-shadow':
      return makeInterpolateBoxShadow;

    case 'text-shadow':
      return makeInterpolateTextShadow;

    case 'background-image':
    case 'BackgroundImageEditor':
      return makeInterpolateBackgroundImage;

    case 'filter':
    case 'backdrop-filter':
      return makeInterpolateFilter;

    case 'clip-path':
      return makeInterpolateClipPath;

    case 'transform':
      return makeInterpolateTransform;

    case 'transform-origin':
      return makeInterpolateTransformOrigin;

    case 'perspective-origin':
      return makeInterpolatePerspectiveOrigin;

    case 'stroke-dasharray':
      return makeInterpolateStrokeDashArrray;

    case 'd':
      return makeInterpolatePath;

    case 'points':
      return makeInterpolatePolygon;

    case 'offset-path':
      return makeInterpolateOffsetPath;

    case 'text':
      return makeInterpolateText;

    case 'playTime':
      return makeInterpolatePlayTime;
  }
}

function makeInterpolate(layer, property, startValue, endValue, editorString, artboard, layerElement) {
  var checkField = editorString || property;

  switch (checkField) {
    case 'width':
    case 'x':
      return makeInterpolateLength(layer, property, startValue, endValue, 'width');

    case 'height':
    case 'y':
      return makeInterpolateLength(layer, property, startValue, endValue, 'height');

    case 'perspective':
    case 'font-size':
    case 'font-stretch':
    case 'font-weight':
    case 'text-stroke-width':
    case 'RangeEditor':
    case 'textLength':
    case 'startOffset':
      return makeInterpolateLength(layer, property, startValue, endValue, property);

    case 'fill-opacity':
    case 'opacity':
    case 'stroke-dashoffset':
    case 'currentTime':
    case 'NumberRangeEditor':
      return Object(interpolate_functions_makeInterpolateNumber["a" /* makeInterpolateNumber */])(layer, property, +startValue, +endValue);

    case 'background-color':
    case 'color':
    case 'text-fill-color':
    case 'text-stroke-color':
    case 'fill':
    case 'stroke':
    case 'ColorViewEditor':
      return makeInterpolateColor(layer, property, startValue, endValue);

    case 'mix-blend-mode':
    case 'fill-rule':
    case 'stroke-linecap':
    case 'stroke-linejoin':
    case 'SelectEditor':
    case 'lengthAdjust':
      return makeInterpolateString(layer, property, startValue, endValue);

    case 'rotate':
      return makeInterpolateRotate(layer, property, startValue, endValue);
  }

  var func = makeInterpolateCustom(checkField);

  if (func) {
    return func(layer, property, startValue, endValue, artboard, layerElement);
  }

  return DEFAULT_FUCTION;
}

function createInterpolateFunction(layer, property, startValue, endValue, editorString, artboard, layerElement) {
  return makeInterpolate(layer, property, startValue, endValue, editorString, artboard, layerElement);
}
function createTimingFunction() {
  var timing = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'linear';

  var _timing$split$map = timing.split('(').map(function (it) {
    return it.trim();
  }),
      _timing$split$map2 = slicedToArray_default()(_timing$split$map, 2),
      funcName = _timing$split$map2[0],
      params = _timing$split$map2[1];

  params = (params || '').split(')')[0].trim();
  var func = timing_functions[funcName];

  if (func) {
    var args = timing.split('(')[1].split(')')[0].split(',').map(function (it) {
      return it.trim();
    });
    return func.apply(void 0, toConsumableArray_default()(args));
  } else {
    return createCurveFunction(timing);
  }
}
function createCurveFunction(timing) {
  var func = Object(bezier["b" /* createBezierForPattern */])(timing);
  return function (rate) {
    return func(rate).y;
  };
}
// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/editor/items/Item.js
var Item = __webpack_require__(35);

// EXTERNAL MODULE: ./src/el/editor/property-parser/Keyframe.js
var Keyframe = __webpack_require__(136);

// CONCATENATED MODULE: ./src/el/editor/items/AssetItem.js









function AssetItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function AssetItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { AssetItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { AssetItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var AssetItem_AssetItem = /*#__PURE__*/function (_Item) {
  inherits_default()(AssetItem, _Item);

  var _super = _createSuper(AssetItem);

  function AssetItem() {
    classCallCheck_default()(this, AssetItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(AssetItem, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(AssetItem.prototype), "getDefaultObject", this).call(this, AssetItem_objectSpread({
        comments: [],
        // { id: xxxx, pos: [0, 0, 0], comments: [ { userId: '', message: '', createdAt: '', updatedAt : '' } ] }
        colors: [],
        gradients: [],
        svgfilters: [],
        svgimages: [],
        keyframes: [],
        images: [],
        //  { id: xxxx, url : '' }
        imageKeys: [],
        videos: [],
        //  { id: xxxx, url : '' }
        videoKeys: [],
        audios: []
      }, obj));
    }
  }, {
    key: "addKeyframe",
    value: function addKeyframe(keyframe) {
      this.json.keyframes.push(keyframe);
      return keyframe;
    }
  }, {
    key: "createKeyframe",
    value: function createKeyframe() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addKeyframe(new Keyframe["a" /* Keyframe */](AssetItem_objectSpread({
        checked: true
      }, data)));
    }
  }, {
    key: "removeKeyframe",
    value: function removeKeyframe(removeIndex) {
      this.removePropertyList(this.json.keyframes, removeIndex);
    }
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(toConsumableArray_default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortKeyframe",
    value: function sortKeyframe(startIndex, targetIndex) {
      this.sortItem(this.json.keyframes, startIndex, targetIndex);
    }
  }, {
    key: "updateKeyframe",
    value: function updateKeyframe(index) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.keyframes[+index].reset(data);
    }
    /**
       * `@keyframes` 문자열만 따로 생성 
       */

  }, {
    key: "toKeyframeString",
    value: function toKeyframeString() {
      var isAnimate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return this.json.keyframes.map(function (keyframe) {
        return keyframe.toString(isAnimate);
      }).join('\n\n');
    } // 모든 Assets 은  JSON 포맷만가진다. 따로 문자열화 하지 않는다. 
    // {color, name, variable}
    // {gradient,name,variable}
    // {filters: [],id,name}
    // {mimeType, original(data or url), local, name}
    // 파싱은 
    // var asset = AssetParser.parse(data);
    // asset.color, name, variable 

  }, {
    key: "copyPropertyList",
    value: function copyPropertyList(arr, index) {
      var copyObject = AssetItem_objectSpread({}, arr[index]);

      arr.splice(index, 0, copyObject);
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var json = this.json;
      return AssetItem_objectSpread(AssetItem_objectSpread({}, get_default()(getPrototypeOf_default()(AssetItem.prototype), "toCloneObject", this).call(this)), this.attrs('colors', 'gradients', 'svgfilters', 'svgimages', 'images', 'keyframes'));
    }
  }, {
    key: "removePropertyList",
    value: function removePropertyList(arr, removeIndex) {
      arr.splice(removeIndex, 1);
    }
    /* color assets manage */

  }, {
    key: "removeColor",
    value: function removeColor(removeIndex) {
      this.removePropertyList(this.json.colors, removeIndex);
    }
  }, {
    key: "copyColor",
    value: function copyColor(index) {
      this.copyPropertyList(this.json.colors, index);
    }
  }, {
    key: "sortColor",
    value: function sortColor(startIndex, targetIndex) {
      this.sortItem(this.json.colors, startIndex, targetIndex);
    }
  }, {
    key: "setColorValue",
    value: function setColorValue(index) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.colors[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.colors[index]), value);
    }
  }, {
    key: "getColorIndex",
    value: function getColorIndex(index) {
      return this.json.colors[index];
    }
  }, {
    key: "getColor",
    value: function getColor(name) {
      return this.json.colors.filter(function (item) {
        return item.name === name;
      })[0];
    }
  }, {
    key: "addColor",
    value: function addColor(obj) {
      this.json.colors.push(obj);
      return obj;
    }
  }, {
    key: "createColor",
    value: function createColor() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addColor(data);
    }
    /* image assets manage */

  }, {
    key: "removeImage",
    value: function removeImage(removeIndex) {
      this.removePropertyList(this.json.images, removeIndex);
      this.refreshImageKeys();
    }
  }, {
    key: "copyImage",
    value: function copyImage(index) {
      this.copyPropertyList(this.json.images, index);
      this.refreshImageKeys();
    }
  }, {
    key: "sortImage",
    value: function sortImage(startIndex, targetIndex) {
      this.sortItem(this.json.images, startIndex, targetIndex);
    }
  }, {
    key: "setImageValue",
    value: function setImageValue(index) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.images[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.images[index]), value);
      this.refreshImageKeys();
    }
  }, {
    key: "getImageValueById",
    value: function getImageValueById(id) {
      var image = this.json.imageKeys[id];
      if (!image) return undefined;
      return image.local;
    }
  }, {
    key: "refreshImageKeys",
    value: function refreshImageKeys() {
      var imageKeys = {};
      this.json.images.forEach(function (it) {
        imageKeys[it.id] = it;
      });
      this.reset({
        imageKeys: imageKeys
      });
    }
  }, {
    key: "addImage",
    value: function addImage(obj) {
      this.json.images.push(obj);
      this.refreshImageKeys();
      return obj;
    }
  }, {
    key: "createImage",
    value: function createImage() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addImage(data);
    }
    /* video assets manage */

  }, {
    key: "removeVideo",
    value: function removeVideo(removeIndex) {
      this.removePropertyList(this.json.videos, removeIndex);
      this.refreshVideoKeys();
    }
  }, {
    key: "copyVideo",
    value: function copyVideo(index) {
      this.copyPropertyList(this.json.videos, index);
      this.refreshVideoKeys();
    }
  }, {
    key: "sortVideo",
    value: function sortVideo(startIndex, targetIndex) {
      this.sortItem(this.json.videos, startIndex, targetIndex);
    }
  }, {
    key: "setVideoValue",
    value: function setVideoValue(index) {
      var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.videos[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.videos[index]), value);
    }
  }, {
    key: "getVideoValueById",
    value: function getVideoValueById(id) {
      var video = this.json.videoKeys[id];
      if (!video) return undefined;
      return video.local;
    }
  }, {
    key: "refreshVideoKeys",
    value: function refreshVideoKeys() {
      var videoKeys = {};
      this.json.videos.forEach(function (it) {
        videoKeys[it.id] = it;
      });
      this.reset({
        videoKeys: videoKeys
      });
    }
  }, {
    key: "addVideo",
    value: function addVideo(obj) {
      this.json.videos.push(obj);
      this.refreshVideoKeys();
      return obj;
    }
  }, {
    key: "createVideo",
    value: function createVideo() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addVideo(data);
    }
    /* gradient assets manage */

  }, {
    key: "removeGradient",
    value: function removeGradient(removeIndex) {
      this.removePropertyList(this.json.gradients, removeIndex);
    }
  }, {
    key: "copyGradient",
    value: function copyGradient(index) {
      this.copyPropertyList(this.json.gradients, index);
    }
  }, {
    key: "sortGradient",
    value: function sortGradient(startIndex, targetIndex) {
      this.sortItem(this.json.gradients, startIndex, targetIndex);
    }
  }, {
    key: "setGradientValue",
    value: function setGradientValue(index, value) {
      this.json.gradients[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.gradients[index]), value);
    }
  }, {
    key: "getGradientIndex",
    value: function getGradientIndex(index) {
      return this.json.gradients[index];
    }
  }, {
    key: "getGradient",
    value: function getGradient(name) {
      return this.json.gradients.filter(function (item) {
        return item.name === name;
      })[0];
    }
  }, {
    key: "addGradient",
    value: function addGradient() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.json.gradients.push(obj);
      return obj;
    }
  }, {
    key: "createGradient",
    value: function createGradient() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addGradient(data);
    }
    /* svg filters  */

  }, {
    key: "getSVGFilterIndex",
    value: function getSVGFilterIndex(id) {
      var filter = this.json.svgfilters.map(function (it, index) {
        return {
          id: it.id,
          index: index
        };
      }).filter(function (it) {
        return it.id === id;
      })[0];
      return filter ? filter.index : -1;
    }
  }, {
    key: "removeSVGFilter",
    value: function removeSVGFilter(removeIndex) {
      this.removePropertyList(this.json.svgfilters, removeIndex);
    }
  }, {
    key: "copySVGFilter",
    value: function copySVGFilter(index) {
      this.copyPropertyList(this.json.svgfilters, index);
    }
  }, {
    key: "sortSVGFilter",
    value: function sortSVGFilter(startIndex, targetIndex) {
      this.sortItem(this.json.svgfilters, startIndex, targetIndex);
    }
  }, {
    key: "setSVGFilterValue",
    value: function setSVGFilterValue(index, value) {
      this.json.svgfilters[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.svgfilters[index]), value);
    }
  }, {
    key: "addSVGFilter",
    value: function addSVGFilter() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.json.svgfilters.push(obj);
      var index = this.json.svgfilters.length - 1;
      return index;
    }
  }, {
    key: "createSVGFilter",
    value: function createSVGFilter() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addSVGFilter(data);
    }
    /* svg clip-path images   */

  }, {
    key: "getSVGImageIndex",
    value: function getSVGImageIndex(id) {
      var filter = this.json.svgimages.map(function (it, index) {
        return {
          id: it.id,
          index: index
        };
      }).filter(function (it) {
        return it.id === id;
      })[0];
      return filter ? filter.index : -1;
    }
  }, {
    key: "removeSVGImage",
    value: function removeSVGImage(removeIndex) {
      this.removePropertyList(this.json.svgimages, removeIndex);
    }
  }, {
    key: "copySVGImage",
    value: function copySVGImage(index) {
      this.copyPropertyList(this.json.svgimages, index);
    }
  }, {
    key: "sortSVGImage",
    value: function sortSVGImage(startIndex, targetIndex) {
      this.sortItem(this.json.svgimages, startIndex, targetIndex);
    }
  }, {
    key: "setSVGImageValue",
    value: function setSVGImageValue(index, value) {
      this.json.svgimages[index] = AssetItem_objectSpread(AssetItem_objectSpread({}, this.json.svgimages[index]), value);
    }
  }, {
    key: "addSVGImage",
    value: function addSVGImage() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.json.svgimages.push(obj);
      var index = this.json.svgimages.length - 1;
      return index;
    }
  }, {
    key: "createSVGImage",
    value: function createSVGImage() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addSVGImage(data);
    }
  }]);

  return AssetItem;
}(Item["a" /* Item */]);
// CONCATENATED MODULE: ./src/el/editor/items/TimelineItem.js








function TimelineItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TimelineItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TimelineItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TimelineItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TimelineItem_createSuper(Derived) { var hasNativeReflectConstruct = TimelineItem_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineItem_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var TimelineItem_TimelineItem = /*#__PURE__*/function (_AssetItem) {
  inherits_default()(TimelineItem, _AssetItem);

  var _super = TimelineItem_createSuper(TimelineItem);

  function TimelineItem() {
    classCallCheck_default()(this, TimelineItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineItem, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(TimelineItem.prototype), "getDefaultObject", this).call(this, TimelineItem_objectSpread({
        timeline: [
          /*{ id: "xxx", 
            title: "xxxx", 
            currentTimecode: '00:00:00:00',
            totalTimecode: '00:00:10:00',
            currentTime: 0,
            totalTime: second(60, '00:00:10:00'),
            displayStartTime: second(60, '00:00:00:00'),
            displayEndTime: second(60, '00:00:10:00'),
            fps: 60,
            animations: [
            {id: 'xxxxx', properties: [
              {property: 'width', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
              {property: 'height', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
              {property: 'translateX', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
              {property: 'rotateZ', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
              {property: 'perspective', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
              {property: 'width', keyframes: [ {time: 10, value: Length.px(10), timing: 'linear'} ] },
            ]}
          ]} */
        ],
        compiledTimeline: {}
      }, obj));
    }
  }, {
    key: "expectJSON",
    value: function expectJSON(key) {
      if (key === 'compiledTimeline') return false;
      return get_default()(getPrototypeOf_default()(TimelineItem.prototype), "expectJSON", this).call(this, key);
    }
  }, {
    key: "setTimelineInfo",
    value: function setTimelineInfo(obj) {
      var timeline = this.getSelectedTimeline();
      if (!timeline) return;
      ['speed', 'iterationCount', 'direction'].forEach(function (key) {
        if (Object(functions_func["isNotUndefined"])(obj[key])) {
          timeline[key] = obj[key];
        }
      });
    }
  }, {
    key: "compileAll",
    value: function compileAll() {
      var _this = this;

      var timeline = this.getSelectedTimeline();
      this.json.compiledTimeline = {};

      if (timeline) {
        timeline.animations.forEach(function (animation) {
          animation.properties.forEach(function (property) {
            _this.compiledTimingFunction(animation.id, property.property);
          });
        });
      }
    }
  }, {
    key: "searchTimelineOffset",
    value: function searchTimelineOffset(time) {
      var _this2 = this;

      var timeline = this.getSelectedTimeline();
      var filteredTimeline = [];

      if (timeline) {
        timeline.animations.forEach(function (animation) {
          animation.properties.forEach(function (p) {
            var list = _this2.getCompiledTimingFunction(animation.id, p.property);

            filteredTimeline.push(list.find(function (keyframe) {
              if (keyframe.isOnlyTime && keyframe.startTime <= time) return true;
              return keyframe.startTime <= time && time < keyframe.endTime;
            }));
          });
        });
      }

      return filteredTimeline.filter(function (it) {
        return it;
      });
    }
  }, {
    key: "getCompiledTimingFunction",
    value: function getCompiledTimingFunction(layerId, property) {
      return this.json.compiledTimeline["".concat(layerId, ".").concat(property)];
    }
  }, {
    key: "compiledTimingFunction",
    value: function compiledTimingFunction(layerId, property) {
      var _this3 = this;

      var artboard = this;
      var p = this.getTimelineProperty(layerId, property);
      var layer = this.searchById(layerId);
      var key = "".concat(layerId, ".").concat(property);

      if (p.keyframes.length === 1) {
        this.json.compiledTimeline[key] = [];
        return;
      }

      var layerElement = Dom["a" /* default */].body().$("[data-id=\"".concat(layerId, "\"]"));
      var editorString = p.keyframes.map(function (it) {
        return it.editor;
      })[0];
      this.json.compiledTimeline[key] = p.keyframes.map(function (offset, index) {
        var currentOffset = offset;
        var nextOffset = p.keyframes[index + 1];
        offset.editor = editorString;

        if (!nextOffset) {
          nextOffset = {
            time: offset.time,
            value: offset.value
          };
        }

        var it = {
          layer: layer,
          layerElement: layerElement,
          property: p.property,
          isOnlyTime: currentOffset.time === nextOffset.time,
          startTime: offset.time,
          endTime: nextOffset.time,
          startValue: offset.value,
          endValue: nextOffset.value,
          timing: offset.timing,
          interpolateFunction: createInterpolateFunction(layer, p.property, offset.value, nextOffset.value, offset.editor, artboard, layerElement),
          timingFunction: createTimingFunction(offset.timing)
        };
        it.func = _this3.makeTimingFunction(it);
        return it;
      }).filter(function (it) {
        return it;
      });
    }
  }, {
    key: "makeTimingFunction",
    value: function makeTimingFunction(it) {
      // 시작시간 끝 시간이 있음 . 그리고 현재 시간이 있음 
      return function (time) {
        var totalT = it.endTime - it.startTime;
        var t = 1;

        if (totalT !== 0) {
          t = (time - it.startTime) / totalT;
        }

        return it.interpolateFunction(it.timingFunction(t), t, totalT, it.timingFunction);
      };
    }
  }, {
    key: "stop",
    value: function stop(frameOrCode) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        var time = timeline.currentTime; // 중간 멈추는 영역이 되면 
        // 비디오의 플레이를 멈춘다.  다시 시작하면 그 시점에 다시 시작한다. 

        this.searchTimelineOffset(time).forEach(function (it) {
          // play 속성 (video, audio) , 원하는 구간을 play 하고 멈춘다. 
          if (it.property === 'playTime') {
            // 멈춘다. 
            var $video = it.layerElement.$('video');

            if ($video) {
              $video.el.pause();
            }
          }
        });
      }
    }
  }, {
    key: "seek",
    value: function seek(frameOrCode) {
      var filterFunction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (it) {
        return it;
      };
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        if (Object(functions_func["isNotUndefined"])(frameOrCode)) {
          this.setTimelineCurrentTime(frameOrCode);
        }

        var time = timeline.currentTime;
        this.searchTimelineOffset(time).filter(filterFunction).forEach(function (it) {
          // play 속성 (video, audio) , 원하는 구간을 play 하고 멈춘다. 
          if (it.property === 'offset-path' || it.property === 'playTime') {
            // 객체 속성은 function 안에서 변경한다. 
            it.func(time);
          } else if (it.layer) {
            it.layer.reset(defineProperty_default()({}, it.property, it.func(time)));
          }
        });
      }
    }
  }, {
    key: "getSelectedTimeline",
    value: function getSelectedTimeline() {
      var timeline = this.json.timeline;
      var a = timeline.filter(function (it) {
        return it.selected;
      });
      var selectedTimeline = a.length ? a[0] : timeline[0];
      return selectedTimeline || null;
    }
  }, {
    key: "getKeyframeListReturnArray",
    value: function getKeyframeListReturnArray() {
      var timeline = this.getSelectedTimeline();
      var keyframes = [];

      if (timeline) {
        timeline.animations.forEach(function (a) {
          a.properties.forEach(function (p) {
            keyframes.push.apply(keyframes, p.keyframes);
          });
        });
      }

      return keyframes;
    }
  }, {
    key: "getKeyframeList",
    value: function getKeyframeList(callback) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.animations.forEach(function (a) {
          a.properties.forEach(function (p) {
            p.keyframes.forEach(function (k) {
              callback && callback(timeline, k);
            });
          });
        });
      }
    }
  }, {
    key: "getSelectedTimelineLastTime",
    value: function getSelectedTimelineLastTime() {
      var time = 0;
      this.getKeyframeList(function (timeline, keyframe) {
        time = Math.max(keyframe.time, time);
      });
      return time;
    }
  }, {
    key: "getSelectedTimelineFirstTime",
    value: function getSelectedTimelineFirstTime() {
      var time = Number.MAX_SAFE_INTEGER;
      this.getKeyframeList(function (timeline, keyframe) {
        time = Math.min(keyframe.time, time);
      });
      return time;
    }
  }, {
    key: "getSelectedTimelinePrevTime",
    value: function getSelectedTimelinePrevTime() {
      var time = this.getSelectedTimelineFirstTime();
      this.getKeyframeList(function (timeline, keyframe) {
        if (Object(functions_time["d" /* timecode */])(timeline.fps, keyframe.time) < timeline.currentTimecode) {
          time = Math.max(keyframe.time, time);
        }
      });
      return time;
    }
  }, {
    key: "getSelectedTimelineNextTime",
    value: function getSelectedTimelineNextTime() {
      var time = this.getSelectedTimelineLastTime();
      this.getKeyframeList(function (timeline, keyframe) {
        if (Object(functions_time["d" /* timecode */])(timeline.fps, keyframe.time) > timeline.currentTimecode) {
          time = Math.min(keyframe.time, time);
        }
      });
      return time;
    }
  }, {
    key: "setTimelineTitle",
    value: function setTimelineTitle(id, text) {
      var timeline = this.json.timeline.find(function (it) {
        return it.id === id;
      });

      if (timeline) {
        timeline.title = text;
      }
    }
  }, {
    key: "selectTimeline",
    value: function selectTimeline(id) {
      if (id) {
        this.json.timeline.forEach(function (it) {
          it.selected = it.id === id;
        });
      } else {
        var selectedTimeline = this.json.timeline.filter(function (it) {
          return it.selected;
        });

        if (selectedTimeline.length) {// NOOP 
        } else {
          if (this.json.timeline.length) {
            this.json.timeline.selected = true;
          }
        }
      }

      this.compileAll();
    }
  }, {
    key: "removeAnimation",
    value: function removeAnimation(id) {
      this.json.timeline = this.json.timeline.filter(function (it) {
        return it.id !== id;
      });

      if (this.json.timeline.length) {
        this.json.timeline[0].selected = true;
      }

      this.compileAll();
    }
  }, {
    key: "addTimeline",
    value: function addTimeline() {
      var fps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;
      var endTimecode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00:00:10:00';
      var id = Object(math["uuidShort"])();

      var selectedTimeline = TimelineItem_objectSpread(TimelineItem_objectSpread({
        id: id,
        title: 'sample'
      }, this.getTimelineLayerInfo(fps, endTimecode)), {}, {
        animations: []
      });

      this.json.timeline.push(selectedTimeline);
      this.selectTimeline(id);
      return selectedTimeline;
    }
  }, {
    key: "addTimelineLayer",
    value: function addTimelineLayer(layerId) {
      var fps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;
      var endTimecode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '00:00:10:00';
      var selectedTimeline = this.getSelectedTimeline();

      if (!selectedTimeline) {
        selectedTimeline = this.addTimeline(fps, endTimecode);
      }

      selectedTimeline.selected = true;

      if (layerId) {
        var layer = selectedTimeline.animations.filter(function (it) {
          return it.id === layerId;
        });

        if (!layer[0]) {
          selectedTimeline.animations.push({
            id: layerId,
            properties: []
          });
        }
      }
    }
  }, {
    key: "getTimelineLayerInfo",
    value: function getTimelineLayerInfo() {
      var fps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 60;
      var endTimecode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '00:00:10:00';
      var endTime = Object(functions_time["c" /* second */])(fps, endTimecode);
      return {
        fps: fps,
        speed: 1,
        direction: 'normal',
        iterationCount: 1,
        currentTimecode: Object(functions_time["d" /* timecode */])(fps, 0),
        totalTimecode: Object(functions_time["d" /* timecode */])(fps, endTime),
        currentTime: 0,
        totalTime: endTime,
        displayStartTime: 0,
        displayEndTime: endTime
      };
    }
  }, {
    key: "setTimelineCurrentTime",
    value: function setTimelineCurrentTime(frameOrCode) {
      var timeline = this.getSelectedTimeline();
      var fps = timeline.fps,
          totalTimecode = timeline.totalTimecode;

      if (timeline) {
        var frame = frameOrCode;
        var code = frameOrCode;

        if (+frame + '' === frame) {
          frame = +frame;
          code = Object(functions_time["a" /* framesToTimecode */])(fps, frame);
        }

        if (code > totalTimecode) {
          code = totalTimecode;
        }

        var currentTime = Object(functions_time["c" /* second */])(fps, code);
        timeline.currentTime = currentTime;
        timeline.currentTimecode = Object(functions_time["d" /* timecode */])(fps, currentTime);
      }
    }
  }, {
    key: "setDisplayTimeDxRate",
    value: function setDisplayTimeDxRate(dxRate, initStartTime, initEndTime) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        var dxTime = dxRate * timeline.totalTime;
        var startTime = initStartTime + dxTime;
        var endTime = initEndTime + dxTime;
        startTime = Math.max(startTime, 0);
        startTime = Math.min(startTime, endTime);

        if (startTime === 0) {
          endTime = initEndTime - initStartTime;
        }

        endTime = Math.max(endTime, startTime);
        endTime = Math.min(endTime, timeline.totalTime);

        if (endTime === timeline.totalTime) {
          startTime = timeline.totalTime - (initEndTime - initStartTime);
        }

        timeline.displayStartTime = startTime;
        timeline.displayEndTime = endTime;
      }
    }
  }, {
    key: "setDisplayStartTimeRate",
    value: function setDisplayStartTimeRate(rate) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.displayStartTime = rate * timeline.totalTime;
      }
    }
  }, {
    key: "setDisplayEndTimeRate",
    value: function setDisplayEndTimeRate(rate) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.displayEndTime = rate * timeline.totalTime;
      }
    }
  }, {
    key: "setTimelineCurrentTimeRate",
    value: function setTimelineCurrentTimeRate(rate) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        var displayStartTime = timeline.displayStartTime,
            displayEndTime = timeline.displayEndTime,
            fps = timeline.fps;
        var currentTime = displayStartTime + (displayEndTime - displayStartTime) * rate;
        this.setTimelineCurrentTime(Object(functions_time["d" /* timecode */])(fps, currentTime));
      }
    }
  }, {
    key: "setTimelineTotalTime",
    value: function setTimelineTotalTime(frameOrCode) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        var frame = frameOrCode;
        var code = frameOrCode;

        if (+frame + '' === frame) {
          frame = +frame;
          code = Object(functions_time["a" /* framesToTimecode */])(timeline.fps, frame);
        }

        if (Object(functions_time["c" /* second */])(timeline.fps, code) < timeline.displayEndTime) {
          timeline.displayEndTime = Object(functions_time["c" /* second */])(timeline.fps, code);
          timeline.displayStartTime = 0;
        }

        timeline.totalTimecode = code;
        timeline.totalTime = Object(functions_time["c" /* second */])(timeline.fps, code);
      }
    }
  }, {
    key: "getTimelineObject",
    value: function getTimelineObject(layerId) {
      var selectedTimeline = this.getSelectedTimeline();

      if (selectedTimeline) {
        return selectedTimeline.animations.find(function (it) {
          return it.id === layerId;
        });
      }
    }
  }, {
    key: "addTimelineProperty",
    value: function addTimelineProperty(layerId, property) {
      this.addTimelineLayer(layerId);
      var animation = this.getTimelineObject(layerId);

      if (animation) {
        var p = animation.properties.filter(function (it) {
          return it.property === property;
        });

        if (!p.length) {
          animation.properties.push({
            property: property,
            keyframes: []
          });
          this.compiledTimingFunction(layerId, property);
        }
      }
    }
  }, {
    key: "getTimelineProperty",
    value: function getTimelineProperty(layerId, property) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        layerId = layerId || timeline.selectedLayerId;
        property = property || timeline.selectedProperty;
        var timelineObject = this.getTimelineObject(layerId);

        if (timelineObject) {
          return timelineObject.properties.find(function (it) {
            return it.property === property;
          });
        }
      }
    }
  }, {
    key: "setSelectedOffset",
    value: function setSelectedOffset(layerId, property, time) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.selectedLayerId = layerId;
        timeline.selectedProperty = property;
        timeline.selectedOffsetTime = time;
        var p = this.getTimelineProperty();
        p.keyframes.forEach(function (it) {
          it.selected = it.time === time;
        });
      }
    }
  }, {
    key: "deleteTimelineKeyframe",
    value: function deleteTimelineKeyframe(layerId, property, offsetId) {
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        p.keyframes = p.keyframes.filter(function (it) {
          return it.id != offsetId;
        });
      }
    }
  }, {
    key: "removeTimelineProperty",
    value: function removeTimelineProperty(layerId, property) {
      var layer = this.getTimelineObject(layerId);

      if (layer) {
        layer.properties = layer.properties.filter(function (p) {
          return p.property != property;
        });
      }
    }
  }, {
    key: "removeTimeline",
    value: function removeTimeline(layerId) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.animations = timeline.animations.filter(function (ani) {
          return ani.id != layerId;
        });
      }
    }
  }, {
    key: "setTimelineKeyframeOffsetTime",
    value: function setTimelineKeyframeOffsetTime(layerId, property, offsetId, changedTime) {
      var keyframe = this.getTimelineKeyframeById(layerId, property, offsetId);

      if (keyframe) {
        keyframe.time = changedTime;
        this.compiledTimingFunction(layerId, property);
      }
    }
  }, {
    key: "setTimelineKeyframeOffsetValue",
    value: function setTimelineKeyframeOffsetValue(layerId, property, offsetId) {
      var value = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
      var timing = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
      var time = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
      var keyframe = this.getTimelineKeyframeById(layerId, property, offsetId);

      if (keyframe) {
        if (Object(functions_func["isNotUndefined"])(time)) {
          keyframe.time = time;
        }

        if (Object(functions_func["isNotUndefined"])(value)) {
          keyframe.value = value;
        }

        if (Object(functions_func["isNotUndefined"])(timing)) {
          keyframe.timing = timing;
        }

        this.compiledTimingFunction(layerId, property);
      }
    }
  }, {
    key: "addTimelineKeyframe",
    value: function addTimelineKeyframe(_ref) {
      var layerId = _ref.layerId,
          property = _ref.property,
          value = _ref.value,
          timing = _ref.timing,
          newTime = _ref.time,
          editor = _ref.editor;
      this.addTimelineProperty(layerId, property);
      var timeline = this.getSelectedTimeline();
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        var time = newTime || timeline.currentTime;
        var times = p.keyframes.filter(function (it) {
          return it.time === time;
        });

        if (!times.length) {
          value = Object(functions_func["isUndefined"])(value) || value === '' ? this.getDefaultPropertyValue(property) : value;
          var obj = {
            id: Object(math["uuidShort"])(),
            layerId: layerId,
            property: property,
            time: time,
            value: value,
            timing: timing || 'linear',
            editor: editor
          };
          p.keyframes.push(obj);
          p.keyframes.sort(function (a, b) {
            return a.time > b.time ? 1 : -1;
          });
          this.compiledTimingFunction(layerId, property);
          return obj;
        }
      }
    }
  }, {
    key: "getDefaultPropertyValue",
    value: function getDefaultPropertyValue(property) {
      switch (property) {
        case 'mix-blend-mode':
          return 'normal';

        case 'rotate':
          return '0deg';

        case 'box-shadow':
          return '0px 0px 0px 0px rgba(0, 0, 0, 1)';

        case 'text-shadow':
          return '0px 0px 0px rgba(0, 0, 0, 1)';

        case 'opacity':
          return 1;
        // case 'background-color':
        // case 'color':
        // case 'text-fill-color':
        // case 'text-stroke-color':
        // case 'transform': 
        // case 'transform-origin':

        default:
          return '';
      }
    }
  }, {
    key: "copyTimelineKeyframe",
    value: function copyTimelineKeyframe(layerId, property) {
      var newTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        var timeline = this.getSelectedTimeline();
        var time = newTime || timeline.currentTime;
        var times = p.keyframes.filter(function (it) {
          return it.time < time;
        });
        var value = this.getDefaultPropertyValue(property);
        var timing = 'linear';
        var editor = '';

        if (times.length) {
          times.sort(function (a, b) {
            return a.time > b.time ? -1 : 1;
          });
          value = times[0].value + "";
          timing = times[0].timing + "";
          editor = times[0].editor;
        }

        this.addTimelineKeyframe({
          layerId: layerId,
          property: property,
          value: value,
          timing: timing,
          editor: editor
        });
      }
    }
  }, {
    key: "getTimelineKeyframe",
    value: function getTimelineKeyframe(layerId, property, time) {
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        return p.keyframes.find(function (it) {
          return it.time === time;
        });
      }
    }
  }, {
    key: "getTimelineKeyframeById",
    value: function getTimelineKeyframeById(layerId, property, id) {
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        return p.keyframes.find(function (it) {
          return it.id === id;
        });
      }
    }
  }, {
    key: "sortTimelineKeyframe",
    value: function sortTimelineKeyframe(layerId, property) {
      var p = this.getTimelineProperty(layerId, property);

      if (p) {
        p.keyframes.sort(function (a, b) {
          return a.time > b.time ? 1 : -1;
        });
        this.compiledTimingFunction(layerId, property);
      }
    }
  }, {
    key: "setFps",
    value: function setFps(fps) {
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        timeline.fps = fps;
        timeline.currentTimecode = Object(functions_time["d" /* timecode */])(fps, timeline.currentTime);
        timeline.totalTimecode = Object(functions_time["d" /* timecode */])(fps, timeline.totalTime);
      }
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return TimelineItem_objectSpread(TimelineItem_objectSpread({}, get_default()(getPrototypeOf_default()(TimelineItem.prototype), "toCloneObject", this).call(this)), {}, {
        timeline: Object(functions_func["clone"])(this.json.timeline)
      });
    }
  }]);

  return TimelineItem;
}(AssetItem_AssetItem);
// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/index.js + 7 modules
var esm = __webpack_require__(12);

// EXTERNAL MODULE: ./src/el/base/functions/collision.js
var collision = __webpack_require__(31);

// CONCATENATED MODULE: ./src/el/editor/items/Project.js









function Project_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function Project_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Project_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Project_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Project_createSuper(Derived) { var hasNativeReflectConstruct = Project_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Project_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var OFFSET_X = Length["a" /* Length */].z();
var OFFSET_Y = Length["a" /* Length */].z();
var Project_Project = /*#__PURE__*/function (_TimelineItem) {
  inherits_default()(Project, _TimelineItem);

  var _super = Project_createSuper(Project);

  function Project() {
    classCallCheck_default()(this, Project);

    return _super.apply(this, arguments);
  }

  createClass_default()(Project, [{
    key: "createIndexItemMap",
    value: function createIndexItemMap() {
      if (!this.indexedMap) {
        this.indexedMap = new Map();
      }

      return this.indexedMap;
    }
  }, {
    key: "indexed",
    get: function get() {
      this.createIndexItemMap();
      return this.indexedMap;
    }
  }, {
    key: "removeIndexItem",
    value: function removeIndexItem(item) {
      this.indexed["delete"](item.id);
    }
  }, {
    key: "getIndexItem",
    value: function getIndexItem(id) {
      return this.indexed.get(id);
    }
  }, {
    key: "getSearchedIndexItem",
    value: function getSearchedIndexItem(id) {
      if (this.hasIndexItem(id)) {
        // 검색시에 id 로 된 index 가 존재하면 해당 item 을 리턴한다. 
        return this.getIndexItem(id);
      } else {
        // 그렇지 않으면 검색하기 
        return this.searchById(id);
      }
    }
  }, {
    key: "getSearchedIndexItemList",
    value: function getSearchedIndexItemList() {
      for (var _len = arguments.length, ids = new Array(_len), _key = 0; _key < _len; _key++) {
        ids[_key] = arguments[_key];
      }

      return ids.map(function (id) {
        return project.getSearchedIndexItem(id);
      });
    }
    /**
     * item 캐쉬 설정 
     * 
     * @param {Item} item 
     */

  }, {
    key: "addIndexItem",
    value: function addIndexItem(item) {
      if (this.hasIndexItem(item.id) === false) {
        this.indexed.set(item.id, item.ref);
      }
    }
    /**
     * id 로 캐쉬된 아이템 찾기 
     * 
     * @param {string} id 
     */

  }, {
    key: "hasIndexItem",
    value: function hasIndexItem(id) {
      return this.indexed.has(id);
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "New Project";
    }
  }, {
    key: "isAbsolute",
    get: function get() {
      return false;
    }
  }, {
    key: "parent",
    get: function get() {
      return null;
    }
  }, {
    key: "toRootVariableCSS",
    value: function toRootVariableCSS() {
      var obj = {};
      this.json.rootVariable.split(';').filter(function (it) {
        return it.trim();
      }).forEach(function (it) {
        var _it$split = it.split(':'),
            _it$split2 = slicedToArray_default()(_it$split, 2),
            key = _it$split2[0],
            value = _it$split2[1];

        obj["--".concat(key)] = value;
      });
      return obj;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(Project.prototype), "getDefaultObject", this).call(this, Project_objectSpread({
        itemType: "project",
        name: 'new Project',
        description: '',
        rootVariable: ''
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return Project_objectSpread(Project_objectSpread({}, get_default()(getPrototypeOf_default()(Project.prototype), "toCloneObject", this).call(this)), this.attrs('name', 'description', 'rootVariable'));
    }
  }, {
    key: "artboards",
    get: function get() {
      return (this.json.layers || []).filter(function (it) {
        return it.is('artboard');
      });
    }
  }, {
    key: "offsetX",
    get: function get() {
      return OFFSET_X;
    }
  }, {
    key: "offsetY",
    get: function get() {
      return OFFSET_Y;
    }
  }, {
    key: "hasLayout",
    value: function hasLayout() {
      return false;
    }
  }, {
    key: "getTransformMatrix",
    value: function getTransformMatrix() {
      return esm["a" /* mat4 */].create();
    }
    /**
     * 부모를 기준으로 childItem 의 transform 을 맞춘다. 
     * 
     * [newParentInverse] * [childMatrix] * [childItemMatrixInverse] = translate; 
     * 
     * @param {Item} childItem 
     */

  }, {
    key: "resetMatrix",
    value: function resetMatrix(childItem) {
      var _mat4$getTranslation = esm["a" /* mat4 */].getTranslation([], Object(math["calculateMatrix"])(childItem.getAccumulatedMatrix(), childItem.getTransformMatrixInverse())),
          _mat4$getTranslation2 = slicedToArray_default()(_mat4$getTranslation, 2),
          x = _mat4$getTranslation2[0],
          y = _mat4$getTranslation2[1];

      childItem.reset({
        x: Length["a" /* Length */].px(x),
        y: Length["a" /* Length */].px(y)
      });
    }
  }, {
    key: "rectVerties",
    get: function get() {
      var _this$layers;

      return (_this$layers = this.layers) !== null && _this$layers !== void 0 && _this$layers.length ? Object(collision["b" /* itemsToRectVerties */])(this.layers) : null;
    }
  }]);

  return Project;
}(TimelineItem_TimelineItem);
ComponentManager["a" /* ComponentManager */].registerComponent('project', Project_Project);

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/renderer/SVGRenderer/index.js + 15 modules
var SVGRenderer = __webpack_require__(80);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// CONCATENATED MODULE: ./src/el/editor/exporter/animation-export/AnipaExport.js



var AnipaExport_AnipaExport = /*#__PURE__*/function () {
  function AnipaExport(project, artboard) {
    classCallCheck_default()(this, AnipaExport);

    this.project = project;
    this.artboard = artboard;
  }

  createClass_default()(AnipaExport, [{
    key: "generateCode",
    value: function generateCode() {
      var _this = this;

      var lastTime = this.project.getSelectedTimelineLastTime();
      var timeline = this.project.getSelectedTimeline();
      var animations = [];
      var options = {};

      if (timeline) {
        timeline.animations.forEach(function (animation) {
          var item = _this.project.searchById(animation.id);

          var properties = animation.properties.map(function (p) {
            var property = p.property;

            switch (property) {
              case 'x':
                property = 'left';
                break;

              case 'y':
                property = 'top';
                break;
            }

            return {
              property: property,
              keyframes: p.keyframes.map(function (keyframe) {
                var time = keyframe.time,
                    value = keyframe.value,
                    timing = keyframe.timing;
                return {
                  time: time * 1000,
                  value: value,
                  timing: timing
                };
              })
            };
          });
          animations.push.apply(animations, item.toAnimationKeyframes(properties).filter(function (it) {
            return it.properties.length;
          }));
        });
        var iterationCount = timeline.iterationCount,
            fps = timeline.fps,
            speed = timeline.speed,
            direction = timeline.direction;
        var duration = lastTime * 1000;
        options = {
          duration: duration,
          iterationCount: iterationCount,
          fps: fps,
          speed: speed,
          direction: direction
        };
      }

      animations = JSON.stringify(animations, null, 4);
      options = JSON.stringify(options, null, 4);
      return "\nvar player = new anipa.Player(".concat(animations, ", ").concat(options, ");\nplayer.play();\n");
    }
  }]);

  return AnipaExport;
}();


// CONCATENATED MODULE: ./src/el/editor/exporter/animation-export/AnimationExport.js

/* harmony default export */ var AnimationExport = ({
  generate: function generate(project, artboard) {
    var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'anipa';

    switch (type) {
      case 'anipa':
        return new AnipaExport_AnipaExport(project, artboard).generateCode();
    }

    return '';
  }
});
// CONCATENATED MODULE: ./src/el/editor/manager/ExportManager.js



/* harmony default export */ var ExportManager = __webpack_exports__["a"] = ({
  makeProjectStyle: function makeProjectStyle(item) {
    var keyframeString = item.toKeyframeString();
    var rootVariable = item.toRootVariableCSS();
    return "\n      :root {\n        ".concat(Object(func["CSS_TO_STRING"])(rootVariable), "\n      }\n      /* keyframe */\n      ").concat(keyframeString, "\n    ");
  },
  makeStyle: function makeStyle(item) {
    var _this = this;

    var appendCSS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    if (item.is('project')) {
      return this.makeProjectStyle(item);
    }

    var cssString = item.generateView("[data-id='".concat(item.id, "']"), appendCSS);
    return "\n    ".concat(cssString, "\n    ") + item.layers.map(function (it) {
      return _this.makeStyle(it);
    }).join('');
  },
  makeSvg: function makeSvg(project) {
    var SVGString = project.toSVGString ? project.toSVGString() : '';
    return "\n      ".concat(SVGString ? "<svg width=\"0\" height=\"0\">".concat(SVGString, "</svg>") : '', "\n    ");
  },
  generate: function generate(editor) {
    var project = editor.selection.currentProject;
    var current = editor.selection.current;
    var artboard = current.artboard;
    var css = "".concat(this.makeStyle(project));
    var html = "\n".concat(artboard.html, "\n").concat(this.makeSvg(project), "\n    ");
    var js = '';
    html = editor.replaceLocalUrltoRealUrl(html);
    css = editor.replaceLocalUrltoRealUrl(css);

    if (current.is('artboard')) {
      js = editor.replaceLocalUrltoRealUrl(AnimationExport.generate(current, 'anipa'));
    }

    return {
      html: html,
      css: css,
      js: js
    };
  },
  generateSVG: function generateSVG(editor, rootItem) {
    return editor.replaceLocalUrltoRealUrl(SVGRenderer["a" /* default */].render(rootItem, null, true));
  }
});

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return KEY_CODE; });
var KEY_CODE = {
  'backspace': 0x08,
  // 8
  'tab': 0x09,
  // 9
  'enter': 0x0D,
  // 13 
  'escape': 0x1B,
  // 27 
  'space': 0x20,
  // 32 
  'pageup': 0x21,
  // 33
  'pagedown': 0x22,
  // 34
  'end': 0x23,
  // 35
  'home': 0x24,
  // 36
  'left': 0x25,
  // 37
  'up': 0x26,
  // 38
  'right': 0x27,
  // 39
  'down': 0x28,
  // 40
  'insert': 0x2D,
  // 45
  'delete': 0x2E,
  // 46
  '0': 0x30,
  // 49
  '1': 0x31,
  // 50
  '2': 0x32,
  // 51
  '3': 0x33,
  // 52
  '4': 0x34,
  // 53
  '5': 0x35,
  // 54
  '6': 0x36,
  // 55
  '7': 0x37,
  // 56
  '8': 0x38,
  // 57
  '9': 0x39,
  // 58
  'semicolon': 0x3B,
  // 59
  'equals': 0x3D,
  // 61
  'a': 0x41,
  // 65
  'b': 0x42,
  // 66
  'c': 0x43,
  // 67
  'd': 0x44,
  // 68
  'e': 0x45,
  // 69
  'f': 0x46,
  // 70
  'g': 0x47,
  // 71
  'h': 0x48,
  // 72
  'i': 0x49,
  // 73
  'j': 0x4A,
  // 74
  'k': 0x4B,
  // 75
  'l': 0x4C,
  // 76
  'm': 0x4D,
  // 77
  'n': 0x4E,
  // 78
  'o': 0x4F,
  // 79
  'p': 0x50,
  // 80
  'q': 0x51,
  // 81
  'r': 0x52,
  // 82
  's': 0x53,
  // 83
  't': 0x54,
  // 84
  'u': 0x55,
  // 85
  'v': 0x56,
  // 86
  'w': 0x57,
  // 87
  'x': 0x58,
  // 88
  'y': 0x59,
  // 89
  'z': 0x5A,
  // 90
  'multiply': 0x6A,
  // 106 , * 
  'add': 0x6B,
  // 107 , "+"
  'subtract': 0x6D,
  // 109 , "-" 
  'divide': 0x6F,
  // 111 , "/"
  'f1': 0x70,
  // 112 
  'f2': 0x71,
  // 113 
  'f3': 0x72,
  // 114 
  'f4': 0x73,
  // 115 
  'f5': 0x74,
  // 116 
  'f6': 0x75,
  // 117 
  'f7': 0x76,
  // 118 
  'f8': 0x77,
  // 119 
  'f9': 0x78,
  // 120 
  'f10': 0x79,
  // 121 
  'f11': 0x7A,
  // 122 
  'f12': 0x7B,
  // 123 
  'f13': 0x7C,
  // 124 
  'f14': 0x7D,
  // 125 
  'f15': 0x7E,
  // 126 
  'f16': 0x7F,
  // 127 
  'f17': 0x80,
  // 128 
  'f18': 0x81,
  // 129 
  'f19': 0x82,
  // 130 
  'comma': 0xBC,
  // 188	Comma (",") key.
  ',': 0xBC,
  // 188	Comma (",") key.
  'period': 0xBE,
  // 190	Period (".") key.
  '.': 0xBE,
  // 190	Period (".") key.
  'slash': 0xBF,
  // 191	Slash ("/") key.
  '/': 0xBF,
  // 191	Slash ("/") key.
  'backquote': 0xC0,
  // 192	Back tick ("`") key.
  '`': 0xC0,
  // 192	Back tick ("`") key.
  'openbracket': 0xDB,
  // 219	Open square bracket ("[") key.
  '[': 0xDB,
  // 219	Open square bracket ("[") key.
  'backslash': 0xDC,
  // 220	Back slash ("\") key.
  "\\": 0xDC,
  // 220	Back slash ("\") key.
  'closebracket': 0xDD,
  // 221	Close square bracket ("]") key.
  ']': 0xDD,
  // 221	Close square bracket ("]") key.
  "quote": 0xDE,
  // 222	Quote (''') key.
  "'": 0xDE,
  // 222	Quote (''') key.
  "altgr": 0xE1 // 225	AltGr key (Level 3 Shift key or Level 5 Shift key) on Linux.

};

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return URLImageResource; });
/* unused harmony export FileImageResource */
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _ImageResource__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(81);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var IMAGE_LIST = ["jpg", "jpeg", "png", "gif", "svg"]; // refer to https://github.com/graingert/datauritoblob/blob/master/dataURItoBlob.js
// MIT License

function dataURItoBlob(dataURI) {
  // convert base64 to raw binary data held in a string
  // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
  var byteString = atob(dataURI.split(",")[1]); // separate out the mime component

  var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0]; // write the bytes of the string to an ArrayBuffer

  var ab = new ArrayBuffer(byteString.length);
  var dw = new DataView(ab);

  for (var i = 0; i < byteString.length; i++) {
    dw.setUint8(i, byteString.charCodeAt(i));
  } // write the ArrayBuffer to a blob, and you're done


  return new Blob([ab], {
    type: mimeString
  });
}

var URLImageResource = /*#__PURE__*/function (_ImageResource) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(URLImageResource, _ImageResource);

  var _super = _createSuper(URLImageResource);

  function URLImageResource() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, URLImageResource);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(URLImageResource, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(URLImageResource.prototype), "getDefaultObject", this).call(this, _objectSpread({
        type: "url",
        url: "",
        datauri: ""
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(URLImageResource.prototype), "toCloneObject", this).call(this)), this.attrs('url', 'datauri'));
    }
  }, {
    key: "isUrl",
    value: function isUrl() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return "url(".concat(json.url, ")");
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var url = str.split('(')[1].split(')')[0];
      return new URLImageResource({
        url: url
      });
    }
  }, {
    key: "isImageFile",
    value: function isImageFile(fileExt) {
      return IMAGE_LIST.includes(fileExt);
    }
  }]);

  return URLImageResource;
}(_ImageResource__WEBPACK_IMPORTED_MODULE_7__[/* ImageResource */ "a"]);
var FileImageResource = /*#__PURE__*/function (_URLImageResource) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(FileImageResource, _URLImageResource);

  var _super2 = _createSuper(FileImageResource);

  function FileImageResource() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, FileImageResource);

    return _super2.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(FileImageResource, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(FileImageResource.prototype), "getDefaultObject", this).call(this, {
        type: "file"
      });
    }
  }, {
    key: "isUrl",
    value: function isUrl() {
      return false;
    }
  }, {
    key: "isFile",
    value: function isFile() {
      return true;
    }
  }, {
    key: "convert",
    value: function convert(json) {
      if (!json.url && json.datauri) {
        json.url = this.makeURL(json.datauri);
      }

      return json;
    }
  }, {
    key: "remove",
    value: function remove() {
      this.removeURL();

      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(FileImageResource.prototype), "remove", this).call(this);
    }
  }, {
    key: "removeURL",
    value: function removeURL() {
      URL.revokeObjectURL(this.json.url);
    }
  }, {
    key: "makeURL",
    value: function makeURL(datauri) {
      var file = dataURItoBlob(datauri);
      return URL.createObjectURL(file);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        type: "file",
        id: this.json.id,
        datauri: this.json.datauri
      };
    }
  }]);

  return FileImageResource;
}(URLImageResource);

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RepeatingLinearGradient; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _LinearGradient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(52);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var RepeatingLinearGradient = /*#__PURE__*/function (_LinearGradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RepeatingLinearGradient, _LinearGradient);

  var _super = _createSuper(RepeatingLinearGradient);

  function RepeatingLinearGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RepeatingLinearGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RepeatingLinearGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(RepeatingLinearGradient.prototype), "getDefaultObject", this).call(this, {
        type: "repeating-linear-gradient",
        angle: 0
      });
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var linear = _LinearGradient__WEBPACK_IMPORTED_MODULE_6__[/* LinearGradient */ "a"].parse(str);
      return new RepeatingLinearGradient({
        angle: linear.angle,
        colorsteps: linear.colorsteps
      });
    }
  }]);

  return RepeatingLinearGradient;
}(_LinearGradient__WEBPACK_IMPORTED_MODULE_6__[/* LinearGradient */ "a"]);

/***/ }),
/* 75 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RepeatingRadialGradient; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _RadialGradient__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(54);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var RepeatingRadialGradient = /*#__PURE__*/function (_RadialGradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RepeatingRadialGradient, _RadialGradient);

  var _super = _createSuper(RepeatingRadialGradient);

  function RepeatingRadialGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RepeatingRadialGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RepeatingRadialGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(RepeatingRadialGradient.prototype), "getDefaultObject", this).call(this, {
        type: "repeating-radial-gradient"
      });
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var radial = _RadialGradient__WEBPACK_IMPORTED_MODULE_6__[/* RadialGradient */ "a"].parse(str);
      return new RepeatingRadialGradient({
        radialType: radial.radialType,
        radialPosition: radial.radialPosition,
        colorsteps: radial.colorsteps
      });
    }
  }]);

  return RepeatingRadialGradient;
}(_RadialGradient__WEBPACK_IMPORTED_MODULE_6__[/* RadialGradient */ "a"]);

/***/ }),
/* 76 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RepeatingConicGradient; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var _ConicGradient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(55);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var RepeatingConicGradient = /*#__PURE__*/function (_ConicGradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(RepeatingConicGradient, _ConicGradient);

  var _super = _createSuper(RepeatingConicGradient);

  function RepeatingConicGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, RepeatingConicGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(RepeatingConicGradient, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(RepeatingConicGradient.prototype), "getDefaultObject", this).call(this, {
        type: "repeating-conic-gradient",
        angle: 0,
        radialPosition: [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Position */ "b"].CENTER, el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Position */ "b"].CENTER]
      });
    }
  }], [{
    key: "parse",
    value: function parse(str) {
      var conic = _ConicGradient__WEBPACK_IMPORTED_MODULE_7__[/* ConicGradient */ "a"].parse(str);
      return new RepeatingConicGradient({
        angle: conic.angle,
        radialPosition: conic.radialPosition,
        colorsteps: conic.colorsteps
      });
    }
  }]);

  return RepeatingConicGradient;
}(_ConicGradient__WEBPACK_IMPORTED_MODULE_7__[/* ConicGradient */ "a"]);

/***/ }),
/* 77 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PolygonParser; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _PathParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(32);
/* harmony import */ var _PathStringManager__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(45);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var splitReg = /[\b\t \,]/g;

var PolygonParser = /*#__PURE__*/function (_PathParser) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(PolygonParser, _PathParser);

  var _super = _createSuper(PolygonParser);

  function PolygonParser() {
    var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PolygonParser);

    return _super.call(this, points);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PolygonParser, [{
    key: "reset",
    value: function reset() {
      var points = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.segments = [];
      this.points = points;
      this.parse();
    }
  }, {
    key: "resetSegments",
    value: function resetSegments() {
      var segments = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.segments = segments;
      this.points = this.joinPoints();
    }
  }, {
    key: "parse",
    value: function parse() {
      var points = this.points;

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isArray"])(points)) {
        points = points.join(' ');
      }

      var arr = points.trim().split(splitReg).filter(function (it) {
        return it;
      });
      var segments = [];

      for (var i = 0, len = arr.length; i < len; i += 2) {
        segments.push({
          x: +arr[i],
          y: +arr[i + 1]
        });
      }

      this.segments = segments;
    }
  }, {
    key: "convertGenerator",
    value: function convertGenerator() {
      return this.segments;
    }
  }, {
    key: "length",
    value: function length() {
      return this.segments.length;
    }
  }, {
    key: "toPathString",
    value: function toPathString() {
      var path = new _PathStringManager__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]();

      for (var i = 0, len = this.segments.length; i < len; i++) {
        var s = this.segments[i];

        if (i === 0) {
          path.M(s);
        } else if (i === len - 1) {
          path.L(s).L(this.segments[0]).Z(); // 마지막 지점을 연결한다. 
        } else {
          path.L(s);
        }
      }

      return path.d;
    }
  }, {
    key: "joinPath",
    value: function joinPath(segments) {
      return this.joinPoints(segments);
    }
  }, {
    key: "joinPoints",
    value: function joinPoints(segments) {
      var list = segments || this.segments;
      return list.map(function (it) {
        return "".concat(it.x, ",").concat(it.y);
      }).join(' ');
    }
  }, {
    key: "each",
    value: function each(callback) {
      var _this = this;

      var isReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var newSegments = this.segments.map(function (segment) {
        return callback.call(_this, segment);
      });

      if (isReturn) {
        return newSegments;
      } else {
        this.segments = newSegments;
      }
    }
  }, {
    key: "_loop",
    value: function _loop(m) {
      var isReturn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return this.each(function (segment) {
        var _m = m([segment.x, segment.y], 0),
            _m2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_m, 2),
            x = _m2[0],
            y = _m2[1];

        segment.x = x;
        segment.y = y;
        return segment;
      }, isReturn);
    }
  }, {
    key: "clone",
    value: function clone() {
      return new PolygonParser(this.joinPoints());
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.joinPoints();
    }
  }]);

  return PolygonParser;
}(_PathParser__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"]);



/***/ }),
/* 78 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/el/i18n/locales/en_US.js
/* harmony default export */ var en_US = ({
  'app.title': 'EASYLOGIC',
  'app.sample': function appSample(a, b, c) {
    return "".concat(a, "-").concat(b, "-").concat(c);
  },
  'app.lang.en_US': 'English',
  'app.lang.ko_KR': '한국어',
  'app.lang.fr_FR': 'Français',
  'app.label.lang': 'Language',
  'app.layout.all': 'All',
  'app.layout.css': 'CSS',
  'app.layout.svg': 'SVG',
  'app.label.layout': 'Menu Layout',
  'app.theme.dark': 'Dark',
  'app.theme.light': 'Light',
  'app.theme.toon': 'Toon',
  'app.theme.gray': 'Gray',
  'app.label.theme': 'Theme',
  'app.tab.title.projects': 'Projects',
  'app.tab.title.layers': 'Layers',
  'app.tab.title.libraries': 'Library',
  'app.tab.title.components': 'Component',
  'app.tab.title.artboards': 'Artboard',
  'app.tab.title.assets': 'Assets',
  'app.tab.title.keyMap': 'KeyMap',
  'app.confirm.message.artboard.items.removeArtboard': 'Do you remove an artboard preview really?',
  'app.confirm.message.custom-component.items.removeCustomComponent': 'Do you remove a custom component preview really?',
  'menu.item.download.title': 'Download',
  'menu.item.save.title': 'Save',
  'menu.item.export.title': 'Export',
  'menu.item.codepen.title': 'CodePen',
  'menu.item.fullscreen.title': 'Full Screen',
  'menu.item.shortcuts.title': 'ShortCuts',
  'menu.item.github.title': 'Github',
  'menu.item.learn.title': 'Learn',
  'menu.item.projects.title': 'Projects',
  'project.property.title': 'Project',
  'project.information.property.title': 'Project information',
  'project.information.property.name': 'Name',
  'project.information.property.description': 'Description',
  'artboard.property.title': 'ArtBoards',
  'artboard.property.layout.title.flex': 'Flex',
  'artboard.property.layout.title.grid': 'Grid',
  'layer.tree.property.title': 'Layers',
  'layer.tree.property.layout.title.flex': 'Flex',
  'layer.tree.property.layout.title.grid': 'Grid',
  'alignment.property.title': 'Alignment',
  'position.property.title': 'Position',
  'position.property.X': 'X',
  'position.property.Y': 'Y',
  'size.property.title': 'Size',
  'position.property.width': 'W',
  'position.property.height': 'H',
  'position.property.opacity': 'Opacity',
  'position.property.rotate': 'Rotate',
  'background.color.property.title': 'Appearance',
  'background.color.property.color': 'Color',
  'background.color.property.zindex': 'z-index',
  'background.color.property.blend': 'Blend',
  'background.color.property.overflow': 'Overflow',
  'background.color.property.overflow.visible': 'Visible',
  'background.color.property.overflow.hidden': 'Hidden',
  'background.color.property.overflow.scroll': 'Scroll',
  'background.color.property.overflow.auto': 'Auto',
  'blend.normal': 'normal',
  'blend.multiply': 'multiply',
  'blend.screen': 'screen',
  'blend.overlay': 'overlay',
  'blend.darken': 'darken',
  'blend.lighten': 'lighten',
  'blend.color-dodge': 'color-dodge',
  'blend.color-burn': 'color-burn',
  'blend.hard-light': 'hard-light',
  'blend.soft-light': 'soft-light',
  'blend.difference': 'difference',
  'blend.exclusion': 'exclusion',
  'blend.hue': 'hue',
  'blend.saturation': 'saturation',
  'blend.color': 'color',
  'blend.luminosity': 'luminosity',
  'background.image.property.title': 'Fill',
  'border.property.title': 'Border',
  'border.radius.property.title': 'Border Radius',
  'boxshadow.property.title': 'Box Shadows',
  'filter.property.title': 'Filter',
  'filter.property.blur': 'Blur',
  'filter.property.grayscale': 'GrayScale',
  'filter.property.hue-rotate': 'Hue Rotate',
  'filter.property.invert': 'Invert',
  'filter.property.brightness': 'Brightness',
  'filter.property.contrast': 'Contrast',
  'filter.property.drop-shadow': 'Drop Shadow',
  'filter.property.drop-shadow.color': 'Color',
  'filter.property.drop-shadow.offsetX': 'Offset X',
  'filter.property.drop-shadow.offsetY': 'Offset Y',
  'filter.property.drop-shadow.blurRadius': 'Blur',
  'filter.property.opacity': 'Opacity',
  'filter.property.saturate': 'Saturate',
  'filter.property.sepia': 'Sepia',
  'filter.property.svg': 'SVG',
  'font.property.title': 'Font',
  'font.property.color': 'Color',
  'font.property.size': 'Size',
  'font.property.stretch': 'Stretch',
  'font.property.weight': 'Weight',
  'font.property.style': 'Style',
  'font.property.family': 'Family',
  'font.spacing.property.title': 'Font spacing',
  'font.spacing.property.lineHeight': 'Line height',
  'font.spacing.property.letterSpacing': 'Letter spacing',
  'font.spacing.property.wordSpacing': 'Word spacing',
  'font.spacing.property.indent': 'Indent',
  'backdrop.filter.property.title': 'Backdrop Filter',
  'clippath.property.title': 'Clip Path',
  'export.property.title': 'Export',
  'export.property.download': 'Download',
  'iframe.property.title': 'IFrame',
  'image.property.title': 'Image',
  'image.property.origin': 'Origin',
  'image.property.size': 'Size',
  'image.property.width': 'Width',
  'image.property.height': 'height',
  'video.property.title': 'Video',
  'video.property.play': 'Play',
  'video.property.pause': 'Pause',
  'video.property.volume': 'Volume',
  'video.property.playbackRate': 'Playback Rate',
  'video.property.currentTime': 'Current Time',
  'video.property.playTime': 'Play Time Distance',
  'motion.property.title': 'Motion',
  'text.property.title': 'Text Style',
  'text.property.align': 'Align',
  'text.property.transform': 'Transform',
  'text.property.decoration': 'Decoration',
  'text.clip.property.title': 'Text Clip',
  'text.shadow.property.title': 'Text Shadows',
  'text.fill.property.title': 'Text Fill',
  'text.fill.property.fill': 'Fill',
  'text.fill.property.stroke': 'Stroke',
  'text.fill.property.strokeWidth': 'Width',
  'transform.property.title': 'Transform',
  'transform.origin.property.title': 'Transform Origin',
  'transition.property.title': 'CSS Transition',
  'keyframe.property.title': 'CSS Keyframe',
  'selector.property.title': 'Selector',
  'selector.property.none': 'None selector',
  'path.data.property.title': 'Path Information',
  'polygon.data.property.title': 'Polygon Information',
  'perspective.property.title': 'Perspective',
  'perspective.origin.property.title': 'Perspective Origin',
  'svg.item.property.title': 'Appearance',
  'svg.item.property.isMotionPath': 'Motion Path',
  'svg.item.property.fill': 'Fill',
  'svg.item.property.fillOpacity': 'Opacity',
  'svg.item.property.path': 'Path',
  'svg.item.property.polygon': 'Polygon',
  'svg.item.property.totalLength': 'Total Length',
  'svg.item.property.fillRule': 'Fill Rule',
  'svg.item.property.stroke': 'Stroke',
  'svg.item.property.strokeWidth': 'Width',
  'svg.item.property.dashArray': 'Dash Array',
  'svg.item.property.dashOffset': 'Dash Offset',
  'svg.item.property.lineCap': 'Line Cap',
  'svg.item.property.lineJoin': 'Line Join',
  'svg.item.property.filter': 'Filter',
  'border.editor.all': 'All',
  'border.editor.width': 'Width',
  'border.editor.style': 'Style',
  'border.editor.color': 'C',
  'border.editor.top': 'Top',
  'border.editor.left': 'Left',
  'border.editor.right': 'Right',
  'border.editor.bottom': 'Bottom',
  'border.radius.editor.topLeft': 'Top Left',
  'border.radius.editor.topRight': 'Top Right',
  'border.radius.editor.bottomLeft': 'Bottom Left',
  'border.radius.editor.bottomRight': 'Bottom Right',
  'boxshadow.editor.blur': 'Blur',
  'boxshadow.editor.spread': 'Spread',
  'css.property.editor.properties': 'Properties',
  'offset.path.list.editor.path': 'Path',
  'offset.path.list.editor.totalLength': 'Total Length',
  'offset.path.list.editor.distance': 'Distance',
  'offset.path.list.editor.direction': 'Direction',
  'offset.path.list.editor.rotate': 'Rotate',
  'svgfilter.select.editor.message.create': 'Create new svg filter',
  'svgfilter.select.editor.message.select': 'Select a filter',
  'fill.editor.message.click.image': 'Click the preview area if you want to select a image',
  'fill.editor.message.drag.position': 'Drag if you want to move center position',
  'fill.editor.x1': 'Start X',
  'fill.editor.x2': 'End X',
  'fill.editor.y1': 'Start Y',
  'fill.editor.y2': 'End Y',
  'fill.editor.spread': 'Spread',
  'fill.editor.offset': 'Offset',
  'fill.editor.cx': 'Center X',
  'fill.editor.cy': 'Center Y',
  'fill.editor.r': 'End radius',
  'fill.editor.fx': 'Start X',
  'fill.editor.fy': 'Start Y',
  'fill.editor.fr': 'Start radius',
  'perspective.origin.editor.originX': 'Origin X',
  'perspective.origin.editor.originY': 'Origin Y',
  'path.manager.msg': 'Keydown ESC or Enter key to close editing',
  'path.manager.mode.modify': 'Modify',
  'path.manager.mode.path': 'Path',
  'path.manager.mode.transform': 'Transform',
  'path.manager.mode.reverse': 'Reverse',
  'path.manager.mode.flipX': 'Flip X',
  'path.manager.mode.flipY': 'Flip Y',
  'path.manager.mode.flipOrigin': 'Flip Origin',
  'colorpicker.popup.title': 'ColorPicker',
  'selector.popup.title': 'Selector Property',
  'selector.popup.selector': 'Selector',
  'background.image.position.popup.title': 'Background Pattern',
  'background.image.position.popup.size': 'Size',
  'background.image.position.popup.width': 'Width',
  'background.image.position.popup.height': 'Height',
  'background.image.position.popup.repeat': 'Repeat',
  'background.image.position.popup.blend': 'Blend',
  'background.image.position.popup.type.repeat': 'repeat',
  'background.image.position.popup.type.no-repeat': 'no repeat',
  'background.image.position.popup.type.repeat-x': 'repeat-x',
  'background.image.position.popup.type.repeat-y': 'repeat-y',
  'background.image.position.popup.type.space': 'space',
  'background.image.position.popup.type.round': 'round',
  'gradient.picker.popup.title': 'Gradient & Image Picker',
  'image.asset.property.title': 'Image',
  'video.asset.property.title': 'Video',
  'color.asset.property.title': 'Color',
  'gradient.asset.property.title': 'Gradient',
  'pattern.asset.property.title': 'Pattern',
  'svgfilter.asset.property.title': 'SVG Filter',
  'inspector.tab.title.style': 'Style',
  'inspector.tab.title.component': 'Component',
  'inspector.tab.title.transition': 'Transition & Animation',
  'inspector.tab.title.asset': 'Assets',
  'inspector.tab.title.text': 'Text',
  'inspector.tab.title.code': 'Code',
  'inspector.tab.title.history': 'History',
  'timeline.property.title': 'Timeline',
  'timeline.property.resize': 'Drag if you want to resize timeline height.',
  'timeline.animation.property.title': 'Animations',
  'timeline.play.control.play': 'Play',
  'timeline.play.control.pause': 'Pause',
  'timeline.play.control.first': 'First',
  'timeline.play.control.prev': 'Previous',
  'timeline.play.control.next': 'Next',
  'timeline.play.control.last': 'Last',
  'timeline.play.control.direction': 'Direction',
  'timeline.play.control.speed': 'Speed',
  'timeline.play.control.repeat': 'Repeat',
  'timeline.play.control.infinite': 'Infinite',
  'timeline.play.control.normal': 'normal',
  'timeline.play.control.alternate': 'alternate',
  'timeline.play.control.reverse': 'reverse',
  'timeline.play.control.alternate.reverse': 'alternate reverse',
  'timeline.value.editor.value': 'Value',
  'timeline.value.editor.time': 'Time',
  'timeline.value.editor.timing': 'Timing',
  'timeline.value.editor.offset.message': 'Please input enter key to change time offset.',
  'svgfilter.popup.title': 'SVG Filter',
  'css.item.rotate': 'Rotate',
  'css.item.rotateX': 'Rotate X',
  'css.item.rotateY': 'Rotate Y',
  'css.item.rotateZ': 'Rotate Z',
  'css.item.rotate3d': '3D Rotate',
  'css.item.skewX': 'Skew X',
  'css.item.skewY': 'Skew Y',
  'css.item.translate': 'Translate',
  'css.item.translateX': 'Translate X',
  'css.item.translateY': 'Translate Y',
  'css.item.translateZ': 'Translate Z',
  'css.item.translate3d': '3D Translate',
  'css.item.perspective': 'Perspective',
  'css.item.scale': 'Scale',
  'css.item.scaleX': 'Scale X',
  'css.item.scaleY': 'Scale Y',
  'css.item.scaleZ': 'Scale Z',
  'css.item.scale3d': '3D Scale',
  'css.item.matrix': 'Matrix',
  'css.item.matrix3d': '3D Matrix',
  'animation.property.title': 'CSS Animation',
  'animation.property.direction': 'Direction',
  'animation.property.play.state': 'Play State',
  'animation.property.fill.mode': 'Fill Mode',
  'animation.property.delay': 'Delay',
  'animation.property.duration': 'Duration',
  'animation.property.iteration.count': 'Iteration Count',
  'animation.property.Select a keyframe': 'Select a keyframe',
  'animation.property.popup.title': 'Animation',
  'animation.property.popup.timing.function': 'Timing Function',
  'animation.property.popup.keyframe': 'Keyframe',
  'animation.property.popup.direction': 'Direction',
  'animation.property.popup.play.state': 'Play State',
  'animation.property.popup.fill.mode': 'Fill Mode',
  'animation.property.popup.delay': 'Delay',
  'animation.property.popup.duration': 'Duration',
  'animation.property.popup.iteration': 'Iteration',
  'animation.property.popup.normal': 'normal',
  'animation.property.popup.reverse': 'reverse',
  'animation.property.popup.alternate': 'alternate',
  'animation.property.popup.alternate-reverse': 'alternate-reverse',
  'animation.property.popup.none': 'none',
  'animation.property.popup.forwards': 'forwards',
  'animation.property.popup.backwards': 'backwards',
  'animation.property.popup.both': 'both',
  'animation.property.popup.Select a keyframe': 'Select a keyframe',
  'keyframe.popup.title': 'Keyframe',
  'code.view.property.title': 'CodeView',
  'svg.filter.editor.tab.filter': 'Filter',
  'svg.filter.editor.tab.preset': 'Preset',
  'svg.filter.editor.tab.asset': 'Assets',
  'svg.filter.editor.GRAPHIC REFERENCES': 'GRAPHIC REFERENCES',
  'svg.filter.editor.SOURCES': 'SOURCES',
  'svg.filter.editor.MODIFIER': 'MODIFIER',
  'svg.filter.editor.LIGHTING': 'LIGHTING',
  'svg.filter.editor.COMBINERS': 'COMBINERS',
  'svg.filter.editor.Template': 'Template',
  'layout.property.title': 'Layout',
  'layout.property.flex': 'Flex Box',
  'layout.property.grid': 'Grid',
  'layout.property.default': 'Default',
  'flex.layout.editor.row': 'Row',
  'flex.layout.editor.column': 'column',
  'flex.layout.editor.row-reverse': 'Row Reverse',
  'flex.layout.editor.column-reverse': 'Column Reverse',
  'flex.layout.editor.nowrap': 'Nowrap',
  'flex.layout.editor.wrap': 'Wrap',
  'flex.layout.editor.wrap-reverse': 'Wrap Reverse',
  'flex.layout.editor.flex-start': 'Start',
  'flex.layout.editor.flex-end': 'End',
  'flex.layout.editor.center': 'Center',
  'flex.layout.editor.space-between': 'Between',
  'flex.layout.editor.space-around': 'Around',
  'flex.layout.editor.baseline': 'BaseLine',
  'flex.layout.editor.stretch': 'Stretch',
  'flex.layout.editor.direction': 'Direction',
  'flex.layout.editor.justify-content': 'Justify Content',
  'flex.layout.editor.align-items': 'Align Items',
  'flex.layout.editor.align-content': 'Align Content',
  'flex.layout.item.property.title': 'Layout Item Detail',
  'flex.layout.item.property.grow': 'Flex Grow',
  'flex.layout.item.property.shrink': 'Flex Shrink',
  'flex.layout.item.property.basis': 'Flex Basis',
  'flex.layout.item.property.none': 'none',
  'flex.layout.item.property.auto': 'auto',
  'flex.layout.item.property.value': 'value',
  'grid.layout.editor.template.columns': 'Columns',
  'grid.layout.editor.column.gap': 'Column Gap',
  'grid.layout.editor.template.rows': 'Rows',
  'grid.layout.editor.row.gap': 'Row Gap',
  'grid.box.editor.box.title': 'Box',
  'grid.box.editor.type': 'Type',
  'grid.box.editor.repeat': 'Repeat',
  'grid.box.editor.length': 'Length',
  'grid.box.editor.none': 'None',
  'grid.box.editor.auto': 'Auto',
  'grid.box.editor.count': 'Count',
  'grid.box.editor.value': 'Size',
  'grid.layout.item.property.title': 'Layout Item Detail',
  'grid.layout.item.property.column': 'Column',
  'grid.layout.item.property.row': 'Row',
  'grid.layout.item.property.start': 'Start',
  'grid.layout.item.property.end': 'End',
  'grid.layout.item.property.none': 'none',
  'grid.layout.item.property.value': 'value',
  'box.model.property.title': 'Box Model',
  'box.model.property.margin': 'Margin',
  'box.model.property.padding': 'Padding',
  'component.items.canvas': 'Canvas',
  'component.items.layer': 'Layer',
  'component.items.3dlayer': '3D Layer',
  'component.items.drawing': 'Drawing',
  'component.items.custom': 'Custom Component',
  'component.items.chart': 'Chart',
  'component.items.plugin': 'Plugin',
  'svg.text.property.title': "SVG Text Style",
  'svg.text.property.textarea': "Text Area",
  'svg.text.property.size': "Font Size",
  'svg.text.property.weight': "Font Weight",
  'svg.text.property.style': "Font Style",
  'svg.text.property.anchor': "Text Anchor",
  'svg.text.property.family': "Font Family",
  'svg.text.property.length.adjust': "Length Adjust",
  'svg.text.property.text.length': "Text Length",
  'svg.text.property.start.offset': "Start Offset",
  'fill.picker.popup.title': 'SVG Fragment picker',
  'gradient.editor.drag.message': 'Drag if you want to move center pointer.',
  'draw.manager.tolerance': 'Tolerance',
  'pattern.property.title': 'Pattern',
  'pattern.info.popup.title': 'Pattern Info',
  'pattern.info.popup.width': 'Width',
  'pattern.info.popup.height': 'Height',
  'pattern.info.popup.lineWidth': 'Line Width',
  'pattern.info.popup.lineHeight': 'Line Height',
  'pattern.info.popup.rotate': 'Rotate',
  'pattern.info.popup.blend': 'Blend Mode',
  'pattern.info.popup.foreColor': 'Fore',
  'pattern.info.popup.backColor': 'Back',
  'stroke.dasharray.editor.add': 'Add Dash',
  'viewport.panning.enable': 'You can move the area by holding down space key and dragging the screen.'
});
// CONCATENATED MODULE: ./src/el/i18n/locales/ko_KR.js
/* harmony default export */ var ko_KR = ({
  'app.title': 'EASYLOGIC',
  'app.sample': function appSample(a, b, c) {
    return "".concat(a, "-").concat(b, "-").concat(c);
  },
  'app.lang.en_US': 'English',
  'app.lang.ko_KR': '한국어',
  'app.lang.fr_FR': 'Français',
  'app.label.lang': '언어',
  'app.layout.all': '전체',
  'app.layout.css': 'CSS',
  'app.layout.svg': 'SVG',
  'app.label.layout': '메뉴구성',
  'app.theme.dark': '어두운',
  'app.theme.light': '밝은',
  'app.theme.toon': '그리기',
  'app.theme.gray': '회색',
  'app.label.theme': '테마',
  'app.tab.title.projects': '프로젝트',
  'app.tab.title.layers': '레이어',
  'app.tab.title.libraries': '라이브러리',
  'app.tab.title.components': '컴포넌트',
  'app.tab.title.artboards': '아트보드',
  'app.tab.title.assets': '에셋',
  'app.tab.title.keyMap': '단축키',
  'app.confirm.message.artboard.items.removeArtboard': '아트보드 프리뷰를 삭제 하시겠습니까?',
  'app.confirm.message.custom-component.items.removeCustomComponent': '컴포넌트 프리뷰를 삭제 하시겠습니까?',
  'menu.item.download.title': '다운로드',
  'menu.item.save.title': '저장',
  'menu.item.export.title': '내보내기',
  'menu.item.codepen.title': 'CodePen',
  'menu.item.fullscreen.title': '전체화면',
  'menu.item.shortcuts.title': '단축키',
  'menu.item.github.title': 'Github',
  'menu.item.learn.title': '배우기',
  'menu.item.projects.title': '프로젝트',
  'project.property.title': '프로젝트',
  'project.information.property.title': '프로젝트 정보',
  'project.information.property.name': '이름',
  'project.information.property.description': '설명',
  'artboard.property.title': '아트보드',
  'artboard.property.layout.title.flex': '플렉스',
  'artboard.property.layout.title.grid': '그리드',
  'layer.tree.property.title': '레이어',
  'layer.tree.property.layout.title.flex': '플렉스',
  'layer.tree.property.layout.title.grid': '그리드',
  'alignment.property.title': '정렬',
  'position.property.title': '위치',
  'position.property.X': 'X',
  'position.property.Y': 'Y',
  'size.property.title': '크기',
  'position.property.width': '넓이',
  'position.property.height': '높이',
  'position.property.rotate': '회전',
  'position.property.opacity': '투명',
  'background.color.property.title': '표시',
  'background.color.property.color': '배경색',
  'background.color.property.zindex': 'z-index',
  'background.color.property.blend': '블렌드모드',
  'background.color.property.overflow': '오버플로우',
  'background.color.property.overflow.visible': '보이기',
  'background.color.property.overflow.hidden': '숨기기',
  'background.color.property.overflow.scroll': '스크롤',
  'background.color.property.overflow.auto': '자동',
  'blend.normal': 'Normal(표준) 혼합모드',
  'blend.multiply': 'Multiply(곱하기) 모드',
  'blend.screen': 'Screen(스크린) 모드 ',
  'blend.overlay': 'Overlay(오버레이) 모드',
  'blend.darken': 'Darken(어둡기) 모드',
  'blend.lighten': 'Lighten(밝기) 모드 ',
  'blend.color-dodge': 'Color Dodge(컬러 닷지) 모드 ',
  'blend.color-burn': 'Color Burn(컬러 번) 모드 ',
  'blend.hard-light': 'Hard Light(하드 라이트) 모드 ',
  'blend.soft-light': 'Soft Light(소프트 라이트) 모드 ',
  'blend.difference': 'Difference(차이) 모드',
  'blend.exclusion': 'Exclusion(제외) 모드',
  'blend.hue': 'Hue(색조) 모드 ',
  'blend.saturation': 'Saturation(채도) 모드',
  'blend.color': 'Color(색상) 모드',
  'blend.luminosity': 'Luminosity(광도) 모드 ',
  'background.image.property.title': '채우기',
  'border.property.title': '외곽선',
  'border.radius.property.title': '둥근 외곽선',
  'boxshadow.property.title': '그림자',
  'filter.property.title': '필터',
  'filter.property.blur': '흐림(Blur)',
  'filter.property.grayscale': '회색(GrayScale)',
  'filter.property.hue-rotate': '색조(HueRotate)',
  'filter.property.invert': '반전(Invert)',
  'filter.property.brightness': '밝기(Brightness)',
  'filter.property.contrast': '대조(Contrast)',
  'filter.property.drop-shadow': '그림자(Drop Shadow)',
  'filter.property.drop-shadow.color': '색',
  'filter.property.drop-shadow.offsetX': 'X 간격',
  'filter.property.drop-shadow.offsetY': 'Y 간격',
  'filter.property.drop-shadow.blurRadius': '흐림',
  'filter.property.opacity': '투명도(Opacity)',
  'filter.property.saturate': '채도(Saturate)',
  'filter.property.sepia': '갈색톤(Sepia)',
  'filter.property.svg': 'SVG',
  'font.property.title': '폰트',
  'font.property.color': '색',
  'font.property.size': '크기',
  'font.property.stretch': '뻗기',
  'font.property.weight': '굵기',
  'font.property.style': '스타일',
  'font.property.family': '글꼴',
  'font.spacing.property.title': '폰트 공간',
  'font.spacing.property.lineHeight': '줄 높이',
  'font.spacing.property.letterSpacing': '글자 간격',
  'font.spacing.property.wordSpacing': '단어 간격',
  'font.spacing.property.indent': '들여쓰기',
  'backdrop.filter.property.title': '후면 필터',
  'clippath.property.title': '클립패스',
  'export.property.title': '내보내기',
  'export.property.download': '다운로드',
  'iframe.property.title': '아이프레임',
  'image.property.title': '이미지',
  'image.property.origin': '원본',
  'image.property.size': '크기',
  'image.property.width': '넓이',
  'image.property.height': '높이',
  'video.property.title': '비디오',
  'video.property.play': '시작',
  'video.property.pause': '멈춤',
  'video.property.volume': '볼륨',
  'video.property.playbackRate': '빠르기',
  'video.property.currentTime': '현재 시간',
  'video.property.playTime': '플레이 시간 간격',
  'motion.property.title': '모션',
  'path.data.property.title': '패스 정보',
  'polygon.data.property.title': '폴리곤 정보',
  'text.property.title': '텍스트 스타일',
  'text.property.align': '정렬',
  'text.property.transform': '변형',
  'text.property.decoration': '장식',
  'text.clip.property.title': '텍스트 클립',
  'text.shadow.property.title': '텍스트 그림자',
  'text.fill.property.title': '텍스트 채우기',
  'text.fill.property.fill': '채우기',
  'text.fill.property.stroke': '윤곽선',
  'text.fill.property.strokeWidth': '윤곽선 굵기',
  'transform.property.title': '트랜스폼',
  'transform.origin.property.title': '트랜스폼 Origin',
  'transition.property.title': 'CSS 트랜지션',
  'keyframe.property.title': 'CSS 키프레임',
  'selector.property.title': 'CSS 셀렉터',
  'selector.property.none': '선택자 없음',
  'perspective.property.title': '투영(perspective)',
  'perspective.origin.property.title': '투영 중심점',
  'svg.item.property.title': '보이기',
  'svg.item.property.isMotionPath': '모션 패스',
  'svg.item.property.fill': '채우기',
  'svg.item.property.fillOpacity': '투명도',
  'svg.item.property.path': '패스',
  'svg.item.property.polygon': '폴리곤',
  'svg.item.property.totalLength': '전체 길이',
  'svg.item.property.fillRule': '채우기 규칙',
  'svg.item.property.stroke': '선',
  'svg.item.property.strokeWidth': '선 굵기',
  'svg.item.property.dashArray': '점선 길이',
  'svg.item.property.dashOffset': '점선 위치',
  'svg.item.property.lineCap': '선 모양',
  'svg.item.property.lineJoin': '겹친 선',
  'svg.item.property.filter': '필터',
  'border.editor.all': '전체',
  'border.editor.width': '크기',
  'border.editor.style': '스타일',
  'border.editor.color': '색',
  'border.editor.top': '위',
  'border.editor.left': '왼쪽',
  'border.editor.right': '오른쪽',
  'border.editor.bottom': '아래',
  'border.radius.editor.topLeft': '왼쪽 위',
  'border.radius.editor.topRight': '오른쪽 위',
  'border.radius.editor.bottomLeft': '왼쪽 아래',
  'border.radius.editor.bottomRight': '오른쪽 아래',
  'boxshadow.editor.blur': '흐림',
  'boxshadow.editor.spread': '길이',
  'css.property.editor.properties': '속성',
  'offset.path.list.editor.path': '패스',
  'offset.path.list.editor.totalLength': '전체 길이',
  'offset.path.list.editor.distance': '거리',
  'offset.path.list.editor.direction': '방향',
  'offset.path.list.editor.rotate': '회전',
  'svgfilter.select.editor.message.create': '새로운 SVG Filter 를 만드세요.',
  'svgfilter.select.editor.message.select': '필터를 선택하세요.',
  'fill.editor.message.click.image': '이미지를 선택하고 싶으면 프리뷰 영역을 클릭하세요.',
  'fill.editor.message.drag.position': '가운데 위치를 드래그 해보세요.',
  'fill.editor.x1': '시작 X',
  'fill.editor.x2': '끝 X',
  'fill.editor.y1': '시작 Y',
  'fill.editor.y2': '끝 Y',
  'fill.editor.spread': '확산',
  'fill.editor.offset': '위치',
  'fill.editor.cx': '중심점 X',
  'fill.editor.cy': '중심점 Y',
  'fill.editor.r': '끝 반지름',
  'fill.editor.fx': '시작 X',
  'fill.editor.fy': '시작 Y',
  'fill.editor.fr': '시작 반지름',
  'perspective.origin.editor.originX': '중심점 X',
  'perspective.origin.editor.originY': '중심점 Y',
  'path.manager.msg': '편집을 종료할 때는 ESC 키나 Enter 키를 누르세요. 또는 화면을 클릭하시면 됩니다.',
  'path.manager.mode.modify': '점 편집',
  'path.manager.mode.path': '점 추가',
  'path.manager.mode.transform': '변형',
  'path.manager.mode.reverse': '순서변경',
  'path.manager.mode.flipX': 'X축 회전',
  'path.manager.mode.flipY': 'Y축 회전',
  'path.manager.mode.flipOrigin': '전체 회전',
  'colorpicker.popup.title': '색상 선택',
  'selector.popup.title': '선택자 속성',
  'selector.popup.selector': '선택자',
  'background.image.position.popup.title': '배경 패턴',
  'background.image.position.popup.size': '크기',
  'background.image.position.popup.width': '넓이',
  'background.image.position.popup.height': '높이',
  'background.image.position.popup.repeat': '반복',
  'background.image.position.popup.blend': '블렌드',
  'background.image.position.popup.type.repeat': '반복',
  'background.image.position.popup.type.no-repeat': '반복 안함',
  'background.image.position.popup.type.repeat-x': 'x축 반복',
  'background.image.position.popup.type.repeat-y': 'y축 반복',
  'background.image.position.popup.type.space': '공백유지',
  'background.image.position.popup.type.round': '반올림',
  'gradient.picker.popup.title': '그라디언트와 이미지',
  'image.asset.property.title': '이미지',
  'video.asset.property.title': '비디오',
  'color.asset.property.title': '색',
  'gradient.asset.property.title': '그라디언트',
  'pattern.asset.property.title': '패턴',
  'svgfilter.asset.property.title': 'SVG 필터',
  'inspector.tab.title.style': '스타일 속성',
  'inspector.tab.title.component': '컴포넌트 속성',
  'inspector.tab.title.transition': '트랜지션과 애니메이션 속성',
  'inspector.tab.title.asset': '에셋 관리자',
  'inspector.tab.title.text': '텍스트',
  'inspector.tab.title.code': '코드',
  'inspector.tab.title.history': '기록',
  'timeline.property.title': '타임라인',
  'timeline.property.resize': '타임라인 높이를 변경합니다. 드래그 해주세요.',
  'timeline.animation.property.title': '애니메이션',
  'timeline.play.control.play': '플레이',
  'timeline.play.control.pause': '멈춤',
  'timeline.play.control.first': '처음으로',
  'timeline.play.control.prev': '이전으로',
  'timeline.play.control.next': '다음으로',
  'timeline.play.control.last': '마지막으로',
  'timeline.play.control.direction': '방향',
  'timeline.play.control.speed': '속력',
  'timeline.play.control.repeat': '반복',
  'timeline.play.control.infinite': '무한',
  'timeline.play.control.normal': 'normal',
  'timeline.play.control.alternate': 'alternate',
  'timeline.play.control.reverse': 'reverse',
  'timeline.play.control.alternate.reverse': 'alternate reverse',
  'timeline.value.editor.value': '값',
  'timeline.value.editor.time': '시간',
  'timeline.value.editor.timing': '타이밍 함수',
  'timeline.value.editor.offset.message': 'Enter키를 입력하면 적용됩니다.',
  'svgfilter.popup.title': 'SVG 필터',
  'css.item.rotate': '회전',
  'css.item.rotateX': 'X축 회전',
  'css.item.rotateY': 'Y축 회전',
  'css.item.rotateZ': 'Z축 회전',
  'css.item.rotate3d': '3D 회전',
  'css.item.skewX': 'X축 늘이기',
  'css.item.skewY': 'Y축 늘이기',
  'css.item.translate': '이동',
  'css.item.translateX': 'X축 이동',
  'css.item.translateY': 'Y축 이동',
  'css.item.translateZ': 'Z축 이동',
  'css.item.translate3d': '3D 이동',
  'css.item.perspective': '원근',
  'css.item.scale': '크기변경',
  'css.item.scaleX': 'X축 크기변경',
  'css.item.scaleY': 'Y축 크기변경',
  'css.item.scaleZ': 'Z축 크기변경',
  'css.item.scale3d': '3D 크기변경',
  'css.item.matrix': '변환 행렬',
  'css.item.matrix3d': '3D 변환 행렬',
  'animation.property.title': 'CSS 애니메이션',
  'animation.property.direction': '방향',
  'animation.property.play.state': '플레이 상태',
  'animation.property.fill.mode': '채우기 모드',
  'animation.property.delay': '대기시간',
  'animation.property.duration': '시간',
  'animation.property.iteration.count': '반복 횟수',
  'animation.property.select a keyframe': '키프레임을 선택해주세요',
  'animation.property.popup.title': 'CSS 애니메이션',
  'animation.property.popup.timing.function': '타이밍 함수',
  'animation.property.popup.keyframe': '키프레임',
  'animation.property.popup.direction': '방향',
  'animation.property.popup.play.state': '플레이 상태',
  'animation.property.popup.fill.mode': '채우기 모드',
  'animation.property.popup.delay': '대기시간',
  'animation.property.popup.duration': '시간',
  'animation.property.popup.iteration': '반복 횟수',
  'animation.property.popup.normal': '시간순',
  'animation.property.popup.reverse': '역시간순',
  'animation.property.popup.alternate': '왕복 시간순',
  'animation.property.popup.alternate-reverse': '왕복 역시간순',
  'animation.property.popup.none': 'none',
  'animation.property.popup.forwards': 'forwards',
  'animation.property.popup.backwards': 'backwards',
  'animation.property.popup.both': 'both',
  'animation.property.popup.Select a keyframe': '키프레임을 선택해주세요.',
  'keyframe.popup.title': '키프레임',
  'code.view.property.title': '코드뷰',
  'svg.filter.editor.tab.filter': '필터',
  'svg.filter.editor.tab.preset': '프리셋',
  'svg.filter.editor.tab.asset': '에셋',
  'svg.filter.editor.GRAPHIC REFERENCES': '참조 그래픽',
  'svg.filter.editor.SOURCES': '원본',
  'svg.filter.editor.MODIFIER': '수정',
  'svg.filter.editor.LIGHTING': '빛',
  'svg.filter.editor.COMBINERS': '결합',
  'svg.filter.editor.Template': '템플릿',
  'layout.property.title': '레이아웃',
  'layout.property.flex': '플렉스 박스',
  'layout.property.grid': '그리드',
  'layout.property.default': '기본 좌표',
  'flex.layout.editor.row': '행',
  'flex.layout.editor.column': '열',
  'flex.layout.editor.row-reverse': '역방향 행',
  'flex.layout.editor.column-reverse': '역방향 열',
  'flex.layout.editor.nowrap': '감싸지 않기',
  'flex.layout.editor.wrap': '감싸기',
  'flex.layout.editor.wrap-reverse': '역방향 감싸기',
  'flex.layout.editor.flex-start': '시작',
  'flex.layout.editor.flex-end': '끝',
  'flex.layout.editor.center': '중간',
  'flex.layout.editor.space-between': '공간 중간 채움',
  'flex.layout.editor.space-around': '공간 양끝 채움',
  'flex.layout.editor.baseline': '기본선',
  'flex.layout.editor.stretch': '펼치기',
  'flex.layout.editor.direction': '방향',
  'flex.layout.editor.justify-content': '컨텐츠 조정',
  'flex.layout.editor.align-items': '아이템 정렬',
  'flex.layout.editor.align-content': '컨텐츠 정렬',
  'flex.layout.item.property.title': '플렉스 아이템 설정',
  'flex.layout.item.property.grow': '공간 비율',
  'flex.layout.item.property.shrink': '축소 비율',
  'flex.layout.item.property.basis': '초기 크기',
  'flex.layout.item.property.none': '없음',
  'flex.layout.item.property.auto': '자동',
  'flex.layout.item.property.value': '값',
  'grid.layout.editor.template.columns': '열',
  'grid.layout.editor.column.gap': '열 간격',
  'grid.layout.editor.template.rows': '행',
  'grid.layout.editor.row.gap': '행 간격',
  'grid.box.editor.box.title': '영역',
  'grid.box.editor.type': '타입',
  'grid.box.editor.repeat': '반복',
  'grid.box.editor.length': '길이',
  'grid.box.editor.none': '없음',
  'grid.box.editor.auto': '자동',
  'grid.box.editor.count': '개수',
  'grid.box.editor.value': '크기',
  'grid.layout.item.property.title': '그리드 아이템 설정',
  'grid.layout.item.property.column': '열',
  'grid.layout.item.property.row': '행',
  'grid.layout.item.property.start': '시작',
  'grid.layout.item.property.End': '끝',
  'grid.layout.item.property.none': '없음',
  'grid.layout.item.property.value': '값',
  'box.model.property.title': '박스 모델',
  'box.model.property.margin': '마진',
  'box.model.property.padding': '패딩',
  'component.items.canvas': '캔버스',
  'component.items.layer': '레이어',
  'component.items.3dlayer': '3D 레이어',
  'component.items.drawing': '그리기',
  'component.items.custom': '사용자 정의 컴포넌트',
  'component.items.chart': '차트',
  'component.items.plugin': '플러그인',
  'svg.text.property.title': "SVG Text 스타일",
  'svg.text.property.textarea': "텍스트 입력",
  'svg.text.property.size': "폰트 크기",
  'svg.text.property.weight': "폰트 굵기",
  'svg.text.property.style': "폰트 스타일",
  'svg.text.property.anchor': "텍스트 위치",
  'svg.text.property.family': "폰트 글꼴",
  'svg.text.property.length.adjust': "길이 대응",
  'svg.text.property.text.length': "텍스트 길이",
  'svg.text.property.start.offset': "시작 지점",
  'fill.picker.popup.title': '색 채우기',
  'gradient.editor.drag.message': '드래그 하면 중심점을 옮길 수 있습니다.',
  'draw.manager.tolerance': '포인트 허용 오차',
  'pattern.property.title': '패턴',
  'pattern.info.popup.title': '패턴 정보',
  'pattern.info.popup.width': '넓이',
  'pattern.info.popup.height': '높이',
  'pattern.info.popup.lineWidth': '선 넓이',
  'pattern.info.popup.lineHeight': '선 높이',
  'pattern.info.popup.rotate': '회전',
  'pattern.info.popup.blend': '블렌드',
  'pattern.info.popup.foreColor': '패턴색',
  'pattern.info.popup.backColor': '배경색',
  'stroke.dasharray.editor.add': '점 추가',
  'viewport.panning.enable': 'space 를 누른채 화면을 드래그 하면 영역을 움직일 수 있습니다.'
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// CONCATENATED MODULE: ./src/el/i18n/locales/fr_FR.js


var _appTitle$appSample;

/* harmony default export */ var fr_FR = (_appTitle$appSample = {
  'app.title': 'EASYLOGIC',
  'app.sample': function appSample(a, b, c) {
    return "".concat(a, "-").concat(b, "-").concat(c);
  },
  'app.lang.en_US': 'English',
  'app.lang.ko_KR': '한국어',
  'app.lang.fr_FR': 'Français',
  'app.label.lang': 'Langue',
  'app.layout.all': 'All',
  'app.layout.css': 'CSS',
  'app.layout.svg': 'SVG',
  'app.label.layout': 'Menu Layout',
  'app.theme.dark': 'Sombre',
  'app.theme.light': 'Clair',
  'app.theme.gray': 'Gris',
  'app.label.theme': 'Thème',
  'app.tab.title.projects': 'Projets',
  'app.tab.title.layers': 'Objets',
  'app.tab.title.libraries': 'Librarie',
  'app.tab.title.components': 'Objet',
  'app.tab.title.artboards': 'Artboard',
  'app.tab.title.assets': 'Elements',
  'app.tab.title.keyMap': 'Clavier',
  'app.confirm.message.artboard.items.removeArtboard': 'Do you remove an artboard preview really?',
  'app.confirm.message.custom-component.items.removeCustomComponent': 'Do you remove a custom component preview really?',
  'menu.item.download.title': 'Télécharger',
  'menu.item.save.title': 'Enregistrer',
  'menu.item.export.title': 'Exporter',
  'menu.item.codepen.title': 'CodePen',
  'menu.item.fullscreen.title': 'Ecran',
  'menu.item.shortcuts.title': 'ShortCuts',
  'menu.item.github.title': 'Github',
  'menu.item.learn.title': 'Docs',
  'menu.item.projects.title': 'Projects',
  'project.property.title': 'Projet',
  'project.information.property.title': 'Information',
  'project.information.property.name': 'Nom',
  'project.information.property.description': 'Description',
  'artboard.property.title': 'Planche',
  'artboard.property.layout.title.flex': 'Flex',
  'artboard.property.layout.title.grid': 'Grille',
  'layer.tree.property.title': 'Objets',
  'layer.tree.property.layout.title.flex': 'Flex',
  'layer.tree.property.layout.title.grid': 'Grille',
  'alignment.property.title': 'Alignment',
  'position.property.title': 'Position',
  'position.property.X': 'X',
  'position.property.Y': 'Y',
  'size.property.title': 'Taille',
  'position.property.width': 'Largeur',
  'position.property.height': 'Hauteur',
  'position.property.opacity': 'Opacity',
  'position.property.rotate': 'Rotate',
  'background.color.property.title': 'Apparance',
  'background.color.property.color': 'Couleur',
  'background.color.property.zindex': 'z-index',
  'background.color.property.opacity': 'Opacité',
  'background.color.property.blend': 'Mélange',
  'background.color.property.overflow': 'Débordement',
  'background.color.property.overflow.visible': 'Visible',
  'background.color.property.overflow.hidden': 'Caché',
  'background.color.property.overflow.scroll': 'Scroll',
  'background.color.property.overflow.auto': 'Auto',
  'blend.normal': 'normal',
  'blend.multiply': 'multiplie',
  'blend.screen': 'écran',
  'blend.overlay': 'couche',
  'blend.darken': 'sombre',
  'blend.lighten': 'clair',
  'blend.color-dodge': 'dodge',
  'blend.color-burn': 'brulé',
  'blend.hard-light': 'dur',
  'blend.soft-light': 'doux',
  'blend.difference': 'diff"rence',
  'blend.exclusion': 'exclusion',
  'blend.hue': 'teinte',
  'blend.saturation': 'saturation',
  'blend.color': 'couleur',
  'blend.luminosity': 'luminosité',
  'background.image.property.title': 'Remplissage',
  'border.property.title': 'Bordure',
  'border.radius.property.title': 'Rayon de bordure',
  'boxshadow.property.title': 'Ombres',
  'filter.property.title': 'Filtre',
  'filter.property.blur': 'Flou',
  'filter.property.grayscale': 'Echelle de gris',
  'filter.property.hue-rotate': 'Rotation teinte',
  'filter.property.invert': 'Invertir',
  'filter.property.brightness': 'Luminosité',
  'filter.property.contrast': 'Contraste',
  'filter.property.drop-shadow': 'Ombre portée',
  'filter.property.drop-shadow.color': 'Couleur',
  'filter.property.drop-shadow.offsetX': 'Décalage X',
  'filter.property.drop-shadow.offsetY': 'Décalage Y',
  'filter.property.drop-shadow.blurRadius': 'Flou',
  'filter.property.opacity': 'Opacité',
  'filter.property.saturate': 'Saturation',
  'filter.property.sepia': 'Sépia',
  'filter.property.svg': 'SVG',
  'font.property.title': 'Police',
  'font.property.color': 'Couleur',
  'font.property.size': 'Taille',
  'font.property.stretch': 'Etirement',
  'font.property.weight': 'Poids',
  'font.property.style': 'Style',
  'font.property.family': 'Famille',
  'font.spacing.property.title': 'Espaces du texte',
  'font.spacing.property.lineHeight': 'Hauteur de ligne',
  'font.spacing.property.letterSpacing': 'Espace inter-caractères',
  'font.spacing.property.wordSpacing': 'Espace inter-mots',
  'font.spacing.property.indent': 'Identation',
  'backdrop.filter.property.title': 'Filtre Backdrop',
  'clippath.property.title': 'Chemin du Clip',
  'export.property.title': 'Exporter',
  'export.property.download': 'Télécharger',
  'iframe.property.title': 'IFrame',
  'image.property.title': 'Image',
  'image.property.origin': 'Origine',
  'image.property.size': 'Taille',
  'image.property.width': 'Largeur',
  'image.property.height': 'Hauteur',
  'video.property.title': 'Video',
  'video.property.play': 'Jouer',
  'video.property.pause': 'Pause',
  'video.property.volume': 'Volume',
  'video.property.playbackRate': 'Vitesse de lecture',
  'video.property.currentTime': 'Temps actuel',
  'video.property.playTime': 'Temps de lecture',
  'motion.property.title': 'Mouvement',
  'text.property.title': 'Style Texte',
  'text.property.align': 'Alignement',
  'text.property.transform': 'Transformation',
  'text.property.decoration': 'Décoration',
  'text.clip.property.title': 'Clip Texte',
  'text.shadow.property.title': 'Ombres Texte',
  'text.fill.property.title': 'Remplissage Texte',
  'text.fill.property.fill': 'Remplissage',
  'text.fill.property.stroke': 'Trait',
  'text.fill.property.strokeWidth': 'Largeur',
  'transform.property.title': 'Transformation',
  'transform.origin.property.title': 'Origine Transformation',
  'transition.property.title': 'Transition CSS',
  'keyframe.property.title': 'Image clé CSS',
  'selector.property.title': 'Sélécteur',
  'selector.property.none': 'Aucun sélécteur',
  'path.data.property.title': 'Information Chemin',
  'polygon.data.property.title': 'Information Polygone',
  'perspective.property.title': 'Perspective',
  'perspective.origin.property.title': 'Origine Perspective',
  'svg.item.property.title': 'Appearance',
  'svg.item.property.isMotionPath': 'Chemin de mouvement',
  'svg.item.property.fill': 'Remplissage',
  'svg.item.property.fillOpacity': 'Opacité',
  'svg.item.property.path': 'Chemin',
  'svg.item.property.polygon': 'Polygone',
  'svg.item.property.totalLength': 'Longueur totale',
  'svg.item.property.fillRule': 'Règle remplissage',
  'svg.item.property.stroke': 'Trait',
  'svg.item.property.strokeWidth': 'Largeur de trait',
  'svg.item.property.dashArray': 'Suite tiret',
  'svg.item.property.dashOffset': 'Décalage tiret',
  'svg.item.property.lineCap': 'Chapeau Ligne',
  'svg.item.property.lineJoin': 'Jonction ligne',
  'svg.item.property.filter': 'Filtre',
  'border.editor.all': 'Tout',
  'border.editor.width': 'Largeur',
  'border.editor.style': 'Style',
  'border.editor.color': 'Couleur',
  'border.editor.top': 'Haut',
  'border.editor.left': 'Gauche',
  'border.editor.right': 'Droite',
  'border.editor.bottom': 'Bas',
  'border.radius.editor.topLeft': 'Haut gauche',
  'border.radius.editor.topRight': 'Haut droite',
  'border.radius.editor.bottomLeft': 'Bas gauche',
  'border.radius.editor.bottomRight': 'Bas droite',
  'boxshadow.editor.blur': 'Flou',
  'boxshadow.editor.spread': 'Etalement',
  'css.property.editor.properties': 'Propriétés',
  'offset.path.list.editor.path': 'Chemin',
  'offset.path.list.editor.totalLength': 'Longueur totale',
  'offset.path.list.editor.distance': 'Distance',
  'offset.path.list.editor.direction': 'Direction',
  'offset.path.list.editor.rotate': 'Rotation',
  'svgfilter.select.editor.message.create': 'Créer un filtre svg',
  'svgfilter.select.editor.message.select': 'Sélection filtre',
  'fill.editor.message.click.image': 'Cliquez sur aperçu si vous souhaitez sélectionner une image',
  'fill.editor.message.drag.position': 'Prendre pour changer la position centrale',
  'fill.editor.x1': 'Début X',
  'fill.editor.x2': 'Fin X',
  'fill.editor.y1': 'Début Y',
  'fill.editor.y2': 'Fin Y',
  'fill.editor.spread': 'Etalement',
  'fill.editor.offset': 'Décalage',
  'fill.editor.cx': 'Centre X',
  'fill.editor.cy': 'Centre Y',
  'fill.editor.r': 'Rayon de fin',
  'fill.editor.fx': 'Départ X',
  'fill.editor.fy': 'Départ Y',
  'fill.editor.fr': 'Rayon de départ',
  'perspective.origin.editor.originX': 'Origine X',
  'perspective.origin.editor.originY': 'Origine Y',
  'path.manager.msg': 'Appuyer ESC ou Entréz keypour fermer Edition',
  'path.manager.mode.modify': 'Modifier',
  'path.manager.mode.path': 'Chemin',
  'path.manager.mode.transform': 'Transformer',
  'path.manager.mode.reverse': 'Reverse',
  'path.manager.mode.flipX': 'Retouner X',
  'path.manager.mode.flipY': 'Retouner Y',
  'path.manager.mode.flipOrigin': 'Retouner Origine',
  'colorpicker.popup.title': 'Pipette',
  'selector.popup.title': 'Propiété de Sélecteur',
  'selector.popup.selector': 'Sélecteur',
  'background.image.position.popup.title': 'Motif de fond',
  'background.image.position.popup.size': 'Taille',
  'background.image.position.popup.width': 'Largeur',
  'background.image.position.popup.height': 'Hauteur',
  'background.image.position.popup.repeat': 'Repète',
  'background.image.position.popup.blend': 'Mélange',
  'background.image.position.popup.type.repeat': 'repète',
  'background.image.position.popup.type.no-repeat': 'sans repétition',
  'background.image.position.popup.type.repeat-x': 'repète-x',
  'background.image.position.popup.type.repeat-y': 'repète-y',
  'background.image.position.popup.type.space': 'espace',
  'background.image.position.popup.type.round': 'rond',
  'gradient.picker.popup.title': 'Sélection Gradient & Image',
  'image.asset.property.title': 'Image',
  'video.asset.property.title': 'Vidéo',
  'color.asset.property.title': 'Couleur',
  'gradient.asset.property.title': 'Gradient',
  'pattern.asset.property.title': 'Motif',
  'svgfilter.asset.property.title': 'Filtre SVG',
  'inspector.tab.title.style': 'Style',
  'inspector.tab.title.component': 'Composant',
  'inspector.tab.title.transition': 'Transition & Animation',
  'inspector.tab.title.asset': 'Eléments',
  'inspector.tab.title.text': 'Texte',
  'inspector.tab.title.code': 'Code',
  'inspector.tab.title.history': 'History'
}, defineProperty_default()(_appTitle$appSample, "inspector.tab.title.history", 'History'), defineProperty_default()(_appTitle$appSample, 'timeline.property.title', 'Chronologie'), defineProperty_default()(_appTitle$appSample, 'timeline.property.resize', 'Drag if you want to resize timeline height.'), defineProperty_default()(_appTitle$appSample, 'timeline.animation.property.title', 'Animations'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.play', 'Jouer'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.pause', 'Pause'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.first', 'Premier'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.prev', 'Précédent'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.next', 'Suivant'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.last', 'Dernier'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.direction', 'Direction'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.speed', 'Vitesse'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.repeat', 'Répéter'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.infinite', 'Infini'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.normal', 'normal'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.alternate', 'alternatif'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.reverse', 'inverse'), defineProperty_default()(_appTitle$appSample, 'timeline.play.control.alternate.reverse', 'inverse alternatif'), defineProperty_default()(_appTitle$appSample, 'timeline.value.editor.value', 'Valeur'), defineProperty_default()(_appTitle$appSample, 'timeline.value.editor.time', 'Temps'), defineProperty_default()(_appTitle$appSample, 'timeline.value.editor.timing', 'Calage temps'), defineProperty_default()(_appTitle$appSample, 'timeline.value.editor.offset.message', 'Please input enter key to change time offset.'), defineProperty_default()(_appTitle$appSample, 'svgfilter.popup.title', 'Filtre SVG'), defineProperty_default()(_appTitle$appSample, 'css.item.rotate', 'Rotation'), defineProperty_default()(_appTitle$appSample, 'css.item.rotateX', 'Rotation X'), defineProperty_default()(_appTitle$appSample, 'css.item.rotateY', 'Rotation Y'), defineProperty_default()(_appTitle$appSample, 'css.item.rotateZ', 'Rotation Z'), defineProperty_default()(_appTitle$appSample, 'css.item.rotate3d', 'Rotation 3D'), defineProperty_default()(_appTitle$appSample, 'css.item.skewX', 'Oblique X'), defineProperty_default()(_appTitle$appSample, 'css.item.skewY', 'Oblique Y'), defineProperty_default()(_appTitle$appSample, 'css.item.translate', 'Translation'), defineProperty_default()(_appTitle$appSample, 'css.item.translateX', 'Translation X'), defineProperty_default()(_appTitle$appSample, 'css.item.translateY', 'Translation Y'), defineProperty_default()(_appTitle$appSample, 'css.item.translateZ', 'Translation Z'), defineProperty_default()(_appTitle$appSample, 'css.item.translate3d', 'Translation 3D'), defineProperty_default()(_appTitle$appSample, 'css.item.perspective', 'Perspéctive'), defineProperty_default()(_appTitle$appSample, 'css.item.scale', 'Echelle'), defineProperty_default()(_appTitle$appSample, 'css.item.scaleX', 'Echelle X'), defineProperty_default()(_appTitle$appSample, 'css.item.scaleY', 'Echelle Y'), defineProperty_default()(_appTitle$appSample, 'css.item.scaleZ', 'Echelle Z'), defineProperty_default()(_appTitle$appSample, 'css.item.scale3d', 'Echelle 3D'), defineProperty_default()(_appTitle$appSample, 'css.item.matrix', 'Matrice'), defineProperty_default()(_appTitle$appSample, 'css.item.matrix3d', 'Matrice 3D'), defineProperty_default()(_appTitle$appSample, 'animation.property.title', 'Animation CSS'), defineProperty_default()(_appTitle$appSample, 'animation.property.direction', 'Direction'), defineProperty_default()(_appTitle$appSample, 'animation.property.play.state', 'Etat lecture'), defineProperty_default()(_appTitle$appSample, 'animation.property.fill.mode', 'Mode remplissage'), defineProperty_default()(_appTitle$appSample, 'animation.property.delay', 'Délais'), defineProperty_default()(_appTitle$appSample, 'animation.property.duration', 'Durée'), defineProperty_default()(_appTitle$appSample, 'animation.property.iteration.count', 'Nombre Itérations'), defineProperty_default()(_appTitle$appSample, 'animation.property.Select a keyframe', 'Selectionner une image clé'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.title', 'Animation'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.timing.function', 'Fonction temps'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.keyframe', 'image clé'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.direction', 'Direction'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.play.state', 'Etat lecture'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.fill.mode', 'Mode remplissage'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.delay', 'Délais'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.duration', 'Duréé'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.iteration', 'Itération'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.normal', 'normal'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.reverse', 'inverse'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.alternate', 'alternatif'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.alternate-reverse', 'inverse alternatif'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.none', 'Aucun'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.forwards', 'en avant'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.backwards', 'en arrière'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.both', 'les deux'), defineProperty_default()(_appTitle$appSample, 'animation.property.popup.Select a keyframe', 'Selectionner une image clé'), defineProperty_default()(_appTitle$appSample, 'keyframe.popup.title', 'image clé'), defineProperty_default()(_appTitle$appSample, 'code.view.property.title', 'Vue code'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.tab.filter', 'Filtrer'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.tab.preset', 'Pre-rempli'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.tab.asset', 'Eléments'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.GRAPHIC REFERENCES', 'REFERENCES GRAPHIQUES'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.SOURCES', 'SOURCES'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.MODIFIER', 'MODIFIER'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.LIGHTING', 'ECLAIRAGE'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.COMBINERS', 'COMBINER'), defineProperty_default()(_appTitle$appSample, 'svg.filter.editor.Template', 'Modèle'), defineProperty_default()(_appTitle$appSample, 'layout.property.title', 'Disposition'), defineProperty_default()(_appTitle$appSample, 'layout.property.flex', 'Boîte Flex'), defineProperty_default()(_appTitle$appSample, 'layout.property.grid', 'Grille'), defineProperty_default()(_appTitle$appSample, 'layout.property.default', 'Défaut'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.row', 'Ligne'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.column', 'Colonne'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.row-reverse', 'Inverse ligne'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.column-reverse', 'Inverse Colonne'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.nowrap', 'Non-emballé'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.wrap', 'Emballé (wrap)'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.wrap-reverse', 'Inverse emballé'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.flex-start', 'Début'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.flex-end', 'Fin'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.center', 'Centrer'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.space-between', 'Entre'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.space-around', 'Autour'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.baseline', 'Base'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.stretch', 'Etirement'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.direction', 'Direction'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.justify-content', 'Justifier'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.align-items', 'Aligner objets'), defineProperty_default()(_appTitle$appSample, 'flex.layout.editor.align-content', 'Aligner contenu'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.title', 'Détail Disposition objet'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.grow', 'Augmenter Flex'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.shrink', 'Réduire Flex'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.basis', 'Base Flex'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.none', 'Aucun'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.auto', 'auto'), defineProperty_default()(_appTitle$appSample, 'flex.layout.item.property.value', 'valeur'), defineProperty_default()(_appTitle$appSample, 'grid.layout.editor.template.columns', 'Colonne'), defineProperty_default()(_appTitle$appSample, 'grid.layout.editor.column.gap', 'Espace Colonne'), defineProperty_default()(_appTitle$appSample, 'grid.layout.editor.template.rows', 'Lignes'), defineProperty_default()(_appTitle$appSample, 'grid.layout.editor.row.gap', 'Espace lignes'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.box.title', 'Boîte'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.type', 'Type'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.repeat', 'Répéter'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.length', 'Longueur'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.none', 'Aucun'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.auto', 'Auto'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.count', 'Compte'), defineProperty_default()(_appTitle$appSample, 'grid.box.editor.value', 'Taille'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.title', 'Détail disposition objets'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.column', 'Colonne'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.row', 'Ligne'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.start', 'Début'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.end', 'Fin'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.none', 'Aucun'), defineProperty_default()(_appTitle$appSample, 'grid.layout.item.property.value', 'valeur'), defineProperty_default()(_appTitle$appSample, 'box.model.property.title', 'Modèle'), defineProperty_default()(_appTitle$appSample, 'box.model.property.margin', 'Marge'), defineProperty_default()(_appTitle$appSample, 'box.model.property.padding', 'Espace'), defineProperty_default()(_appTitle$appSample, 'component.items.canvas', 'Toile'), defineProperty_default()(_appTitle$appSample, 'component.items.layer', 'Objet'), defineProperty_default()(_appTitle$appSample, 'component.items.3dlayer', 'Objet 3D'), defineProperty_default()(_appTitle$appSample, 'component.items.drawing', 'Dessin'), defineProperty_default()(_appTitle$appSample, 'component.items.custom', 'Composant personnalisé'), defineProperty_default()(_appTitle$appSample, 'component.items.chart', 'Chart'), defineProperty_default()(_appTitle$appSample, 'component.items.plugin', 'Plugin'), defineProperty_default()(_appTitle$appSample, 'svg.text.property.title', "Style SVG Texte"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.textarea', "Zone Texte"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.size', "Taille"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.weight', "Poids"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.style', "Style"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.anchor', "Ancre Texte"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.family', "Famille"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.length.adjust', "Ajusteement longueur"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.text.length', "Ajusteement Texte"), defineProperty_default()(_appTitle$appSample, 'svg.text.property.start.offset', "Décallage départ"), defineProperty_default()(_appTitle$appSample, 'fill.picker.popup.title', 'Sélection Fragment SVG'), defineProperty_default()(_appTitle$appSample, 'gradient.editor.drag.message', 'Glisser pour déplacer centre.'), defineProperty_default()(_appTitle$appSample, 'draw.manager.tolerance', 'Tolérance'), defineProperty_default()(_appTitle$appSample, 'pattern.property.title', 'Motif'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.title', 'Info Motif'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.width', 'Largeur'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.height', 'Hauteur'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.lineWidth', 'Largeur ligne'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.lineHeight', 'Hauteur de ligne'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.rotate', 'Rotatation'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.blend', 'Mélange'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.foreColor', 'Avant'), defineProperty_default()(_appTitle$appSample, 'pattern.info.popup.backColor', 'Arrière'), defineProperty_default()(_appTitle$appSample, 'stroke.dasharray.editor.add', 'Ajout tiret'), defineProperty_default()(_appTitle$appSample, 'viewport.panning.enable', 'You can move the area by holding down space and dragging the screen.'), _appTitle$appSample);
// CONCATENATED MODULE: ./src/el/i18n/locales/index.js



/* harmony default export */ var locales = __webpack_exports__["a"] = ({
  en_US: en_US,
  fr_FR: fr_FR,
  ko_KR: ko_KR
});

/***/ }),
/* 79 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorViewEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ColorViewEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ColorViewEditor, _EditorElement);

  var _super = _createSuper(ColorViewEditor);

  function ColorViewEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ColorViewEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ColorViewEditor, [{
    key: "initState",
    value: function initState() {
      return {
        label: this.props.label,
        value: this.props.value || 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt);
      this.modifyColor();
    }
  }, {
    key: "updateEndData",
    value: function updateEndData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt);
      this.modifyEndColor();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.changeColor(value);
    }
  }, {
    key: "modifyColor",
    value: function modifyColor() {
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: "modifyEndColor",
    value: function modifyEndColor() {
      this.parent.trigger(this.props.onchangeend, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: "changeColor",
    value: function changeColor(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refs.$miniView.cssText("background-color: ".concat(this.state.value));
      this.refs.$colorCode.val(this.state.value);
    }
  }, {
    key: "template",
    value: function template() {
      var label = this.state.label;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='color-view-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "            \n                <div class='color-code' ref=\"$container\">\n                    <div class='preview' ref='$preview'>\n                        <div class='mini-view'>\n                            <div class='color-view' style=\"background-color: ").concat(this.state.value, "\" ref='$miniView'></div>\n                        </div>\n                    </div>                \n                    <input type=\"text\" ref='$colorCode' value='").concat(this.state.value, "' tabIndex=\"1\" />\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BIND"])('$miniView'),
    value: function value() {
      return {
        style: {
          'background-color': this.state.value
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BIND"])('$colorCode'),
    value: function value() {
      return {
        value: this.state.value
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["FOCUS"])('$colorCode'),
    value: function value(e) {
      this.refs.$container.addClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BLUR"])('$colorCode'),
    value: function value(e) {
      this.refs.$container.removeClass('focused');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])("$preview"),
    value: function value(e) {
      this.viewColorPicker();
    }
  }, {
    key: "viewColorPicker",
    value: function viewColorPicker() {
      this.emit("showColorPickerPopup", {
        target: this,
        changeEvent: 'changeColorViewEditor',
        changeEndEvent: 'changeEndColorViewEditor',
        color: this.state.value
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$remove'),
    value: function value(e) {
      this.updateData({
        value: ''
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["INPUT"])("$el .color-code input"),
    value: function value(e) {
      var color = e.$dt.value;
      this.refs.$miniView.cssText("background-color: ".concat(color));
      this.updateData({
        value: color
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])("changeColorViewEditor"),
    value: function value(color) {
      this.updateData({
        value: color
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])("changeEndColorViewEditor"),
    value: function value(color) {
      this.updateEndData({
        value: color
      });
    }
  }]);

  return ColorViewEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_8__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_7__[/* registElement */ "a"])({
  ColorViewEditor: ColorViewEditor
});

/***/ }),
/* 80 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/editor/items/Item.js
var Item = __webpack_require__(35);

// EXTERNAL MODULE: ./src/el/editor/manager/RendererManager.js
var RendererManager = __webpack_require__(83);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./src/el/editor/renderer/HTMLRenderer/DomRender.js + 1 modules
var DomRender = __webpack_require__(62);

// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGRender.js







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGRender_SVGRender = /*#__PURE__*/function (_DomRender) {
  inherits_default()(SVGRender, _DomRender);

  var _super = _createSuper(SVGRender);

  function SVGRender() {
    classCallCheck_default()(this, SVGRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGRender, [{
    key: "toDefaultCSS",
    value: function toDefaultCSS(item) {
      return _objectSpread({
        overflow: 'visible'
      }, this.toKeyListCSS(item, ['font-size', 'font-stretch', 'line-height', 'font-weight', 'font-family', 'font-style', 'text-align', 'text-transform', 'text-decoration', 'letter-spacing', 'word-spacing', 'text-indent', 'background-color', 'border-radius', 'transform-style']));
    }
    /**
     * SVG 가 CSS 로써 가질 수 있는 값들을 정의한다. 
     * 
     * @param {Item} item 
     */

  }, {
    key: "toCSS",
    value: function toCSS(item) {
      var css = Object.assign({}, this.toVariableCSS(item), this.toDefaultCSS(item), this.toClipPathCSS(item), this.toWebkitCSS(item), this.toTextClipCSS(item), this.toTransformCSS(item), this.toLayoutItemCSS(item), this.toBackgroundImageCSS(item));
      delete css.left;
      delete css.top;
      delete css.width;
      delete css.height;
      delete css.position;
      return css;
    }
    /**
     * css 속성 중에  svg attribute 로 전환되는 리스트를 객체로 리턴
     * 
     * @param {Item} item 
     */

  }, {
    key: "toSVGAttribute",
    value: function toSVGAttribute(item) {
      return _objectSpread(_objectSpread({}, this.toDefaultCSS(item)), this.toKeyListCSS(item, ['stroke-width', 'stroke-linecap', 'stroke-linejoin', 'stroke-dasharray', 'stroke-dashoffset', 'fill-opacity', 'fill-rule', 'text-anchor']));
    }
    /**
     * 
     * @param {Item} item 
     * @param {Function} callback 
     */

  }, {
    key: "wrappedRender",
    value: function wrappedRender(item, callback) {
      var id = item.id,
          x = item.x,
          y = item.y,
          width = item.width,
          height = item.height,
          itemType = item.itemType;
      return (
        /*html*/
        "\n\n            <svg class='svg-element-item ".concat(itemType, "'\n                xmlns=\"http://www.w3.org/2000/svg\"\n                data-id=\"").concat(id, "\"\n                x=\"").concat(x.value, "\"\n                y=\"").concat(y.value, "\"\n                width=\"").concat(width.value, "\"\n                height=\"").concat(height.value, "\"\n                overflow=\"visible\"\n            >\n                ").concat(this.toDefString(item), "\n                ").concat(Object(func["isFunction"])(callback) && callback(), "\n            </svg>\n        ")
      );
    }
    /**
     * 
     * @param {Item} item 
     * @param {SVGRenderer} renderer 
     */

  }, {
    key: "render",
    value: function render(item, renderer) {
      var width = item.width,
          height = item.height,
          elementType = item.elementType;
      var tagName = elementType || 'div';
      var css = this.toCSS(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n    <foreignObject \n        width=\"".concat(width.value, "\"\n        height=\"").concat(height.value, "\"\n        overflow=\"visible\"\n    >\n        <").concat(tagName, " xmlns=\"http://www.w3.org/1999/xhtml\" style=\"").concat(Object(func["CSS_TO_STRING"])(css), ";width:100%;height:100%;\"></").concat(tagName, ">\n    </foreignObject>    \n    ").concat(item.layers.map(function (it) {
            return renderer.render(it, renderer);
          }).join(''), "\n            ")
        );
      });
    }
  }]);

  return SVGRender;
}(DomRender["a" /* default */]);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/ArtBoardRender.js






function ArtBoardRender_createSuper(Derived) { var hasNativeReflectConstruct = ArtBoardRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ArtBoardRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ArtBoardRender_ArtBoardRender = /*#__PURE__*/function (_SVGRender) {
  inherits_default()(ArtBoardRender, _SVGRender);

  var _super = ArtBoardRender_createSuper(ArtBoardRender);

  function ArtBoardRender() {
    classCallCheck_default()(this, ArtBoardRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ArtBoardRender, [{
    key: "toCSS",
    value: function toCSS(item) {
      var css = Object.assign({}, this.toDefaultCSS(item), this.toClipPathCSS(item), this.toWebkitCSS(item), this.toTextClipCSS(item), this.toBackgroundImageCSS(item));
      delete css.left;
      delete css.top;
      delete css.width;
      delete css.height;
      delete css.position;
      return css;
    }
    /**
     * 
     * @param {Item} item 
     * @param {SVGRenderer} renderer 
     */

  }, {
    key: "render",
    value: function render(item, renderer) {
      var encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var x = item.x,
          y = item.y,
          width = item.width,
          height = item.height;
      var css = this.toCSS(item);
      return (
        /*html*/
        "\n".concat(encoding ? "<?xml version=\"1.0\"?>" : '', "\n<svg \n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"").concat(width.value, "\"\n    height=\"").concat(height.value, "\"\n    viewBox=\"0 0 ").concat(width.value, " ").concat(height.value, "\"\n    style=\"").concat(Object(func["CSS_TO_STRING"])(css), "\"\n>\n    ").concat(this.toDefString(item), "\n    ").concat(item.layers.map(function (it) {
          return renderer.render(it, renderer);
        }).join(''), "\n</svg>      \n        ")
      );
    }
  }]);

  return ArtBoardRender;
}(SVGRender_SVGRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGLayerRender.js





function SVGLayerRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGLayerRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGLayerRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var SVGLayerRender_SVGLayerRender = /*#__PURE__*/function (_SVGRender) {
  inherits_default()(SVGLayerRender, _SVGRender);

  var _super = SVGLayerRender_createSuper(SVGLayerRender);

  function SVGLayerRender() {
    classCallCheck_default()(this, SVGLayerRender);

    return _super.apply(this, arguments);
  }

  return SVGLayerRender;
}(SVGRender_SVGRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/CircleRender.js





function CircleRender_createSuper(Derived) { var hasNativeReflectConstruct = CircleRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CircleRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var CircleRender_CircleRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(CircleRender, _SVGLayerRender);

  var _super = CircleRender_createSuper(CircleRender);

  function CircleRender() {
    classCallCheck_default()(this, CircleRender);

    return _super.apply(this, arguments);
  }

  return CircleRender;
}(SVGLayerRender_SVGLayerRender);


// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/IFrameRender.js







function IFrameRender_createSuper(Derived) { var hasNativeReflectConstruct = IFrameRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function IFrameRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var IFrameRender_IFrameRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(IFrameRender, _SVGLayerRender);

  var _super = IFrameRender_createSuper(IFrameRender);

  function IFrameRender() {
    classCallCheck_default()(this, IFrameRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(IFrameRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var $iframe = currentElement.$("iframe");

      if ($iframe) {
        $iframe.attr('src', item.url || 'about:blank');
      }

      get_default()(getPrototypeOf_default()(IFrameRender.prototype), "update", this).call(this, item, currentElement);
    }
    /**
     * 
     * @param {*} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var width = item.width,
          height = item.height,
          id = item.id,
          _item$url = item.url,
          url = _item$url === void 0 ? 'about:blank' : _item$url;
      var css = this.toCSS(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n  <foreignObject\n      width=\"".concat(width.value, "\"\n      height=\"").concat(height.value, "\"\n  >\n      <iframe \n          xmlns=\"http://www.w3.org/1999/xhtml\"\n          width=\"100%\" \n          height=\"100%\" \n          style=\"border:0px;width:100%;height:100%;pointer-events:none; ").concat(Object(func["CSS_TO_STRING"])(css), "\" \n          src=\"").concat(url, "\"\n      ></iframe>\n  </foreignObject>              \n          ")
        );
      });
    }
  }]);

  return IFrameRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/ImageRender.js







function ImageRender_createSuper(Derived) { var hasNativeReflectConstruct = ImageRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ImageRender_ImageRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(ImageRender, _SVGLayerRender);

  var _super = ImageRender_createSuper(ImageRender);

  function ImageRender() {
    classCallCheck_default()(this, ImageRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageRender, [{
    key: "getUrl",
    value:
    /**
     * 
     * resource url 얻어오기 
     * 
     * @param {Item} item 
     */
    function getUrl(item) {
      var src = item.src;
      var project = item.project;
      return project.getImageValueById(src);
    }
    /**
     * 
     * @param {*} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var _this = this;

      var width = item.width,
          height = item.height;
      var css = this.toCSS(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n            <foreignObject\n                width=\"".concat(width.value, "\"\n                height=\"").concat(height.value, "\"\n            >\n                <div xmlns=\"http://www.w3.org/1999/xhtml\">\n                    <img src='").concat(_this.getUrl(item), "' style=\"width:100%;height:100%; ").concat(Object(func["CSS_TO_STRING"])(css), "\"  />\n                </div>\n            </foreignObject>              \n          ")
        );
      });
    }
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      var $image = currentElement.$('img');

      if ($image) {
        $image.attr('src', this.getUrl(item));
      }

      get_default()(getPrototypeOf_default()(ImageRender.prototype), "update", this).call(this, item, currentElement);
    }
  }]);

  return ImageRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/ProjectRender.js






function ProjectRender_createSuper(Derived) { var hasNativeReflectConstruct = ProjectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var ProjectRender_ProjectRender = /*#__PURE__*/function (_SVGRender) {
  inherits_default()(ProjectRender, _SVGRender);

  var _super = ProjectRender_createSuper(ProjectRender);

  function ProjectRender() {
    classCallCheck_default()(this, ProjectRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectRender, [{
    key: "render",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {HTMLRenderer} renderer 
     */
    function render(item, renderer) {
      return item.artboards.map(function (it) {
        return renderer.render(it, renderer);
      });
    }
  }]);

  return ProjectRender;
}(SVGRender_SVGRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/RectRender.js





function RectRender_createSuper(Derived) { var hasNativeReflectConstruct = RectRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RectRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var RectRender_RectRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(RectRender, _SVGLayerRender);

  var _super = RectRender_createSuper(RectRender);

  function RectRender() {
    classCallCheck_default()(this, RectRender);

    return _super.apply(this, arguments);
  }

  return RectRender;
}(SVGLayerRender_SVGLayerRender);


// EXTERNAL MODULE: ./src/el/base/Color.js + 2 modules
var Color = __webpack_require__(26);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFill.js + 3 modules
var SVGFill = __webpack_require__(42);

// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGItemRender.js






function SVGItemRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGItemRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGItemRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SVGItemRender_SVGItemRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(SVGItemRender, _SVGLayerRender);

  var _super = SVGItemRender_createSuper(SVGItemRender);

  function SVGItemRender() {
    classCallCheck_default()(this, SVGItemRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGItemRender, [{
    key: "updateDefString",
    value:
    /**
     * Def 업데이트 하기 
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function updateDefString(item, currentElement) {
      var $defs = currentElement.$('defs');

      if ($defs) {
        $defs.html(this.toDefInnerString(item));
      } else {
        var str = this.toDefString(item).trim();
        currentElement.prepend(Dom["a" /* default */].createByHTML(str));
      }
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefInnerString",
    value: function toDefInnerString(item) {
      return (
        /*html*/
        "\n            ".concat(this.toFillSVG(item), "\n            ").concat(this.toStrokeSVG(item), "\n        ")
      );
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "toDefString",
    value: function toDefString(item) {
      var str = this.toDefInnerString(item).trim();
      return (
        /*html*/
        "\n            <defs>\n            ".concat(str, "\n            </defs>\n        ")
      );
    }
  }, {
    key: "fillId",
    value: function fillId(item) {
      return this.getInnerId(item, 'fill');
    }
  }, {
    key: "strokeId",
    value: function strokeId(item) {
      return this.getInnerId(item, 'stroke');
    }
  }, {
    key: "toFillSVG",
    value: function toFillSVG(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.fill || 'transparent').toSVGString(this.fillId(item));
    }
  }, {
    key: "toStrokeSVG",
    value: function toStrokeSVG(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.stroke || 'black').toSVGString(this.strokeId(item));
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.fill || 'transparent').toFillValue(this.fillId(item));
    }
  }, {
    key: "toFillOpacityValue",
    value: function toFillOpacityValue(item) {
      return Color["a" /* default */].parse(item.fill || 'transparent').a;
    }
  }, {
    key: "toStrokeValue",
    value: function toStrokeValue(item) {
      return SVGFill["a" /* SVGFill */].parseImage(item.stroke || 'black').toFillValue(this.strokeId(item));
    }
  }, {
    key: "toFilterValue",
    value: function toFilterValue(item) {
      if (!item.svgfilter) {
        return '';
      }

      return "url(#".concat(item.svgfilter, ")");
    }
    /**
     * @override
     * @param {Item} item
     */

  }, {
    key: "toLayoutCSS",
    value: function toLayoutCSS(item) {
      return {};
    }
  }]);

  return SVGItemRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGPathRender.js







function SVGPathRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGPathRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGPathRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGPathRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGPathRender_SVGPathRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGPathRender, _SVGItemRender);

  var _super = SVGPathRender_createSuper(SVGPathRender);

  function SVGPathRender() {
    classCallCheck_default()(this, SVGPathRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGPathRender, [{
    key: "update",
    value:
    /**
     * @param {Item} item
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      if (!currentElement) return;
      var $path = currentElement.$('path');

      if ($path) {
        $path.setAttr({
          'd': item.d,
          'filter': this.toFilterValue(item),
          'fill': this.toFillValue(item),
          'stroke': this.toStrokeValue(item)
        });
        item.totalLength = $path.totalLength;
      }

      this.updateDefString(item, currentElement);
    }
  }, {
    key: "render",
    value: function render(item) {
      var _this = this;

      var d = item.d;
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n        <path ".concat(Object(func["OBJECT_TO_PROPERTY"])(SVGPathRender_objectSpread(SVGPathRender_objectSpread({
            'class': 'svg-path-item',
            d: d,
            filter: _this.toFilterValue(item),
            fill: _this.toFillValue(item),
            stroke: _this.toStrokeValue(item)
          }, _this.toSVGAttribute(item)), {}, {
            style: Object(func["CSS_TO_STRING"])(_this.toCSS(item))
          })), " />\n    ")
        );
      });
    }
  }]);

  return SVGPathRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGTextPathRender.js







function SVGTextPathRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextPathRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextPathRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextPathRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextPathRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextPathRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextPathRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGTextPathRender_SVGTextPathRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextPathRender, _SVGItemRender);

  var _super = SVGTextPathRender_createSuper(SVGTextPathRender);

  function SVGTextPathRender() {
    classCallCheck_default()(this, SVGTextPathRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextPathRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var $path = currentElement.$('path');

      if ($path) {
        $path.attr('d', item.d);
      }

      var $textPath = currentElement.$('textPath');

      if ($textPath) {
        $textPath.text(item.text);
        $textPath.setAttr({
          filter: this.toFilterValue(item),
          fill: this.toFillValue(item),
          stroke: this.toStrokeValue(item),
          textLength: item.textLength,
          lengthAdjust: item.lengthAdjust,
          startOffset: item.startOffset
        });
      }

      this.updateDefString(item, currentElement);
      item.totalLength = $path.totalLength;
    }
  }, {
    key: "toDefInnerString",
    value: function toDefInnerString(item) {
      return (
        /*html*/
        "\n      ".concat(this.toPathSVG(item), "\n      ").concat(this.toFillSVG(item), "\n      ").concat(this.toStrokeSVG(item), "\n    ")
      );
    }
  }, {
    key: "toPathId",
    value: function toPathId(item) {
      return this.getInnerId(item, 'path');
    }
  }, {
    key: "toPathSVG",
    value: function toPathSVG(item) {
      return (
        /*html*/
        "\n      <path \n        class=\"svg-path-item\"\n        id=\"".concat(this.toPathId(item), "\"\n        d=\"").concat(item.d, "\"\n        fill=\"none\"\n      />\n    ")
      );
    }
  }, {
    key: "render",
    value: function render(item) {
      var _this = this;

      return this.wrappedRender(item, function () {
        var textLength = item.textLength,
            lengthAdjust = item.lengthAdjust,
            startOffset = item.startOffset;
        return (
          /*html*/
          "\n        <textPath ".concat(Object(func["OBJECT_TO_PROPERTY"])(SVGTextPathRender_objectSpread(SVGTextPathRender_objectSpread({
            'xlink:href': "#".concat(_this.toPathId(item)),
            textLength: textLength,
            lengthAdjust: lengthAdjust,
            startOffset: startOffset,
            filter: _this.toFilterValue(item),
            fill: _this.toFillValue(item),
            stroke: _this.toStrokeValue(item)
          }, _this.toSVGAttribute(item)), {}, {
            style: Object(func["CSS_TO_STRING"])(_this.toCSS(item))
          })), " >").concat(item.text, "</textPath>\n      ")
        );
      });
    }
  }]);

  return SVGTextPathRender;
}(SVGItemRender_SVGItemRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/SVGTextRender.js







function SVGTextRender_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextRender_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextRender_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextRender_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextRender_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGTextRender_SVGTextRender = /*#__PURE__*/function (_SVGItemRender) {
  inherits_default()(SVGTextRender, _SVGItemRender);

  var _super = SVGTextRender_createSuper(SVGTextRender);

  function SVGTextRender() {
    classCallCheck_default()(this, SVGTextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var $text = currentElement.$('text');

      if ($text) {
        $text.text(item.text);
        $text.setAttr({
          filter: this.toFilterValue(item),
          fill: this.toFillValue(item),
          stroke: this.toStrokeValue(item),
          textLength: item.textLength,
          lengthAdjust: item.lengthAdjust
        });
      }

      this.updateDefString(item, currentElement);
    }
  }, {
    key: "shapeInsideId",
    value: function shapeInsideId(item) {
      return this.getInnerId(item, 'shape-inside');
    }
  }, {
    key: "render",
    value: function render(item) {
      var _this = this;

      var id = item.id,
          textLength = item.textLength,
          lengthAdjust = item.lengthAdjust;
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n        <text ".concat(Object(func["OBJECT_TO_PROPERTY"])(SVGTextRender_objectSpread(SVGTextRender_objectSpread({
            'class': 'svg-text-item',
            textLength: textLength,
            lengthAdjust: lengthAdjust,
            filter: _this.toFilterValue(item),
            fill: _this.toFillValue(item),
            stroke: _this.toStrokeValue(item)
          }, _this.toSVGAttribute(item)), {}, {
            style: Object(func["CSS_TO_STRING"])(_this.toCSS(item))
          })), " >").concat(item.text, "</text>\n      ")
        );
      });
    }
  }]);

  return SVGTextRender;
}(SVGItemRender_SVGItemRender);


// EXTERNAL MODULE: ./src/el/editor/renderer/template-engine/TemplateEngine.js + 1 modules
var TemplateEngine = __webpack_require__(103);

// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/TemplateRender.js







function TemplateRender_createSuper(Derived) { var hasNativeReflectConstruct = TemplateRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TemplateRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TemplateRender_TemplateRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(TemplateRender, _SVGLayerRender);

  var _super = TemplateRender_createSuper(TemplateRender);

  function TemplateRender() {
    classCallCheck_default()(this, TemplateRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TemplateRender, [{
    key: "update",
    value:
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement 
     */
    function update(item, currentElement) {
      var compiledTemplate = this.compile(item);
      var $innerHTML = currentElement.$(".inner-html"); // TODO: template, engine, params 가 변경 된 시점에  변경 상태를 기록한다. 
      // TODO: 그렇게 해서 변경이 없는 부분은 최대한 다시 그리지 않도록 한다. 

      if ($innerHTML) {
        $innerHTML.updateDiff(compiledTemplate);
      }

      get_default()(getPrototypeOf_default()(TemplateRender.prototype), "update", this).call(this, item, currentElement);
    }
  }, {
    key: "compile",
    value: function compile(item) {
      return TemplateEngine["a" /* TemplateEngine */].compile('dom', item.template, item.params);
    }
    /**
     * 
     * @param {*} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var id = item.id,
          width = item.width,
          height = item.height;
      var compiledTemplate = this.compile(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n            <foreignObject\n                width=\"".concat(width.value, "\"\n                height=\"").concat(height.value, "\"\n            >\n                <div  xmlns=\"http://www.w3.org/1999/xhtml\" style=\"width: 100%;height:100%;\">\n                    <style id=\"style-").concat(id, "\">\n                    [data-id=\"").concat(id, "\"] .inner-html {\n                        width: 100%; \n                        height: 100%;\n                        position:relative;\n                        display:block;\n                        pointer-events: none; \n                    }\n\n                    [data-id=\"").concat(id, "\"] .inner-html > * {\n                        width: 100%; \n                        height: 100%;\n                    }          \n                    </style>\n                    <div class=\"inner-html\">\n                    ").concat(compiledTemplate, "\n                    </div>\n                </div>\n            </foreignObject>              \n          ")
        );
      });
    }
  }]);

  return TemplateRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/TextRender.js







function TextRender_createSuper(Derived) { var hasNativeReflectConstruct = TextRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TextRender_TextRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(TextRender, _SVGLayerRender);

  var _super = TextRender_createSuper(TextRender);

  function TextRender() {
    classCallCheck_default()(this, TextRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextRender, [{
    key: "toCSS",
    value:
    /**
     * 
     * @param {Item} item 
     */
    function toCSS(item) {
      var css = get_default()(getPrototypeOf_default()(TextRender.prototype), "toCSS", this).call(this, item);

      css.margin = css.margin || '0px';
      return css;
    }
    /**
     * 
     * @param {Item} item 
     */

  }, {
    key: "render",
    value: function render(item) {
      var content = item.content,
          width = item.width,
          height = item.height;
      var css = this.toCSS(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n            <foreignObject width=\"".concat(width.value, "\" height=\"").concat(height.value, "\">\n                <p xmlns=\"http://www.w3.org/1999/xhtml\" style=\"").concat(Object(func["CSS_TO_STRING"])(css), "\">").concat(content, "</p>\n            </foreignObject>              \n          ")
        );
      });
    }
    /**
     * 
     * @param {Item} item 
     * @param {Dom} currentElement
     */

  }, {
    key: "update",
    value: function update(item, currentElement) {
      var content = item.content;
      currentElement.updateDiff(content);
    }
  }]);

  return TextRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/VideoRender.js






function VideoRender_createSuper(Derived) { var hasNativeReflectConstruct = VideoRender_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoRender_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var VideoRender_VideoRender = /*#__PURE__*/function (_SVGLayerRender) {
  inherits_default()(VideoRender, _SVGLayerRender);

  var _super = VideoRender_createSuper(VideoRender);

  function VideoRender() {
    classCallCheck_default()(this, VideoRender);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoRender, [{
    key: "getUrl",
    value:
    /**
     * 
     * @param {Project} item 
     */
    function getUrl(item) {
      var src = item.src;
      var project = item.project;
      return project.getVideoValueById(src);
    }
    /**
     * 
     * @param {Item} item 
     * @param {SVGRenderer} renderer 
     */

  }, {
    key: "render",
    value: function render(item, renderer) {
      var _this = this;

      var width = item.width,
          height = item.height,
          controls = item.controls,
          muted = item.muted,
          poster = item.poster,
          loop = item.loop,
          crossorigin = item.crossorigin,
          autoplay = item.autoplay;
      var css = this.toCSS(item);
      return this.wrappedRender(item, function () {
        return (
          /*html*/
          "\n            <foreignObject \n                width=\"".concat(width.value, "\"\n                height=\"").concat(height.value, "\"\n                overflow=\"visible\"\n            >\n                <video \n                    xmlns=\"http://www.w3.org/1999/xhtml\"\n                    controls=\"").concat(controls, "\"\n                    src=\"").concat(_this.getUrl(item), "\"\n                    muted=\"").concat(muted, "\"\n                    poster=\"").concat(poster, "\"\n                    loop=\"").concat(loop, "\"\n                    crossorigin=\"").concat(crossorigin, "\"\n                    autoplay=\"").concat(autoplay, "\"\n                    style=\"").concat(Object(func["CSS_TO_STRING"])(css), ";width:100%;height:100%;\"></video>\n            </foreignObject>    \n            ")
        );
      });
    }
  }]);

  return VideoRender;
}(SVGLayerRender_SVGLayerRender);


// CONCATENATED MODULE: ./src/el/editor/renderer/SVGRenderer/index.js















var renderers = {
  'project': new ProjectRender_ProjectRender(),
  'artboard': new ArtBoardRender_ArtBoardRender(),
  'rect': new RectRender_RectRender(),
  'circle': new CircleRender_CircleRender(),
  'image': new ImageRender_ImageRender(),
  'template': new TemplateRender_TemplateRender(),
  'iframe': new IFrameRender_IFrameRender(),
  'video': new VideoRender_VideoRender(),
  'text': new TextRender_TextRender(),
  'svg-path': new SVGPathRender_SVGPathRender(),
  'svg-text': new SVGTextRender_SVGTextRender(),
  'svg-textpath': new SVGTextPathRender_SVGTextPathRender()
};
/* harmony default export */ var SVGRenderer = __webpack_exports__["a"] = ({
  getDefaultRendererInstance: function getDefaultRendererInstance() {
    return renderers['rect'];
  },
  getRendererInstance: function getRendererInstance(item) {
    return renderers[item.itemType] || RendererManager["a" /* RendererManager */].getRendererInstance('svg', item.itemType) || this.getDefaultRendererInstance() || item;
  },

  /**
   * 
   * @param {Item} item 
   */
  render: function render(item, renderer) {
    var encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    if (!item) return '';
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.render(item, renderer || this);
    }
  },

  /**
   * 
   * @param {Item} item 
   */
  toCSS: function toCSS(item) {
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.toCSS(item);
    }
  },

  /**
   * 
   * @param {Item} item 
   */
  toTransformCSS: function toTransformCSS(item) {
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.toTransformCSS(item);
    }
  },

  /**
   * 
   * 렌더링 될 style 태그를 리턴한다. 
   * 
   * @param {Item} item 
   */
  toStyle: function toStyle(item, renderer) {
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.toStyle(item, renderer || this);
    }
  },

  /**
   * 
   * @param {Item} item 
   * @param {Dom} currentElement
   */
  update: function update(item, currentElement) {
    var currentRenderer = this.getRendererInstance(item);

    if (currentRenderer) {
      return currentRenderer.update(item, currentElement);
    }
  },

  /**
   * 코드 뷰용 HTML 코드를 렌더링 한다. 
   * @param {Item} item 
   */
  codeview: function codeview(item) {
    if (!item) {
      return '';
    }

    var svgCode = this.render(item);
    svgCode = svgCode.replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
    return (
      /*html*/
      "\n          <div class='svg-code'>\n            ".concat(svgCode &&
      /*html*/
      "<div><pre title='SVG'>".concat(svgCode, "</pre></div>"), "\n          </div>\n        ")
    );
  }
});

/***/ }),
/* 81 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageResource; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(34);







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var ImageResource = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(ImageResource, _Property);

  var _super = _createSuper(ImageResource);

  function ImageResource() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ImageResource);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ImageResource, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _objectSpread({
        itemType: "image-resource",
        type: "image"
      }, obj);
    }
  }, {
    key: "isGradient",
    value: function isGradient() {
      return false;
    }
  }, {
    key: "isLinear",
    value: function isLinear() {
      return false;
    }
  }, {
    key: "isRadial",
    value: function isRadial() {
      return false;
    }
  }, {
    key: "isConic",
    value: function isConic() {
      return false;
    }
  }, {
    key: "isStatic",
    value: function isStatic() {
      return false;
    }
  }, {
    key: "isImage",
    value: function isImage() {
      return false;
    }
  }, {
    key: "hasAngle",
    value: function hasAngle() {
      return false;
    }
  }, {
    key: "isUrl",
    value: function isUrl() {
      return false;
    }
  }, {
    key: "isFile",
    value: function isFile() {
      return false;
    }
  }, {
    key: "isAttribute",
    value: function isAttribute() {
      return true;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "none";
    }
  }]);

  return ImageResource;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_6__[/* Property */ "a"]);

/***/ }),
/* 82 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGItem; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _Layer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(47);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var SVGItem = /*#__PURE__*/function (_Layer) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(SVGItem, _Layer);

  var _super = _createSuper(SVGItem);

  function SVGItem() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SVGItem);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SVGItem, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGItem.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: 'svg',
        name: "New SVG",
        elementType: 'svg',
        overflow: 'visible',
        stroke: 'black',
        'stroke-width': 1,
        'svgfilter': '',
        fill: 'transparent',
        'fill-rule': '',
        'fill-opacity': '',
        'stroke-linecap': '',
        'stroke-linejoin': '',
        'stroke-dashoffset': 0,
        'stroke-dasharray': ' ',
        'text-anchor': 'start'
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGItem.prototype), "toCloneObject", this).call(this)), this.attrs('overflow', 'stroke', 'stroke-width', 'svgfilter', 'fill', 'fill-rule', 'fill-opacity', 'stroke-linecap', 'stroke-linejoin', 'stroke-dashoffset', 'stroke-dasharray', 'text-anchor'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "SVG";
    }
  }, {
    key: "isSVG",
    value: function isSVG() {
      return true;
    }
  }]);

  return SVGItem;
}(_Layer__WEBPACK_IMPORTED_MODULE_7__[/* Layer */ "a"]);

/***/ }),
/* 83 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return RendererManager; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);


var RendererManager = new ( /*#__PURE__*/function () {
  function _class() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, _class);

    this.renderers = {};
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(_class, [{
    key: "getRenderType",
    value: function getRenderType(rendererType) {
      if (!this.renderers[rendererType]) {
        this.renderers[rendererType] = {};
      }

      return this.renderers[rendererType];
    }
  }, {
    key: "registerRenderer",
    value: function registerRenderer(rendererType, name, rendererInstance) {
      var typedRenderer = this.getRenderType(rendererType);
      if (typedRenderer[name]) throw new Error("It has duplicated renderer name. " + name);
      typedRenderer[name] = rendererInstance;
    }
  }, {
    key: "getRendererInstance",
    value: function getRendererInstance(rendererType, name) {
      var typedRenderer = this.getRenderType(rendererType);
      return typedRenderer[name];
    }
  }]);

  return _class;
}())();

/***/ }),
/* 84 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGGradient; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _Gradient__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(41);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var SVGGradient = /*#__PURE__*/function (_Gradient) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(SVGGradient, _Gradient);

  var _super = _createSuper(SVGGradient);

  function SVGGradient() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, SVGGradient);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(SVGGradient, [{
    key: "toString",
    value: function toString() {
      // 이건 데이타로서의 문자열 , 기본적으로  css gradient 와 유사 
      return '';
    }
  }, {
    key: "toSVGString",
    value: function toSVGString(id) {
      // 이건 def 에 들어갈 태그 
      return '';
    }
  }, {
    key: "toFillValue",
    value: function toFillValue(id) {
      // 이건 실제 fill, stroke 에 적용될 속성 값  형식 
      return '';
    }
  }]);

  return SVGGradient;
}(_Gradient__WEBPACK_IMPORTED_MODULE_5__[/* Gradient */ "a"]);

/***/ }),
/* 85 */
/***/ (function(module, exports) {

function _taggedTemplateLiteral(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
}

module.exports = _taggedTemplateLiteral;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 86 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/el/editor/shortcuts/clipboard.copy.js
/* harmony default export */ var clipboard_copy = ({
  category: 'Edit',
  key: 'cmd+c',
  command: 'clipboard.copy',
  description: 'Copy objects',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/clipboard.paste.js
/* harmony default export */ var clipboard_paste = ({
  category: 'Edit',
  key: 'cmd+v',
  win: 'ctrl+v',
  command: 'clipboard.paste',
  description: 'Paste selected objects',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.shift.left.js
/* harmony default export */ var item_move_shift_left = ({
  category: 'Layer',
  key: 'Shift+ArrowLeft',
  command: 'moveLayer',
  description: 'move 10px to left',
  args: [-10, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.key.left.js
/* harmony default export */ var item_move_key_left = ({
  category: 'Layer',
  key: 'ArrowLeft',
  command: 'moveLayer',
  description: 'move 1px to left',
  args: [-1, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.key.right.js
/* harmony default export */ var item_move_key_right = ({
  category: 'Layer',
  key: 'ArrowRight',
  command: 'moveLayer',
  description: 'move 1px to right',
  args: [1, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.key.down.js
/* harmony default export */ var item_move_key_down = ({
  category: 'Layer',
  key: 'ArrowDown',
  command: 'moveLayer',
  description: 'move 1px to down',
  args: [0, 1],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.key.up.js
/* harmony default export */ var item_move_key_up = ({
  category: 'Layer',
  key: 'ArrowUp',
  command: 'moveLayer',
  description: 'move 1px to up',
  args: [0, -1],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.shift.down.js
/* harmony default export */ var item_move_shift_down = ({
  category: 'Layer',
  key: 'Shift+ArrowDown',
  command: 'moveLayer',
  description: 'move 10px to down',
  args: [0, 10],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.shift.right.js
/* harmony default export */ var item_move_shift_right = ({
  category: 'Layer',
  key: 'Shift+ArrowRight',
  command: 'moveLayer',
  description: 'move 10px to right',
  args: [10, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.shift.up.js
/* harmony default export */ var item_move_shift_up = ({
  category: 'Layer',
  key: 'Shift+ArrowUp',
  command: 'moveLayer',
  description: 'move 10px to up',
  args: [0, -10],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.alt.left.js
/* harmony default export */ var item_move_alt_left = ({
  category: 'Layer',
  key: 'Alt+ArrowLeft',
  command: 'moveLayer',
  description: 'move 5px to left',
  args: [-5, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.alt.down.js
/* harmony default export */ var item_move_alt_down = ({
  category: 'Layer',
  key: 'Alt+ArrowDown',
  command: 'moveLayer',
  description: 'move 5px to down',
  args: [0, 5],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.alt.right.js
/* harmony default export */ var item_move_alt_right = ({
  category: 'Layer',
  key: 'Alt+ArrowRight',
  command: 'moveLayer',
  description: 'move 5px to right',
  args: [5, 0],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.alt.up.js
/* harmony default export */ var item_move_alt_up = ({
  category: 'Layer',
  key: 'Alt+ArrowUp',
  command: 'moveLayer',
  description: 'move 5px to up',
  args: [0, -5],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/removeLayer.js
/* harmony default export */ var removeLayer = ({
  category: 'Layer',
  key: 'Backspace',
  command: 'history.removeLayer',
  description: 'Delete selected items',
  args: ['Delete selected items'],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.key.down.js
/* harmony default export */ var segment_move_key_down = ({
  category: 'Path',
  key: 'ArrowDown',
  command: 'segment.move.down',
  description: 'move 1px to down',
  args: [{
    dy: 1
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.key.up.js
/* harmony default export */ var segment_move_key_up = ({
  category: 'Path',
  key: 'ArrowUp',
  command: 'segment.move.up',
  description: 'move 1px to up',
  args: [{
    dy: 1
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.key.right.js
/* harmony default export */ var segment_move_key_right = ({
  category: 'Path',
  key: 'ArrowRight',
  command: 'segment.move.right',
  description: 'move 1px to right',
  args: [{
    dx: 1
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.key.left.js
/* harmony default export */ var segment_move_key_left = ({
  category: 'Path',
  key: 'ArrowLeft',
  command: 'segment.move.left',
  description: 'move 1px to left',
  args: [{
    dx: 1
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.shift.down.js
/* harmony default export */ var segment_move_shift_down = ({
  category: 'Path',
  key: 'Shift+ArrowDown',
  command: 'segment.move.down',
  description: 'move 10px to down',
  args: [{
    dy: 10
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.shift.up.js
/* harmony default export */ var segment_move_shift_up = ({
  category: 'Path',
  key: 'Shift+ArrowUp',
  command: 'segment.move.up',
  description: 'move 10px to up',
  args: [{
    dy: 10
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.shift.left.js
/* harmony default export */ var segment_move_shift_left = ({
  category: 'Path',
  key: 'Shift+ArrowLeft',
  command: 'segment.move.left',
  description: 'move 10px to left',
  args: [{
    dx: 10
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.alt.down.js
/* harmony default export */ var segment_move_alt_down = ({
  category: 'Path',
  key: 'Alt+ArrowDown',
  command: 'segment.move.down',
  description: 'move 5px to down',
  args: [{
    dy: 5
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.alt.up.js
/* harmony default export */ var segment_move_alt_up = ({
  category: 'Path',
  key: 'Alt+ArrowUp',
  command: 'segment.move.up',
  description: 'move 5px to up ',
  args: [{
    dy: 5
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.alt.left.js
/* harmony default export */ var segment_move_alt_left = ({
  category: 'Path',
  key: 'Alt+ArrowLeft',
  command: 'segment.move.left',
  description: 'move 5px to left',
  args: [{
    dx: 5
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.alt.right.js
/* harmony default export */ var segment_move_alt_right = ({
  category: 'Path',
  key: 'Alt+ArrowRight',
  command: 'segment.move.right',
  description: 'move 5px to right',
  args: [{
    dx: 5
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.move.shift.right.js
/* harmony default export */ var segment_move_shift_right = ({
  category: 'Path',
  key: 'Shift+ArrowRight',
  command: 'segment.move.right',
  description: 'move 10px to right',
  args: [{
    dx: 10
  }],
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/segment.delete.js
/* harmony default export */ var segment_delete = ({
  category: 'Path',
  key: 'Backspace',
  command: 'segment.delete',
  description: 'Delete selected segment',
  when: 'PathEditorView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/scale.minus.js
/* harmony default export */ var scale_minus = ({
  category: 'Tool',
  key: 'Minus',
  command: 'scale.minus',
  description: 'Minus scale',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/scale.plus.js
/* harmony default export */ var scale_plus = ({
  category: 'Tool',
  key: 'Equal',
  command: 'scale.plus',
  description: 'Plus scale',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.rect.js
/* harmony default export */ var add_rect = ({
  category: 'Tool',
  key: 'r',
  command: 'addLayerView',
  args: ['rect'],
  description: 'Add rect layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/select.view.js
/* harmony default export */ var select_view = ({
  category: 'Tool',
  key: 'v',
  command: 'addLayerView',
  args: 'select',
  description: 'Selection'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.rect.m.js
/* harmony default export */ var add_rect_m = ({
  category: 'Tool',
  key: 'm',
  command: 'addLayerView',
  args: ['rect'],
  description: 'Add rect layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.circle.js
/* harmony default export */ var add_circle = ({
  category: 'Tool',
  key: 'o',
  command: 'addLayerView',
  args: ['circle'],
  description: 'Add circle layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.circle.l.js
/* harmony default export */ var add_circle_l = ({
  category: 'Tool',
  key: 'l',
  command: 'addLayerView',
  args: ['circle'],
  description: 'Add circle layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.text.js
/* harmony default export */ var add_text = ({
  category: 'Tool',
  key: 't',
  command: 'addLayerView',
  args: ['text'],
  description: 'Add text layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.path.js
/* harmony default export */ var add_path = ({
  category: 'Tool',
  key: 'p',
  command: 'addLayerView',
  args: ['path'],
  description: 'Add SVG Path layer'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.brush.js
/* harmony default export */ var add_brush = ({
  category: 'Tool',
  key: 'b',
  command: 'addLayerView',
  args: ['brush'],
  description: 'Draw SVG Path'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.depth.up.js
/* harmony default export */ var item_move_depth_up = ({
  category: 'Layer',
  key: 'ctrl+]',
  command: 'item.move.depth.up',
  description: 'move layer to above',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/item.move.depth.down.js
/* harmony default export */ var item_move_depth_down = ({
  category: 'Layer',
  key: 'ctrl+[',
  command: 'item.move.depth.down',
  description: 'move layer to below',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/removeLayerByDeleteKey.js
/* harmony default export */ var removeLayerByDeleteKey = ({
  category: 'Layer',
  key: 'Delete',
  command: 'history.removeLayer',
  description: 'Delete selected items',
  args: ['Delete selected items'],
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/group.item.js
/* harmony default export */ var group_item = ({
  category: 'Group',
  key: 'cmd+g',
  win: 'ctrl+g',
  command: 'group.item',
  description: 'Grouping selected items',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/ungroup.item.js
/* harmony default export */ var ungroup_item = ({
  category: 'Group',
  key: 'shift+cmd+g',
  win: 'shift+ctrl+g',
  command: 'ungroup.item',
  description: 'Ungrouping selected group layer',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/history.undo.js
/* harmony default export */ var history_undo = ({
  category: 'History',
  key: 'cmd+z',
  win: 'ctrl+z',
  command: 'history.undo',
  description: 'undoing in history',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/history.redo.js
/* harmony default export */ var history_redo = ({
  category: 'History',
  key: 'cmd+shift+z',
  win: 'ctrl+shift+z',
  command: 'history.redo',
  description: 'redoing in history',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/add.artboard.js
/* harmony default export */ var add_artboard = ({
  category: 'Tool',
  key: 'a',
  command: 'addLayerView',
  args: ['artboard'],
  description: 'Add ArtBoard',
  when: 'CanvasView'
});
// CONCATENATED MODULE: ./src/el/editor/shortcuts/index.js














































/* harmony default export */ var shortcuts = __webpack_exports__["a"] = ([// history 
history_undo, history_redo, // add layer 
select_view, add_artboard, add_rect, add_rect_m, add_circle, add_circle_l, add_text, add_path, add_brush, group_item, ungroup_item, // move segment by arrow key 
segment_move_key_down, segment_move_key_up, segment_move_key_right, segment_move_key_left, segment_move_shift_down, segment_move_shift_up, segment_move_shift_left, segment_move_shift_right, segment_move_alt_down, segment_move_alt_up, segment_move_alt_left, segment_move_alt_right, segment_delete, // move item by arrow key 
item_move_key_left, item_move_key_right, item_move_key_down, item_move_key_up, // move item by shift key
item_move_shift_down, item_move_shift_right, item_move_shift_up, item_move_shift_left, // move item by alt key
item_move_alt_left, item_move_alt_down, item_move_alt_right, item_move_alt_up, item_move_depth_up, item_move_depth_down, // 
removeLayer, removeLayerByDeleteKey, // zoom
scale_minus, scale_plus, // clipboard 
clipboard_copy, clipboard_paste]);

/***/ }),
/* 87 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export RESIZE_WINDOW */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ADD_BODY_MOUSEMOVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ADD_BODY_MOUSEUP; });
/* event trigger */
var RESIZE_WINDOW = 'resize/window';
var ADD_BODY_MOUSEMOVE = 'add/body/mousemove';
var ADD_BODY_MOUSEUP = 'add/body/mouseup';

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return os; });
var osInfo = {
  name: undefined
};
function os() {
  if (osInfo.name === undefined) {
    if (navigator.appVersion.indexOf("Win") != -1) osInfo.name = 'win';else if (navigator.appVersion.indexOf("Mac") != -1) osInfo.name = 'mac';else if (navigator.appVersion.indexOf("X11") != -1) osInfo.name = 'linux';else osInfo.name = "";
  }

  return osInfo.name;
}

/***/ }),
/* 89 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BorderRadius; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);




var BorderRadius = /*#__PURE__*/function () {
  function BorderRadius() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BorderRadius);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BorderRadius, null, [{
    key: "parseStyle",
    value: function parseStyle(str) {
      var obj = {
        isAll: true,
        'border-radius': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].z(),
        'border-top-left-radius': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].z(),
        'border-top-right-radius': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].z(),
        'border-bottom-right-radius': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].z(),
        'border-bottom-left-radius': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].z()
      };
      var temp = {};
      var arr = str.split(' ').filter(function (it) {
        return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_2__[/* Length */ "a"].parse(it);
      });

      if (arr.length === 1) {
        obj.isAll = true;
        obj['border-radius'] = arr[0];
      } else {
        obj.isAll = false;
        obj['border-top-left-radius'] = arr[0];
        obj['border-top-right-radius'] = arr[1];
        obj['border-bottom-right-radius'] = arr[2];
        obj['border-bottom-left-radius'] = arr[3];
      }

      return obj;
    }
  }]);

  return BorderRadius;
}();



/***/ }),
/* 90 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HUEtoRGB", function() { return HUEtoRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HSLtoHSV", function() { return HSLtoHSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HSLtoRGB", function() { return HSLtoRGB; });
/* harmony import */ var _fromRGB__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(49);
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);


function HUEtoRGB(p, q, t) {
  if (t < 0) t += 1;
  if (t > 1) t -= 1;
  if (t < 1 / 6) return p + (q - p) * 6 * t;
  if (t < 1 / 2) return q;
  if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function HSLtoHSV(h, s, l) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        h = _arguments$.h,
        s = _arguments$.s,
        l = _arguments$.l;
  }

  var rgb = HSLtoRGB(h, s, l);
  return Object(_fromRGB__WEBPACK_IMPORTED_MODULE_0__["RGBtoHSV"])(rgb.r, rgb.g, rgb.b);
}
function HSLtoRGB(h, s, l) {
  if (arguments.length == 1) {
    var _arguments$2 = arguments[0],
        h = _arguments$2.h,
        s = _arguments$2.s,
        l = _arguments$2.l;
  }

  var r, g, b;
  h /= 360;
  s /= 100;
  l /= 100;

  if (s == 0) {
    r = g = b = l; // achromatic
  } else {
    var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    var p = 2 * l - q;
    r = HUEtoRGB(p, q, h + 1 / 3);
    g = HUEtoRGB(p, q, h);
    b = HUEtoRGB(p, q, h - 1 / 3);
  }

  return {
    r: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(r * 255),
    g: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(g * 255),
    b: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(b * 255)
  };
}

/***/ }),
/* 91 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Offset; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(34);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_6___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Offset = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_5___default()(Offset, _Property);

  var _super = _createSuper(Offset);

  function Offset() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, Offset);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(Offset, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Offset.prototype), "getDefaultObject", this).call(this, {
        itemType: "offset",
        offset: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].percent(0),
        color: 'rgba(255, 255, 255, 1)',
        properties: []
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Offset.prototype), "toCloneObject", this).call(this)), this.attrs('offset', 'color', 'properties'));
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_4___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_7___default()(Offset.prototype), "convert", this).call(this, json);
      json.offset = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(json.offset);
      return json;
    }
  }, {
    key: "toCSSText",
    value: function toCSSText() {
      return "".concat(this.json.offset, " ").concat(Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["CSS_TO_STRING"])(this.toCSS()));
    }
  }, {
    key: "createProperty",
    value: function createProperty() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addProperty(_objectSpread({
        checked: true,
        value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].z()
      }, data));
    }
  }, {
    key: "addProperty",
    value: function addProperty(property) {
      this.json.properties.push(property);
    }
  }, {
    key: "removeProperty",
    value: function removeProperty(removeIndex) {
      this.json.properties.splice(removeIndex, 1);
    }
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortProperty",
    value: function sortProperty(startIndex, targetIndex) {
      this.sortItem(this.json.properties, startIndex, targetIndex);
    }
  }, {
    key: "updateProperty",
    value: function updateProperty(index) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      Object.assign(this.json.properties[+index], _objectSpread({}, data));
    }
  }, {
    key: "updatePropertyByKey",
    value: function updatePropertyByKey(key) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var arr = this.json.properties;
      var index = -1;

      for (var i = 0, len = arr.length; i < len; i++) {
        if (this.json.properties[i].key === key) {
          index = i;
          break;
        }
      }

      Object.assign(this.json.properties[+index], _objectSpread({}, data));
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      var obj = {};
      this.json.properties.forEach(function (it) {
        obj = _objectSpread(_objectSpread({}, obj), it.toCSS());
      });
      return obj;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.toCSSText();
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new Offset(obj);
    }
  }]);

  return Offset;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_8__[/* Property */ "a"]);

/***/ }),
/* 92 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CubicBezierEditor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(28);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3);
/* harmony import */ var el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(24);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(15);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(8);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var CubicBezierEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(CubicBezierEditor, _EditorElement);

  var _super = _createSuper(CubicBezierEditor);

  function CubicBezierEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CubicBezierEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CubicBezierEditor, [{
    key: "initState",
    value: function initState() {
      return {
        key: this.props.key,
        currentBezier: Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* getPredefinedCubicBezier */ "k"])(this.props.value || 'linear'),
        currentBezierIndex: 0,
        selectedColor: '#609de2',
        animatedColor: '#609de266',
        curveColor: '#609de2',
        baseLineColor: 'rgba(117, 117, 117, 0.46)'
      };
    }
  }, {
    key: "template",
    value: function template() {
      var linearCurve = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPath"])(this.state.currentBezier, 150, 150);
      var linearCurvePoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPointLine"])(this.state.currentBezier, 150, 150);
      var easeCurve = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPath"])('ease', 30, 30);
      var easeCurvePoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPointLine"])('ease', 30, 30);
      var easeInCurve = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPath"])('ease-in', 30, 30);
      var easeInCurvePoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPointLine"])('ease-in', 30, 30);
      var easeOutCurve = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPath"])('ease-out', 30, 30);
      var easeOutCurvePoint = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPointLine"])('ease-out', 30, 30);
      return (
        /*html*/
        "\n            <div class='cubic-bezier-editor'>\n                <div class='predefined'>\n                    <div class='left' ref='$left'>".concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].chevron_left, "</div>\n                    <div class='predefined-text' ref='$text'></div>\n                    <div class='right' ref='$right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].chevron_right, "</div>\n                </div>\n                <div class='animation'>\n                    <canvas \n                        class='animation-canvas' \n                        ref='$animationCanvas' \n                        title='Click and Replay point animation' \n                        width='230px' \n                        height='20px'\n                    ></canvas>\n                </div>\n                <div class='item-list' ref='$itemList' data-selected-value=''>\n                    <div class='item' data-bezier='ease' title='ease'>\n                        <svg class='item-canvas' width=\"30\" height=\"30\" viewBox=\"0 0 30 30\">\n                            <path d=\"").concat(easeCurve, "\" stroke=\"white\" stroke-width=\"1\" fill='none' />\n                            <path d=\"").concat(easeCurvePoint, "\" stroke=\"gray\" stroke-width=\"1\" fill='none' />\n                        </svg>\n                    </div>\n                    <div class='item' data-bezier='ease-in' title='ease-in'>\n                        <svg class='item-canvas' width=\"30\" height=\"30\" viewBox=\"0 0 30 30\">\n                            <path d=\"").concat(easeInCurve, "\" stroke=\"white\" stroke-width=\"1\" fill='none' />\n                            <path d=\"").concat(easeInCurvePoint, "\" stroke=\"gray\" stroke-width=\"1\" fill='none' /> \n                        </svg>\n                    </div>\n                    <div class='item' data-bezier='ease-out' title='ease-out'>\n                        <svg class='item-canvas' width=\"30\" height=\"30\" viewBox=\"0 0 30 30\">\n                            <path d=\"").concat(easeOutCurve, "\" stroke=\"white\" stroke-width=\"1\" fill='none' />\n                            <path d=\"").concat(easeOutCurvePoint, "\" stroke=\"gray\" stroke-width=\"1\" fill='none' />\n                        </svg>\n                    </div>\n                </div>\n                <div class='bezier'>\n                    <svg class='bezier-canvas' width=\"150\" height=\"150\" viewBox=\"0 0 150 150\" overflow=\"visible\">\n                        <path d=\"").concat(linearCurve, "\" stroke=\"white\" stroke-width=\"1\" fill='none' ref='$bezierCanvas' />\n                        <path d=\"").concat(linearCurvePoint, "\" stroke=\"gray\" stroke-width=\"1\" fill='none' ref='$bezierCanvasPoint' />\n                    </svg>                \n                    <div class='control' ref='$control'>\n                        <div class='pointer1' ref='$pointer1'></div>\n                        <div class='pointer2' ref='$pointer2'></div>\n                    </div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$bezierCanvas'),
    value: function value() {
      return {
        d: Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPath"])(this.state.currentBezier, 150, 150)
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$bezierCanvasPoint'),
    value: function value() {
      return {
        d: Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_12__["curveToPointLine"])(this.state.currentBezier, 150, 150)
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt);
      this.modifyCubicBezier();
    }
  }, {
    key: "modifyCubicBezier",
    value: function modifyCubicBezier() {
      this.parent.trigger(this.props.onchange, this.state.key, Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* formatCubicBezier */ "c"])(this.state.currentBezier));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$left'),
    value: function value() {
      var _this$state = this.state,
          currentBezier = _this$state.currentBezier,
          currentBezierIndex = _this$state.currentBezierIndex;

      if (currentBezierIndex == 0) {
        currentBezierIndex = el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* bezierList */ "a"].length - 1;
      } else {
        --currentBezierIndex;
      }

      var currentBezier = el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* bezierList */ "a"][currentBezierIndex];
      this.updateData({
        currentBezierIndex: currentBezierIndex,
        currentBezier: currentBezier
      });
      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$right'),
    value: function value() {
      var _this$state2 = this.state,
          currentBezier = _this$state2.currentBezier,
          currentBezierIndex = _this$state2.currentBezierIndex;
      currentBezierIndex = ++currentBezierIndex % el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* bezierList */ "a"].length;
      currentBezier = el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* bezierList */ "a"][currentBezierIndex];
      this.updateData({
        currentBezierIndex: currentBezierIndex,
        currentBezier: currentBezier
      });
      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$text'),
    value: function value() {
      var currentBezier = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* bezierList */ "a"][this.state.currentBezierIndex]);

      this.updateData({
        currentBezier: currentBezier
      });
      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$itemList .item'),
    value: function value(e) {
      var bezierString = e.$dt.attr('data-bezier');
      this.refs.$itemList.attr('data-selected-value', bezierString);
      var currentBezier = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* getPredefinedCubicBezier */ "k"])(bezierString);
      this.updateData({
        currentBezier: currentBezier
      });
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refreshEasingText();
      this.refreshBezierCanvas();
    }
  }, {
    key: "refreshBezierCanvas",
    value: function refreshBezierCanvas() {
      this.bindData('$bezierCanvas');
      this.bindData('$bezierCanvasPoint');
      this.refreshPointer();
      this.drawPoint();
    }
  }, {
    key: "refreshEasingText",
    value: function refreshEasingText() {
      this.refs.$text.html(this.state.currentBezier[4] || 'ease');
    }
  }, {
    key: "refreshPointer",
    value: function refreshPointer() {
      var currentBezier = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* getPredefinedCubicBezier */ "k"])(this.state.currentBezier);
      var width = this.refs.$control.width();
      var height = this.refs.$control.height();
      var left = currentBezier[0] * width;
      var top = (1 - currentBezier[1]) * height;
      this.refs.$pointer1.css({
        left: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].px(left).round(),
        top: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].px(top).round()
      });
      left = currentBezier[2] * width;
      top = (1 - currentBezier[3]) * height;
      this.refs.$pointer2.css({
        left: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].px(left).round(),
        top: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].px(top).round()
      });
    }
  }, {
    key: "drawPoint",
    value: function drawPoint() {
      var _this = this;

      if (this.timer) clearTimeout(this.timer);
      if (this.animationTimer) clearTimeout(this.animationTimer);
      this.timer = setTimeout(function () {
        _this.animationPoint();
      }, 100);
    }
  }, {
    key: "start",
    value: function start(i) {
      var _this2 = this;

      var pos = this.animationCanvasData.func(i);
      var x = 10 + (this.animationCanvasData.width - 20) * pos.y;
      var y = 10;
      var context = this.animationCanvasData.context;
      context.beginPath();
      context.arc(x, y, 5, 0, 2 * Math.PI);
      context.fill();
      context.stroke();
      context.closePath();

      if (i >= 1) {
        return;
      }

      this.animationTimer = setTimeout(function () {
        _this2.start(i + 0.05);
      }, 50);
    }
  }, {
    key: "animationPoint",
    value: function animationPoint() {
      var currentBezier = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* getPredefinedCubicBezier */ "k"])(this.state.currentBezier);
      var func = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* createBezierForPattern */ "b"])(Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* formatCubicBezier */ "c"])(currentBezier));
      this.refs.$animationCanvas.clear();
      var width = this.refs.$animationCanvas.width();
      var height = this.refs.$animationCanvas.height();
      var context = this.refs.$animationCanvas.context();
      context.fillStyle = this.state.animatedColor;
      context.strokeStyle = this.state.selectedColor;
      context.lineWidth = 1;
      this.animationCanvasData = {
        func: func,
        width: width,
        height: height,
        context: context
      };
      this.start(0);
    }
  }, {
    key: "setPosition",
    value: function setPosition(e) {
      var width = this.refs.$control.width();
      var height = this.refs.$control.height();
      var minX = this.refs.$control.offset().left;
      var minY = this.refs.$control.offset().top;
      var p = e;
      var x = p.x;

      if (0 > x) {
        x = 0;
      } else if (p.x > document.body.clientWidth) {
        x = document.body.clientWidth;
      }

      x -= minX;

      if (x < 0) {
        x = 0;
      }

      if (width < x) {
        x = width;
      }

      var y = p.y;
      y -= minY; // $pointer.css({
      //     left: x + 'px',
      //     top : y + 'px'
      // });

      return {
        x: Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_11__["div"])(x, width),
        y: y == height ? 0 : Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_11__["div"])(height - y, height)
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["POINTERSTART"])('$pointer1') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["MOVE"])('movePointer1') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["END"])('drawPoint'),
    value: function value(e) {
      this.clientX = e.clientX;
      this.clientY = e.clientY;
    }
  }, {
    key: "movePointer1",
    value: function movePointer1(dx, dy) {
      var pos = this.setPosition({
        x: this.clientX + dx,
        y: this.clientY + dy
      });
      this.state.currentBezier[0] = pos.x;
      this.state.currentBezier[1] = pos.y;
      this.refreshBezierCanvas();
      this.modifyCubicBezier();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["POINTERSTART"])('$pointer2') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["MOVE"])('movePointer2') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["END"])('drawPoint'),
    value: function value(e) {
      this.clientX = e.clientX;
      this.clientY = e.clientY;
    }
  }, {
    key: "movePointer2",
    value: function movePointer2(dx, dy) {
      var pos = this.setPosition({
        x: this.clientX + dx,
        y: this.clientY + dy
      });
      this.state.currentBezier[2] = pos.x;
      this.state.currentBezier[3] = pos.y;
      this.refreshBezierCanvas();
      this.modifyCubicBezier();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('showCubicBezierEditor'),
    value: function value(timingFunction) {
      var currentBezier = Object(el_base_functions_bezier__WEBPACK_IMPORTED_MODULE_10__[/* getPredefinedCubicBezier */ "k"])(timingFunction || this.state.currentBezier);
      this.setState({
        currentBezier: currentBezier
      });
      this.refresh();
    }
  }]);

  return CubicBezierEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_14__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_13__[/* registElement */ "a"])({
  CubicBezierEditor: CubicBezierEditor
});

/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return NumberInputEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var NumberInputEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(NumberInputEditor, _EditorElement);

  var _super = _createSuper(NumberInputEditor);

  function NumberInputEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, NumberInputEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(NumberInputEditor, [{
    key: "initState",
    value: function initState() {
      var value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(this.props.value || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].number(0));
      value = value.toUnit('number');
      var label = this.props.label || '';

      if (el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"][label]) {
        label = el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"][label];
      }

      return {
        label: label,
        compact: this.props.compact === 'true',
        min: +this.props.min || 0,
        max: +this.props.max || 100,
        step: +this.props.step || 1,
        key: this.props.key,
        params: this.props.params || '',
        layout: this.props.layout || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return "<div class='small-editor' ref='$body'></div>";
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$body'),
    value: function value() {
      var _this$state = this.state,
          min = _this$state.min,
          max = _this$state.max,
          step = _this$state.step,
          label = _this$state.label,
          type = _this$state.type,
          layout = _this$state.layout,
          compact = _this$state.compact;
      var value = +this.state.value.value.toString();

      if (isNaN(value)) {
        value = 0;
      }

      var hasLabel = !!label ? 'has-label' : '';
      var hasCompact = !!compact ? 'compact' : '';
      var layoutClass = layout;
      var realValue = (+value).toString();
      return (
        /*html*/
        "\n        <div class='number-input-editor ".concat(hasLabel, " ").concat(hasCompact, " ").concat(layoutClass, "' data-selected-type='").concat(type, "'>\n            ").concat(label ? "<label>".concat(label, "</label>") : '', "\n            <div class='range-editor-type' data-type='range'>\n                <div class='area'>\n                    <input type='number' ref='$propertyNumber' value=\"").concat(realValue, "\" min=\"").concat(min, "\" max=\"").concat(max, "\" step=\"").concat(step, "\" />\n                </div>\n            </div>\n        </div>\n    ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value || 0;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].parse(value)
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["INPUT"])('$propertyNumber'),
    value: function value(e) {
      var value = +this.getRef('$propertyNumber').value;
      this.updateData({
        value: this.state.value.set(value)
      });
    }
  }]);

  return NumberInputEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_9__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_8__[/* registElement */ "a"])({
  NumberInputEditor: NumberInputEditor
});

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ CSSPropertyEditor_CSSPropertyEditor; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorViewEditor.js
var ColorViewEditor = __webpack_require__(79);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/RangeEditor.js
var RangeEditor = __webpack_require__(37);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BackgroundImageEditor.js
var BackgroundImageEditor = __webpack_require__(111);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FilterEditor.js
var FilterEditor = __webpack_require__(115);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BoxShadowEditor.js
var BoxShadowEditor = __webpack_require__(112);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/VarEditor.js
var VarEditor = __webpack_require__(118);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TransformEditor.js
var TransformEditor = __webpack_require__(119);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TransformOriginEditor.js
var TransformOriginEditor = __webpack_require__(120);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PerspectiveOriginEditor.js
var PerspectiveOriginEditor = __webpack_require__(121);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SelectEditor.js
var SelectEditor = __webpack_require__(39);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/NumberRangeEditor.js
var NumberRangeEditor = __webpack_require__(68);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderRadiusEditor.js
var BorderRadiusEditor = __webpack_require__(113);

// EXTERNAL MODULE: ./src/el/base/UIElement.js + 4 modules
var UIElement = __webpack_require__(28);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/ClipPathEditor.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ClipPathEditor_ClipPathEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ClipPathEditor, _EditorElement);

  var _super = _createSuper(ClipPathEditor);

  function ClipPathEditor() {
    classCallCheck_default()(this, ClipPathEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(ClipPathEditor, [{
    key: "initState",
    value: function initState() {
      return {
        clippath: this.props.value
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt);
      this.modifyClipPath();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.clippath;
    }
  }, {
    key: "setValue",
    value: function setValue(clippath) {
      this.setState({
        clippath: clippath
      });
    }
  }, {
    key: "modifyClipPath",
    value: function modifyClipPath() {
      this.parent.trigger(this.props.onchange, this.state.clippath, this.props.params);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='clip-path-editor'></div>\n        "
      );
    }
  }, {
    key: Object(Event["LOAD"])(),
    value: function value() {
      var clippath = this.state.clippath;
      return "\n        <div class='clippath-item'>\n            <div class='name'>".concat(clippath, "</div>\n        </div>\n        ");
    }
  }, {
    key: Object(Event["CLICK"])(),
    value: function value(e) {
      this.viewClipPathPicker();
    }
  }, {
    key: "viewClipPathPicker",
    value: function viewClipPathPicker() {
      this.emit("showClipPathPopup", {
        changeEvent: 'changeClipPathEditor',
        'clip-path': this.state.clippath
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeClipPathEditor'),
    value: function value(data) {
      this.updateData({
        clippath: data['clip-path']
      });
    }
  }]);

  return ClipPathEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ClipPathEditor: ClipPathEditor_ClipPathEditor
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TextShadowEditor.js
var TextShadowEditor = __webpack_require__(122);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/StrokeDashArrayEditor.js
var StrokeDashArrayEditor = __webpack_require__(123);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PathDataEditor.js
var PathDataEditor = __webpack_require__(104);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PolygonDataEditor.js
var PolygonDataEditor = __webpack_require__(124);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/OffsetPathListEditor.js
var OffsetPathListEditor = __webpack_require__(105);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderEditor.js
var BorderEditor = __webpack_require__(106);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/MediaProgressEditor.js
var MediaProgressEditor = __webpack_require__(126);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/CSSPropertyEditor.js






function CSSPropertyEditor_createSuper(Derived) { var hasNativeReflectConstruct = CSSPropertyEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CSSPropertyEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




























var CSSPropertyEditor_CSSPropertyEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(CSSPropertyEditor, _EditorElement);

  var _super = CSSPropertyEditor_createSuper(CSSPropertyEditor);

  function CSSPropertyEditor() {
    classCallCheck_default()(this, CSSPropertyEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(CSSPropertyEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideTitle: this.props['hide-title'] === 'true',
        hideRefresh: this.props['hide-refresh'] === 'true',
        properties: []
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.modifyProperty();
    }
  }, {
    key: "modifyProperty",
    value: function modifyProperty() {
      this.parent.trigger(this.props.onchange, this.state.properties);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='css-property-editor ".concat(Object(func["OBJECT_TO_CLASS"])({
          'hide-title': this.state.hideTitle,
          'hide-refresh': this.state.hideRefresh
        }), "'>\n        <div class='title'>\n          <label>").concat(this.$i18n('css.property.editor.properties'), "</label>\n          <div class='tools'>\n            ").concat(this.makePropertySelect(), "\n            <button type=\"button\" ref='$addProperty'>").concat(icon["a" /* default */].add, "</button>\n          </div>\n        </div>\n        <div class='input grid-1 css-property-list' ref='$property'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: "getPropertyDefaultValue",
    value: function getPropertyDefaultValue(key) {
      switch (key) {
        case 'animation-timing-function':
        case 'box-shadow':
        case 'text-shadow':
        case 'color':
        case 'background-image':
        case 'background-color':
        case 'text-fill-color':
        case 'text-stroke-color':
        case 'filter':
        case 'backdrop-filter':
        case 'var':
        case 'transform':
        case 'transform-origin':
        case 'perspective-origin':
        case 'playTime':
          return Length["a" /* Length */].string('');

        case 'offset-distance':
          return Length["a" /* Length */].percent(0);

        case 'rotate':
          return Length["a" /* Length */].deg(0);

        case 'mix-blend-mode':
          return 'normal';

        case 'clip-path':
          return '';

        case 'opacity':
          return 1;

        default:
          return Length["a" /* Length */].z();
      }
    }
  }, {
    key: Object(Event["CLICK"])('$addProperty'),
    value: function value(e) {
      var key = this.getRef('$propertySelect').value;
      var searchItem = this.state.properties.find(function (it) {
        return it.key === key;
      });

      if (searchItem) {
        alert("".concat(key, " is already added."));
        return;
      }

      var value = this.getPropertyDefaultValue(key);
      var current = this.$selection.current;

      if (current) {
        value = current[key];
      }

      this.state.properties.push({
        key: key,
        value: value
      });
      this.refresh();
      this.modifyProperty();
    }
  }, {
    key: "makeIndivisualPropertyColorEditor",
    value: function makeIndivisualPropertyColorEditor(property, index) {
      var key = property.key.split('-').join('');
      return (
        /*html*/
        "\n      <div class='property-editor'>\n        <object refClass=\"ColorViewEditor\" ref='$".concat(key).concat(index, "' value=\"").concat(property.value, "\" key=\"").concat(property.key, "\" onChange=\"changeColorProperty\" />\n      </div>\n    ")
      );
    }
  }, {
    key: "makeCustomePropertyEditor",
    value: function makeCustomePropertyEditor(property, index) {
      return (
        /*html*/
        "\n      <div class='property-editor'>\n        <".concat(property.editor, " \n          onchange=\"changeSelect\"\n          ref=\"$customProperty").concat(index, "\"\n          key=\"").concat(property.key, "\"\n          value=\"").concat(property.value, "\"\n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "makeIndivisualPropertyEditor",
    value: function makeIndivisualPropertyEditor(property, index) {
      if (property.key === 'background-image') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"BackgroundImageEditor\" ref='$backgroundImage".concat(index, "' key=\"").concat(property.key, "\" hide-title=\"").concat(this.state.hideTitle, "\" value=\"").concat(property.value, "\" onChange=\"changeKeyValue\" />\n        </div>\n      ")
        );
      } else if (property.key === 'filter') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"FilterEditor\" ref='$filter".concat(index, "' key=\"").concat(property.key, "\" value=\"").concat(property.value, "\" onChange=\"changeKeyValue\" />\n        </div>\n      ")
        );
      } else if (property.key === 'backdrop-filter') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"FilterEditor\" ref='$backdropFilter".concat(index, "' key=\"").concat(property.key, "\" value=\"").concat(property.value, "\" onChange=\"changeKeyValue\" />\n        </div>\n      ")
        );
      } else if (property.key === 'box-shadow') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"BoxShadowEditor\" ref='$boxshadow".concat(index, "' value=\"").concat(property.value, "\" hide-label=\"false\" onChange=\"changeBoxShadowProperty\" />\n        </div>\n      ")
        );
      } else if (property.key === 'text-shadow') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"TextShadowEditor\" ref='$textshadow".concat(index, "' value=\"").concat(property.value, "\" hide-label=\"false\" onChange=\"changeTextShadowProperty\" />\n        </div>\n      ")
        );
      } else if (property.key === 'var') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"VarEditor\" ref='$var".concat(index, "' value=\"").concat(property.value, "\" onChange=\"changeVar\" />\n        </div>\n      ")
        );
      } else if (property.key === 'transform') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"TransformEditor\" ref='$transform".concat(index, "' value=\"").concat(property.value, "\" onChange=\"changeTransform\" />\n        </div>\n      ")
        );
      } else if (property.key === 'transform-origin') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"TransformOriginEditor\" ref='$transformOrigin".concat(index, "' value=\"").concat(property.value, "\" onChange=\"changeTransformOrigin\" />\n        </div>\n      ")
        );
      } else if (property.key === 'perspective-origin') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"PerspectiveOriginEditor\" ref='$perspectiveOrigin".concat(index, "' value=\"").concat(property.value, "\" onChange=\"changePerspectiveOrigin\" />\n        </div>\n      ")
        );
      } else if (property.key === 'fill-rule') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"SelectEditor\"  \n          ref='$fillRule".concat(index, "' \n          key='fill-rule' \n          icon=\"true\" \n          options=\"nonzero,evenodd\" \n          value=\"").concat(property.value, "\"\n          onchange=\"changeSelect\" />\n        </div>\n      ")
        );
      } else if (property.key === 'stroke-linecap') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"SelectEditor\"  \n          ref='$strokeLinecap".concat(index, "' \n          key='stroke-linecap' \n          icon=\"true\" \n          options=\"butt,round,square\" \n          value=\"").concat(property.value, "\"\n          onchange=\"changeSelect\" />\n        </div>\n      ")
        );
      } else if (property.key === 'stroke-linejoin') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"SelectEditor\"  \n          ref='$strokeLinejoin".concat(index, "' \n          key='stroke-linejoin' \n          icon=\"true\" \n          options=\"miter,arcs,bevel,miter-clip,round\" \n          value=\"").concat(property.value, "\"\n          onchange=\"changeSelect\" />\n        </div>\n      ")
        );
      } else if (property.key === 'mix-blend-mode') {
        return (
          /*html*/
          "\n        <div class='property-editor'>\n          <object refClass=\"BlendSelectEditor\" \n          ref='$mixBlendMode".concat(index, "' \n          key='mix-blend-mode' \n          icon=\"true\" \n          value=\"").concat(property.value, "\"\n          onchange=\"changeSelect\" />\n        </div>\n      ")
        );
      } else if (property.key === 'stroke-dasharray') {
        return (
          /*html*/
          "\n        <object refClass=\"StrokeDashArrayEditor\" \n          ref='$strokeDashArray".concat(index, "' \n          key='stroke-dasharray'\n          value='").concat(property.value, "' \n          onchange='changeSelect' \n        />\n      ")
        );
      } else if (property.key === 'border-radius') {
        return (
          /*html*/
          "\n        <object refClass=\"BorderRadiusEditor\"\n          ref='$borderRadius".concat(index, "' \n          key='border-radius'\n          value='").concat(property.value, "' \n          onchange='changeBorderRadius' \n        />\n      ")
        );
      } else if (property.key === 'border') {
        return (
          /*html*/
          "\n        <object refClass=\"BorderEditor\"\n          ref='$border".concat(index, "' \n          key='border'\n          value='").concat(property.value, "' \n          onchange='changeKeyValue' \n        />\n      ")
        );
      } else if (property.key === 'clip-path') {
        return (
          /*html*/
          "\n        <object refClass=\"ClipPathEditor\"\n          ref='$clipPath".concat(index, "' \n          key='clip-path'\n          value='").concat(property.value, "' \n          onchange='changeClipPath' \n        />\n      ")
        );
      } else if (property.key === 'd') {
        return (
          /*html*/
          "\n        <object refClass=\"PathDataEditor\" ref='$pathData".concat(index, "' key='d' value='").concat(property.value, "' onchange='changeSelect' />\n      ")
        );
      } else if (property.key === 'points') {
        return (
          /*html*/
          "\n        <object refClass=\"PolygonDataEditor\" ref='$polygonData".concat(index, "' key='points' value='").concat(property.value, "' onchange='changeSelect' />\n      ")
        );
      } else if (property.key === 'offset-path') {
        return (
          /*html*/
          "\n        <object refClass=\"OffsetPathListEditor\" ref='$offsetPathList".concat(index, "' key='offset-path' value='").concat(property.value, "' onchange='changeSelect' />\n      ")
        );
      } else if (property.key === 'playTime') {
        return (
          /*html*/
          "\n        <object refClass=\"MediaProgressEditor\" ref='$playTime".concat(index, "'  key='playTime' value=\"").concat(property.value, "\" onchange=\"changeSelect\" />      \n      ")
        );
      }

      return (
        /*html*/
        "\n      <div class='property-editor'>\n        ???\n\n      </div>\n    "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      this.modifyPropertyValue(key, _value);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBorderRadius'),
    value: function value(_value2) {
      this.modifyPropertyValue('border-radius', _value2);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeClipPath'),
    value: function value(_value3) {
      this.modifyPropertyValue('clip-path', _value3);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColorProperty'),
    value: function value(key, color) {
      this.modifyPropertyValue(key, color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBackgroundImageProperty'),
    value: function value(key, backgroundImage) {
      this.modifyPropertyValue(key, backgroundImage);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFilterProperty'),
    value: function value(filter) {
      this.modifyPropertyValue('filter', filter);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBackdropFilterProperty'),
    value: function value(filter) {
      this.modifyPropertyValue('backdrop-filter', filter);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBoxShadowProperty'),
    value: function value(boxshadow) {
      this.modifyPropertyValue('box-shadow', boxshadow);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTextShadowProperty'),
    value: function value(textShadow) {
      this.modifyPropertyValue('text-shadow', textShadow);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeVar'),
    value: function value(_value4) {
      this.modifyPropertyValue('var', _value4);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTransform'),
    value: function value(_value5) {
      this.modifyPropertyValue('transform', _value5);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTransformOrigin'),
    value: function value(_value6) {
      this.modifyPropertyValue('transform-origin', _value6);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePerspectiveOrigin'),
    value: function value(_value7) {
      this.modifyPropertyValue('perspective-origin', _value7);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value8) {
      this.modifyPropertyValue(key, _value8);
    }
  }, {
    key: "makePropertyEditor",
    value: function makePropertyEditor(property, index) {
      if (property.editor) {
        return this.makeCustomePropertyEditor(property, index);
      }

      switch (property.key) {
        case 'animation-timing-function':
        case 'box-shadow':
        case 'text-shadow':
        case 'background-image':
        case 'filter':
        case 'backdrop-filter':
        case 'var':
        case 'transform':
        case 'transform-origin':
        case 'perspective-origin':
        case 'mix-blend-mode':
        case 'border':
        case 'border-radius':
        case 'clip-path':
        case 'fill-rule':
        case 'stroke-linecap':
        case 'stroke-linejoin':
        case 'stroke-dasharray':
        case 'd':
        case 'points':
        case 'offset-path':
        case 'playTime':
          return this.makeIndivisualPropertyEditor(property, index);

        case 'color':
        case 'background-color':
        case 'text-fill-color':
        case 'text-stroke-color':
        case 'stroke':
        case 'fill':
          return this.makeIndivisualPropertyColorEditor(property, index);

        case 'opacity':
        case 'fill-opacity':
        case 'stroke-dashoffset':
        case 'offset-distance':
          var min = 0;
          var max = 1;
          var step = 0.01;
          return (
            /*html*/
            "\n          <div class='property-editor'>\n            <object refClass=\"NumberRangeEditor\"  \n              ref='$opacity".concat(index, "' \n              key='").concat(property.key, "' \n              min=\"").concat(min, "\"\n              max=\"").concat(max, "\"\n              step=\"").concat(step, "\"\n              value=\"").concat(property.value || 1, "\"\n              selected-unit='number'\n              removable=\"true\"\n              onchange=\"changeRangeEditor\" />\n          </div>\n        ")
          );

        case 'rotate':
          return (
            /*html*/
            "\n          <div class='property-editor'>\n            <object refClass=\"RangeEditor\"  \n              ref='rangeEditor".concat(index, "' \n              key='").concat(property.key, "' \n              value='").concat(property.value, "'  \n              min=\"-2000\"\n              max=\"2000\"\n              units=\"deg\" \n              onChange=\"changeRangeEditor\" />\n          </div>\n        ")
          );

        case 'left':
        case 'margin-top':
        case 'margin-bottom':
        case 'margin-left':
        case 'margin-right':
        case 'padding-top':
        case 'padding-bottom':
        case 'padding-left':
        case 'padding-right':
        case 'font-size':
        case 'font-stretch':
        case 'width':
        case 'height':
        case 'perspective':
        case 'offset-distance':
        case 'text-stroke-width':
        default:
          return (
            /*html*/
            "\n          <div class='property-editor'>\n            <object refClass=\"RangeEditor\"  ref='rangeEditor".concat(index, "' key='").concat(property.key, "' value='").concat(property.value, "' max=\"1000\" onChange=\"changeRangeEditor\" />\n          </div>\n        ")
          );
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value9) {
      this.modifyPropertyValue(key, _value9 + "");
    }
  }, {
    key: "searchKey",
    value: function searchKey(key, callback) {
      this.state.properties.filter(function (it) {
        return it.key === key;
      }).forEach(callback);
    }
  }, {
    key: "modifyPropertyValue",
    value: function modifyPropertyValue(key, value) {
      this.searchKey(key, function (it) {
        it.value = value;
      });
      this.modifyProperty();
    }
  }, {
    key: "makePropertySelect",
    value: function makePropertySelect() {
      return (
        /*html*/
        "\n      <select class='property-select' ref='$propertySelect'>\n        <optgroup label='Position'>\n          <option value='x'>x</option>\n          <option value='y'>y</option>        \n        </optgroup>\n        <optgroup label='Size'>\n          <option value='width'>width</option>\n          <option value='height'>height</option>\n        </optgroup>      \n        <optgroup label='Box Model'>\n          <option value='margin-left'>margin-left</option>\n          <option value='margin-right'>margin-right</option>\n          <option value='margin-bottom'>margin-bottom</option>\n          <option value='margin-top'>margin-top</option>\n          <option value='padding-left'>padding-left</option>\n          <option value='padding-right'>padding-right</option>\n          <option value='padding-bottom'>padding-bottom</option>\n          <option value='padding-top'>padding-top</option>       \n        </optgroup>\n        <optgroup label='Border'>\n          <option value='border'>border</option>\n          <option value='border-radius'>border-radius</option>\n        </optgroup>        \n        <optgroup label='Style'>\n          <option value='background-color'>background-color</option>\n          <option value='background-image'>background-image</option>\n          <option value='box-shadow'>box-shadow</option>\n          <option value='text-shadow'>text-shadow</option>\n          <option value='filter'>filter</option>      \n          <option value='backdrop-filter'>backdrop-filter</option>\n          <option value='mix-blend-mode'>mix-blend-mode</option>\n        </optgroup>            \n        <optgroup label='Transform'>\n          <option value='transform'>transform</option>\n          <option value='transform-origin'>transform-origin</option>\n          <option value='perspective'>perspective</option>\n          <option value='perspective-origin'>perspective-origin</option>\n        </optgroup>\n        <optgroup label='Font'>\n          <option value='font-size'>font-size</option>\n          <option value='font-weight'>font-weight</option>          \n          <option value='font-stretch'>font-stretch</option>\n        </optgroup>\n        <optgroup label='Animation'>\n          <option value='animation-timing-function'>timing-function</option>\n        </optgroup>        \n      </select>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$property'),
    value: function value() {
      var _this = this;

      return this.state.properties.map(function (it, index) {
        return (
          /*html*/
          "\n        <div class='css-property-item'>\n          <div class='title'>\n            <label>".concat(it.key, "</label>\n            <div class='tools'>\n              <button type=\"button\" class='remove' data-index=\"").concat(index, "\">").concat(icon["a" /* default */].remove2, "</button>\n            </div>\n          </div>\n          <div class='title-2'>\n            <div class='tools'>\n              <label><button type=\"button\" class='refresh' data-index=\"").concat(index, "\">").concat(icon["a" /* default */].refresh, "</button> Refresh</label>\n            </div>\n          </div>\n          <div class='value-editor'>\n            ").concat(_this.makePropertyEditor(it, index), "\n          </div>\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showCSSPropertyEditor"),
    value: function value() {
      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.setState({
        properties: properties
      });
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$property .remove'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.state.properties.splice(index, 1);
      this.refresh();
      this.modifyProperty();
    }
  }, {
    key: Object(Event["CLICK"])('$property .refresh'),
    value: function value(e) {
      this.parent.trigger('refreshPropertyValue');
    }
  }]);

  return CSSPropertyEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  CSSPropertyEditor: CSSPropertyEditor_CSSPropertyEditor
});

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return GradientEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(39);
/* harmony import */ var _InputRangeEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(67);
/* harmony import */ var el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(36);
/* harmony import */ var el_editor_property_parser_image_resource_Gradient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(41);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(11);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(8);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(14);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var radialTypeList = ['circle', 'circle closest-side', 'circle closest-corner', 'circle farthest-side', 'circle farthest-corner', 'ellipse', 'ellipse closest-side', 'ellipse closest-corner', 'ellipse farthest-side', 'ellipse farthest-corner'];
var imageTypeList = ['static-gradient', 'linear-gradient', 'repeating-linear-gradient', 'radial-gradient', 'repeating-radial-gradient', 'conic-gradient', 'repeating-conic-gradient', 'image-resource'];
var iconList = {
  'image-resource': el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].photo
};
var hasRadialPosition = {
  'radial-gradient': true,
  'repeating-radial-gradient': true,
  'conic-gradient': true,
  'repeating-conic-gradient': true
};
var presetPosition = {
  top: ['50%', '0%'],
  'top left': ['0%', '0%'],
  'top right': ['100%', '0%'],
  left: ['0%', '50%'],
  right: ['100%', '50%'],
  bottom: ['50%', '100%'],
  'bottom left': ['0%', '100%'],
  'bottom right': ['100%', '100%']
};

var GradientEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(GradientEditor, _EditorElement);

  var _super = _createSuper(GradientEditor);

  function GradientEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, GradientEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(GradientEditor, [{
    key: "initState",
    value: function initState() {
      return {
        index: +(this.props.index || 0),
        value: this.props.value,
        image: el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_12__[/* BackgroundImage */ "a"].parseImage(this.props.value || '') || {
          type: '',
          colorsteps: []
        }
      };
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        image: el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_12__[/* BackgroundImage */ "a"].parseImage(value)
      }, false);
      this.refresh();
      this.parent.trigger('changeTabType', this.state.image.type);
    }
  }, {
    key: "template",
    value: function template() {
      var image = this.state.image;
      image = image || {};
      var type = image.type || 'static-gradient';
      if (type === 'url') type = 'image-resource';
      return (
        /*html*/
        "\n        <div class='gradient-editor' data-selected-editor='".concat(type, "'>\n            <div class='gradient-preview'>\n              <div class='gradient-view' ref='$gradientView' title='").concat(this.$i18n('gradient.editor.drag.message'), "'></div>\n              <div class='drag-pointer' ref='$dragPosition'></div>\n              <div class='preset-position'>\n                <div data-value='top' title='top'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='right' title='right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='left' title='left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom' title='bottom'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='top left' title='top left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='top right' title='top right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom left' title='bottom left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom right' title='bottom right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>                \n              </div>\n              <div data-editor='image-loader'>\n                <input type='file' accept=\"image/*\" ref='$file' />\n              </div>              \n            </div>\n            <div class=\"picker-tab\">\n              <div class=\"picker-tab-list\" ref=\"$tab\">\n                ").concat(imageTypeList.map(function (it) {
          return "<span class='picker-tab-item ".concat(it, "' data-editor='").concat(it, "'><span class='icon'>").concat(iconList[it] || '', "</span></span>");
        }).join(''), "\n              </div>\n            </div>\n            <div class='gradient-steps' data-editor='gradient'>\n                <div class=\"hue-container\" ref=\"$back\"></div>            \n                <div class=\"hue\" ref=\"$steps\">\n                    <div class='step-list' ref=\"$stepList\" ></div>\n                </div>\n            </div>\n            <div class='tools' data-editor='tools'>\n              <label>Offset</label>\n              <object refClass='InputRangeEditor' ref='$range' calc=\"false\" key='length' onchange='changeColorStepOffset' />\n            </div>\n            <div class='tools' data-editor='tools'>\n              <label for='gradientConnected").concat(this.id, "'>connected </label>\n              <input type='checkbox'  id='gradientConnected").concat(this.id, "' ref='$cut' checked />\n            </div>\n            <div class='sub-editor' ref='$subEditor'> \n              <div data-editor='angle'>\n                <object refClass=\"RangeEditor\" label='Angle' ref='$angle' calc=\"false\" units=\"deg\" min=\"-720\" max=\"720\" key='angle' onchange='changeKeyValue' />\n              </div>\n              <div data-editor='centerX'>\n                <object refClass=\"RangeEditor\" label='Center X' ref='$radialPositionX' calc=\"false\" value=\"50%\"  key='radialPositionX' onchange='changeKeyValue' />\n              </div>                \n              <div data-editor='centerY'>                      \n                <object refClass=\"RangeEditor\" label='Center Y' ref='$radialPositionY' calc=\"false\" value=\"50%\" key='radialPositionY' onchange='changeKeyValue' />\n              </div>                \n              <div data-editor='radialType'>              \n                <object refClass=\"SelectEditor\" label='Radial Type' ref='$radialType' value=\"\" options=\"").concat(radialTypeList.join(','), "\" key='radialType' onchange='changeKeyValue' />\n              </div>\n\n            </div>            \n        </div>\n      ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CHANGE"])('$file'),
    value: function value(e) {
      var _this = this;

      var project = this.$selection.currentProject;

      if (project) {
        _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(e.target.files).forEach(function (item) {
          _this.emit('updateImageAssetItem', item, function (local) {
            _this.trigger('setImageUrl', local);
          });
        });
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$el .preset-position [data-value]'),
    value: function value(e) {
      var type = e.$dt.attr('data-value');

      if (presetPosition[type]) {
        this.state.image.radialPosition = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_15__["clone"])(presetPosition[type]);
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["DOUBLECLICK"])('$gradientView') + el_base_Event__WEBPACK_IMPORTED_MODULE_7__["PREVENT"],
    value: function value(e) {
      this.state.image.radialPosition = ['50%', '50%'];
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$gradientView') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])('moveDragPosition'),
    value: function value(e) {
      var parent = this.refs.$dragPosition.parent();
      this.containerRect = parent.rect();
      this.startXY = e.xy;
    }
  }, {
    key: "moveDragPosition",
    value: function moveDragPosition(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      if (this.containerRect.x > x) {
        x = this.containerRect.x;
      } else if (this.containerRect.x + this.containerRect.width < x) {
        x = this.containerRect.x + this.containerRect.width;
      }

      if (this.containerRect.y > y) {
        y = this.containerRect.y;
      } else if (this.containerRect.y + this.containerRect.height < y) {
        y = this.containerRect.y + this.containerRect.height;
      }

      var left = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent((x - this.containerRect.x) / this.containerRect.width * 100);
      var top = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent((y - this.containerRect.y) / this.containerRect.height * 100);
      this.state.image.radialPosition = [left, top];
      this.bindData('$dragPosition');
      this.bindData('$gradientView');
      this.children.$radialPositionX.setValue(left);
      this.children.$radialPositionY.setValue(top);
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$tab .picker-tab-item'),
    value: function value(e) {
      var type = e.$dt.attr('data-editor');
      this.$el.attr('data-selected-editor', type);
      this.parent.trigger('changeTabType', type);
      var url = type === 'image-resource' ? this.state.image.url : this.state.url;
      this.state.image = el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_12__[/* BackgroundImage */ "a"].changeImageType({
        type: type,
        url: url,
        colorsteps: this.state.image.colorsteps || [],
        angle: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.children.$angle.getValue()).value,
        radialType: this.children.$radialType.getValue(),
        radialPosition: [this.children.$radialPositionX.getValue(), this.children.$radialPositionY.getValue()]
      });
      this.refresh();
      this.updateData();
      this.sendMessage();
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(type) {
      var type = this.$el.attr('data-selected-editor');

      if (type === 'linear-gradient' || type === 'repeating-linear-gradient') {
        this.emit('addStatusBarMessage', '');
      } else {
        this.emit('addStatusBarMessage', 'Drag if you want to move center position');
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      if (key === 'angle') {
        _value = _value.value;
      }

      this.state.image[key] = _value;

      if (key === 'radialPositionX' || key === 'radialPositionY') {
        this.state.image['radialPosition'] = [this.state.image.radialPositionX || '50%', this.state.image.radialPositionY || '50%'];
      }

      this.bindData('$gradientView');
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeColorStepOffset'),
    value: function value(key, _value2) {
      if (this.currentStep) {
        this.currentStep.percent = _value2.value;
        this.state.image.sortColorStep();
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$back'),
    value: function value(e) {
      var rect = this.refs.$stepList.rect();
      var minX = rect.x;
      var maxX = rect.right;
      var x = e.xy.x;
      if (x < minX) x = minX;else if (x > maxX) x = maxX;
      var percent = (x - minX) / rect.width * 100;
      this.state.image.insertColorStep(percent);
      this.state.image.sortColorStep();
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$el'),
    value: function value() {
      var type = this.state.image.type;

      if (type === 'url') {
        type = 'image-resource';
      }

      this.parent.trigger('changeTabType', type);
      return {
        "data-selected-editor": type
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$stepList'),
    value: function value() {
      return {
        'data-selected-index': this.state.index.toString(),
        'style': {
          'background-image': this.getLinearGradient()
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$gradientView'),
    value: function value() {
      var type = this.state.image.type;
      var size = 'auto';

      if (type === 'url' || type === 'image-resource') {
        size = 'cover';
      }

      return {
        style: {
          'background-image': this.state.image.toString(),
          'background-size': size,
          'background-repeat': 'no-repeat'
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$dragPosition'),
    value: function value() {
      var left = '50%';
      var top = '50%';

      if (hasRadialPosition[this.state.image.type]) {
        var _this$state$image$rad = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(this.state.image.radialPosition, 2),
            left = _this$state$image$rad[0],
            top = _this$state$image$rad[1];
      }

      return {
        style: {
          left: left,
          top: top
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$stepList'),
    value: function value() {
      var _this2 = this;

      var colorsteps = this.state.image.colorsteps || [];
      return colorsteps.map(function (it, index) {
        var selected = _this2.$selection.isSelectedColorStep(it.id) ? 'selected' : '';
        return (
          /*html*/
          "\n      <div class='step ".concat(selected, "' data-id='").concat(it.id, "' data-cut='").concat(it.cut, "' style='left: ").concat(it.toLength(), ";'>\n        <div class='color-view' style=\"background-color: ").concat(it.color, "\"></div>\n        <div class='arrow' style=\"background-color: ").concat(it.color, "\"></div>\n      </div>")
        );
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$cut'),
    value: function value() {
      if (this.currentStep) {
        this.currentStep.cut = this.refs.$cut.checked();
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: "removeStep",
    value: function removeStep(id) {
      this.state.image.removeColorStep(id);
      this.refresh();
      this.updateData();
    }
  }, {
    key: "selectStep",
    value: function selectStep(id) {
      var _this3 = this;

      this.state.id = id;
      this.$selection.selectColorStep(id);

      if (this.state.image.colorsteps) {
        this.currentStep = this.state.image.colorsteps.find(function (it) {
          return _this3.$selection.isSelectedColorStep(it.id);
        });
        this.refs.$cut.checked(this.currentStep.cut);
        this.children.$range.setValue(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(this.currentStep.percent));
        this.parent.trigger('selectColorStep', this.currentStep.color);
      }

      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$stepList .step') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])(),
    value: function value(e) {
      var id = e.$dt.attr('data-id');

      if (e.altKey) {
        this.removeStep(id);
        return false;
      } else {
        this.selectStep(id);
        this.startXY = e.xy;
        this.cachedStepListRect = this.refs.$stepList.rect();
      }
    }
  }, {
    key: "getStepListRect",
    value: function getStepListRect() {
      return this.cachedStepListRect;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var rect = this.getStepListRect();
      var minX = rect.x;
      var maxX = rect.right;
      var x = this.startXY.x + dx;
      if (x < minX) x = minX;else if (x > maxX) x = maxX;
      var percent = (x - minX) / rect.width * 100;
      this.currentStep.setValue(percent, rect.width);
      this.children.$range.setValue(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(percent));
      this.state.image.sortColorStep();
      this.refresh();
      this.updateData();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: "getLinearGradient",
    value: function getLinearGradient() {
      var image = this.state.image;
      return "linear-gradient(to right, ".concat(el_editor_property_parser_image_resource_Gradient__WEBPACK_IMPORTED_MODULE_13__[/* Gradient */ "a"].toColorString(image.colorsteps), ")");
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('setColorStepColor'),
    value: function value(color) {
      if (this.state.image.type === 'static-gradient') {
        this.state.image.colorsteps[0].color = color;
        this.refresh();
        this.updateData();
      } else {
        if (this.currentStep) {
          this.currentStep.color = color;
          this.refresh();
          this.updateData();
        }
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('setImageUrl'),
    value: function value(url) {
      if (this.state.image) {
        this.state.url = url;
        this.state.image.reset({
          url: url
        });
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.state.image.toString());
    }
  }]);

  return GradientEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_17__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_16__[/* registElement */ "a"])({
  GradientEditor: GradientEditor
});

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TextEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(TextEditor, _EditorElement);

  var _super = _createSuper(TextEditor);

  function TextEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TextEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TextEditor, [{
    key: "initState",
    value: function initState() {
      var value = this.props.value;
      return {
        label: this.props.label || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          label = _this$state.label,
          value = _this$state.value;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n            <div class='text-editor ".concat(hasLabel, "'>\n                ").concat(label ? "<label>".concat(label, "</label>") : '', "\n                <div>\n                    <input type='text' ref='$text' value=\"").concat(value, "\" />\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.refs.$text.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.refs.$text.val(value);
      this.setState({
        value: value
      }, false);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["BIND"])('$text'),
    value: function value() {
      return {
        'value': this.state.value
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["INPUT"])('$text'),
    value: function value() {
      this.updateData({
        value: this.refs.$text.value
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }]);

  return TextEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_7__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_6__[/* registElement */ "a"])({
  TextEditor: TextEditor
});

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseXyz", function() { return ReverseXyz; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReverseRGB", function() { return ReverseRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XYZtoRGB", function() { return XYZtoRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LABtoXYZ", function() { return LABtoXYZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PivotXyz", function() { return PivotXyz; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XYZtoLAB", function() { return XYZtoLAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LABtoRGB", function() { return LABtoRGB; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);

function ReverseXyz(n) {
  return Math.pow(n, 3) > 0.008856 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;
}
function ReverseRGB(n) {
  return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;
}
function XYZtoRGB(x, y, z) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        x = _arguments$.x,
        y = _arguments$.y,
        z = _arguments$.z;
  } //X, Y and Z input refer to a D65/2° standard illuminant.
  //sR, sG and sB (standard RGB) output range = 0 ÷ 255


  var X = x / 100.0;
  var Y = y / 100.0;
  var Z = z / 100.0;
  var R = X * 3.2406 + Y * -1.5372 + Z * -0.4986;
  var G = X * -0.9689 + Y * 1.8758 + Z * 0.0415;
  var B = X * 0.0557 + Y * -0.2040 + Z * 1.0570;
  R = ReverseRGB(R);
  G = ReverseRGB(G);
  B = ReverseRGB(B);
  var r = Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(R * 255);
  var g = Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(G * 255);
  var b = Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])(B * 255);
  return {
    r: r,
    g: g,
    b: b
  };
}
function LABtoXYZ(l, a, b) {
  if (arguments.length == 1) {
    var _arguments$2 = arguments[0],
        l = _arguments$2.l,
        a = _arguments$2.a,
        b = _arguments$2.b;
  } //Reference-X, Y and Z refer to specific illuminants and observers.
  //Common reference values are available below in this same page.


  var Y = (l + 16) / 116;
  var X = a / 500 + Y;
  var Z = Y - b / 200;
  Y = ReverseXyz(Y);
  X = ReverseXyz(X);
  Z = ReverseXyz(Z);
  var x = X * 95.047;
  var y = Y * 100.000;
  var z = Z * 108.883;
  return {
    x: x,
    y: y,
    z: z
  };
}
function PivotXyz(n) {
  return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16) / 116;
}
function XYZtoLAB(x, y, z) {
  if (arguments.length == 1) {
    var _arguments$3 = arguments[0],
        x = _arguments$3.x,
        y = _arguments$3.y,
        z = _arguments$3.z;
  } //Reference-X, Y and Z refer to specific illuminants and observers.
  //Common reference values are available below in this same page.
  // Observer= 2°, Illuminant= D65


  var X = x / 95.047;
  var Y = y / 100.00;
  var Z = z / 108.883;
  X = PivotXyz(X);
  Y = PivotXyz(Y);
  Z = PivotXyz(Z);
  var l = 116 * Y - 16;
  var a = 500 * (X - Y);
  var b = 200 * (Y - Z);
  return {
    l: l,
    a: a,
    b: b
  };
}
function LABtoRGB(l, a, b) {
  if (arguments.length == 1) {
    var _arguments$4 = arguments[0],
        l = _arguments$4.l,
        a = _arguments$4.a,
        b = _arguments$4.b;
  }

  return XYZtoRGB(LABtoXYZ(l, a, b));
}

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HSVtoRGB", function() { return HSVtoRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HSVtoHSL", function() { return HSVtoHSL; });
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(15);
/* harmony import */ var _fromRGB__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(49);


/**
 * @method HSVtoRGB
 *
 * convert hsv to rgb
 *
 * 		color.HSVtoRGB(0,0,1) === #FFFFF === { r : 255, g : 0, b : 0 }
 *
 * @param {Number} H  hue color number  (min : 0, max : 360)
 * @param {Number} S  Saturation number  (min : 0, max : 1)
 * @param {Number} V  Value number 		(min : 0, max : 1 )
 * @returns {Object}
 */

function HSVtoRGB(h, s, v) {
  if (arguments.length == 1) {
    var _arguments$ = arguments[0],
        h = _arguments$.h,
        s = _arguments$.s,
        v = _arguments$.v;
  }

  var H = h;
  var S = s;
  var V = v;

  if (H >= 360) {
    H = 0;
  }

  var C = S * V;
  var X = C * (1 - Math.abs(H / 60 % 2 - 1));
  var m = V - C;
  var temp = [];

  if (0 <= H && H < 60) {
    temp = [C, X, 0];
  } else if (60 <= H && H < 120) {
    temp = [X, C, 0];
  } else if (120 <= H && H < 180) {
    temp = [0, C, X];
  } else if (180 <= H && H < 240) {
    temp = [0, X, C];
  } else if (240 <= H && H < 300) {
    temp = [X, 0, C];
  } else if (300 <= H && H < 360) {
    temp = [C, 0, X];
  }

  return {
    r: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])((temp[0] + m) * 255),
    g: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])((temp[1] + m) * 255),
    b: Object(_math__WEBPACK_IMPORTED_MODULE_0__["round"])((temp[2] + m) * 255)
  };
}
function HSVtoHSL(h, s, v) {
  if (arguments.length == 1) {
    var _arguments$2 = arguments[0],
        h = _arguments$2.h,
        s = _arguments$2.s,
        v = _arguments$2.v;
  }

  var rgb = HSVtoRGB(h, s, v);
  return Object(_fromRGB__WEBPACK_IMPORTED_MODULE_1__["RGBtoHSL"])(rgb.r, rgb.g, rgb.b);
}

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolateRGB", function() { return interpolateRGB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interpolateRGBObject", function() { return interpolateRGBObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "blend", function() { return blend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mix", function() { return mix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contrast", function() { return contrast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "contrastColor", function() { return contrastColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gradient", function() { return gradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleHSV", function() { return scaleHSV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleH", function() { return scaleH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleS", function() { return scaleS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleV", function() { return scaleV; });
/* harmony import */ var _parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(21);
/* harmony import */ var _math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _formatter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(63);
/* harmony import */ var _fromRGB__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(49);
/* harmony import */ var _fromHSV__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(98);
/* harmony import */ var _func__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(8);






/**
 * @deprecated 
 * 
 * instead of this,  use blend function 
 *  
 * @param {*} startColor 
 * @param {*} endColor 
 * @param {*} t 
 */

function interpolateRGB(startColor, endColor) {
  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  var exportFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';
  var obj = interpolateRGBObject(startColor, endColor, t);
  return Object(_formatter__WEBPACK_IMPORTED_MODULE_2__["format"])(obj, exportFormat);
}
function interpolateRGBObject(startColor, endColor) {
  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  var startColorAlpha = Object(_func__WEBPACK_IMPORTED_MODULE_5__["isUndefined"])(startColor.a) ? 1 : startColor.a;
  var endColorAlpha = Object(_func__WEBPACK_IMPORTED_MODULE_5__["isUndefined"])(endColor.a) ? 1 : endColor.a;
  return {
    r: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(startColor.r + (endColor.r - startColor.r) * t),
    g: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(startColor.g + (endColor.g - startColor.g) * t),
    b: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(startColor.b + (endColor.b - startColor.b) * t),
    a: Object(_math__WEBPACK_IMPORTED_MODULE_1__["round"])(startColorAlpha + (endColorAlpha - startColorAlpha) * t, 100)
  };
}
function scale(scale) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;
  if (!scale) return [];

  if (Object(_func__WEBPACK_IMPORTED_MODULE_5__["isString"])(scale)) {
    scale = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["convertMatchesArray"])(scale);
  }

  scale = scale || [];
  var len = scale.length;
  var colors = [];

  for (var i = 0; i < len - 1; i++) {
    for (var index = 0; index < count; index++) {
      colors.push(blend(scale[i], scale[i + 1], index / count));
    }
  }

  return colors;
}
function blend(startColor, endColor) {
  var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';
  var s = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["parse"])(startColor);
  var e = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["parse"])(endColor);
  return interpolateRGB(s, e, ratio, format);
}
function mix(startcolor, endColor) {
  var ratio = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;
  var format = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'hex';
  return blend(startcolor, endColor, ratio, format);
}
/**
 * 
 * @param {Color|String} c 
 */

function contrast(c) {
  c = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["parse"])(c);
  return (Math.round(c.r * 299) + Math.round(c.g * 587) + Math.round(c.b * 114)) / 1000;
}
function contrastColor(c) {
  return contrast(c) >= 128 ? 'black' : 'white';
}
function gradient(colors) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
  colors = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["parseGradient"])(colors);
  var newColors = [];
  var maxCount = count - (colors.length - 1);
  var allCount = maxCount;

  for (var i = 1, len = colors.length; i < len; i++) {
    var startColor = colors[i - 1][0];
    var endColor = colors[i][0];
    var rate = i == 1 ? colors[i][1] : colors[i][1] - colors[i - 1][1];
    var colorCount = i == colors.length - 1 ? allCount : Math.floor(rate * maxCount);
    newColors = newColors.concat(scale([startColor, endColor], colorCount), [endColor]);
    allCount -= colorCount;
  }

  return newColors;
}
function scaleHSV(color) {
  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'h';
  var count = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 9;
  var exportFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'rgb';
  var min = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var max = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;
  var dist = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;
  var colorObj = Object(_parser__WEBPACK_IMPORTED_MODULE_0__["parse"])(color);
  var hsv = Object(_fromRGB__WEBPACK_IMPORTED_MODULE_3__["RGBtoHSV"])(colorObj);
  var unit = (max - min) * dist / count;
  var results = [];

  for (var i = 1; i <= count; i++) {
    hsv[target] = Math.abs((dist - unit * i) / dist);
    results.push(Object(_formatter__WEBPACK_IMPORTED_MODULE_2__["format"])(Object(_fromHSV__WEBPACK_IMPORTED_MODULE_4__["HSVtoRGB"])(hsv), exportFormat));
  }

  return results;
}
function scaleH(color) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;
  var exportFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgb';
  var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 360;
  return scaleHSV(color, 'h', count, exportFormat, min, max, 1);
}
function scaleS(color) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;
  var exportFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgb';
  var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  return scaleHSV(color, 's', count, exportFormat, min, max, 100);
}
function scaleV(color) {
  var count = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 9;
  var exportFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'rgb';
  var min = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var max = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
  return scaleHSV(color, 'v', count, exportFormat, min, max, 100);
}
/* predefined scale colors */

scale.parula = function (count) {
  return scale(['#352a87', '#0f5cdd', '#00b5a6', '#ffc337', '#fdff00'], count);
};

scale.jet = function (count) {
  return scale(['#00008f', '#0020ff', '#00ffff', '#51ff77', '#fdff00', '#ff0000', '#800000'], count);
};

scale.hsv = function (count) {
  return scale(['#ff0000', '#ffff00', '#00ff00', '#00ffff', '#0000ff', '#ff00ff', '#ff0000'], count);
};

scale.hot = function (count) {
  return scale(['#0b0000', '#ff0000', '#ffff00', '#ffffff'], count);
};

scale.pink = function (count) {
  return scale(['#1e0000', '#bd7b7b', '#e7e5b2', '#ffffff'], count);
};

scale.bone = function (count) {
  return scale(['#000000', '#4a4a68', '#a6c6c6', '#ffffff'], count);
};

scale.copper = function (count) {
  return scale(['#000000', '#3d2618', '#9d623e', '#ffa167', '#ffc77f'], count);
};

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MovableItem; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var _Item__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(35);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);
/* harmony import */ var _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(30);
/* harmony import */ var el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(58);
/* harmony import */ var gl_matrix__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(12);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(15);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(8);
/* harmony import */ var el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(32);
/* harmony import */ var el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(31);










function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var ZERO = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].z();
var MovableItem = /*#__PURE__*/function (_Item) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(MovableItem, _Item);

  var _super = _createSuper(MovableItem);

  function MovableItem() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, MovableItem);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(MovableItem, [{
    key: "isAbsolute",
    get: function get() {
      return this.json.position === 'absolute';
    }
  }, {
    key: "isRelative",
    get: function get() {
      return this.json.position === 'relative';
    }
  }, {
    key: "isChild",
    get: function get() {
      if (this.json.parent) {
        var isParentDrawItem = this.json.parent.is('project') === false;

        if (isParentDrawItem && this.isAbsolute) {
          return true;
        }
      }

      return false;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var isDeep = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(MovableItem.prototype), "toCloneObject", this).call(this, isDeep)), this.attrs('x', 'y', 'width', 'height'));
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(MovableItem.prototype), "convert", this).call(this, json);
      json.x = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(json.x);
      json.y = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(json.y);
      json.width = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(json.width);
      json.height = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(json.height);
      return json;
    } //////////////////////
    //
    // getters 
    //
    ///////////////////////

  }, {
    key: "setScreenX",
    value: function setScreenX(value) {
      var absoluteX = 0;

      if (this.isChild) {
        absoluteX = this.json.parent.screenX.value;
      }

      this.json.x.set(value - absoluteX);
      this.changed();
    }
  }, {
    key: "setScreenY",
    value: function setScreenY(value) {
      var absoluteY = 0;

      if (this.isChild) {
        absoluteY = this.json.parent.screenY.value;
      }

      this.json.y.set(value - absoluteY);
      this.changed();
    }
  }, {
    key: "screenX",
    get: function get() {
      if (this.isChild) {
        return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(this.json.parent.screenX.value + this.json.x.value);
      }

      return this.json.x || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].z();
    }
  }, {
    key: "screenY",
    get: function get() {
      if (this.isChild) {
        return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(this.json.parent.screenY.value + this.json.y.value);
      }

      return this.json.y || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].z();
    }
  }, {
    key: "offsetX",
    get: function get() {
      if (!this.parent) {
        return this.json.x || ZERO;
      }

      return this.json.x.toPx(this.screenWidth.value);
    }
  }, {
    key: "offsetY",
    get: function get() {
      if (!this.parent) {
        return this.json.y || ZERO;
      }

      return this.json.y.toPx(this.screenHeight.value);
    }
  }, {
    key: "screenWidth",
    get: function get() {
      if (this.is('project') || !this.parent) {
        return ZERO;
      }

      if (this.parent.is('project')) {
        return this.json.width.toPx();
      }

      if (this.is('artboard')) {
        return this.json.width.toPx();
      }

      return this.json.width.toPx(this.parent.screenWidth.value);
    }
  }, {
    key: "screenHeight",
    get: function get() {
      if (this.is('project') || !this.parent) {
        return ZERO;
      }

      if (this.parent.is('project')) {
        return this.json.height.toPx();
      }

      if (this.is('artboard')) {
        return this.json.height.toPx();
      }

      return this.json.height.toPx(this.parent.screenHeight.value);
    }
    /**
     * Item 이동하기 
     *  
     * @param {vec3} distVector 
     */

  }, {
    key: "move",
    value: function move() {
      var distVector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];
      this.reset({
        x: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(this.offsetX.value + distVector[0]).round(),
        // 1px 단위로 위치 설정 
        y: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(this.offsetY.value + distVector[1]).round()
      });
    }
  }, {
    key: "moveByCenter",
    value: function moveByCenter() {
      var newCenter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [0, 0, 0];
      var matrix = this.matrix;
      this.reset({
        x: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(newCenter[0] - matrix.width / 2),
        y: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(newCenter[1] - matrix.height / 2)
      });
    }
    /**
     * 충돌 체크 
     * 
     * polygon : ploygon 형태로 충돌 체크를 한다. 
     * 
     * @param {*} areaVerties 
     */

  }, {
    key: "checkInArea",
    value: function checkInArea(areaVerties) {
      return Object(el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__[/* polyPoly */ "d"])(areaVerties, this.verties());
    }
    /**
     * 특정 위치가 객체를 가리키고 있는데 체크한다. 
     * 
     * @param {number} x 
     * @param {number} y 
     */

  }, {
    key: "hasPoint",
    value: function hasPoint(x, y) {
      return Object(el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__[/* polyPoint */ "c"])(this.verties(), x, y);
    }
    /**
     * areaVerties 안에 Layer 가 포함된 경우 
     * 
     * @param {vec3[]} areaVerties 
     */

  }, {
    key: "isIncludeByArea",
    value: function isIncludeByArea(areaVerties) {
      return this.rectVerties().map(function (vector) {
        return el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__[/* polyPoint */ "c"].apply(void 0, [areaVerties].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(vector)));
      }).filter(Boolean).length === 4;
    }
  }, {
    key: "getPerspectiveMatrix",
    value: function getPerspectiveMatrix() {
      var hasPerspective = this.json['perspective'] || _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].get(this.json['transform'], 'perspective');

      if (!hasPerspective) {
        return undefined;
      }

      var _TransformOrigin$pars = el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_12__[/* TransformOrigin */ "a"].parseStyle(this.json['perspective-origin']),
          _TransformOrigin$pars2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_TransformOrigin$pars, 2),
          _TransformOrigin$pars3 = _TransformOrigin$pars2[0],
          perspectiveOriginX = _TransformOrigin$pars3 === void 0 ? el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].percent(50) : _TransformOrigin$pars3,
          _TransformOrigin$pars4 = _TransformOrigin$pars2[1],
          perspectiveOriginY = _TransformOrigin$pars4 === void 0 ? el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].percent(50) : _TransformOrigin$pars4;

      var width = this.screenWidth.value;
      var height = this.screenHeight.value;
      perspectiveOriginX = perspectiveOriginX.toPx(width).value;
      perspectiveOriginY = perspectiveOriginY.toPx(height).value; // 1. Start with the identity matrix.

      var view = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].create(); // 2. Translate by the computed X and Y values of perspective-origin     

      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, [perspectiveOriginX, perspectiveOriginY, 0]); // 3. Multiply by the matrix that would be obtained from the perspective() transform function, 
      // where the length is provided by the value of the perspective property

      var perspective = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].get(this.json['transform'], 'perspective');

      if (perspective.length) {
        gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(view, view, gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1 / perspective[0].value, 1));
      } else if (this.json['perspective'] && this.json['perspective'] != 'none') {
        gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(view, view, gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].fromValues(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, -1 / el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].parse(this.json['perspective']).value, 1));
      } else {
        return undefined;
      } // 4. Translate by the negated computed X and Y values of perspective-origin


      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, [-perspectiveOriginX, -perspectiveOriginY, 0]);
      return view;
    }
  }, {
    key: "getItemTransformMatrix",
    value: function getItemTransformMatrix() {
      var list = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].parseStyle(_property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].rotate(this.json['transform'], this.json['rotate']));
      var width = this.screenWidth.value;
      var height = this.screenHeight.value;
      return _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].createTransformMatrix(list, width, height);
    }
  }, {
    key: "getItemTransformMatrixInverse",
    value: function getItemTransformMatrixInverse() {
      return gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].invert([], this.getItemTransformMatrix());
    }
    /**
     * refer to https://www.w3.org/TR/css-transforms-2/
     * 
     * 1. Start with the identity matrix.
     * 2. Translate by the computed X, Y and Z of transform-origin
     * 3. Multiply by each of the transform functions in transform property from left to right
     * 4. Translate by the negated computed X, Y and Z values of transform-origin
     */

  }, {
    key: "getTransformMatrix",
    value: function getTransformMatrix() {
      var origin = el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_12__[/* TransformOrigin */ "a"].scale(this.json['transform-origin'] || '50% 50% 0px', this.screenWidth.value, this.screenHeight.value); // start with the identity matrix 

      var view = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].create(); // 2. Translate by the computed X, Y and Z of transform-origin        

      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, origin); // 3. Multiply by each of the transform functions in transform property from left to right        

      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(view, view, this.getItemTransformMatrix()); // 4. Translate by the negated computed X, Y and Z values of transform-origin        

      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* vec3 */ "d"].negate([], origin));
      return view;
    }
  }, {
    key: "getTransformMatrixInverse",
    value: function getTransformMatrixInverse() {
      return gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].invert([], this.getTransformMatrix());
    }
    /**
     * 방향에 따른 matrix 구하기 
     * 
     * @param {ReadOnlyVec3} vertextOffset 
     * @param {ReadOnlyVec3} center 
     */

  }, {
    key: "getDirectionTransformMatrix",
    value: function getDirectionTransformMatrix(vertextOffset, width, height) {
      var x = this.offsetX.value;
      var y = this.offsetY.value;
      var center = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* vec3 */ "d"].add([], el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_12__[/* TransformOrigin */ "a"].scale(this.json['transform-origin'] || '50% 50% 0px', width, height), gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* vec3 */ "d"].negate([], vertextOffset));
      var view = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].create();
      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, [x, y, 0]);
      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, vertextOffset);
      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, center);
      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(view, view, this.getItemTransformMatrix());
      gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(view, view, gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* vec3 */ "d"].negate([], center));
      return view;
    }
  }, {
    key: "getDirectionTopLeftMatrix",
    value: function getDirectionTopLeftMatrix(width, height) {
      return this.getDirectionTransformMatrix([0, 0, 0], width, height);
    }
  }, {
    key: "getDirectionLeftMatrix",
    value: function getDirectionLeftMatrix(width, height) {
      return this.getDirectionTransformMatrix([0, height / 2, 0], width, height);
    }
  }, {
    key: "getDirectionTopMatrix",
    value: function getDirectionTopMatrix(width, height) {
      return this.getDirectionTransformMatrix([width / 2, 0, 0], width, height);
    }
  }, {
    key: "getDirectionBottomLeftMatrix",
    value: function getDirectionBottomLeftMatrix(width, height) {
      return this.getDirectionTransformMatrix([0, height, 0], width, height);
    }
  }, {
    key: "getDirectionTopRightMatrix",
    value: function getDirectionTopRightMatrix(width, height) {
      return this.getDirectionTransformMatrix([width, 0, 0], width, height);
    }
  }, {
    key: "getDirectionRightMatrix",
    value: function getDirectionRightMatrix(width, height) {
      return this.getDirectionTransformMatrix([width, height / 2, 0], width, height);
    }
  }, {
    key: "getDirectionBottomRightMatrix",
    value: function getDirectionBottomRightMatrix(width, height) {
      return this.getDirectionTransformMatrix([width, height, 0], width, height);
    }
  }, {
    key: "getDirectionBottomMatrix",
    value: function getDirectionBottomMatrix(width, height) {
      return this.getDirectionTransformMatrix([width / 2, height, 0], width, height);
    }
  }, {
    key: "getAccumulatedMatrix",
    value: function getAccumulatedMatrix() {
      var transform = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].create();
      var path = this.path.filter(function (p) {
        return p.is('project') === false;
      });

      for (var i = 0, len = path.length; i < len; i++) {
        var current = path[i]; // multiply parent perspective 

        if (current.parent && Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_15__["isFunction"])(current.parent.getPerspectiveMatrix)) {
          var perspectiveMatrix = current.parent.getPerspectiveMatrix();

          if (perspectiveMatrix) {
            gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(transform, transform, perspectiveMatrix);
          }
        }

        var offsetX = current.offsetX.value;
        var offsetY = current.offsetY.value; // 5. Translate by offset x, y

        gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].translate(transform, transform, [offsetX, offsetY, 0]);
        gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].multiply(transform, transform, current.getTransformMatrix());
      }

      return transform;
    }
  }, {
    key: "getAccumulatedMatrixInverse",
    value: function getAccumulatedMatrixInverse() {
      return gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].invert([], this.getAccumulatedMatrix());
    }
  }, {
    key: "verties",
    value: function verties(width, height) {
      var model = Object(el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__[/* rectToVerties */ "e"])(0, 0, width || this.screenWidth.value, height || this.screenHeight.value, this.json['transform-origin']);
      return Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["vertiesMap"])(model, this.getAccumulatedMatrix());
    }
  }, {
    key: "selectionVerties",
    value: function selectionVerties() {
      var selectionModel = Object(el_base_functions_collision__WEBPACK_IMPORTED_MODULE_17__[/* rectToVerties */ "e"])(-6, -6, this.screenWidth.value + 12, this.screenHeight.value + 12, this.json['transform-origin']);
      return Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["vertiesMap"])(selectionModel, this.getAccumulatedMatrix());
    }
  }, {
    key: "rectVerties",
    value: function rectVerties() {
      return this.verties().filter(function (_, index) {
        return index < 4;
      });
    }
  }, {
    key: "guideVerties",
    value: function guideVerties() {
      return this.verties();
    }
  }, {
    key: "matrix",
    get: function get() {
      var id = this.id;
      var x = this.offsetX.value;
      var y = this.offsetY.value;
      var width = this.screenWidth.value;
      var height = this.screenHeight.value;
      var originalTransform = this.json.transform;
      var originalTransformOrigin = this.json['transform-origin'] || '50% 50% 0%';
      var parentMatrix = this.parent && Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_15__["isFunction"])(this.parent.getAccumulatedMatrix) ? this.parent.getAccumulatedMatrix() : gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].create();
      var parentMatrixInverse = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].invert([], parentMatrix);
      var localMatrix = this.getTransformMatrix();
      var localMatrixInverse = this.getTransformMatrixInverse();
      var itemMatrix = this.getItemTransformMatrix();
      var itemMatrixInverse = this.getItemTransformMatrixInverse();
      var accumulatedMatrix = this.getAccumulatedMatrix();
      var accumulatedMatrixInverse = this.getAccumulatedMatrixInverse();
      var directionMatrix = {
        'to top left': this.getDirectionTopLeftMatrix(width, height),
        'to top': this.getDirectionTopMatrix(width, height),
        'to top right': this.getDirectionTopRightMatrix(width, height),
        'to right': this.getDirectionRightMatrix(width, height),
        'to bottom left': this.getDirectionBottomLeftMatrix(width, height),
        'to bottom': this.getDirectionBottomMatrix(width, height),
        'to bottom right': this.getDirectionBottomRightMatrix(width, height),
        'to left': this.getDirectionLeftMatrix(width, height)
      };
      var verties = this.verties(width, height);
      var xList = verties.map(function (it) {
        return it[0];
      });
      var yList = verties.map(function (it) {
        return it[1];
      });
      return {
        id: id,
        x: x,
        y: y,
        width: width,
        height: height,
        transform: originalTransform,
        originalTransformOrigin: originalTransformOrigin,

        /**
         * 변환되는 모든 vertext 를 기록 
         */
        verties: verties,

        /**
         * 회전되는 vertext 를 제외한 모든 vertext 
         * 회전 방식이 바뀌면 삭제 될 수 있음. 
         */
        rectVerties: verties,
        xList: xList,
        yList: yList,
        directionMatrix: directionMatrix,
        parentMatrix: parentMatrix,
        // 부모의 matrix 
        parentMatrixInverse: parentMatrixInverse,
        localMatrix: localMatrix,
        // 자기 자신의 matrix with translate offset(x,y)
        localMatrixInverse: localMatrixInverse,
        itemMatrix: itemMatrix,
        // 자기 자신의 matrix without translate offset(x,y)
        itemMatrixInverse: itemMatrixInverse,
        accumulatedMatrix: accumulatedMatrix,
        // parentMatrix * offset translate * localMatrix , 축적된 matrix 
        accumulatedMatrixInverse: accumulatedMatrixInverse
      };
    }
    /**
     * 
     * @returns {vec3[]} 패스의 verties 
     */

  }, {
    key: "pathVerties",
    value: function pathVerties() {
      return this.accumulatedPath().verties;
    }
    /**
     * 중첩된 matrix 적용한 path segment 
     * 
     * @returns {PathParser} 
     */

  }, {
    key: "accumulatedPath",
    value: function accumulatedPath() {
      var pathString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var d = pathString || this.json.d;
      var pathParser = new el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"](d);
      var transform = this.getAccumulatedMatrix();
      pathParser.transformMat4(transform);
      return pathParser;
    } // 전체 캔버스에 그려진 path 의 개별 verties 를 
    // svg container 의 matrix 의 inverse matrix 를 곱해서 재계산 한다.     

  }, {
    key: "invertPath",
    value: function invertPath() {
      var pathString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var path = new el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_16__[/* default */ "a"](pathString);
      path.transformMat4(this.getAccumulatedMatrixInverse());
      return path;
    }
    /**
     * pathString 의 좌표를 기준 좌표로 돌린다. 
     * 
     * @param {string} pathString   svg path string 
     */

  }, {
    key: "invertPathString",
    value: function invertPathString() {
      var pathString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return this.invertPath(pathString).d;
    }
    /**
     * 나를 포함한 모든 layer 에 대해서 체크한다. 
     * 
     * project, artboard 를 제외 
     * 
     * @param {vec3[]} areaVerties 
     */

  }, {
    key: "checkInAreaForAll",
    value: function checkInAreaForAll(areaVerties) {
      var items = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(this.checkInAreaForLayers(areaVerties));

      if (this.is('artboard')) return items;
      if (this.is('project')) return items;

      if (this.checkInArea(areaVerties)) {
        // ref 를 넘겨야 proxy 기능을 그대로 사용 할 수 있다. 
        // 그렇지 않으면 일반적인 객체에 접근 하는 것 밖에 안된다. 즉, json 을 사용할 수가 없다. 
        items.push(this.ref);
      }

      return items;
    }
    /**
     * area 에 속하는지 충돌 체크, 
     * 
     * @param {vec3[]} areaVerties 
     * @returns {Item[]}  충돌 체크된 선택된 객체 리스트 
     */

  }, {
    key: "checkInAreaForLayers",
    value: function checkInAreaForLayers(areaVerties) {
      var items = [];
      this.layers.forEach(function (layer) {
        items.push.apply(items, layer.checkInAreaForLayers(areaVerties));

        if (layer.checkInArea(areaVerties)) {
          items.push(layer);
        }
      });
      return items;
    }
  }, {
    key: "getTransformOriginMatrix",
    value: function getTransformOriginMatrix() {
      return gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].fromTranslation([], el_editor_property_parser_TransformOrigin__WEBPACK_IMPORTED_MODULE_12__[/* TransformOrigin */ "a"].scale(this.json['transform-origin'] || '50% 50% 0px', this.screenWidth.value, this.screenHeight.value));
    }
  }, {
    key: "getTransformOriginMatrixInverse",
    value: function getTransformOriginMatrixInverse() {
      return gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].invert([], this.getTransformOriginMatrix());
    }
    /**
     * 새로운 부모를 기준으로 childItem 의 transform 을 맞춘다. 
     * 
     * 1. childItem 의 accumulatedMatrix 를 구한다. 
     * 2. 새로운 부모를 기준으로 좌표를 다시 맞춘다.   parentItem.accumulatedMatrixInverse 
     * 
     * childItem 의 좌표를 새로운 parent 로 맞출 때는  
     * itemMatrix (rotateZ) 를 먼저 구하고 offset 을 다시 구하는 순서로 간다. 
     * 
     * @param {Item} childItem 
     */

  }, {
    key: "resetMatrix",
    value: function resetMatrix(childItem) {
      // 새로운 offset 좌표는 아래와 같이 구한다. 
      // [newParentMatrix] * [newTranslate] * [newItemTransform] = [newAccumulatedMatrix]
      // [newTranslate] * [newItemTransform] = [newParentMatrix * -1] * [newAccumulatedMatrix]
      var matrix = Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["calculateMatrix"])(this.getAccumulatedMatrixInverse(), childItem.getAccumulatedMatrix()); // scale 구하기 

      var newScaleTransform = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].fromScale(gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].getScaling([], matrix).map(function (it) {
        return Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["round"])(it, 1000);
      })); // 회전 영역 먼저 구하기 

      var q = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].getRotation([], matrix);
      var axis = [];
      var rad = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* quat */ "b"].getAxisAngle(axis, q);
      var newRotateTransform = [{
        angle: axis[0] ? Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["radianToDegree"])(rad * axis[0]) : 0,
        type: 'rotateX'
      }, {
        angle: axis[1] ? Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["radianToDegree"])(rad * axis[1]) : 0,
        type: 'rotateY'
      }, {
        angle: axis[2] ? Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["radianToDegree"])(rad * axis[2]) : 0,
        type: 'rotateZ'
      }].filter(function (it) {
        return it.angle !== 0;
      }).map(function (it) {
        return "".concat(it.type, "(").concat(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].deg(it.angle % 360).round(1000), ")");
      }).join(' '); // 새로 변환될 item transform 정의 

      var newChildItemTransform = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].replaceAll(childItem.transform, "".concat(newScaleTransform, " ").concat(newRotateTransform));
      var list = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].parseStyle(newChildItemTransform);
      var width = childItem.screenWidth.value;
      var height = childItem.screenHeight.value;
      var newTransformMatrix = _property_parser_Transform__WEBPACK_IMPORTED_MODULE_11__[/* Transform */ "a"].createTransformMatrix(list, width, height); // 새로 변환될 item transform 정의 
      // [newLocalMatrix] * [
      //     [origin] * [newTransformMatrix] * [origin * -1]
      //      * -1 
      // ]
      // 

      var _mat4$getTranslation = gl_matrix__WEBPACK_IMPORTED_MODULE_13__[/* mat4 */ "a"].getTranslation([], Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["calculateMatrix"])(matrix, Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_14__["calculateMatrixInverse"])(childItem.getTransformOriginMatrix(), newTransformMatrix, childItem.getTransformOriginMatrixInverse()))),
          _mat4$getTranslation2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_mat4$getTranslation, 3),
          x = _mat4$getTranslation2[0],
          y = _mat4$getTranslation2[1],
          z = _mat4$getTranslation2[2];

      childItem.reset({
        x: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(x),
        y: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(y),
        transform: newChildItemTransform
      });
    }
    /** order by  */

  }, {
    key: "getIndex",
    value: function getIndex() {
      var parentLayers = this.json.parent.layers;
      var startIndex = -1;

      for (var i = 0, len = parentLayers.length; i < len; i++) {
        if (parentLayers[i] === this.ref) {
          startIndex = i;
          break;
        }
      }

      return startIndex;
    }
  }, {
    key: "setOrder",
    value: function setOrder(targetIndex) {
      var parent = this.json.parent;
      var startIndex = this.getIndex();

      if (startIndex > -1) {
        parent.layers[startIndex] = parent.layers[targetIndex];
        parent.layers[targetIndex] = this.ref;
      }
    } // get next sibiling item 

  }, {
    key: "next",
    value: function next() {
      if (this.isLast()) {
        return this.ref;
      }

      var index = this.getIndex();
      return this.json.parent.layers[index + 1];
    } // get prev sibiling item   

  }, {
    key: "prev",
    value: function prev() {
      if (this.isFirst()) {
        return this.ref;
      }

      var index = this.getIndex();
      return this.json.parent.layers[index - 1];
    }
    /**
     * 레이어를 현재의 다음으로 보낸다. 
     * 즉, 화면상에 렌더링 영역에서 올라온다. 
     */

  }, {
    key: "orderNext",
    value: function orderNext() {
      if (this.isLast()) {
        // 마지막 일 때는  
        // parent 의 next 의 첫번째 요소가 된다. 
        if (this.json.parent.is('artboard')) {
          // 부모가 artboard 이면  더이상 갈 곳이 없다. 
          return;
        }

        this.json.parent.next().add(this, 'prepend');
        return;
      }

      var startIndex = this.getIndex();

      if (startIndex > -1) {
        this.setOrder(startIndex + 1);
      }
    }
  }, {
    key: "isFirst",
    value: function isFirst() {
      return this.getIndex() === 0;
    }
  }, {
    key: "isLast",
    value: function isLast() {
      return this.getIndex() === this.json.parent.layers.length - 1;
    }
    /**
     * 레이어를 현재의 이전으로 보낸다. 
     * 즉, 화면상에 렌더링 영역에서 내려간다.
     */

  }, {
    key: "orderPrev",
    value: function orderPrev() {
      if (this.isFirst()) {
        // 처음 일 때는  
        // parent 의 prev 의 마지막 요소가 된다.
        if (this.json.parent.is('artboard')) {
          // 부모가 artboard 이면  더이상 갈 곳이 없다. 
          return;
        }

        this.json.parent.prev().add(this);
        return;
      }

      var startIndex = this.getIndex();

      if (startIndex > 0) {
        this.setOrder(startIndex - 1);
      }
    } // 부모의 처음으로 보내기 

  }, {
    key: "orderFirst",
    value: function orderFirst() {
      this.setOrder(0);
    } // 부모의 마지막으로 보내기 

  }, {
    key: "orderLast",
    value: function orderLast() {
      this.setOrder(this.json.parent.layers.length - 1);
    } //TODO: 전체중에 처음으로 보내기 

  }, {
    key: "orderTop",
    value: function orderTop() {} //TODO: 전체중에 마지막으로 보내기 

  }, {
    key: "orderBottom",
    value: function orderBottom() {}
  }]);

  return MovableItem;
}(_Item__WEBPACK_IMPORTED_MODULE_9__[/* Item */ "a"]);

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGPathItem; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(32);
/* harmony import */ var el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(38);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(11);
/* harmony import */ var el_editor_manager_ComponentManager__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(33);
/* harmony import */ var _SVGItem__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(82);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGPathItem = /*#__PURE__*/function (_SVGItem) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(SVGPathItem, _SVGItem);

  var _super = _createSuper(SVGPathItem);

  function SVGPathItem() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, SVGPathItem);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(SVGPathItem, [{
    key: "getIcon",
    value: function getIcon() {
      return el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].edit;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGPathItem.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: 'svg-path',
        name: "New Path",
        'stroke-width': 1,
        d: '',
        // 이건 최종 결과물로만 쓰고 나머지는 모두 segments 로만 사용한다. 
        totalLength: 0
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "setCache",
    value: function setCache() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGPathItem.prototype), "setCache", this).call(this); // 캐쉬 할 때는  0~1 사이 값으로 가지고 있다가 


      this.cachePath = new el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"](this.json.d);
      this.cachePath.scale(1 / this.json.width.value, 1 / this.json.height.value);
    }
  }, {
    key: "recover",
    value: function recover() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGPathItem.prototype), "recover", this).call(this); // 캐쉬가 없는 상태에서는 초기 캐쉬를 생성해준다. 


      if (!this.cachePath) this.setCache();
      var sx = this.json.width.value;
      var sy = this.json.height.value; // 마지막 크기(width, height) 기준으로 다시 확대한다. 

      this.json.d = this.cachePath.clone().scaleTo(sx, sy);
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(SVGPathItem.prototype), "toCloneObject", this).call(this)), this.attrs('d'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Path";
    }
  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      var svgProperties = properties.filter(function (it) {
        return Object(el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__[/* hasSVGProperty */ "g"])(it.property) && Object(el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__[/* hasSVGPathProperty */ "f"])(it.property);
      });
      var cssProperties = properties.filter(function (it) {
        return Object(el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__[/* hasCSSProperty */ "e"])(it.property);
      });
      return [{
        selector: "[data-id=\"".concat(this.json.id, "\"]"),
        properties: cssProperties
      }, {
        selector: "[data-id=\"".concat(this.json.id, "\"] path"),
        properties: svgProperties
      }];
    }
  }]);

  return SVGPathItem;
}(_SVGItem__WEBPACK_IMPORTED_MODULE_11__[/* SVGItem */ "a"]);
el_editor_manager_ComponentManager__WEBPACK_IMPORTED_MODULE_10__[/* ComponentManager */ "a"].registerComponent('svg-path', SVGPathItem);

/***/ }),
/* 102 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ DomItem_DomItem; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/items/MovableItem.js
var MovableItem = __webpack_require__(100);

// CONCATENATED MODULE: ./src/el/editor/items/GroupItem.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }


var layout_list = ['flex', 'grid'];
var GroupItem_GroupItem = /*#__PURE__*/function (_MovableItem) {
  inherits_default()(GroupItem, _MovableItem);

  var _super = _createSuper(GroupItem);

  function GroupItem() {
    classCallCheck_default()(this, GroupItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(GroupItem, [{
    key: "isGroup",
    get: function get() {
      return Boolean(this.layers.length);
    }
  }, {
    key: "isLayoutItem",
    value: function isLayoutItem() {
      return this.parent.hasLayout();
    }
    /**
     * 
     * 레이아웃을 가지고 있는 container 인지 판별
     * 
     * @returns {boolean}
     */

  }, {
    key: "hasLayout",
    value: function hasLayout() {
      return this.json.layout !== 'default';
    }
  }, {
    key: "isInGrid",
    value: function isInGrid() {
      if (!this.isLayoutItem()) return false;
      return 'grid' === this.parent.layout;
    }
  }, {
    key: "isInFlex",
    value: function isInFlex() {
      if (!this.isLayoutItem()) return false;
      return 'flex' === this.parent.layout;
    }
  }]);

  return GroupItem;
}(MovableItem["a" /* MovableItem */]);
// EXTERNAL MODULE: ./src/el/editor/property-parser/Selector.js
var Selector = __webpack_require__(137);

// EXTERNAL MODULE: ./src/el/editor/property-parser/ClipPath.js
var ClipPath = __webpack_require__(40);

// EXTERNAL MODULE: ./src/el/editor/parser/PathParser.js
var PathParser = __webpack_require__(32);

// CONCATENATED MODULE: ./src/el/editor/items/DomItem.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function DomItem_createSuper(Derived) { var hasNativeReflectConstruct = DomItem_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DomItem_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var DomItem_DomItem = /*#__PURE__*/function (_GroupItem) {
  inherits_default()(DomItem, _GroupItem);

  var _super = DomItem_createSuper(DomItem);

  function DomItem() {
    classCallCheck_default()(this, DomItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(DomItem, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(DomItem.prototype), "getDefaultObject", this).call(this, _objectSpread({
        'position': 'absolute',
        'x': Length["a" /* Length */].z(),
        'y': Length["a" /* Length */].z(),
        'right': '',
        'bottom': '',
        'rootVariable': '',
        'variable': '',
        'width': Length["a" /* Length */].px(300),
        'height': Length["a" /* Length */].px(300),
        'color': "black",
        'font-size': Length["a" /* Length */].px(13),
        'overflow': 'visible',
        'rotate': Length["a" /* Length */].deg(0),
        'opacity': 1,
        'z-index': Length["a" /* Length */].auto,
        'transform-style': 'preserve-3d',
        'layout': 'default',
        'flex-layout': 'display:flex;',
        'grid-layout': 'display:grid;',
        // 'keyframe': 'sample 0% --aaa 100px | sample 100% width 200px | sample2 0.5% background-image background-image:linear-gradient(to right, black, yellow 100%)',
        // keyframes: [],
        selectors: [],
        svg: []
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var json = this.json;
      return _objectSpread(_objectSpread(_objectSpread({}, get_default()(getPrototypeOf_default()(DomItem.prototype), "toCloneObject", this).call(this)), this.attrs('position', 'right', 'bottom', 'rootVariable', 'variable', 'transform', 'filter', 'backdrop-filter', 'background-color', 'background-image', 'text-clip', 'border-radius', 'border', 'box-shadow', 'text-shadow', 'clip-path', 'color', 'font-size', 'font-stretch', 'line-height', 'text-align', 'text-transform', 'text-decoration', 'letter-spacing', 'word-spacing', 'text-indent', 'perspective-origin', 'transform-origin', 'transform-style', 'perspective', 'mix-blend-mode', 'overflow', 'opacity', 'rotate', 'flex-layout', 'grid-layout', 'animation', 'transition')), {}, {
        // 'keyframe': 'sample 0% --aaa 100px | sample 100% width 200px | sample2 0.5% background-image background-image:linear-gradient(to right, black, yellow 100%)',
        // keyframes: json.keyframes.map(keyframe => keyframe.clone()),
        selectors: json.selectors.map(function (selector) {
          return selector.clone();
        }),
        svg: json.svg.map(function (svg) {
          return svg.clone();
        })
      });
    }
  }, {
    key: "addSelector",
    value: function addSelector(selector) {
      this.json.selectors.push(selector);
      return selector;
    }
  }, {
    key: "createSelector",
    value: function createSelector() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addSelector(new Selector["a" /* Selector */](_objectSpread({
        checked: true
      }, data)));
    }
  }, {
    key: "removePropertyList",
    value: function removePropertyList(arr, removeIndex) {
      arr.splice(removeIndex, 1);
    }
  }, {
    key: "removeSelector",
    value: function removeSelector(removeIndex) {
      this.removePropertyList(this.json.selectors, removeIndex);
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return true;
    }
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(toConsumableArray_default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "updateSelector",
    value: function updateSelector(index) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.selectors[+index].reset(data);
    }
  }, {
    key: "traverse",
    value: function traverse(item, results, hasLayoutItem) {
      var _this = this;

      // var parentItemType = item.parent().itemType;
      if (item.isAttribute()) return; // if (parentItemType == 'layer') return;

      if (!hasLayoutItem && item.isLayoutItem() && !item.isRootItem()) return;
      results.push(item);
      item.children.forEach(function (child) {
        _this.traverse(child, results);
      });
    }
  }, {
    key: "tree",
    value: function tree(hasLayoutItem) {
      var _this2 = this;

      var results = [];
      this.children.forEach(function (item) {
        _this2.traverse(item, results, hasLayoutItem);
      });
      return results;
    } // export animation keyframe

  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      return [{
        selector: "[data-id=\"".concat(this.json.id, "\"]"),
        properties: properties
      }];
    }
  }, {
    key: "toBound",
    value: function toBound() {
      var obj = {
        x: this.json.x ? this.json.x.clone() : Length["a" /* Length */].z(),
        y: this.json.y ? this.json.y.clone() : Length["a" /* Length */].z(),
        width: this.json.width.clone(),
        height: this.json.height.clone()
      };
      obj.x2 = Length["a" /* Length */].px(obj.x.value + obj.width.value);
      obj.y2 = Length["a" /* Length */].px(obj.y.value + obj.height.value);
      return obj;
    }
  }, {
    key: "setCache",
    value: function setCache() {
      var obj = ClipPath["a" /* ClipPath */].parseStyle(this.json['clip-path']);

      if (obj.type === 'path') {
        // 캐쉬 할 때는  0~1 사이 값으로 가지고 있다가 
        this.cacheClipPath = new PathParser["a" /* default */](obj.value.trim());
        this.cacheClipPath.scale(1 / this.json.width.value, 1 / this.json.height.value);
      } else {
        this.cacheClipPath = undefined;
      }
    }
  }, {
    key: "recover",
    value: function recover() {
      if (this.cacheClipPath) {
        var sx = this.json.width.value;
        var sy = this.json.height.value; // 마지막 크기(width, height) 기준으로 다시 확대한다. 

        this.reset({
          'clip-path': "path(".concat(this.cacheClipPath.clone().scaleTo(sx, sy), ")")
        });
      }
    }
  }]);

  return DomItem;
}(GroupItem_GroupItem);

/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ TemplateEngine_TemplateEngine; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// CONCATENATED MODULE: ./src/el/editor/renderer/template-engine/DomTemplateEngine.js


var DomTemplateEngine_DomTemplateEngine = /*#__PURE__*/function () {
  function DomTemplateEngine() {
    classCallCheck_default()(this, DomTemplateEngine);
  }

  createClass_default()(DomTemplateEngine, null, [{
    key: "compile",
    value: function compile(template) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return template;
    }
  }]);

  return DomTemplateEngine;
}();
// CONCATENATED MODULE: ./src/el/editor/renderer/template-engine/TemplateEngine.js



var EngineList = {
  'dom': DomTemplateEngine_DomTemplateEngine
};
var TemplateEngine_TemplateEngine = /*#__PURE__*/function () {
  function TemplateEngine() {
    classCallCheck_default()(this, TemplateEngine);
  }

  createClass_default()(TemplateEngine, null, [{
    key: "compile",
    value: function compile(engine, template) {
      var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var currentEngine = EngineList[engine] || EngineList['dom'];
      return currentEngine.compile(template, params);
    }
  }]);

  return TemplateEngine;
}();
;

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PathDataEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(32);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PathDataEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(PathDataEditor, _EditorElement);

  var _super = _createSuper(PathDataEditor);

  function PathDataEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, PathDataEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(PathDataEditor, [{
    key: "initState",
    value: function initState() {
      var parser = new el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](this.props.value || '');
      return {
        parser: parser
      };
    }
  }, {
    key: "makeSegments",
    value: function makeSegments() {
      return this.refs.$data.$$('.segment').map(function ($segment) {
        var $command = $segment.$('.command');
        var command = $command.attr('data-command');

        if (command === 'Z' && $command.attr('data-toggle') === 'false') {
          return null;
        }

        var values = $segment.$$('.values input[type=number]').map(function (it) {
          return +it.value;
        });
        return {
          command: command,
          values: values
        };
      }).filter(function (it) {
        return it;
      });
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var segments = this.makeSegments();
      this.state.parser.resetSegments(segments);
      this.modifyPathData();
    }
  }, {
    key: "modifyPathData",
    value: function modifyPathData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        parser: new el_editor_parser_PathParser__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"](value)
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.parser.joinPath();
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='path-data-editor'>\n                <div class='data' ref='$data'></div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$data'),
    value: function value() {
      var _this = this;

      var segments = [];
      this.state.parser.segments.forEach(function (it, index) {
        var s = _objectSpread({}, it);

        segments.push(s);
        var next = _this.state.parser.segments[index + 1];

        if (next && next.command === 'M') {
          if (s.command !== 'Z') {
            segments.push({
              command: 'Z',
              toggle: false,
              values: []
            });
          } else {
            s.toggle = true;
          }
        }
      });
      var last = this.state.parser.segments[this.state.parser.segments.length - 1];

      if (last && last.command !== 'Z') {
        segments.push({
          command: 'Z',
          toggle: false,
          values: []
        });
      }

      var arr = segments.map(function (it) {
        var cls = it.command === 'M' ? 'm' : '';
        return (
          /*html*/
          "\n                <div class='segment ".concat(cls, "'>\n                    <div class='command' data-command='").concat(it.command, "' data-toggle=\"").concat(it.toggle, "\" title='Toggle'>").concat(it.command, "</div>\n                    <div class='values'>\n                        ").concat(it.values.map(function (v) {
            return (
              /*html*/
              "<input type=\"number\" value=\"".concat(v, "\" />")
            );
          }).join(''), "\n\n                        ").concat(it.command === 'Z' ? it.toggle === false ? "opened" : 'closed' : '', "\n                    </div>\n                </div>\n            ")
        );
      });
      arr.unshift(
      /*html*/
      "\n            <div class='segment-empty'>\n                <div class='command'></div>\n                <div class='values'>\n                    <span>X</span>\n                    <span>Y</span>\n                </div>\n            </div>\n        ");
      return arr;
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["INPUT"])('$data input[type=number]') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["DEBOUNCE"])(300),
    value: function value(e) {
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$data .command[data-toggle]'),
    value: function value(e) {
      var _e$$dt$attrs = e.$dt.attrs('data-command', 'data-toggle'),
          _e$$dt$attrs2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_e$$dt$attrs, 2),
          command = _e$$dt$attrs2[0],
          toggle = _e$$dt$attrs2[1];

      if (command === 'Z') {
        if (toggle !== 'false') {
          toggle = 'false';
        } else {
          toggle = 'true';
        }

        e.$dt.attr('data-toggle', toggle);
        this.updateData();
      }
    }
  }]);

  return PathDataEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_9__[/* registElement */ "a"])({
  PathDataEditor: PathDataEditor
});

/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OffsetPathListEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(39);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var OffsetPathListEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(OffsetPathListEditor, _EditorElement);

  var _super = _createSuper(OffsetPathListEditor);

  function OffsetPathListEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, OffsetPathListEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(OffsetPathListEditor, [{
    key: "initState",
    value: function initState() {
      var _split$map = (this.props.value || '').split(',').map(function (it) {
        return it.trim();
      }),
          _split$map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_split$map, 4),
          id = _split$map2[0],
          distance = _split$map2[1],
          rotateStatus = _split$map2[2],
          rotate = _split$map2[3];

      return {
        id: id,
        distance: distance || '0%',
        rotateStatus: rotateStatus || 'auto',
        rotate: rotate || '0deg'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyOffsetPath();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var _this = this;

      return Object.keys(this.state).map(function (it) {
        return _this.state[it];
      }).join(',');
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _split$map3 = (value || '').split(',').map(function (it) {
        return it.trim();
      }),
          _split$map4 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_split$map3, 4),
          id = _split$map4[0],
          distance = _split$map4[1],
          rotateStatus = _split$map4[2],
          rotate = _split$map4[3];

      this.setState({
        id: id,
        distance: distance,
        rotateStatus: rotateStatus,
        rotate: rotate
      }, false);
      this.refresh();
    }
  }, {
    key: "modifyOffsetPath",
    value: function modifyOffsetPath() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='offset-path-editor'></div>\n        "
      );
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      var project = this.$selection.currentProject;
      var paths = {};

      if (project) {
        project.allLayers.filter(function (it) {
          return it.is('svg-path', 'svg-polygon');
        }).forEach(function (it) {
          paths[it.id] = it;
        });
      }

      return {
        options: Object.keys(paths).map(function (id) {
          return "".concat(id, ":").concat(paths[id].name);
        }).join(','),
        paths: paths
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])(),
    value: function value() {
      var obj = this.getOptions();
      var options = ',' + obj.options;
      var paths = obj.paths || {};
      var _this$state = this.state,
          id = _this$state.id,
          rotateStatus = _this$state.rotateStatus,
          rotate = _this$state.rotate,
          distance = _this$state.distance;
      return (
        /*html*/
        "\n        <div>\n            <div class='offset-path-item'>\n                <object refClass=\"SelectEditor\"  ref='$path' label='".concat(this.$i18n('offset.path.list.editor.path'), "' key=\"id\" value=\"").concat(id, "\" options=\"").concat(options, "\" onchange='changeRangeEditor' />\n            </div>\n            <div class='offset-path-item'>\n                <div>").concat(this.$i18n('offset.path.list.editor.totalLength'), ": <span ref='$totalLength'>").concat(paths[id] && paths[id].totalLength || 0, "</span></div>\n            </div>\n            <div class='offset-path-item'>\n                <object refClass=\"RangeEditor\"  ref='$distance' label='").concat(this.$i18n('offset.path.list.editor.distance'), "' min=\"0\" max=\"100\" value=\"").concat(distance || '0%', "\" key='distance' unit=\"%,px\" onchange='changeRangeEditor' /> \n            </div>\n            <div class='offset-path-item'>\n                <object refClass=\"SelectEditor\"  ref='$status' label='").concat(this.$i18n('offset.path.list.editor.direction'), "' key='rotateStatus' value=\"").concat(rotateStatus, "\" options=\"auto,auto angle,angle,reverse,element\" onchange='changeRangeEditor' /> \n            </div>\n            <div class='offset-path-item'>\n                <object refClass=\"RangeEditor\"  ref='$rotate' label='").concat(this.$i18n('offset.path.list.editor.rotate'), "' min=\"0\" max=\"2000\" key='rotate' value='").concat(rotate || '0deg', "' units=\"deg,turn\" onchange='changeRangeEditor' /> \n            </div>     \n        </div>           \n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$totalLength'),
    value: function value() {
      var id = this.state.id;
      var options = this.getOptions();
      var layer = options.paths[id] || {
        totalLength: 0
      };
      var totalLength = layer.totalLength || 0;
      return {
        innerHTML: "<span>".concat(totalLength, "</span>")
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, key, _value));
      this.bindData('$totalLength');
    }
  }]);

  return OffsetPathListEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  OffsetPathListEditor: OffsetPathListEditor
});

/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BorderEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(28);
/* harmony import */ var _BorderValueEditor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(125);
/* harmony import */ var el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(65);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var borderTypeList = ["border" // "border-top", 
// "border-right", 
// "border-bottom", 
// "border-left"
];
var borderTypeTitle = {
  "border": 'all',
  "border-top": 'top',
  "border-right": 'right',
  "border-bottom": 'bottom',
  "border-left": 'left'
};

var BorderEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(BorderEditor, _EditorElement);

  var _super = _createSuper(BorderEditor);

  function BorderEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BorderEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BorderEditor, [{
    key: "initState",
    value: function initState() {
      var borders = el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].parseStyle(this.props.value);
      var direction = Object.keys(borders)[0] || 'border';
      return {
        direction: direction,
        borders: borders
      };
    }
  }, {
    key: "updateData",
    value: function updateData(obj) {
      this.setState(obj, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].join(this.state.borders);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.state.borders = el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].parseStyle(value);
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])('$editorArea'),
    value: function value() {
      var _this = this;

      return borderTypeList.map(function (type) {
        var label = borderTypeTitle[type] || type;
        label = _this.$i18n('border.editor.' + label);
        return (
          /*html*/
          "\n      <div>\n        <object refClass='BorderValueEditor' ref='$".concat(type, "' label='").concat(label, "' key=\"").concat(type, "\" value=\"").concat(_this.state.borders[type], "\" onchange=\"changeKeyValue\" />\n      </div>\n      ")
        );
      });
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"border-editor\">\n        <div class='header'>\n          <div></div>\n          <label>".concat(this.$i18n('border.editor.width'), "</label>\n          <label>").concat(this.$i18n('border.editor.style'), "</label>\n          <label>").concat(this.$i18n('border.editor.color'), "</label>\n        </div>\n        <div class='editor-area' ref='$editorArea'>\n\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      var borders = this.state.borders;
      borders[key] = _value;
      this.updateData({
        borders: borders
      });
    }
  }]);

  return BorderEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_9__[/* registElement */ "a"])({
  BorderEditor: BorderEditor
});

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PluginManager; });
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(17);
/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var el_editor_items_Item__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(35);





var PluginManager = new ( /*#__PURE__*/function () {
  function _class() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, _class);

    this.plugins = [];
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(_class, [{
    key: "registerPlugin",
    value: function registerPlugin(func) {
      this.plugins.push(func);
    }
    /**
     * ItemType 에 해당되는 Item 객체를 생성한다. 
     * create Item instance
     * 
     * @param {string} itemType  ItemType 
     * @param {object} obj 
     * @returns {Item} 
     */

  }, {
    key: "initializePlugin",
    value: function () {
      var _initializePlugin = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee2(editor) {
        var options,
            _args2 = arguments;
        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};
                _context2.next = 3;
                return Promise.all(this.plugins.map( /*#__PURE__*/function () {
                  var _ref = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.mark(function _callee(CreatePluginFunction) {
                    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_3___default.a.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return CreatePluginFunction(editor, options);

                          case 2:
                            return _context.abrupt("return", _context.sent);

                          case 3:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x2) {
                    return _ref.apply(this, arguments);
                  };
                }()));

              case 3:
                return _context2.abrupt("return", _context2.sent);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function initializePlugin(_x) {
        return _initializePlugin.apply(this, arguments);
      }

      return initializePlugin;
    }()
  }]);

  return _class;
}())();

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// CONCATENATED MODULE: ./src/el/editor/preset/patterns/check.js
/* harmony default export */ var check = ({
  key: 'check',
  title: 'Check',
  execute: function execute() {
    return [{
      pattern: "check(20px 20px, 10px 10px, black, transparent)"
    }, {
      pattern: "check(40px 40px, 20px 20px, black, transparent)"
    }, {
      pattern: "check(60px 60px, 30px 30px, #DDB104, rgba(254,240,188,0))"
    }, {
      pattern: "check(80px 80px, 40px 40px, #DDB104, rgba(254,240,188,0))"
    }, {
      pattern: "check(100px 100px, 50px 50px, #DCF3DC, transparent)"
    }, {
      pattern: "check(200px 200px, 100px 100px, #102C45, transparent)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/grid.js
/* harmony default export */ var grid = ({
  key: 'grid',
  title: 'Grid',
  execute: function execute() {
    return [{
      pattern: "grid(20px 20px, 10px 10px, black, transparent)"
    }, {
      pattern: "grid(40px 40px, 20px 20px, black, transparent)"
    }, {
      pattern: "grid(60px 60px, 30px 30px, #DDB104, rgba(254,240,188,0))"
    }, {
      pattern: "grid(80px 80px, 40px 40px, #DDB104, rgba(254,240,188,0))"
    }, {
      pattern: "grid(100px 100px, 50px 50px, #DCF3DC, transparent)"
    }, {
      pattern: "grid(200px 200px, 100px 100px, #102C45, transparent)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/dot.js
/* harmony default export */ var dot = ({
  key: 'dot',
  title: 'Dot',
  execute: function execute() {
    return [{
      pattern: "dot(20px 20px, 10px 10px, #B7C4CD, white, normal, 1px)"
    }, {
      pattern: "dot(40px 40px, 20px 20px, #E7393F, #FEF0BC, normal, 2px)"
    }, {
      pattern: "dot(60px 60px, 30px 30px, #E7393F, black, normal, 3px)"
    }, {
      pattern: "dot(80px 80px, 40px 40px, #B7C4CD, white, normal, 4px)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/cross-dot.js
/* harmony default export */ var cross_dot = ({
  key: 'cross-dot',
  title: 'Cross Dot',
  execute: function execute() {
    return [{
      pattern: "cross-dot(20px 20px, 10px 10px, #B7C4CD, white, normal, 1px)"
    }, {
      pattern: "cross-dot(40px 40px, 20px 20px, #DDB104, #FEF0BC, normal, 4px)"
    }, {
      pattern: "cross-dot(60px 60px, 30px 30px, #35DB92, #DCF9EC, normal, 6px)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/diagonal-line.js
/* harmony default export */ var diagonal_line = ({
  key: 'diagonal-line',
  title: 'Diagonal Line',
  execute: function execute() {
    return [{
      pattern: "diagonal-line(10px 10px, 45deg, #B7C4CD, white, normal, 1px)"
    }, {
      pattern: "diagonal-line(25px 25px, 90deg, #DDB104, #FEF0BC, normal, 2px)"
    }, {
      pattern: "diagonal-line(50px 50px, 135deg, #35DB92, #DCF9EC, normal, 3px)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/vertical-line.js
/* harmony default export */ var vertical_line = ({
  key: 'vertical-line',
  title: 'Vertical Line',
  execute: function execute() {
    return [{
      pattern: "vertical-line(10px 10px, 0, #B7C4CD, white, normal, 1px)"
    }, {
      pattern: "vertical-line(25px 25px, 0, #DDB104, #FEF0BC, normal, 2px)"
    }, {
      pattern: "vertical-line(50px 50px, 0, black, rgba(231,57,63,0.9), normal, 1px)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/horizontal-line.js
/* harmony default export */ var horizontal_line = ({
  key: 'horizontal-line',
  title: 'Horizontal Line',
  execute: function execute() {
    return [{
      pattern: "horizontal-line(10px 10px, 0, #B7C4CD, white, normal, 1px)"
    }, {
      pattern: "horizontal-line(25px 25px, 0, #DDB104, #FEF0BC, normal, 2px)"
    }, {
      pattern: "horizontal-line(50px 50px, 0, #35DB92, #DCF9EC, normal, 3px)"
    }];
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/patterns/index.js







/* harmony default export */ var patterns = __webpack_exports__["a"] = ([check, grid, dot, cross_dot, diagonal_line, vertical_line, horizontal_line]);

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(141);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 110 */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };

    module.exports["default"] = module.exports, module.exports.__esModule = true;
  }

  return _typeof(obj);
}

module.exports = _typeof;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BackgroundImageEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(36);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(11);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var el_editor_property_parser_image_resource_LinearGradient__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(52);
/* harmony import */ var el_editor_property_parser_image_resource_ColorStep__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(22);
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(66);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(14);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var names = {
  'image-resource': "Image",
  'url': "Image",
  image: "Image",
  "static-gradient": "Static",
  "linear-gradient": "Linear",
  "repeating-linear-gradient": "".concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].repeat, " Linear"),
  "radial-gradient": "Radial",
  "repeating-radial-gradient": "".concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].repeat, " Radial"),
  "conic-gradient": "Conic",
  "repeating-conic-gradient": "".concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].repeat, " Conic")
};
var types = {
  image: "image",
  'image-resource': "image",
  'url': 'image',
  "static-gradient": "gradient",
  "linear-gradient": "gradient",
  "repeating-linear-gradient": "gradient",
  "radial-gradient": "gradient",
  "repeating-radial-gradient": "gradient",
  "conic-gradient": "gradient",
  "repeating-conic-gradient": "gradient"
};

var BackgroundImageEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(BackgroundImageEditor, _EditorElement);

  var _super = _createSuper(BackgroundImageEditor);

  function BackgroundImageEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, BackgroundImageEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(BackgroundImageEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        value: this.props.value,
        images: this.parseBackgroundImage(this.props.value)
      };
    }
  }, {
    key: "parseBackgroundImage",
    value: function parseBackgroundImage(str) {
      if (str === '') return [];
      return el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_7__[/* BackgroundImage */ "a"].parseStyle(Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["STRING_TO_CSS"])(str));
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      console.log('aaaa', value);
      this.setState({
        value: value,
        images: this.parseBackgroundImage(value)
      });
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n            <div class='background-image-editor' >\n                <div class='label ".concat(labelClass, "'>\n                    <label>").concat(this.props.title || '', "</label>\n                    <div class='tools'>\n                        <button type=\"button\" ref='$add'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].add, " ").concat(this.props.title ? '' : 'Add', "</button>\n                    </div>\n                </div>\n                <div class='fill-list' ref='$fillList'></div>\n            </div>\n        ")
      );
    }
  }, {
    key: "templateForBlendMode",
    value: function templateForBlendMode(index, blendMode) {
      return (
        /*html*/
        "\n        <div class='popup-item'>\n          <object refClass=\"BlendSelectEditor\" \n                ref='$blend_".concat(index, "' \n                key='blendMode' \n                value=\"").concat(blendMode, "\" \n                params=\"").concat(index, "\" \n                onchange=\"changeRangeEditor\" \n            />\n        </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["LOAD"])('$fillList') + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DOMDIFF"],
    value: function value() {
      var _this = this;

      var current = this.$selection.current || {
        color: 'black'
      };
      return this.state.images.map(function (it, index) {
        var image = it.image;
        var backgroundType = types[image.type];
        var backgroundTypeName = names[image.type];
        var selectedClass = it.selected ? "selected" : "";

        if (it.selected) {
          _this.selectedIndex = index;
        }

        return (
          /*html*/
          "\n            <div class='fill-item ".concat(selectedClass, "' data-index='").concat(index, "' ref=\"fillIndex").concat(index, "\"  draggable='true' data-fill-type=\"").concat(backgroundType, "\" >\n                <object refClass=\"BackgroundPositionEditor\" \n                    key=\"background-position\"\n                    index=\"").concat(index, "\"\n                    ref=\"$bp").concat(index, "\"\n                    x=\"").concat(it.x, "\"\n                    y=\"").concat(it.y, "\"\n                    width=\"").concat(it.width, "\"\n                    height=\"").concat(it.height, "\"\n                    repeat=\"").concat(it.repeat, "\"\n                    size=\"").concat(it.size, "\"\n                    blendMode=\"").concat(it.blendMode, "\"     \n                    onchange='changePattern' />\n                <object refClass=\"GradientSingleEditor\" \n                    index=\"").concat(index, "\"\n                    ref=\"$gse").concat(index, "\"\n                    image=\"").concat(it.image, "\"\n                    color=\"").concat(current.color, "\"\n                    key=\"background-image\"\n                    onchange='changePattern'\n\n                />\n                <div class='fill-info'>\n                  <div class='gradient-info'>\n                    <div class='fill-title' ref=\"fillTitle").concat(index, "\">").concat(backgroundTypeName, "</div>\n                    <div class='blend'>\n                      ").concat(_this.templateForBlendMode(index, it.blendMode), "\n                    </div>\n                    <div class='tools'>\n                      <button type=\"button\" class='remove' data-index='").concat(index, "'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].remove2, "</button>\n                    </div>\n                  </div>\n                </div>\n            </div>\n            ")
        );
      });
    }
  }, {
    key: "modifyBackgroundImage",
    value: function modifyBackgroundImage() {
      var value = Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["CSS_TO_STRING"])(el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_7__[/* BackgroundImage */ "a"].toPropertyCSS(this.state.images));
      this.parent.trigger(this.props.onchange, this.props.key, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('add'),
    value: function value() {
      this.state.images.push(new el_editor_property_parser_BackgroundImage__WEBPACK_IMPORTED_MODULE_7__[/* BackgroundImage */ "a"]({
        image: new el_editor_property_parser_image_resource_LinearGradient__WEBPACK_IMPORTED_MODULE_11__[/* LinearGradient */ "a"]({
          angle: 90,
          colorsteps: [new el_editor_property_parser_image_resource_ColorStep__WEBPACK_IMPORTED_MODULE_12__[/* ColorStep */ "a"]({
            percent: 0,
            color: 'white',
            index: 0
          }), new el_editor_property_parser_image_resource_ColorStep__WEBPACK_IMPORTED_MODULE_12__[/* ColorStep */ "a"]({
            percent: 100,
            color: 'black',
            index: 1
          })]
        })
      }));
      this.refresh();
      this.modifyBackgroundImage();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$add'),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGSTART"])("$fillList .fill-item"),
    value: function value(e) {
      this.startIndex = +e.$dt.attr("data-index");
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGOVER"])("$fillList .fill-item") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {}
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortBackgroundImage",
    value: function sortBackgroundImage(startIndex, targetIndex) {
      this.sortItem(this.state.images, startIndex, targetIndex);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DROP"])("$fillList .fill-item") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {
      var targetIndex = +e.$dt.attr("data-index");
      this.selectItem(this.startIndex, true);
      this.sortBackgroundImage(this.startIndex, targetIndex);
      this.refresh(); // this.viewFillPopup(this.getRef("preview", this.selectedIndex));

      this.modifyBackgroundImage();
    }
  }, {
    key: "getCurrentBackgroundImage",
    value: function getCurrentBackgroundImage() {
      return this.state.images[this.selectedIndex];
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])("$fillList .tools .remove"),
    value: function value(e) {
      var removeIndex = +e.$dt.attr("data-index");
      this.state.images.splice(removeIndex, 1);
      this.refresh();
      this.modifyBackgroundImage();
    }
  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.refs["fillIndex".concat(selectedIndex)].addClass("selected");
      } else {
        this.refs["fillIndex".concat(selectedIndex)].removeClass("selected");
      }

      this.state.images.forEach(function (it, index) {
        it.selected = index === selectedIndex;
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])("selectFillPopupTab"),
    value: function value(type, data) {
      var typeName = types[type];
      var $fillItem = this.refs["fillIndex".concat(this.selectedIndex)];
      $fillItem.attr("data-fill-type", typeName);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value, params) {
      this.trigger('changePattern', key, _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, key, _value), params);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changePattern'),
    value: function value(key, _value2, params) {
      var index = +params;
      var image = this.state.images[index];
      image.reset(_value2);
      this.modifyBackgroundImage();
      this.refresh();
    }
  }]);

  return BackgroundImageEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_15__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_14__[/* registElement */ "a"])({
  BackgroundImageEditor: BackgroundImageEditor
});

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BoxShadowEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var el_editor_property_parser_BoxShadow__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(59);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(3);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var BoxShadowEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(BoxShadowEditor, _EditorElement);

  var _super = _createSuper(BoxShadowEditor);

  function BoxShadowEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BoxShadowEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BoxShadowEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        boxShadows: el_editor_property_parser_BoxShadow__WEBPACK_IMPORTED_MODULE_9__[/* BoxShadow */ "a"].parseStyle(this.props.value || '')
      };
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n      <div class=\"box-shadow-editor\" >\n        <div class='label ".concat(labelClass, "' >\n            <label>").concat(this.props.title || '', "</label>\n            <div class='tools'>\n              <button type=\"button\" ref=\"$add\" title=\"add Box Shadow\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].add, "</button> ").concat(this.props.title ? '' : 'Add', "\n            </div>\n        </div>\n        <div class='box-shadow-list' ref='$shadowList'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])("$shadowList"),
    value: function value() {
      var arr = this.state.boxShadows.map(function (shadow, index) {
        return (
          /*html*/
          "\n        <div class=\"shadow-item real\" data-index=\"".concat(index, "\">\n          <div class=\"color\">\n            <div class='color-view' style=\"background-color: ").concat(shadow.color, "\">\n            </div>\n          </div>\n          <div class=\"inset\" data-value=\"").concat(shadow.inset, "\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].check, "</div>\n          <div class=\"offset-x\">").concat(shadow.offsetX, "</div>\n          <div class=\"offset-y\">").concat(shadow.offsetY, "</div>\n          <div class=\"blur-radius\">").concat(shadow.blurRadius, "</div>\n          <div class=\"spread-radius\">").concat(shadow.spreadRadius, "</div>\n          <div class=\"tools\">\n            <button type=\"button\" class=\"remove\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n      ")
        );
      });

      if (arr.length) {
        arr.push(
        /*html*/
        "\n      <div class=\"shadow-item desc\">\n        <div class=\"color\"></div>      \n        <div class=\"inset\" >Inset</div>\n\n        <div class=\"offset-x\">X</div>\n        <div class=\"offset-y\">Y</div>\n        <div class=\"blur-radius\">".concat(this.$i18n('boxshadow.editor.blur'), "</div>\n        <div class=\"spread-radius\">").concat(this.$i18n('boxshadow.editor.spread'), "</div>\n        <div class=\"tools\">\n        </div>\n      </div>\n      "));
      }

      return arr.join('');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "modifyBoxShadow",
    value: function modifyBoxShadow() {
      var value = this.state.boxShadows.join(', ');
      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])('add'),
    value: function value() {
      this.state.boxShadows.push(new el_editor_property_parser_BoxShadow__WEBPACK_IMPORTED_MODULE_9__[/* BoxShadow */ "a"]({
        offsetX: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(2),
        offsetY: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(2),
        blurRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(3),
        spreadRadius: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_10__[/* Length */ "a"].px(1)
      }));
      this.refresh();
      this.modifyBoxShadow();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$add"),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$shadowList .remove"),
    value: function value(e) {
      var index = +e.$dt.attr("data-index");
      this.state.boxShadows.splice(index, 1);
      this.refresh();
      this.modifyBoxShadow();
      this.emit('hideBoxShadowPropertyPopup');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$shadowList .shadow-item.real > div:not(.tools)"),
    value: function value(e) {
      var index = +e.$dt.closest('shadow-item').attr("data-index");
      var shadow = this.state.boxShadows[index];
      this.viewShadowPopup(shadow, index);
    }
  }, {
    key: "viewShadowPopup",
    value: function viewShadowPopup(shadow, index) {
      this.selectedIndex = index;
      this.viewBoxShadowPropertyPopup(shadow);
    }
  }, {
    key: "viewBoxShadowPropertyPopup",
    value: function viewBoxShadowPropertyPopup(shadow) {
      this.emit("showBoxShadowPropertyPopup", {
        changeEvent: 'changeBoxShadowEditorPopup',
        color: shadow.color,
        inset: shadow.inset,
        offsetX: shadow.offsetX,
        offsetY: shadow.offsetY,
        blurRadius: shadow.blurRadius,
        spreadRadius: shadow.spreadRadius
      }, {
        id: this.id
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])("changeBoxShadowEditorColor"),
    value: function value(color) {
      this.trigger('changeBoxShadowEditorPopup', {
        color: color
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])("changeBoxShadowEditorPopup"),
    value: function value(data, params) {
      if (params.id === this.id) {
        var shadow = this.state.boxShadows[this.selectedIndex];

        if (shadow) {
          shadow.reset(data);
          this.refresh();
          this.modifyBoxShadow();
        }
      }
    }
  }]);

  return BoxShadowEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_6__[/* registElement */ "a"])({
  BoxShadowEditor: BoxShadowEditor
});

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BorderRadiusEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(11);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(37);
/* harmony import */ var el_editor_property_parser_BorderRadius__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(89);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var typeList = [{
  key: "border-top-left-radius",
  title: "topLeft"
}, {
  key: "border-top-right-radius",
  title: "topRight"
}, {
  key: "border-bottom-right-radius",
  title: "bottomRight"
}, {
  key: "border-bottom-left-radius",
  title: "bottomLeft"
}];
var keyList = typeList.map(function (it) {
  return it.key;
});

var BorderRadiusEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(BorderRadiusEditor, _EditorElement);

  var _super = _createSuper(BorderRadiusEditor);

  function BorderRadiusEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BorderRadiusEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BorderRadiusEditor, [{
    key: "initState",
    value: function initState() {
      return el_editor_property_parser_BorderRadius__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].parseStyle(this.props.value);
    }
  }, {
    key: "template",
    value: function template() {
      return "<div class='border-radius-editor' ref='$body'></div>";
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])('changeBorderRadius'),
    value: function value(key, _value) {
      var _this = this;

      if (key === 'border-radius') {
        keyList.forEach(function (type) {
          _this.children["$".concat(type)].setValue(_value.clone());
        });
      }

      this.setBorderRadius();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])('$body'),
    value: function value() {
      var _this2 = this;

      var selectedValue = this.state.isAll ? 'all' : 'partitial';
      var borderRadius = this.state['border-radius'];
      return (
        /*html*/
        "\n      <div class=\"property-item border-radius-item\">\n        <div class=\"radius-selector\" data-selected-value=\"".concat(selectedValue, "\" ref=\"$selector\">\n          <button type=\"button\" data-value=\"all\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].border_all, "</button>\n          <button type=\"button\" data-value=\"partitial\">\n            ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].border_inner, "\n          </button>\n        </div>\n        <div class=\"radius-value\">\n          <object refClass=\"RangeEditor\"  ref='$all' key='border-radius' value=\"").concat(borderRadius, "\" onchange='changeBorderRadius' />\n        </div>\n      </div>\n      <div\n        class=\"property-item full border-radius-item\"\n        ref=\"$partitialSetting\"\n        style=\"display: none;\"\n      >\n        <div class=\"radius-setting-box\" ref=\"$radiusSettingBox\">\n          ").concat(typeList.map(function (it) {
          var value = _this2.state[it.key];

          var label = _this2.$i18n('border.radius.editor.' + it.title);

          return (
            /*html*/
            "\n              <div>\n                  <object refClass=\"RangeEditor\"  ref='$".concat(it.key, "' label='").concat(label, "' key='").concat(it.key, "' value='").concat(value, "' onchange='changeBorderRadius' />\n              </div>  \n            ")
          );
        }).join(''), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["INPUT"])("$radiusSettingBox input"),
    value: function value(e) {
      this.setBorderRadius();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CHANGE"])("$radiusSettingBox select"),
    value: function value(e) {
      this.setBorderRadius();
    }
  }, {
    key: "setBorderRadius",
    value: function setBorderRadius() {
      var _this3 = this;

      var type = this.refs.$selector.attr("data-selected-value");

      if (type === "all") {
        this.state.isAll = true;
        this.state['border-radius'] = this.children["$all"].getValue();
      } else {
        this.state.isAll = false;
        keyList.forEach(function (key) {
          _this3.state[key] = _this3.children["$".concat(key)].getValue();
        });
      }

      this.modifyBorderRadius();
    }
  }, {
    key: "modifyBorderRadius",
    value: function modifyBorderRadius() {
      var _this4 = this;

      var value = '';

      if (this.state.isAll) {
        value = this.state['border-radius'] + '';
      } else {
        value = keyList.map(function (key) {
          return "".concat(_this4.state[key]);
        }).join(' ');
      }

      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$selector button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.refs.$selector.attr("data-selected-value", type);

      if (type === "all") {
        this.refs.$partitialSetting.hide();
      } else {
        this.refs.$partitialSetting.show("grid");
      }

      this.setBorderRadius();
    }
  }]);

  return BorderRadiusEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  BorderRadiusEditor: BorderRadiusEditor
});

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ColorSingleEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ColorSingleEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(ColorSingleEditor, _EditorElement);

  var _super = _createSuper(ColorSingleEditor);

  function ColorSingleEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, ColorSingleEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(ColorSingleEditor, [{
    key: "initState",
    value: function initState() {
      return {
        params: this.props.params,
        color: this.props.color || 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyColor();
    }
  }, {
    key: "modifyColor",
    value: function modifyColor() {
      this.parent.trigger(this.props.onchange, this.props.key, this.state.color, this.state.params);
    }
  }, {
    key: "changeColor",
    value: function changeColor(color) {
      this.setState({
        color: color
      });
    }
  }, {
    key: "setValue",
    value: function setValue(color) {
      this.changeColor(color);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["BIND"])('$miniView'),
    value: function value() {
      return {
        style: {
          'background-color': this.state.color
        }
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='color-single-editor'>\n                <div class='preview' ref='$preview'>\n                    <div class='mini-view'>\n                        <div class='color-view' style=\"background-color: ".concat(this.state.color, "\" ref='$miniView'></div>\n                    </div>\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])("$preview"),
    value: function value(e) {
      this.viewColorPicker();
    }
  }, {
    key: "viewColorPicker",
    value: function viewColorPicker() {
      this.emit("showColorPickerPopup", {
        target: this,
        changeEvent: 'changeColorSingleEditor',
        color: this.state.color
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])("changeColorSingleEditor"),
    value: function value(color, data) {
      this.refs.$miniView.cssText("background-color: ".concat(color));
      this.updateData({
        color: color
      });
    }
  }]);

  return ColorSingleEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_8__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_7__[/* registElement */ "a"])({
  ColorSingleEditor: ColorSingleEditor
});

/***/ }),
/* 115 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FilterEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(44);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(37);
/* harmony import */ var _ColorViewEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(79);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(39);
/* harmony import */ var el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(38);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(14);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var specList = {
  blur: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* BlurFilter */ "a"].spec,
  grayscale: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* GrayscaleFilter */ "f"].spec,
  "hue-rotate": el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* HueRotateFilter */ "g"].spec,
  invert: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* InvertFilter */ "h"].spec,
  brightness: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* BrightnessFilter */ "b"].spec,
  contrast: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* ContrastFilter */ "c"].spec,
  "drop-shadow": el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* DropshadowFilter */ "d"].spec,
  opacity: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* OpacityFilter */ "i"].spec,
  saturate: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* SaturateFilter */ "j"].spec,
  sepia: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* SepiaFilter */ "k"].spec,
  svg: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* URLSvgFilter */ "l"].spec
};

var FilterEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(FilterEditor, _EditorElement);

  var _super = _createSuper(FilterEditor);

  function FilterEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, FilterEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(FilterEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        filters: el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* Filter */ "e"].parseStyle(this.props.value)
      };
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n      <div class='filter-editor filter-list'>\n          <div class='label ".concat(labelClass, "' >\n              <label>").concat(this.props.title || '', "</label>\n              <div class='tools'>\n                <select ref=\"$filterSelect\"></select>\n                <button type=\"button\" ref=\"$add\" title=\"add Filter\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].add, "</button>\n              </div>\n          </div>\n          <div class='filter-list' ref='$filterList'></div>\n      </div>")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["LOAD"])('$filterSelect'),
    value: function value() {
      var list = el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_13__[/* filter_list */ "c"].map(function (it) {
        return {
          title: it,
          value: it
        };
      });
      var svgFilterList = this.getSVGFilterList();
      var totalList = [];

      if (svgFilterList.length) {
        totalList = [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(list), [{
          title: '-------',
          value: ''
        }], _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(svgFilterList));
      } else {
        totalList = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(list);
      }

      return totalList.map(function (it) {
        var title = it.title,
            value = it.value;
        return "<option value='".concat(value, "'>").concat(title, "</option>");
      });
    }
  }, {
    key: "getSpec",
    value: function getSpec(filterType) {
      return specList[filterType];
    }
  }, {
    key: "makeDropShadowFilterTemplate",
    value: function makeDropShadowFilterTemplate(spec, filter, index) {
      var _this = this;

      return (
        /*html*/
        "\n      <div class=\"filter-item\">\n        <div class=\"title drop-shadow\" draggable=\"true\" data-index=\"".concat(index, "\">\n          <label>").concat(this.$i18n('filter.property.drop-shadow'), "</label>\n          <div class=\"filter-menu\">\n            <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n\n        <div class=\"filter-ui drop-shadow-color\">\n          <object refClass=\"ColorViewEditor\" \n            label=\"").concat(this.$i18n("filter.property.drop-shadow.color"), "\" \n            ref='$dropShadowColorView").concat(index, "' \n            params=\"").concat(index, "\" \n            value=\"").concat(filter.color, "\" \n            onChange=\"changeDropShadowColor\" />\n        </div>\n\n        ").concat(["offsetX", "offsetY", "blurRadius"].map(function (key) {
          return (
            /*html*/
            "        \n            <div class=\"filter-ui drop-shadow\">\n                <object refClass=\"RangeEditor\"  \n                  ref='$".concat(key).concat(index, "' \n                  label=\"").concat(_this.$i18n("filter.property.drop-shadow.".concat(key)), "\"\n                  key=\"").concat(index, "\" \n                  min=\"").concat(spec[key].min, "\"\n                  min=\"").concat(spec[key].max, "\"\n                  params=\"").concat(key, "\" \n                  value=\"").concat(filter[key].value, "\" units=\"").concat(spec[key].units.join(','), "\" onchange=\"changeRangeEditor\" />\n            </div>")
          );
        }).join(''), "\n      </div>\n    ")
      );
    }
  }, {
    key: "getSVGFilterList",
    value: function getSVGFilterList() {
      var current = this.$selection.currentProject;
      var arr = [];

      if (current) {
        arr = current.svgfilters.map(function (it) {
          return {
            title: "svg - #".concat(it.id),
            value: it.id
          };
        });
      }

      return arr;
    }
  }, {
    key: "makeOneFilterEditor",
    value: function makeOneFilterEditor(index, filter, spec) {
      if (filter.type === 'svg') {
        var options = '';
        var current = this.$selection.currentProject;

        if (current) {
          options = current.svgfilters.map(function (it) {
            return it.id;
          });
          options = options.length ? ',' + options.join(',') : '';
        }

        return (
          /*html*/
          "\n      <object refClass=\"SelectEditor\"  \n        ref='$select".concat(index, "' \n        key=\"").concat(index, "\" \n        label=\"SVG Filter\"\n        value=\"").concat(filter.value, "\" \n        options=\"").concat(options, "\"\n        onchange=\"changeRangeEditor\"  />")
        );
      }

      return (
        /*html*/
        "\n      <object refClass=\"RangeEditor\"  \n        ref='$range".concat(index, "_").concat(filter.type, "' \n        key=\"").concat(index, "\" \n        min='").concat(spec.min, "'\n        max='").concat(spec.max, "'\n        value=\"").concat(filter.value, "\" \n        units=\"").concat(spec.units.join(','), "\"   \n        onchange=\"changeRangeEditor\" />\n      ")
      );
    }
  }, {
    key: "makeOneFilterTemplate",
    value: function makeOneFilterTemplate(spec, filter, index) {
      var isSVG = filter.type === 'svg';
      var title = "".concat(this.$i18n('filter.property.' + filter.type));
      return (
        /*html*/
        "\n      <div class=\"filter-item\" data-index=\"".concat(index, "\">\n        <div class=\"title\" >\n          <label draggable=\"true\" data-index=\"").concat(index, "\" title=\"").concat(isSVG ? '' : title, "\">").concat(title, "</label>\n          ").concat(filter.type != 'svg' ?
        /*html*/
        "\n          <div class=\"filter-ui\">\n            ".concat(this.makeOneFilterEditor(index, filter, spec), "\n          </div>\n        ") :
        /*html*/
        "\n          <div>\n            <span class='svg-filter-edit' data-index=\"".concat(index, "\">").concat(filter.value, "</span>\n          </div>\n        "), "          \n          <div class=\"filter-menu\">\n            <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "makeFilterTemplate",
    value: function makeFilterTemplate(filter, index) {
      if (filter.type === "drop-shadow") {
        return this.makeDropShadowFilterTemplate(this.getSpec(filter.type), filter, index);
      } else {
        return this.makeOneFilterTemplate(this.getSpec(filter.type), filter, index);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["LOAD"])("$filterList"),
    value: function value() {
      var _this2 = this;

      return this.state.filters.map(function (filter, index) {
        return _this2.makeFilterTemplate(filter, index.toString());
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGSTART"])("$filterList .filter-item .title label"),
    value: function value(e) {
      this.startIndex = +e.$dt.attr("data-index");
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGOVER"])("$filterList .filter-item .title label") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {}
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortFilter",
    value: function sortFilter(startIndex, targetIndex) {
      this.sortItem(this.state.filters, startIndex, targetIndex);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DROP"])("$filterList .filter-item") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {
      var targetIndex = +e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      this.sortFilter(this.startIndex, targetIndex);
      this.refresh();
      this.modifyFilter();
    }
  }, {
    key: "modifyFilter",
    value: function modifyFilter() {
      var value = this.state.filters.join(' ');
      this.parent.trigger(this.props.onchange, this.props.key, value, this.props.params);
    }
  }, {
    key: "makeFilter",
    value: function makeFilter(type) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return el_editor_property_parser_Filter__WEBPACK_IMPORTED_MODULE_9__[/* Filter */ "e"].parse(_objectSpread(_objectSpread({}, opt), {}, {
        type: type
      }));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$filterList .svg-filter-edit'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      var filter = this.state.filters[index];
      var project = this.$selection.currentProject;

      if (project) {
        var svgfilterIndex = project.getSVGFilterIndex(filter.value);
        this.trigger('openSVGFilterPopup', svgfilterIndex);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('openSVGFilterPopup'),
    value: function value(index) {
      var currentProject = this.$selection.currentProject || {
        svgfilters: []
      };
      var svgfilter = currentProject.svgfilters[index];
      this.emit("showSVGFilterPopup", {
        changeEvent: 'changeSVGFilterRealUpdate',
        index: index,
        preview: false,
        filters: svgfilter.filters
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeSVGFilterRealUpdate'),
    value: function value(params) {
      var project = this.$selection.currentProject;

      if (project) {
        project.setSVGFilterValue(params.index, {
          filters: params.filters
        });
        this.emit('refreshSVGFilterAssets');
        this.emit('refreshSVGArea');
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])("add"),
    value: function value(filterType) {
      var _this3 = this;

      if (filterType === 'svg') {
        this.emit('addSVGFilterAssetItem', function (index, id) {
          _this3.state.filters.push(_this3.makeFilter(filterType, {
            value: id
          }));

          _this3.refresh();

          _this3.modifyFilter();

          _this3.trigger('openSVGFilterPopup', index);
        });
      } else {
        this.state.filters.push(this.makeFilter(filterType));
        this.refresh();
        this.modifyFilter();
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])("$add"),
    value: function value() {
      var filterType = this.refs.$filterSelect.value;
      this.trigger('add', filterType);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])("$filterList .filter-menu .del"),
    value: function value(e) {
      var index = +e.$dt.attr("data-index");
      this.state.filters.splice(index, 1);
      this.refresh();
      this.modifyFilter();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])("changeDropShadowColor"),
    value: function value(key, color, params) {
      var index = +params;
      this.state.filters[index].reset({
        color: color
      });
      this.modifyFilter();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value, params) {
      if (params) {
        this.state.filters[+key].reset(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, params, _value));
      } else {
        this.state.filters[+key].reset({
          value: _value
        });
      }

      this.modifyFilter();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('refreshSVGArea') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DEBOUNCE"])(1000),
    value: function value() {
      this.load('$filterSelect');
      this.load('$filterList');
    }
  }]);

  return FilterEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_15__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_14__[/* registElement */ "a"])({
  FilterEditor: FilterEditor
});

/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return IterationCountEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var IterationCountEditor = /*#__PURE__*/function (_RangeEditor) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(IterationCountEditor, _RangeEditor);

  var _super = _createSuper(IterationCountEditor);

  function IterationCountEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, IterationCountEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(IterationCountEditor, [{
    key: "initState",
    value: function initState() {
      var value = this.props.value;

      if (value === 'infinite') {
        value = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"](0, 'infinite');
      } else {
        value = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].number(value.split('normal')[0]);
      }

      var units = this.props.units || 'px,em,%';
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(IterationCountEditor.prototype), "initState", this).call(this)), {
        key: this.props.key,
        params: this.props.params || '',
        units: units,
        value: value
      });
    }
  }]);

  return IterationCountEditor;
}(_RangeEditor__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_7__[/* registElement */ "a"])({
  IterationCountEditor: IterationCountEditor
});

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OffsetEditor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_property_parser_Offset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(91);
/* harmony import */ var el_base_Dom__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(19);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(8);
/* harmony import */ var _CSSPropertyEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(94);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(37);
/* harmony import */ var _InputRangeEditor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(67);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var OffsetEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(OffsetEditor, _EditorElement);

  var _super = _createSuper(OffsetEditor);

  function OffsetEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, OffsetEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(OffsetEditor, [{
    key: "initState",
    value: function initState() {
      return {
        offsets: []
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.modifyOffset();
    }
  }, {
    key: "modifyOffset",
    value: function modifyOffset() {
      this.emit("changeOffsetEditor", this.state);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n    <div class='editor offset-editor' ref='$editor'>\n        ".concat(this.templateForOffset(), "\n        ").concat(this.templateForOffsetInput(), "\n        ").concat(this.templateForProperty(), "        \n    </div>")
      );
    }
  }, {
    key: "templateForOffsetInput",
    value: function templateForOffsetInput() {
      return (
        /*html*/
        "\n      <div class='offset-input' >\n        <div class='title'>\n          <label>Offset</label>\n          <div class='tools'>\n            <object refClass=\"InputRangeEditor\" \n              key='offset' \n              min='0' \n              max='100' \n              step=\"0.01\" \n              value=\"".concat(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].percent(0), "\" \n              ref='$offsetInput' \n              units=\"%\" \n              onchange='changeRangeEditor' \n            />\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      var offset = this.state.offsets[this.selectedIndex];

      if (offset) {
        offset.offset = _value.clone();
        this.refresh();
        this.modifyOffset();
      }
    }
  }, {
    key: "templateForProperty",
    value: function templateForProperty() {
      return (
        /*html*/
        "<object refClass=\"CSSPropertyEditor\" ref='$offsetPropertyEditor' hide-refresh=\"true\" onchange='changeCSSPropertyEditor' />"
      );
    }
  }, {
    key: "templateForOffset",
    value: function templateForOffset() {
      return "<div class='offset' ref='$offset' data-selected-value=\"-1\"></div>";
    }
  }, {
    key: "makeOffset",
    value: function makeOffset(offset, index) {
      return "<div class='offset-item' style='left: ".concat(offset.offset, ";' data-offset-index='").concat(index.toString(), "'></div>");
    }
  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_10__["isUndefined"])(selectedIndex)) {
        selectedIndex = -1;

        for (var i = 0, len = this.state.offsets.length; i < len; i++) {
          if (this.state.offsets[i].selected) {
            selectedIndex = i;
            break;
          }
        }

        if (selectedIndex === -1) {
          selectedIndex = 0;
        }
      }

      this.getRef('$offset').attr('data-selected-value', selectedIndex);
      this.selectedIndex = selectedIndex;
      this.state.offsets.forEach(function (it, index) {
        it.selected = index === selectedIndex;
      });
      var selectedList = this.state.offsets.filter(function (it) {
        return it.selected;
      });
      this.selectedOffsetItem = selectedList.length ? selectedList[0] : {};
      this.refreshOffsetInput();
    }
  }, {
    key: "refreshOffsetInput",
    value: function refreshOffsetInput() {
      var offset = this.state.offsets[this.selectedIndex];

      if (offset) {
        this.children.$offsetInput.setValue(offset.offset);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$offset'),
    value: function value() {
      var _this = this;

      return this.state.offsets.map(function (it, index) {
        return _this.makeOffset(it, index);
      });
    }
  }, {
    key: "isNotOffsetItem",
    value: function isNotOffsetItem(e) {
      return !el_base_Dom__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"].create(e.target).hasClass('offset-item') && !this.currentOffset;
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$offset') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["IF"])('isNotOffsetItem') + el_base_Event__WEBPACK_IMPORTED_MODULE_7__["PREVENT"],
    value: function value(e) {
      this.baseOffsetWidth = this.refs.$offset.width();
      this.baseOffsetArea = this.refs.$offset.offset();
      var currentX = e.xy.x;
      var newOffset = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].percent((currentX - this.baseOffsetArea.left) / this.baseOffsetWidth * 100).round(100);
      this.state.offsets.push(new el_editor_property_parser_Offset__WEBPACK_IMPORTED_MODULE_8__[/* Offset */ "a"]({
        offset: newOffset
      }));
      this.selectItem(this.state.offsets.length - 1, true);
      this.refresh();
      this.modifyOffset();
    }
  }, {
    key: "refreshOffsetProperty",
    value: function refreshOffsetProperty() {
      this.emit('showCSSPropertyEditor', this.selectedOffsetItem.properties);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$offset .offset-item') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])('moveOffset') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["END"])('endOffset'),
    value: function value(e) {
      this.baseOffsetWidth = this.refs.$offset.width();
      this.baseOffsetArea = this.refs.$offset.offset();
      this.currentOffsetleft = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].parse(e.$dt.css('left'));
      this.currentOffset = e.$dt;
      this.currentOffsetIndex = +e.$dt.attr('data-offset-index');
      this.currentOffsetXY = e.xy;
      this.baseOffsetMin = this.baseOffsetArea.left;
      this.baseOffsetMax = this.baseOffsetArea.left + this.baseOffsetWidth;
      this.isRemoveOffset = false;

      if (e.altKey) {
        this.isRemoveOffset = true;
      } else {
        this.selectItem(this.currentOffsetIndex, true);
        this.refreshOffsetInput();
      }
    }
  }, {
    key: "moveOffset",
    value: function moveOffset(dx, dy) {
      if (this.isRemoveOffset) return;
      var currentX = this.currentOffsetXY.x + dx;

      if (currentX < this.baseOffsetMin) {
        currentX = this.baseOffsetMin;
      }

      if (currentX > this.baseOffsetMax) {
        currentX = this.baseOffsetMax;
      }

      var newOffset = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_6__[/* Length */ "a"].percent((currentX - this.baseOffsetMin) / this.baseOffsetWidth * 100).round(100);
      this.state.offsets[this.currentOffsetIndex].offset.set(newOffset.value);
      this.currentOffset.css('left', newOffset);
      this.refreshOffsetInput();
      this.modifyOffset();
    }
  }, {
    key: "removeOffset",
    value: function removeOffset(index) {
      this.state.offsets.splice(index, 1);
      this.selectItem(0);
      this.refresh();
      this.modifyOffset();
    }
  }, {
    key: "endOffset",
    value: function endOffset(dx, dy) {
      var _this2 = this;

      if (this.isRemoveOffset) {
        setTimeout(function () {
          _this2.currentOffset = null;

          _this2.removeOffset(_this2.currentOffsetIndex);
        }, 10);
      } else {
        setTimeout(function () {
          _this2.currentOffset = null;

          _this2.refreshOffsetInput();

          _this2.refreshOffsetProperty();

          _this2.modifyOffset();
        }, 10);
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
      this.refreshOffsetProperty();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])("showOffsetEditor"),
    value: function value(data) {
      this.setState(data);
      this.selectItem();
      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeCSSPropertyEditor'),
    value: function value() {
      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var offset = this.state.offsets[this.selectedIndex];

      if (offset) {
        offset.properties = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(properties);
      }

      this.modifyOffset();
    }
  }]);

  return OffsetEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_15__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_14__[/* registElement */ "a"])({
  OffsetEditor: OffsetEditor
});

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return VarEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var VarEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(VarEditor, _EditorElement);

  var _super = _createSuper(VarEditor);

  function VarEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, VarEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(VarEditor, [{
    key: "initState",
    value: function initState() {
      var values = this.props.value.split(';').filter(function (it) {
        return it.trim();
      }).map(function (it) {
        var _it$split = it.split(':'),
            _it$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_it$split, 2),
            key = _it$split2[0],
            value = _it$split2[1];

        key = key.replace('--', '');
        return {
          key: key,
          value: value
        };
      });
      return {
        hideLabel: this.props['hide-label'] == 'true' ? true : false,
        params: this.props.params || '',
        values: values
      };
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n        <div class='var-editor var-list'>\n            <div class='label ".concat(labelClass, "' >\n                <label>").concat(this.props.title || '', "</label>\n                <div class='tools'>\n                    <button type=\"button\" ref=\"$add\" title=\"add Var\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].add, "</button>\n                </div>\n            </div>\n            <div class='var-list' ref='$varList'></div>\n        </div>")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('add'),
    value: function value() {
      this.state.values.push({
        key: '',
        value: ''
      });
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$add'),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$varList'),
    value: function value() {
      return this.state.values.map(function (it, index) {
        return "\n                <div class='var-item' >\n                    <div>\n                        <input type=\"text\" data-type=\"key\" value=\"".concat(it.key, "\" data-index=\"").concat(index, "\"  placeholder=\"variable\" />\n                    </div>\n                    <div>\n                        <input type=\"text\" data-type=\"value\" value=\"").concat(it.value, "\" data-index=\"").concat(index, "\"  placeholder=\"value\" />\n                    </div>\n                    <div class=\"tools\">\n                        <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n                        ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].remove2, "\n                        </button>\n                    </div>\n                </div>\n            ");
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$varList .del'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.state.values.splice(index, 1);
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["INPUT"])('$varList input'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      var type = e.$dt.attr('data-type');
      this.state.values[index][type] = e.$dt.value;
      this.updateData();
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      var value = this.state.values.map(function (it) {
        return "".concat(it.key, ":").concat(it.value);
      }).join(';');
      this.parent.trigger(this.props.onchange, value, this.props.params);
    }
  }]);

  return VarEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_9__[/* registElement */ "a"])({
  VarEditor: VarEditor
});

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TransformEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var el_editor_property_parser_Transform__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(30);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(28);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(37);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3);
/* harmony import */ var _NumberInputEditor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(93);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(14);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var transformList = ['perspective', 'rotate', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d', // 'skewX',    
// 'skewY',   
'translate', 'translateX', 'translateY', 'translateZ', 'translate3d', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'scale3d', 'matrix', 'matrix3d'];
var labels = {
  'scale': ['X', 'Y'],
  'translate': ['X', 'Y'],
  'translate3d': ['tx', 'ty', 'tz'],
  'matrix': ['a', 'b', 'c', 'd', 'tx', 'ty'],
  'matrix3d': ['a1', 'b1', 'c1', 'd1', 'a2', 'b2', 'c2', 'd2', 'a3', 'b3', 'c3', 'd3', 'a4', 'b4', 'c4', 'd4']
};

var TransformEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(TransformEditor, _EditorElement);

  var _super = _createSuper(TransformEditor);

  function TransformEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, TransformEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(TransformEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        transforms: el_editor_property_parser_Transform__WEBPACK_IMPORTED_MODULE_9__[/* Transform */ "a"].parseStyle(this.props.value)
      };
    }
  }, {
    key: "template",
    value: function template() {
      var _this = this;

      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n      <div class='transform-editor transform-list'>\n          <div class='label ".concat(labelClass, "' >\n              <label>Transform</label>\n              <div class='tools'>\n                <select ref=\"$transformSelect\">\n                  ").concat(transformList.map(function (transform) {
          var label = _this.$i18n('css.item.' + transform);

          return "<option value='".concat(transform, "'>").concat(label, "</option>");
        }).join(''), "\n                </select>\n                <button type=\"button\" ref=\"$add\" title=\"add Transform\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].add, "</button>\n              </div>\n          </div>\n          <div class='transform-list' ref='$transformList'></div>\n      </div>")
      );
    }
  }, {
    key: "getLabel",
    value: function getLabel(type, index) {
      switch (type) {
        case 'scale':
        case 'translate':
        case 'translate3d':
        case 'matrix':
        case 'matrix3d':
          return labels[type][index];
      }

      return '';
    }
  }, {
    key: "isMultiValue",
    value: function isMultiValue(type) {
      switch (type) {
        case 'translate3d':
        case 'matrix':
        case 'matrix3d':
          return true;
      }

      return false;
    }
  }, {
    key: "getRange",
    value: function getRange(type) {
      switch (type) {
        case 'translateX':
        case 'translateY':
        case 'translateZ':
        case 'translate':
        case 'translate3d':
          return {
            min: -1000,
            max: 1000,
            step: 1,
            units: 'px,%,em'
          };

        case 'matrix':
        case 'matrix3d':
          return {
            min: -100,
            max: 100,
            step: 0.01,
            units: 'number'
          };

        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate':
        case 'skewY':
        case 'skewX':
          return {
            min: -360,
            max: 360,
            step: 0.1,
            units: 'deg,turn,rad'
          };

        case 'perspective':
          return {
            min: 0,
            max: 10000,
            step: 1,
            units: 'px,%,em'
          };

        case 'scale':
        case 'scaleX':
        case 'scaleY':
          return {
            min: 0,
            max: 10,
            step: 0.1,
            units: 'number'
          };
      }

      return {
        min: 0,
        max: 100,
        step: 1,
        units: 'px,%,em'
      };
    }
  }, {
    key: "makeOneTransformTemplate",
    value: function makeOneTransformTemplate(type, transform, index) {
      var _this2 = this;

      return (
        /*html*/
        "\n      <div class=\"transform-item\" data-index=\"".concat(index, "\">\n        <div class=\"title\" data-index=\"").concat(index, "\">\n          <label draggable=\"true\" >").concat(this.$i18n('css.item.' + type), "</label>\n          <div class=\"transform-ui ").concat(type, "\">\n            ").concat(transform.value.map(function (it, tindex) {
          var label = _this2.getLabel(type, tindex);

          var _this2$getRange = _this2.getRange(type),
              min = _this2$getRange.min,
              max = _this2$getRange.max,
              step = _this2$getRange.step,
              units = _this2$getRange.units;

          return (
            /*html*/
            "\n                <div>\n                  <object refClass=\"RangeEditor\"  \n                        ref='$range_".concat(type, "_").concat(index, "_").concat(tindex, "' \n                        min=\"").concat(min, "\" \n                        max=\"").concat(max, "\" \n                        step=\"").concat(step, "\" \n                        label=\"").concat(label, "\"\n                        key=\"").concat(index, "\" \n                        params='").concat(tindex, "' \n                        value=\"").concat(it, "\" \n                        units=\"").concat(units, "\" \n                        onchange=\"changeRangeEditor\" />\n                </div>")
          );
        }).join(''), "      \n          </div>\n          <div class=\"transform-menu\">\n            <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n\n      </div>\n    ")
      );
    }
  }, {
    key: "makeMultiTransformTemplate",
    value: function makeMultiTransformTemplate(type, transform, index) {
      var _this3 = this;

      return (
        /*html*/
        "\n      <div class=\"transform-item\" data-index=\"".concat(index, "\">\n        <div class=\"title\" data-index=\"").concat(index, "\">\n          <label draggable=\"true\" >").concat(this.$i18n('css.item.' + type), "</label>\n          <div></div>\n          <div class=\"transform-menu\">\n            <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n        <div class=\"transform-ui ").concat(type, "\">\n\n          ").concat(type === 'translate3d' ? "\n            <pre>\n  1 | 0 | 0 | tx\n  0 | 1 | 0 | ty\t\n  0 | 0 | 1 | tz\t\n  0 | 0 | 0 | 1</pre>\n          " : '', "\n\n          ").concat(type === 'matrix' ? "\n            <pre>\n  a | c | tx\t\n  b | d | ty\t\n  0 | 0 | 1</pre>\n          " : '', "    \n          \n          ").concat(type === 'matrix3d' ? "\n            <pre>\n  a1 | a2 | a3 | a4\t\n  b1 | b2 | b3 | b4\t\n  c1 | c2 | c3 | c4\t\n  d1 | d2 | d3 | d4</pre>\n          " : '', "     \n          \n          <div class='").concat(type, "'>\n          ").concat(transform.value.map(function (it, tindex) {
          var label = _this3.getLabel(type, tindex);

          var _this3$getRange = _this3.getRange(type),
              min = _this3$getRange.min,
              max = _this3$getRange.max,
              step = _this3$getRange.step,
              units = _this3$getRange.units;

          return (
            /*html*/
            "\n              <div>\n                <object refClass=\"NumberInputEditor\"  \n                      ref='$range_".concat(type, "_").concat(index, "_").concat(tindex, "' \n                      min=\"").concat(min, "\" \n                      max=\"").concat(max, "\" \n                      step=\"").concat(step, "\" \n                      label=\"").concat(label, "\"\n                      key=\"").concat(index, "\" \n                      params='").concat(tindex, "' \n                      value=\"").concat(it, "\" \n                      units=\"").concat(units, "\" \n                      onchange=\"changeRangeEditor\" />\n              </div>")
          );
        }).join(''), "   \n          </div>       \n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "makeTransformTemplate",
    value: function makeTransformTemplate(transform, index) {
      if (this.isMultiValue(transform.type)) {
        return this.makeMultiTransformTemplate(transform.type, transform, index);
      } else {
        return this.makeOneTransformTemplate(transform.type, transform, index);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["LOAD"])("$transformList"),
    value: function value() {
      var _this4 = this;

      return this.state.transforms.map(function (transform, index) {
        return _this4.makeTransformTemplate(transform, index.toString());
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGSTART"])("$transformList .transform-item .title label"),
    value: function value(e) {
      this.startIndex = +e.$dt.parent().attr("data-index");
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DRAGOVER"])("$transformList .transform-item") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {}
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortTransform",
    value: function sortTransform(startIndex, targetIndex) {
      this.sortItem(this.state.transforms, startIndex, targetIndex);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["DROP"])("$transformList .transform-item") + el_base_Event__WEBPACK_IMPORTED_MODULE_8__["PREVENT"],
    value: function value(e) {
      var targetIndex = +e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      this.sortTransform(this.startIndex, targetIndex);
      this.refresh();
      this.modifyTransform();
    }
  }, {
    key: "modifyTransform",
    value: function modifyTransform() {
      var value = this.state.transforms.join(' ');
      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: "getDefaultValue",
    value: function getDefaultValue(type) {
      switch (type) {
        case 'translateX':
        case 'translateY':
        case 'translateZ':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z()];

        case 'rotateX':
        case 'rotateY':
        case 'rotateZ':
        case 'rotate':
        case 'skewY':
        case 'skewX':
        case 'perspective':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].deg(0)];

        case 'translate':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z(), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z()];

        case 'translate3d':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z(), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z(), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].z()];

        case 'scale':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1)];

        case 'scaleX':
        case 'scaleY':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1)];

        case 'matrix':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0)];

        case 'matrix3d':
          return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0), el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(1)];
      }

      return [el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].number(0)];
    }
  }, {
    key: "makeTransform",
    value: function makeTransform(type) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var value = this.getDefaultValue(type);
      return el_editor_property_parser_Transform__WEBPACK_IMPORTED_MODULE_9__[/* Transform */ "a"].parse(_objectSpread(_objectSpread({}, opt), {}, {
        type: type,
        value: value
      }));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('add'),
    value: function value(transformType) {
      this.state.transforms.push(this.makeTransform(transformType));
      this.refresh();
      this.modifyTransform();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])("$add"),
    value: function value() {
      var transformType = this.refs.$transformSelect.value;
      this.trigger('add', transformType);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])("$transformList .transform-menu .del"),
    value: function value(e) {
      var index = +e.$dt.attr("data-index");
      this.state.transforms.splice(index, 1);
      this.refresh();
      this.modifyTransform();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value, params) {
      if (params) {
        this.state.transforms[+key].value[+params] = _value;
      } else {
        this.state.transforms[+key].reset({
          value: _value
        });
      }

      this.modifyTransform();
    }
  }]);

  return TransformEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_15__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_14__[/* registElement */ "a"])({
  TransformEditor: TransformEditor
});

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TransformOriginEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(28);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var typeList = [{
  key: "transform-origin-x",
  title: "X"
}, {
  key: "transform-origin-y",
  title: "Y"
}, {
  key: "transform-origin-z",
  title: "Z"
}];
var keyList = typeList.map(function (it) {
  return it.key;
});
var origin = {
  top: '50% 0%',
  'top left': '0% 0%',
  'top right': '100% 0%',
  left: '0% 50%',
  center: '50% 50%',
  right: '100% 50%',
  bottom: '50% 100%',
  'bottom left': '0% 100%',
  'bottom right': '100% 100%'
};

var TransformOriginEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(TransformOriginEditor, _EditorElement);

  var _super = _createSuper(TransformOriginEditor);

  function TransformOriginEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, TransformOriginEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(TransformOriginEditor, [{
    key: "initState",
    value: function initState() {
      var arr = this.props.value.split(' ');
      var obj = {
        isAll: false,
        'transform-origin': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].percent(50),
        'transform-origin-x': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].percent(50),
        'transform-origin-y': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].percent(50)
      };

      if (this.props.value) {
        if (arr.length === 1) {
          obj['isAll'] = true;
          obj['transform-origin'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['transform-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['transform-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
        } else if (arr.length == 2) {
          obj['isAll'] = false;
          obj['transform-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['transform-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[1]);
        }
      }

      return obj;
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='transform-origin-editor'>\n        <div class='direction' ref='$direction'>\n          <div class='pos' data-value='top left'></div>        \n          <div class='pos' data-value='top'></div>\n          <div class='pos' data-value='top right'></div>\n          <div class='pos' data-value='left'></div>\n          <div class='pos' data-value='center'></div>\n          <div class='pos' data-value='right'></div>\n          <div class='pos' data-value='bottom left'></div>                   \n          <div class='pos' data-value='bottom'></div>\n          <div class='pos' data-value='bottom right'></div>\n        </div>\n        <div ref='$body'></div>\n      </div>\n    "
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$direction .pos'),
    value: function value(e) {
      var direct = e.$dt.attr('data-value');
      this.state.isAll = false;

      var _origin$direct$split = origin[direct].split(' '),
          _origin$direct$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_origin$direct$split, 2),
          x = _origin$direct$split2[0],
          y = _origin$direct$split2[1];

      this.state['transform-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(x);
      this.state['transform-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(y);
      this.refresh();
      this.modifyTransformOrigin();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changeTransformOrigin'),
    value: function value(key, _value) {
      var _this = this;

      if (key === 'transform-origin') {
        keyList.forEach(function (type) {
          _this.children["$".concat(type)].setValue(_value.toString());
        });
      }

      if (key === 'transform-origin-z') {
        this.state[key] = _value;
      }

      this.setTransformOrigin();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$body'),
    value: function value() {
      var _this2 = this;

      return (
        /*html*/
        "\n      <div class=\"full transform-origin-item\" ref=\"$partitialSetting\" >\n        <div class=\"radius-setting-box\" ref=\"$radiusSettingBox\">\n          ".concat(typeList.map(function (it) {
          return (
            /*html*/
            "\n              <div>\n                  <object refClass=\"RangeEditor\"  ref='$".concat(it.key, "' compact=\"true\" label='").concat(it.title, "' key='").concat(it.key, "' value=\"").concat(_this2.state[it.key], "\" onchange='changeTransformOrigin' />\n              </div>  \n            ")
          );
        }).join(''), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "setTransformOrigin",
    value: function setTransformOrigin() {
      var _this3 = this;

      var type = this.refs.$selector.attr("data-selected-value");

      if (type === "all") {
        this.state.isAll = true;
        this.state['transform-origin'] = this.children["$all"].getValue();
      } else {
        this.state.isAll = false;
        keyList.forEach(function (key) {
          _this3.state[key] = _this3.children["$".concat(key)].getValue();
        });
      }

      this.modifyTransformOrigin();
    }
  }, {
    key: "modifyTransformOrigin",
    value: function modifyTransformOrigin() {
      var value = "".concat(this.state['transform-origin-x'], " ").concat(this.state['transform-origin-y'], " ").concat(this.state['transform-origin-z'] || '0px');
      this.parent.trigger(this.props.onchange, this.props.key, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])("$selector button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.refs.$selector.attr("data-selected-value", type);

      if (type === "all") {
        this.refs.$partitialSetting.hide();
      } else {
        this.refs.$partitialSetting.show("grid");
      }

      this.setTransformOrigin();
    }
  }]);

  return TransformOriginEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  TransformOriginEditor: TransformOriginEditor
});

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PerspectiveOriginEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var typeList = [{
  key: "perspective-origin-x",
  title: "X"
}, {
  key: "perspective-origin-y",
  title: "Y"
}];
var keyList = typeList.map(function (it) {
  return it.key;
});
var origin = {
  top: '50% 0%',
  'top left': '0% 0%',
  'top right': '100% 0%',
  left: '0% 50%',
  center: '50% 50%',
  right: '100% 50%',
  bottom: '50% 100%',
  'bottom left': '0% 100%',
  'bottom right': '100% 100%'
};

var PerspectiveOriginEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(PerspectiveOriginEditor, _EditorElement);

  var _super = _createSuper(PerspectiveOriginEditor);

  function PerspectiveOriginEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, PerspectiveOriginEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(PerspectiveOriginEditor, [{
    key: "initState",
    value: function initState() {
      var arr = this.props.value.split(' ');
      var obj = {
        isAll: true,
        'perspective-origin': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        'perspective-origin-x': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z(),
        'perspective-origin-y': el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].z()
      };

      if (this.props.value) {
        if (arr.length === 1) {
          obj['isAll'] = true;
          obj['perspective-origin'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['perspective-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['perspective-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
        } else if (arr.length == 2) {
          obj['isAll'] = false;
          obj['perspective-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[0]);
          obj['perspective-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(arr[1]);
        }
      }

      return obj;
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='perspective-origin-editor' ref='$body'>\n        <div class='direction' ref='$direction'>\n          <div class='pos' data-value='top'></div>\n          <div class='pos' data-value='top left'></div>\n          <div class='pos' data-value='top right'></div>\n          <div class='pos' data-value='bottom'></div>\n          <div class='pos' data-value='bottom left'></div>\n          <div class='pos' data-value='bottom right'></div>\n          <div class='pos' data-value='left'></div>\n          <div class='pos' data-value='right'></div>\n          <div class='pos' data-value='center'></div>\n        </div>\n        <div ref='$body'></div>\n      </div>\n    "
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$direction .pos'),
    value: function value(e) {
      var direct = e.$dt.attr('data-value');
      this.state.isAll = false;

      var _origin$direct$split = origin[direct].split(' '),
          _origin$direct$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_origin$direct$split, 2),
          x = _origin$direct$split2[0],
          y = _origin$direct$split2[1];

      this.state['perspective-origin-x'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(x);
      this.state['perspective-origin-y'] = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(y);
      this.refresh();
      this.modifyPerspectiveOrigin();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changePerspectiveOrigin'),
    value: function value(key, _value) {
      var _this = this;

      if (key === 'perspective-origin') {
        keyList.forEach(function (type) {
          _this.children["$".concat(type)].setValue(_value.toString());
        });
      }

      this.setPerspectiveOrigin();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$body'),
    value: function value() {
      var _this2 = this;

      var selectedValue = this.state.isAll ? 'all' : 'partitial';
      var perspectiveOrigin = this.state['perspective-origin'];
      return (
        /*html*/
        "\n      <div class=\"property-item perspective-origin-item\">\n        <div class=\"radius-selector\" data-selected-value=\"".concat(selectedValue, "\" ref=\"$selector\">\n          <button type=\"button\" data-value=\"all\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].border_all, "</button>\n          <button type=\"button\" data-value=\"partitial\">\n            ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].border_inner, "\n          </button>\n        </div>\n        <div class=\"radius-value\">\n          <object refClass=\"RangeEditor\"  ref='$all' key='perspective-origin' value=\"").concat(perspectiveOrigin, "\" onchange='changePerspectiveOrigin' />\n        </div>\n      </div>\n      <div\n        class=\"property-item full perspective-origin-item\"\n        ref=\"$partitialSetting\"\n        style=\"display: none;\"\n      >\n        <div class=\"radius-setting-box\" ref=\"$radiusSettingBox\">\n          ").concat(typeList.map(function (it) {
          var label = _this2.$i18n(it.title);

          return (
            /*html*/
            "\n              <div>\n                  <object refClass=\"RangeEditor\"  ref='$".concat(it.key, "' label='").concat(label, "' key='").concat(it.key, "' value=\"").concat(_this2.state[it.key], "\" onchange='changePerspectiveOrigin' />\n              </div>  \n            ")
          );
        }).join(''), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "setPerspectiveOrigin",
    value: function setPerspectiveOrigin() {
      var _this3 = this;

      var type = this.refs.$selector.attr("data-selected-value");

      if (type === "all") {
        this.state.isAll = true;
        this.state['perspective-origin'] = this.children["$all"].getValue();
      } else {
        this.state.isAll = false;
        keyList.forEach(function (key) {
          _this3.state[key] = _this3.children["$".concat(key)].getValue();
        });
      }

      this.modifyPerspectiveOrigin();
    }
  }, {
    key: "modifyPerspectiveOrigin",
    value: function modifyPerspectiveOrigin() {
      var value = '';

      if (this.state.isAll) {
        value = "".concat(this.state['perspective-origin']);
      } else {
        value = "".concat(this.state['perspective-origin-x'], " ").concat(this.state['perspective-origin-y']);
      }

      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])("$selector button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.refs.$selector.attr("data-selected-value", type);

      if (type === "all") {
        this.refs.$partitialSetting.hide();
      } else {
        this.refs.$partitialSetting.show("grid");
      }

      this.setPerspectiveOrigin();
    }
  }]);

  return PerspectiveOriginEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  PerspectiveOriginEditor: PerspectiveOriginEditor
});

/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TextShadowEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(11);
/* harmony import */ var el_editor_property_parser_TextShadow__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(60);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var TextShadowEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(TextShadowEditor, _EditorElement);

  var _super = _createSuper(TextShadowEditor);

  function TextShadowEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, TextShadowEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(TextShadowEditor, [{
    key: "initState",
    value: function initState() {
      return {
        hideLabel: this.props['hide-label'] === 'true' ? true : false,
        selectedIndex: -1,
        textShadows: el_editor_property_parser_TextShadow__WEBPACK_IMPORTED_MODULE_8__[/* TextShadow */ "a"].parseStyle(this.props.value)
      };
    }
  }, {
    key: "template",
    value: function template() {
      var labelClass = this.state.hideLabel ? 'hide' : '';
      return (
        /*html*/
        "\n      <div class=\"text-shadow-editor\" >\n        <div class='label ".concat(labelClass, "' >\n            <label>").concat(this.props.title || '', "</label>        \n            <div class='tools'>\n              <button type=\"button\" ref=\"$add\" title=\"add Text Shadow\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].add, "</button>\n            </div>\n        </div>\n        <div class='text-shadow-list' ref='$shadowList'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])("$shadowList"),
    value: function value() {
      var arr = this.state.textShadows.map(function (shadow, index) {
        return (
          /*html*/
          "\n        <div class=\"shadow-item real\" data-index=\"".concat(index, "\">\n          <div class=\"color\">\n            <div class='color-view' style=\"background-color: ").concat(shadow.color, "\">\n            </div>\n          </div>\n          <div class=\"offset-x\">").concat(shadow.offsetX, "</div>\n          <div class=\"offset-y\">").concat(shadow.offsetY, "</div>\n          <div class=\"blur-radius\">").concat(shadow.blurRadius, "</div>\n          <div class=\"tools\">\n            <button type=\"button\" class=\"remove\" data-index=\"").concat(index, "\">\n              ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].remove2, "\n            </button>\n          </div>\n        </div>\n      ")
        );
      });

      if (arr.length) {
        arr.push(
        /*html*/
        "\n      <div class=\"shadow-item desc\">\n            <div class=\"color\"></div>\n            <div class=\"offset-x\">X</div>\n            <div class=\"offset-y\">Y</div>\n            <div class=\"blur-radius\">Blur</div>\n            <div class=\"tools\">\n            </div>\n          </div>\n      ");
      }

      return arr.join('');
    }
  }, {
    key: "modifyTextShadow",
    value: function modifyTextShadow() {
      var value = this.state.textShadows.join(', ');
      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])('add'),
    value: function value() {
      this.state.textShadows.push(new el_editor_property_parser_TextShadow__WEBPACK_IMPORTED_MODULE_8__[/* TextShadow */ "a"]());
      this.refresh();
      this.modifyTextShadow();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$add"),
    value: function value() {
      this.trigger('add');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$shadowList .remove"),
    value: function value(e) {
      var index = +e.$dt.attr("data-index");
      this.state.textShadows.splice(index, 1);
      this.refresh();
      this.modifyTextShadow();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["CLICK"])("$shadowList .shadow-item.real > div:not(.tools)"),
    value: function value(e) {
      var index = +e.$dt.closest('shadow-item').attr("data-index");
      var shadow = this.state.textShadows[index];
      this.viewShadowPopup(shadow, index);
    }
  }, {
    key: "viewShadowPopup",
    value: function viewShadowPopup(shadow, index) {
      this.setState({
        selectedIndex: index
      }, false);
      this.viewTextShadowPropertyPopup(shadow);
    }
  }, {
    key: "viewTextShadowPropertyPopup",
    value: function viewTextShadowPropertyPopup(shadow) {
      this.emit("showTextShadowPropertyPopup", {
        changeEvent: 'changeTextShadowEditorPopup',
        color: shadow.color,
        offsetX: shadow.offsetX,
        offsetY: shadow.offsetY,
        blurRadius: shadow.blurRadius
      }, {
        id: this.id
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["SUBSCRIBE"])("changeTextShadowEditorPopup"),
    value: function value(data, params) {
      if (params.id === this.id) {
        var shadow = this.state.textShadows[this.state.selectedIndex];
        shadow.reset(data);
        this.refresh();
        this.modifyTextShadow();
      }
    }
  }]);

  return TextShadowEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_9__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_6__[/* registElement */ "a"])({
  TextShadowEditor: TextShadowEditor
});

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return StrokeDashArrayEditor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);
/* harmony import */ var _NumberRangeEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(68);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(8);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(11);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var StrokeDashArrayEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(StrokeDashArrayEditor, _EditorElement);

  var _super = _createSuper(StrokeDashArrayEditor);

  function StrokeDashArrayEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, StrokeDashArrayEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(StrokeDashArrayEditor, [{
    key: "initState",
    value: function initState() {
      var value = this.generateValue(this.props.value || '');
      return {
        label: this.props.label || '',
        value: value
      };
    }
  }, {
    key: "template",
    value: function template() {
      var label = this.state.label;
      var hasLabel = !!label;
      return (
        /*html*/
        "\n      <div class='stroke-dasharray-editor'>\n        <div class='tools ".concat(hasLabel ? 'has-label' : '', "'>\n          ").concat(hasLabel ? "<label class='label'>".concat(label, "</label>") : '', "\n          <label ref='$add'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].add, " ").concat(this.$i18n('stroke.dasharray.editor.add'), "</label>\n        </div>      \n        <div ref='$body'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: "toStringValue",
    value: function toStringValue() {
      return this.state.value.join(' ');
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.toStringValue();
    }
  }, {
    key: "generateValue",
    value: function generateValue(value) {
      return value.split(" ").filter(Boolean).map(function (it) {
        return +it;
      });
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_9__["isArray"])(value)) {} else {
        value = this.generateValue(value);
      }

      this.setState({
        value: value
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$body'),
    value: function value() {
      return this.state.value.map(function (value, index) {
        var num = index + 1;
        return (
          /*html*/
          "\n        <div class='dasharray-item'>\n          <object refClass=\"NumberRangeEditor\"  \n            ref='$".concat(num, "' \n            label='").concat(num, "'\n            key='").concat(index, "' \n            value=\"").concat(value, "\" \n            min=\"0\"\n            max=\"1000\"\n            step=\"1\"\n            onchange=\"changeRangeEditor\" \n          />\n          <button type=\"button\" data-index=\"").concat(index, "\" class='delete'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].remove2, "</button>\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      var index = +key;
      this.state.value[index] = _value;
      this.modifyStrokeDashArray();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$add'),
    value: function value() {
      this.setState({
        value: [].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.state.value), [0])
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["CLICK"])('$body .delete'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.state.value.splice(index, 1);
      this.refresh();
      this.modifyStrokeDashArray();
    }
  }, {
    key: "modifyStrokeDashArray",
    value: function modifyStrokeDashArray() {
      this.parent.trigger(this.props.onchange, this.props.key, this.toStringValue(), this.props.params);
    }
  }]);

  return StrokeDashArrayEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_12__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_11__[/* registElement */ "a"])({
  StrokeDashArrayEditor: StrokeDashArrayEditor
});

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return PolygonDataEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_editor_parser_PolygonParser__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(77);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PolygonDataEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(PolygonDataEditor, _EditorElement);

  var _super = _createSuper(PolygonDataEditor);

  function PolygonDataEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, PolygonDataEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(PolygonDataEditor, [{
    key: "initState",
    value: function initState() {
      var parser = new el_editor_parser_PolygonParser__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](this.props.value || '');
      return {
        parser: parser
      };
    }
  }, {
    key: "makeSegments",
    value: function makeSegments() {
      return this.refs.$data.$$('.segment').map(function ($segment) {
        var x = +$segment.$('[data-key="x"]').value;
        var y = +$segment.$('[data-key="y"]').value;
        return {
          x: x,
          y: y
        };
      });
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var segments = this.makeSegments();
      this.state.parser.resetSegments(segments);
      this.modifyPolygonData();
    }
  }, {
    key: "modifyPolygonData",
    value: function modifyPolygonData() {
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        parser: new el_editor_parser_PolygonParser__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"](value || '')
      });
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.parser.joinPoints();
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='polygon-data-editor'>\n                <div class='data' ref='$data'></div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])('$data'),
    value: function value() {
      return this.state.parser.segments.map(function (it) {
        return (
          /*html*/
          "\n                <div class='segment'>\n                    <div class='values'>\n                        <label>X <input type=\"number\" data-key=\"x\" value=\"".concat(it.x, "\" /></label>\n                        <label>Y <input type=\"number\" data-key=\"y\" value=\"").concat(it.y, "\" /></label>\n                    </div>\n                </div>\n            ")
        );
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["INPUT"])('$data input[type=number]') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["DEBOUNCE"])(300),
    value: function value(e) {
      this.updateData();
    }
  }]);

  return PolygonDataEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_8__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_7__[/* registElement */ "a"])({
  PolygonDataEditor: PolygonDataEditor
});

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BorderValueEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(3);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(28);
/* harmony import */ var el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(65);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(37);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(39);
/* harmony import */ var _ColorViewEditor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(79);
/* harmony import */ var _InputRangeEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(67);
/* harmony import */ var _ColorSingleEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(114);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(14);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(1);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var borderStyleList = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"].join(',');

var BorderValueEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(BorderValueEditor, _EditorElement);

  var _super = _createSuper(BorderValueEditor);

  function BorderValueEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BorderValueEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BorderValueEditor, [{
    key: "initState",
    value: function initState() {
      return {
        value: el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].parseValue(this.props.value)
      };
    }
  }, {
    key: "updateData",
    value: function updateData(obj) {
      this.setState(obj, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].joinValue(this.state.value);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.state.value = el_editor_property_parser_Border__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].parseValue(value);
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.children.$width.setValue(this.state.value.width || el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_5__[/* Length */ "a"].z());
      this.children.$style.setValue(this.state.value.style || 'solid');
      this.children.$color.setValue(this.state.value.color || 'rgba(0, 0, 0, 1)');
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state$value = this.state.value,
          width = _this$state$value.width,
          style = _this$state$value.style,
          color = _this$state$value.color;
      return (
        /*html*/
        "\n      <div class=\"border-value-editor\">\n        <div class='editor-area'>\n          <object refClass=\"RangeEditor\"  ref='$width' min=\"0\" max=\"100\" step=\"1\" key='width' value=\"".concat(width, "\" onchange='changeKeyValue' />\n        </div>\n        <div class='editor-area'>\n          <object refClass=\"SelectEditor\"  ref='$style' key='style' options='").concat(borderStyleList, "' value=\"").concat(style || 'solid', "\" onchange=\"changeKeyValue\" />\n        </div>\n        <div class='editor-area'>\n          <object refClass=\"ColorSingleEditor\" ref='$color' key='color' value=\"").concat(color || 'rgba(0, 0, 0, 1)', "\"  onchange=\"changeKeyValue\" />\n        </div>\n\n      </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_15__["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, v) {
      var value = this.state.value;
      value[key] = v;
      this.updateData({
        value: value
      });
    }
  }]);

  return BorderValueEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_14__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_13__[/* registElement */ "a"])({
  BorderValueEditor: BorderValueEditor
});

/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return MediaProgressEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(3);
/* harmony import */ var _NumberRangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(68);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var MediaProgressEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(MediaProgressEditor, _EditorElement);

  var _super = _createSuper(MediaProgressEditor);

  function MediaProgressEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, MediaProgressEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(MediaProgressEditor, [{
    key: "initState",
    value: function initState() {
      var _split = (this.props.value || "").split(":"),
          _split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_split, 3),
          start = _split2[0],
          end = _split2[1],
          duration = _split2[2];

      return {
        start: +(start || 0),
        end: +(end || 1),
        duration: +(duration || 1)
      };
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
      this.children.$s.setValue(this.state.start * this.state.duration);
      this.children.$e.setValue(this.state.end * this.state.duration);
      this.children.$s.setMax(this.state.duration);
      this.children.$e.setMax(this.state.duration);
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          start = _this$state.start,
          end = _this$state.end,
          duration = _this$state.duration;
      return (
        /*html*/
        "\n            <div class='media-progress-editor'>\n                <div class='drag-area'>\n                    <div class='progress-bar' ref='$progress'></div>\n                    <div class='bar' ref='$bar'></div>                \n                    <div class='drag-item start' ref='$start'></div>\n                    <div class='drag-item end' ref='$end'></div>\n                </div>\n                <div class='item'>\n                    <object refClass=\"NumberRangeEditor\"  \n                        ref='$s' \n                        label='Start' \n                        key='start' \n                        min=\"0\" \n                        max=\"".concat(duration, "\" \n                        step=\"0.001\" \n                        value=\"").concat(start * duration, "\" \n                        onchange=\"changeValue\" \n                    />\n                </div>\n                <div class='item'>\n                    <object refClass=\"NumberRangeEditor\"  \n                        ref='$e' \n                        label='End' \n                        key='end' \n                        min=\"0\" \n                        max=\"").concat(duration, "\" \n                        step=\"0.001\" \n                        value=\"").concat(end * duration, "\" \n                        onchange=\"changeValue\" \n                    />\n                </div>                \n            </div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeValue'),
    value: function value(key, _value) {
      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, key, _value / this.state.duration), true);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$start') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])('moveStart'),
    value: function value(e) {
      this.rect = this.refs.$progress.rect();
      this.pos = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.refs.$start.css('left')).toPx(this.rect.width);
      this.max = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.refs.$end.css('left')).toPx(this.rect.width);
    }
  }, {
    key: "moveStart",
    value: function moveStart(dx, dy) {
      var realPos = Math.min(this.max.value, Math.max(0, this.pos.value + dx));
      this.state.start = realPos / this.rect.width;
      this.children.$s.setValue(this.state.start * this.state.duration);
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$start'),
    value: function value() {
      return {
        'data-info': this.state.start,
        style: {
          left: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent((this.state.start || 0) * 100)
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["POINTERSTART"])('$end') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["MOVE"])('moveStartForEnd'),
    value: function value(e) {
      this.rect = this.refs.$progress.rect();
      this.pos = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.refs.$end.css('left')).toPx(this.rect.width);
      this.min = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].parse(this.refs.$start.css('left')).toPx(this.rect.width);
      this.max = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].px(this.rect.width);
    }
  }, {
    key: "moveStartForEnd",
    value: function moveStartForEnd(dx, dy) {
      var realPos = Math.max(this.min.value, Math.min(this.max.value, this.pos.value + dx));
      this.state.end = realPos / this.rect.width;
      this.children.$e.setValue(this.state.end * this.state.duration);
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$end'),
    value: function value() {
      return {
        'data-info': this.state.end,
        style: {
          left: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent((this.state.end || 1) * 100)
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["BIND"])('$bar'),
    value: function value() {
      var start = this.state.start || 0;
      var end = this.state.end || 1;
      return {
        style: {
          left: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent(start * 100),
          width: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_8__[/* Length */ "a"].percent((end - start) * 100)
        }
      };
    }
  }, {
    key: "getValue",
    value: function getValue() {
      var _this$state2 = this.state,
          start = _this$state2.start,
          end = _this$state2.end,
          duration = _this$state2.duration;
      return "".concat(start, ":").concat(end, ":").concat(duration);
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      var _value$split = value.split(':'),
          _value$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_value$split, 3),
          start = _value$split2[0],
          end = _value$split2[1],
          duration = _value$split2[2];

      this.setState({
        start: Number(start),
        end: Number(end),
        duration: Number(duration)
      });
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      this.setState(data, isRefresh);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }]);

  return MediaProgressEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  MediaProgressEditor: MediaProgressEditor
});

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CircleEditor; });
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(8);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(37);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var CircleEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(CircleEditor, _EditorElement);

  var _super = _createSuper(CircleEditor);

  function CircleEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, CircleEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(CircleEditor, [{
    key: "parseValue",
    value: function parseValue() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '50%';
      var radius = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"]('', 'closest-side'),
          position = '';
      str = str || '50%';

      if (str.includes('at')) {
        var _str$split$map = str.split('at').map(function (it) {
          return it.trim();
        });

        var _str$split$map2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_str$split$map, 2);

        radius = _str$split$map2[0];
        position = _str$split$map2[1];
      } else {
        position = str.trim();
      }

      var _position$split = position.split(' '),
          _position$split2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_0___default()(_position$split, 2),
          x = _position$split2[0],
          y = _position$split2[1];

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_6__["isUndefined"])(y)) {
        y = x;
      }

      x = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(x);
      y = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].parse(y);
      return {
        radius: radius,
        x: x,
        y: y
      };
    }
  }, {
    key: "initState",
    value: function initState() {
      return this.parseValue(this.props.value);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='clip-path-editor circle-editor'>\n            <object refClass=\"RangeEditor\"  \n                ref='$range' \n                label='Radius' \n                key='radius' \n                value='".concat(this.state.radius, "' \n                min=\"0\" \n                max=\"100\" \n                step=\"0.1\" \n                units=\"%,closest-side,farthest-side\" \n                onchange='changeRangeEditor' \n            />\n            <div class='drag-area' ref='$area'>\n                <div class='drag-pointer' ref='$pointer' style='left: ").concat(this.state.x, ";top: ").concat(this.state.y, ";'></div>\n                <div class='clip-area circle' ref='$clipArea'></div>\n            </div>\n        </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$clipArea'),
    value: function value() {
      return {
        style: {
          'clip-path': "".concat(this.props.key, "(").concat(this.toClipPathValueString(), ")")
        }
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["POINTERSTART"])('$area') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["MOVE"])() + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["END"])(),
    value: function value(e) {
      this.areaRect = this.refs.$area.rect();
      this.startXY = e.xy;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      if (this.areaRect.x > x) {
        x = this.areaRect.x;
      } else if (this.areaRect.right < x) {
        x = this.areaRect.right;
      }

      if (this.areaRect.y > y) {
        y = this.areaRect.y;
      } else if (this.areaRect.bottom < y) {
        y = this.areaRect.bottom;
      }

      var left = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].percent((x - this.areaRect.x) / this.areaRect.width * 100).round(1);
      var top = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].percent((y - this.areaRect.y) / this.areaRect.height * 100).round(1);
      this.refs.$pointer.css({
        left: left,
        top: top
      });
      this.updateData({
        x: left,
        y: top
      });
      this.bindData('$clipArea');
    }
  }, {
    key: "toClipPathValueString",
    value: function toClipPathValueString() {
      var _this$state = this.state,
          x = _this$state.x,
          y = _this$state.y,
          radius = _this$state.radius;
      var results = "".concat(x, " ").concat(y);
      var radiusString = radius + '';

      if (radiusString.includes('closest-side')) {
        radiusString = 'closest-side';
      } else if (radiusString.includes('farthest-side')) {
        radiusString = 'farthest-side';
      }

      return radius ? "".concat(radiusString, " at ").concat(results) : "".concat(results);
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      if (key === 'radius') {
        var radius = _value;
        var tempValue = _value.unit + '';

        if (tempValue.includes('closest-side')) {
          radius = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"]('', 'closest-side');
        } else if (tempValue.includes('farthest-side')) {
          radius = new el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"]('', 'farthest-side');
        }

        this.updateData({
          radius: radius
        });
      }
    }
  }]);

  return CircleEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_11__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_10__[/* registElement */ "a"])({
  CircleEditor: CircleEditor
});

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InputArrayEditor; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var InputArrayEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(InputArrayEditor, _EditorElement);

  var _super = _createSuper(InputArrayEditor);

  function InputArrayEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, InputArrayEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(InputArrayEditor, [{
    key: "initState",
    value: function initState() {
      var values = this.props.values.split(' ').map(function (it) {
        return +it;
      });
      return {
        values: values,
        column: this.props.column
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='small-editor input-array-editor' ref='$body' ></div>"
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["BIND"])('$body'),
    value: function value() {
      return {
        cssText: "\n                display: grid;\n                grid-template-columns: repeat(".concat(this.state.column, ", 1fr);\n                grid-column-gap: 2px;\n                grid-row-gap: 2px;\n            ")
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["LOAD"])('$body'),
    value: function value() {
      var values = this.state.values;
      return values.map(function (value, index) {
        return "\n                <div class='number-editor'>\n                    <input type=\"number\" value=\"".concat(value, "\" step=\"0.01\" data-index=\"").concat(index, "\" />\n                </div>\n            ");
      });
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.values, this.props.params);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_5__["INPUT"])('$body input'),
    value: function value(e) {
      var $el = e.$dt;
      var index = +$el.attr('data-index');
      var value = +$el.value;
      this.state.values[index] = value;
      this.updateData();
    }
  }]);

  return InputArrayEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_7__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_6__[/* registElement */ "a"])({
  InputArrayEditor: InputArrayEditor
});

/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FuncFilterEditor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(46);
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(1);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(39);
/* harmony import */ var _TextEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(96);
/* harmony import */ var _NumberRangeEditor__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(68);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(14);










function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var FuncFilterEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(FuncFilterEditor, _EditorElement);

  var _super = _createSuper(FuncFilterEditor);

  function FuncFilterEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_4___default()(this, FuncFilterEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_5___default()(FuncFilterEditor, [{
    key: "initState",
    value: function initState() {
      return _objectSpread({
        label: this.props.label || ''
      }, this.parse(this.props.value));
    }
  }, {
    key: "parse",
    value: function parse(value) {
      var _value$split = value.split(' '),
          _value$split2 = _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_2___default()(_value$split),
          type = _value$split2[0],
          values = _value$split2.slice(1);

      if (type === 'linear') {
        var _values = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(values, 2),
            slop = _values[0],
            intercept = _values[1];
      } else if (type === 'gamma') {
        var _values2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(values, 3),
            amplitude = _values2[0],
            exponent = _values2[1],
            offset = _values2[2];
      }

      return {
        type: type,
        values: values,
        slop: slop,
        intercept: intercept,
        amplitude: amplitude,
        exponent: exponent,
        offset: offset
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='small-editor func-filter' ref='$body'></div>"
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_10__["LOAD"])('$body'),
    value: function value() {
      var _this = this;

      var _this$state = this.state,
          type = _this$state.type,
          label = _this$state.label;
      var hasLabel = !!label ? 'has-label' : '';
      return (
        /*html*/
        "\n        <object refClass=\"SelectEditor\"  label=\"".concat(label, "\" key=\"type\" value=\"").concat(this.state.type, "\" options=\"identity,table,discrete,linear,gamma\" onchange=\"changeType\" />\n        <div class='func-filter-editor ").concat(hasLabel, "' ref='$container' data-selected-type='").concat(type, "'>\n            ").concat(label ? "<label></label>" : '', "\n            <div data-type='identity'>\n            </div>\n            <div data-type='table'>\n                <object refClass=\"TextEditor\" label='tableValues' ref='$values' key='values' value=\"").concat(this.state.values.join(' '), "\" onchange=\"changeValues\" />\n            </div>\n            <div data-type='linear'>\n                ").concat(['slop', 'intercept'].map(function (it) {
          return (
            /*html*/
            "\n                        <div>\n                            <object refClass=\"NumberRangeEditor\"  label='".concat(it, "' ref='$").concat(it, "' key='").concat(it, "' value=\"").concat(_this.state[it], "\" onchange=\"changeLinear\" />\n                        </div>                    \n                    ")
          );
        }).join(''), "\n            </div>\n            <div data-type='gamma'>\n                ").concat(['amplitude', 'exponent', 'offset'].map(function (it) {
          return (
            /*html*/
            "\n                        <div>\n                            <object refClass=\"NumberRangeEditor\"  label='".concat(it, "' ref='$").concat(it, "' key='").concat(it, "' value=\"").concat(_this.state[it], "\" onchange=\"changeGamma\" />\n                        </div>                    \n                    ")
          );
        }).join(''), "            \n            </div>                                                \n        </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_10__["SUBSCRIBE"])('changeType'),
    value: function value(key, type) {
      this.updateData({
        type: type
      });
      this.refresh();
    }
  }, {
    key: "getValue",
    value: function getValue() {
      switch (this.state.type) {
        case 'table':
        case 'discrete':
          return [this.state.type].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(this.state.values)).join(' ');

        case 'linear':
          return [this.state.type, this.state.slop, this.state.intercept].join(' ');

        case 'gamma':
          return [this.state.type, this.state.amplitude, this.state.exponent, this.state.offset].join(' ');
      }

      return 'identity';
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState(_objectSpread({}, this.parse(value)));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_10__["SUBSCRIBE"])('changeValues'),
    value: function value(key, _value) {
      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()({}, key, _value.split(' ')));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_10__["SUBSCRIBE"])('changeLinear'),
    value: function value(key, _value2) {
      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()({}, key, _value2));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_10__["SUBSCRIBE"])('changeGamma'),
    value: function value(key, _value3) {
      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3___default()({}, key, _value3));
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.getValue(), this.props.params);
    }
  }]);

  return FuncFilterEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_15__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_14__[/* registElement */ "a"])({
  FuncFilterEditor: FuncFilterEditor
});

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ImageSelectEditor; });
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ImageSelectEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(ImageSelectEditor, _EditorElement);

  var _super = _createSuper(ImageSelectEditor);

  function ImageSelectEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ImageSelectEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ImageSelectEditor, [{
    key: "initState",
    value: function initState() {
      return {
        value: this.props.value
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='image-select-editor' ref='$body'></div>\n        "
      );
    }
  }, {
    key: "getValue",
    value: function getValue() {
      return this.state.value;
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$body'),
    value: function value() {
      var project = this.$selection.currentProject;
      if (!project) return;
      return (
        /*html*/
        "\n            <div class='preview-container'>\n                <img src=\"".concat(project.getImageValueById(this.state.value) || this.state.value, "\" />\n                <input type='file' ref='$file' accept=\"image/*\" />\n            </div>\n            <div class='select-container'>\n                <button type=\"button\" ref='$select'>Select a image</button>\n            <div>\n        ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CHANGE"])('$file'),
    value: function value(e) {
      var _this = this;

      var files = _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_0___default()(e.target.files);

      if (files.length) {
        this.emit('updateImageAssetItem', files[0], function (imageId) {
          _this.trigger('changeImageSelectEditor', imageId);
        });
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$select'),
    value: function value() {
      this.emit('showImageSelectPopup', {
        context: this,
        changeEvent: 'changeImageSelectEditor',
        value: this.state.value
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeImageSelectEditor'),
    value: function value(_value) {
      this.updateData({
        value: _value
      });
      this.refresh();
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
  }]);

  return ImageSelectEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_9__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_8__[/* registElement */ "a"])({
  ImageSelectEditor: ImageSelectEditor
});

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BlendSelectEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(39);
/* harmony import */ var el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(38);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(9);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var BlendSelectEditor = /*#__PURE__*/function (_SelectEditor) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(BlendSelectEditor, _SelectEditor);

  var _super = _createSuper(BlendSelectEditor);

  function BlendSelectEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, BlendSelectEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(BlendSelectEditor, [{
    key: "getBlendList",
    value: function getBlendList() {
      var _this = this;

      return el_editor_util_Resource__WEBPACK_IMPORTED_MODULE_8__[/* blend_list */ "a"].split(',').map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("blend.".concat(it)));
      });
    }
  }, {
    key: "initState",
    value: function initState() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(BlendSelectEditor.prototype), "initState", this).call(this)), {}, {
        options: this.getBlendList()
      });
    }
  }]);

  return BlendSelectEditor;
}(_SelectEditor__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_9__[/* registElement */ "a"])({
  BlendSelectEditor: BlendSelectEditor
});

/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return DirectionEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(13);
/* harmony import */ var _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(28);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(37);
/* harmony import */ var el_editor_unit_DirectionLength__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(64);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(14);








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var typeList = [{
  key: "top",
  title: "Top"
}, {
  key: "right",
  title: "Right"
}, {
  key: "bottom",
  title: "Bottom"
}, {
  key: "left",
  title: "Left"
}];

var DirectionEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(DirectionEditor, _EditorElement);

  var _super = _createSuper(DirectionEditor);

  function DirectionEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, DirectionEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(DirectionEditor, [{
    key: "initState",
    value: function initState() {
      var _DirectionLength$pars = el_editor_unit_DirectionLength__WEBPACK_IMPORTED_MODULE_11__[/* DirectionLength */ "a"].parse(this.props.value),
          _DirectionLength$pars2 = _babel_runtime_helpers_slicedToArray__WEBPACK_IMPORTED_MODULE_1___default()(_DirectionLength$pars, 5),
          count = _DirectionLength$pars2[0],
          top = _DirectionLength$pars2[1],
          right = _DirectionLength$pars2[2],
          bottom = _DirectionLength$pars2[3],
          left = _DirectionLength$pars2[4];

      return {
        isAll: count === 1,
        all: top.clone(),
        top: top.clone(),
        right: right.clone(),
        bottom: bottom.clone(),
        left: left.clone()
      };
    }
  }, {
    key: "template",
    value: function template() {
      return "<div class='direction-editor' ref='$body'></div>";
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('changeBorderRadius'),
    value: function value(key, _value) {
      var _this = this;

      if (key === 'all') {
        typeList.forEach(function (it) {
          _this.state[it.key] = _value.clone();

          _this.children["$".concat(it.key)].setValue(_value.clone());
        });
      }

      this.updateData(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, key, _value));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["LOAD"])('$body'),
    value: function value() {
      var _this2 = this;

      var selectedValue = this.state.isAll ? 'all' : 'partitial';
      var direction = this.state.all;
      var display = selectedValue === 'all' ? 'display:none' : 'display:block';
      return (
        /*html*/
        "\n      <div class=\"property-item direction-item\">\n        <div class=\"radius-selector\" data-selected-value=\"".concat(selectedValue, "\" ref=\"$selector\">\n          <button type=\"button\" data-value=\"all\">").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].border_all, "</button>\n          <button type=\"button\" data-value=\"partitial\">\n            ").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].border_inner, "\n          </button>\n        </div>\n        <div class=\"radius-value\">\n          <object refClass=\"RangeEditor\"  ref='$all' key='all' value=\"").concat(direction, "\" onchange='changeBorderRadius' />\n        </div>\n      </div>\n      <div\n        class=\"property-item full direction-item\"\n        ref=\"$partitialSetting\"\n        style=\"").concat(display, "\"\n      >\n        <div class=\"radius-setting-box\">\n          ").concat(typeList.map(function (it) {
          var value = _this2.state[it.key];
          return (
            /*html*/
            "\n              <div>\n                  <object refClass=\"RangeEditor\"  ref='$".concat(it.key, "' label='").concat(it.title, "' key='").concat(it.key, "' value=\"").concat(value, "\" onchange='changeBorderRadius' />\n              </div>  \n            ")
          );
        }).join(''), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      var value = [];

      if (this.state.isAll) {
        value = [1, this.state.all, this.state.all, this.state.all, this.state.all];
      } else {
        value = [4, this.state.top, this.state.right, this.state.bottom, this.state.left];
      }

      this.parent.trigger(this.props.onchange, value);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])("$selector button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.refs.$selector.attr("data-selected-value", type);

      if (type === "all") {
        this.refs.$partitialSetting.hide();
      } else {
        this.refs.$partitialSetting.show("grid");
      }

      this.updateData({
        isAll: type === 'all'
      });
    }
  }]);

  return DirectionEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_13__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_12__[/* registElement */ "a"])({
  DirectionEditor: DirectionEditor
});

/***/ }),
/* 133 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FillEditor; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_base_UIElement__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(28);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(1);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(3);
/* harmony import */ var _RangeEditor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(37);
/* harmony import */ var _SelectEditor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(39);
/* harmony import */ var _InputRangeEditor__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(67);
/* harmony import */ var el_editor_property_parser_image_resource_Gradient__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(41);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(11);
/* harmony import */ var el_editor_property_parser_SVGFill__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(42);
/* harmony import */ var el_editor_property_parser_image_resource_SVGStaticGradient__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(57);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(8);
/* harmony import */ var _SelectIconEditor__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(69);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(14);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }















var imageTypeList = ['static-gradient', 'linear-gradient', 'radial-gradient', 'image-resource'];
var iconList = {
  'image-resource': el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].photo
};
var presetPosition = {
  top: {
    x1: '0%',
    y1: '100%',
    x2: '0%',
    y2: '0%'
  },
  'top left': {
    x1: '100%',
    y1: '100%',
    x2: '0%',
    y2: '0%'
  },
  'top right': {
    x1: '0%',
    y1: '100%',
    x2: '100%',
    y2: '0%'
  },
  left: {
    x1: '100%',
    y1: '0%',
    x2: '0%',
    y2: '0%'
  },
  right: {
    x1: '0%',
    y1: '0%',
    x2: '100%',
    y2: '0%'
  },
  bottom: {
    x1: '0%',
    y1: '0%',
    x2: '0%',
    y2: '100%'
  },
  'bottom left': {
    x1: '100%',
    y1: '0%',
    x2: '0%',
    y2: '100%'
  },
  'bottom right': {
    x1: '0%',
    y1: '0%',
    x2: '100%',
    y2: '100%'
  }
};
var props = ['x1', 'y1', 'x2', 'y2', 'cx', 'cy', 'r', 'fx', 'fy', 'fr', 'spreadMethod', 'patternUnits', 'patternWidth', 'patternHeight', 'imageX', 'imageY', 'imageWidth', 'imageHeight'];
var rangeEditorList = ['x1', 'y1', 'x2', 'y2', 'cx', 'cy', 'r', 'fx', 'fy', 'fr', 'patternWidth', 'patternHeight', 'imageX', 'imageY', 'imageWidth', 'imageHeight'];

var FillEditor = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(FillEditor, _EditorElement);

  var _super = _createSuper(FillEditor);

  function FillEditor() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_2___default()(this, FillEditor);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_3___default()(FillEditor, [{
    key: "initState",
    value: function initState() {
      return {
        cachedRect: null,
        index: +(this.props.index || 0),
        value: this.props.value,
        image: el_editor_property_parser_SVGFill__WEBPACK_IMPORTED_MODULE_15__[/* SVGFill */ "a"].parseImage(this.props.value || 'transparent') || el_editor_property_parser_image_resource_SVGStaticGradient__WEBPACK_IMPORTED_MODULE_16__[/* SVGStaticGradient */ "a"].create()
      };
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        cachedRect: null,
        image: el_editor_property_parser_SVGFill__WEBPACK_IMPORTED_MODULE_15__[/* SVGFill */ "a"].parseImage(value)
      }, false);
      this.refresh();
      this.parent.trigger('changeTabType', this.state.image.type);
    }
  }, {
    key: "template",
    value: function template() {
      var _this = this;

      var image = this.state.image;
      image = image || {};
      var type = image.type || 'static-gradient';
      if (type === 'url') type = 'image-resource';
      return (
        /*html*/
        "\n        <div class='fill-editor' data-selected-editor='".concat(type, "'>\n            <div class='gradient-preview'>\n              <div class='gradient-view' ref='$gradientView'>\n                <div class='drag-pointer' ref='$dragPosition'></div>\n              </div>\n              <svg class='pointer-draw' ref='$pointerDrawArea'>\n                <line data-type='line' ref='$line' />\n                <circle r='5' data-type='start' ref='$startPoint' />\n                <circle r='5' data-type='end' ref='$endPoint' />\n                <circle r='5' data-type='center' ref='$centerPoint' />\n                <circle r='5' data-type='f' ref='$fPoint' />\n              </svg>              \n              <div class='preset-position'>\n                <div data-value='top' title='top'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='right' title='right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='left' title='left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom' title='bottom'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='top left' title='top left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='top right' title='top right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom left' title='bottom left'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>\n                <div data-value='bottom right' title='bottom right'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_14__[/* default */ "a"].chevron_right, "</div>                \n              </div>\n              <div data-editor='image-loader'>\n                <input type='file' accept=\"image/*\" ref='$file' />\n              </div>              \n            </div>\n            <div class=\"picker-tab\">\n              <div class=\"picker-tab-list\" ref=\"$tab\">\n                ").concat(imageTypeList.map(function (it) {
          return "<span class='picker-tab-item ".concat(it, "' data-editor='").concat(it, "'><span class='icon'>").concat(iconList[it] || '', "</span></span>");
        }).join(''), "\n              </div>\n            </div>\n            <div class='gradient-steps' data-editor='gradient'>\n                <div class=\"hue-container\" ref=\"$back\"></div>            \n                <div class=\"hue\" ref=\"$steps\">\n                    <div class='step-list' ref=\"$stepList\" ></div>\n                </div>\n            </div>\n            <div class='tools' data-editor='tools'>\n              <object refClass=\"RangeEditor\"  label='").concat(this.$i18n('fill.editor.offset'), "' ref='$range' key='length' onchange='changeColorStepOffset' />\n            </div>\n            <div class='sub-editor' ref='$subEditor'> \n                <div data-editor='spreadMethod'>\n                  <object refClass=\"SelectIconEditor\" label='").concat(this.$i18n('fill.editor.spread'), "' ref='$spreadMethod' value=\"pad\" options='pad,reflect,repeat' key='spreadMethod' onchange='changeKeyValue' />\n                </div>  \n                <div data-editor='patternUnits'>\n                  <object refClass=\"SelectEditor\"  label='Pattern' ref='$patternUnits' options='userSpaceOnUse' key='patternUnits' onchange='changeKeyValue' />\n                </div>                  \n                ").concat(rangeEditorList.map(function (field) {
          var label = _this.$i18n('fill.editor.' + field);

          return (
            /*html*/
            "\n                    <div data-editor='".concat(field, "'>\n                      <object refClass=\"RangeEditor\"  label='").concat(label, "' ref='$").concat(field, "' value=\"").concat(_this.getImageFieldValue(image, field), "\" key='").concat(field, "' onchange='changeKeyValue' />\n                    </div>\n                  ")
          );
        }).join(''), "\n                                                                                                                                \n            </div>            \n        </div>\n      ")
      );
    }
  }, {
    key: "getImageFieldValue",
    value: function getImageFieldValue(image, field) {
      var value = image[field];

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_17__["isUndefined"])(value)) {
        switch (field) {
          case 'cx':
          case 'cy':
          case 'r':
          case 'fx':
          case 'fy':
            return '50%';

          case 'x1':
          case 'y1':
          case 'y2':
          case 'fr':
          case 'imageX':
          case 'imageY':
            return '0%';

          case 'x2':
          case 'patternWidth':
          case 'patternHeight':
          case 'imageWidth':
          case 'imageHeight':
            return '100%';
        }
      }

      return value;
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CHANGE"])('$file'),
    value: function value(e) {
      var _this2 = this;

      var project = this.$selection.currentProject;

      if (project) {
        _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(e.target.files).forEach(function (item) {
          _this2.emit('updateImageAssetItem', item, function (local) {
            _this2.trigger('setImageUrl', local);
          });
        });
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$el .preset-position [data-value]'),
    value: function value(e) {
      var type = e.$dt.attr('data-value');

      if (presetPosition[type]) {
        this.state.image.reset(presetPosition[type]);
        this.refresh();
        this.refreshFieldValue();
        this.updateData();
      }
    }
  }, {
    key: "refreshFieldValue",
    value: function refreshFieldValue() {
      this.children.$x1.setValue(this.state.image.x1);
      this.children.$y1.setValue(this.state.image.y1);
      this.children.$x2.setValue(this.state.image.x2);
      this.children.$y2.setValue(this.state.image.y2);
      this.children.$cx.setValue(this.state.image.cx);
      this.children.$cy.setValue(this.state.image.cy);
      this.children.$r.setValue(this.state.image.r);
      this.children.$fx.setValue(this.state.image.fx);
      this.children.$fy.setValue(this.state.image.fy);
      this.children.$fr.setValue(this.state.image.fr);
      this.children.$spreadMethod.setValue(this.state.image.spreadMethod);
      this.children.$patternUnits.setValue(this.state.image.patternUnits);
      this.children.$patternWidth.setValue(this.state.image.patternWidth);
      this.children.$patternHeight.setValue(this.state.image.patternHeight);
      this.children.$imageX.setValue(this.state.image.imageX);
      this.children.$imageY.setValue(this.state.image.imageY);
      this.children.$imageWidth.setValue(this.state.image.imageWidth);
      this.children.$imagenHeight.setValue(this.state.image.imageHeight);
    }
  }, {
    key: "getDrawAreaRect",
    value: function getDrawAreaRect() {
      return {
        width: 198,
        height: 150
      };
    }
  }, {
    key: "getFieldValue",
    value: function getFieldValue(field) {
      return el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].parse(this.getImageFieldValue(this.state.image, field));
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$line'),
    value: function value() {
      var _this$getDrawAreaRect = this.getDrawAreaRect(),
          width = _this$getDrawAreaRect.width,
          height = _this$getDrawAreaRect.height;

      var x1 = this.getFieldValue('x1').toPx(width);
      var y1 = this.getFieldValue('y1').toPx(height);
      var x2 = this.getFieldValue('x2').toPx(width);
      var y2 = this.getFieldValue('y2').toPx(height);
      return {
        x1: x1,
        y1: y1,
        x2: x2,
        y2: y2
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$startPoint'),
    value: function value() {
      var _this$getDrawAreaRect2 = this.getDrawAreaRect(),
          width = _this$getDrawAreaRect2.width,
          height = _this$getDrawAreaRect2.height;

      var cx = this.getFieldValue('x1').toPx(width);
      var cy = this.getFieldValue('y1').toPx(height);
      return {
        cx: cx,
        cy: cy
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$endPoint'),
    value: function value() {
      var _this$getDrawAreaRect3 = this.getDrawAreaRect(),
          width = _this$getDrawAreaRect3.width,
          height = _this$getDrawAreaRect3.height;

      var cx = this.getFieldValue('x2').toPx(width);
      var cy = this.getFieldValue('y2').toPx(height);
      return {
        cx: cx,
        cy: cy
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$centerPoint'),
    value: function value() {
      var _this$getDrawAreaRect4 = this.getDrawAreaRect(),
          width = _this$getDrawAreaRect4.width,
          height = _this$getDrawAreaRect4.height;

      var cx = this.getFieldValue('cx').toPx(width);
      var cy = this.getFieldValue('cy').toPx(height);
      return {
        cx: cx,
        cy: cy
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$fPoint'),
    value: function value() {
      var _this$getDrawAreaRect5 = this.getDrawAreaRect(),
          width = _this$getDrawAreaRect5.width,
          height = _this$getDrawAreaRect5.height;

      var cx = this.getFieldValue('fx').toPx(width);
      var cy = this.getFieldValue('fy').toPx(height);
      return {
        cx: cx,
        cy: cy
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["POINTERSTART"])('$pointerDrawArea circle[data-type]') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["MOVE"])('moveDragPointer'),
    value: function value(e) {
      this.containerRect = this.refs.$pointerDrawArea.rect();
      this.startXY = e.xy;
      this.type = e.$dt.attr('data-type');
      this.state.cachedRect = null;
    }
  }, {
    key: "getRectRate",
    value: function getRectRate(rect, x, y) {
      var width = rect.width,
          height = rect.height,
          rx = rect.x,
          ry = rect.y;

      if (rx > x) {
        x = rx;
      } else if (rx + width < x) {
        x = rx + width;
      }

      if (ry > y) {
        y = ry;
      } else if (ry + height < y) {
        y = ry + height;
      }

      var left = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].percent((x - rx) / width * 100);
      var top = el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].percent((y - ry) / height * 100);
      return {
        left: left,
        top: top
      };
    }
  }, {
    key: "moveDragPointer",
    value: function moveDragPointer(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      var _this$getRectRate = this.getRectRate(this.containerRect, x, y),
          left = _this$getRectRate.left,
          top = _this$getRectRate.top;

      if (this.type == 'start') {
        this.state.image.reset({
          x1: left,
          y1: top
        });
        this.children.$x1.setValue(left);
        this.children.$y1.setValue(top);
        this.bindData('$startPoint');
        this.bindData('$line');
      } else if (this.type == 'end') {
        this.state.image.reset({
          x2: left,
          y2: top
        });
        this.children.$x2.setValue(left);
        this.children.$y2.setValue(top);
        this.bindData('$endPoint');
        this.bindData('$line');
      } else if (this.type == 'center') {
        this.state.image.reset({
          cx: left,
          cy: top
        });
        this.children.$cx.setValue(left);
        this.children.$cy.setValue(top);
        this.bindData('$centerPoint');
      } else if (this.type == 'f') {
        this.state.image.reset({
          fx: left,
          fy: top
        });
        this.children.$fx.setValue(left);
        this.children.$fy.setValue(top);
        this.bindData('$fPoint');
      }

      this.bindData('$gradientView');
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$tab .picker-tab-item'),
    value: function value(e) {
      var _this3 = this;

      var type = e.$dt.attr('data-editor');
      this.$el.attr('data-selected-editor', type);
      this.parent.trigger('changeTabType', type);
      var url = type === 'image-resource' ? this.state.image.url : this.state.url;
      var opt = {};
      props.forEach(function (it) {
        opt[it] = _this3.children["$".concat(it)].getValue();
      });
      this.state.image = el_editor_property_parser_SVGFill__WEBPACK_IMPORTED_MODULE_15__[/* SVGFill */ "a"].changeImageType(_objectSpread({
        type: type,
        url: url,
        colorsteps: this.state.image.colorsteps || []
      }, opt));
      this.refresh();
      this.updateData();
      this.sendMessage();
    }
  }, {
    key: "sendMessage",
    value: function sendMessage(type) {
      var type = this.$el.attr('data-selected-editor');

      if (type === 'linear-gradient') {
        this.emit('addStatusBarMessage', '');
      } else if (type === 'url' || type === 'image-resource') {
        this.emit('addStatusBarMessage', this.$i18n('fill.editor.message.click.image'));
      } else {
        this.emit('addStatusBarMessage', this.$i18n('fill.editor.message.drag.position'));
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      this.state.image.reset(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()({}, key, _value));
      this.bindData('$gradientView');
      this.bindData('$line');
      this.bindData('$startPoint');
      this.bindData('$endPoint');
      this.bindData('$centerPoint');
      this.bindData('$fPoint');
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('changeColorStepOffset'),
    value: function value(key, _value2) {
      if (this.currentStep) {
        this.currentStep.percent = _value2.value;
        this.state.image.sortColorStep();
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["CLICK"])('$back'),
    value: function value(e) {
      var rect = this.refs.$stepList.rect();
      var minX = rect.x;
      var maxX = rect.right;
      var x = e.xy.x;
      if (x < minX) x = minX;else if (x > maxX) x = maxX;
      var percent = (x - minX) / rect.width * 100;
      this.state.image.insertColorStep(percent);
      this.state.image.sortColorStep();
      this.refresh();
      this.updateData();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$el'),
    value: function value() {
      var type = this.state.image.type;

      if (type === 'url') {
        type = 'image-resource';
      }

      this.parent.trigger('changeTabType', type);
      return {
        "data-selected-editor": type
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$stepList'),
    value: function value() {
      return {
        'data-selected-index': this.state.index.toString(),
        'style': {
          'background-image': this.getLinearGradient()
        }
      };
    }
  }, {
    key: "fillId",
    get: function get() {
      return this.id + 'fill';
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["BIND"])('$gradientView'),
    value: function value() {
      return {
        innerHTML:
        /*html*/
        "\n        <svg x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\n          <defs>\n            ".concat(this.state.image.toSVGString(this.fillId), "\n          </defs>\n          <rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" fill=\"").concat(this.state.image.toFillValue(this.fillId), "\" />\n        </svg>\n      ")
      };
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["LOAD"])('$stepList'),
    value: function value() {
      var _this4 = this;

      var colorsteps = this.state.image.colorsteps || [];
      return colorsteps.map(function (it, index) {
        var selected = _this4.$selection.isSelectedColorStep(it.id) ? 'selected' : '';
        return (
          /*html*/
          "\n      <div class='step ".concat(selected, "' data-id='").concat(it.id, "' style='left: ").concat(it.percent, "%;'>\n        <div class='color-view' style=\"background-color: ").concat(it.color, "\"></div>\n        <div class='arrow' style=\"background-color: ").concat(it.color, "\"></div>\n      </div>")
        );
      });
    }
  }, {
    key: "removeStep",
    value: function removeStep(id) {
      this.state.image.removeColorStep(id);
      this.refresh();
      this.updateData();
    }
  }, {
    key: "selectStep",
    value: function selectStep(id) {
      var _this5 = this;

      this.state.id = id;
      this.$selection.selectColorStep(id);

      if (this.state.image.colorsteps) {
        this.currentStep = this.state.image.colorsteps.find(function (it) {
          return _this5.$selection.isSelectedColorStep(it.id);
        });
        this.children.$range.setValue(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].percent(this.currentStep.percent));
        this.parent.trigger('selectColorStep', this.currentStep.color);
      }

      this.refresh();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["POINTERSTART"])('$stepList .step') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["MOVE"])(),
    value: function value(e) {
      var id = e.$dt.attr('data-id');

      if (e.altKey) {
        this.removeStep(id);
        return false;
      } else {
        this.selectStep(id);
        this.startXY = e.xy;
        this.cachedStepListRect = this.refs.$stepList.rect();
      }
    }
  }, {
    key: "getStepListRect",
    value: function getStepListRect() {
      return this.cachedStepListRect;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var rect = this.getStepListRect();
      var minX = rect.x;
      var maxX = rect.right;
      var x = this.startXY.x + dx;
      if (x < minX) x = minX;else if (x > maxX) x = maxX;
      var percent = (x - minX) / rect.width * 100;
      this.currentStep.percent = percent;
      this.children.$range.setValue(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_9__[/* Length */ "a"].percent(percent));
      this.state.image.sortColorStep();
      this.refresh();
      this.updateData();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: "getLinearGradient",
    value: function getLinearGradient() {
      var image = this.state.image;
      return "linear-gradient(to right, ".concat(el_editor_property_parser_image_resource_Gradient__WEBPACK_IMPORTED_MODULE_13__[/* Gradient */ "a"].toColorString(image.colorsteps), ")");
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('setColorStepColor'),
    value: function value(color) {
      if (this.state.image.type === 'static-gradient') {
        this.state.image.setColor(color);
        this.refresh();
        this.updateData();
      } else {
        if (this.currentStep) {
          this.currentStep.color = color;
          this.refresh();
          this.updateData();
        }
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_8__["SUBSCRIBE"])('setImageUrl'),
    value: function value(url) {
      if (this.state.image) {
        this.state.url = url;
        this.state.image.reset({
          url: url
        });
        this.refresh();
        this.updateData();
      }
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.state.image.toString());
    }
  }]);

  return FillEditor;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_20__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_19__[/* registElement */ "a"])({
  FillEditor: FillEditor
});

/***/ }),
/* 134 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ ColorMatrixEditor_ColorMatrixEditor; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/red.js
/* harmony default export */ var red = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   0   0   0\n0   0   0   1   0\n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/green.js
/* harmony default export */ var green = ("\n0   0   0   0   0\n0   1   0   0   0\n0   0   0   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/blue.js
/* harmony default export */ var blue = ("\n0   0   0   0   0\n0   0   0   0   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/yellow.js
/* harmony default export */ var yellow = ("\n1   0   0   0   0\n0   1   0   0   0\n0   0   0   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/magenta.js
/* harmony default export */ var magenta = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/cyan.js
/* harmony default export */ var cyan = ("\n0   0   0   0   0\n0   1   0   0   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/alpha.js
/* harmony default export */ var alpha = ("\n1   0   0   0   0\n0   1   0   0   0\n0   0   1   0   0\n0   0   0   .5  0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/BlueMagenta2.js
/* harmony default export */ var BlueMagenta2 = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   1  .5   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/BlueShadowMagentHightlight.js
/* harmony default export */ var BlueShadowMagentHightlight = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   1   1   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/darken.js
/* harmony default export */ var darken = ("\n.5   0   0   0   0\n0  .5   0   0   0\n0   0  .5   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/ElimBlue.js
/* harmony default export */ var ElimBlue = ("\n1   0   0   0   0\n0   1   0   0   0\n0   0   1   0   0\n0   0   -2   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/GrayOnDark.js
/* harmony default export */ var GrayOnDark = ("\n0   0   1   0   0\n0   0   1   0   0\n0   0   1   0   0\n0   0   0   1   0  \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/GrayOnLight.js
/* harmony default export */ var GrayOnLight = ("\n1   0   0   0   0\n1   0   0   0   0\n1   0   0   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/GrayOnMid.js
/* harmony default export */ var GrayOnMid = ("\n0   1   0   0   0\n0   1   0   0   0\n0   1   0   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/HardGreen.js
/* harmony default export */ var HardGreen = ("\n1   0   0   0   0\n0   1   0   1   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/HardYellow.js
/* harmony default export */ var HardYellow = ("\n1   0   0   1   0\n0   1   0   1   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/IdenticalRedOverlay.js
/* harmony default export */ var IdenticalRedOverlay = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   0   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/lighten.js
/* harmony default export */ var lighten = ("\n1.5   0   0   0   0\n0   1.5   0   0   0\n0   0   1.5   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/lime.js
/* harmony default export */ var lime = ("\n1   0   0   0   0\n0   2   0   0   0\n0   0   0  .5   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/NoGreenMagenta.js
/* harmony default export */ var NoGreenMagenta = ("\n1   1   0   0   0\n0   0   0   0   0\n0   1   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/NoGreenRed.js
/* harmony default export */ var NoGreenRed = ("\n1   1   0   0   0\n0   0   0   0   0\n0   0   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/peachy.js
/* harmony default export */ var peachy = ("\n1   0   0   0   0\n0  .5   0   0   0\n0   0   0  .5   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/RedOverlay.js
/* harmony default export */ var RedOverlay = ("\n1   0   0   0   0\n0   0   0   0   0\n0   0   1  -1   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/YesGreenColorizedMagenta.js
/* harmony default export */ var YesGreenColorizedMagenta = ("\n1   1   0   0   0\n0   1   0   0   0\n0   1   1   0   0\n0   0   0   1   0 \n");
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colormatrix/index.js
























/* harmony default export */ var colormatrix = ({
  red: red,
  green: green,
  blue: blue,
  yellow: yellow,
  magenta: magenta,
  cyan: cyan,
  alpha: alpha,
  BlueMagenta2: BlueMagenta2,
  BlueShadowMagentHightlight: BlueShadowMagentHightlight,
  darken: darken,
  ElimBlue: ElimBlue,
  GrayOnDark: GrayOnDark,
  GrayOnLight: GrayOnLight,
  GrayOnMid: GrayOnMid,
  HardGreen: HardGreen,
  HardYellow: HardYellow,
  IdenticalRedOverlay: IdenticalRedOverlay,
  lighten: lighten,
  lime: lime,
  NoGreenMagenta: NoGreenMagenta,
  NoGreenRed: NoGreenRed,
  peachy: peachy,
  RedOverlay: RedOverlay,
  YesGreenColorizedMagenta: YesGreenColorizedMagenta
});
// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/ColorMatrixEditor.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var COLUMN = 6;
var sampleList = Object.keys(colormatrix).map(function (it) {
  return {
    title: it,
    values: colormatrix[it]
  };
});

var ColorMatrixEditor_ColorMatrixEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorMatrixEditor, _EditorElement);

  var _super = _createSuper(ColorMatrixEditor);

  function ColorMatrixEditor() {
    classCallCheck_default()(this, ColorMatrixEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorMatrixEditor, [{
    key: "initState",
    value: function initState() {
      return {
        values: Object(math["normalize"])(this.props.values)
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='small-editor color-matrix-editor' >\n                <div ref='$body'></div>\n                <div class='title'> Mix Color Template </div>\n                <div class='color-matrix-template' ref='$sample'></div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["BIND"])('$body'),
    value: function value() {
      return {
        cssText: "\n                display: grid;\n                grid-template-columns: repeat(".concat(COLUMN, ", 1fr);\n                grid-column-gap: 2px;\n                grid-row-gap: 2px;\n                text-align: left; \n            ")
      };
    }
  }, {
    key: Object(Event["LOAD"])('$sample'),
    value: function value() {
      return sampleList.map(function (it, index) {
        return (
          /*html*/
          "<div class='sample-item' title='".concat(it.title, "' data-index=\"").concat(index, "\">").concat(it.title, "</div>")
        );
      });
    }
  }, {
    key: Object(Event["CLICK"])('$sample .sample-item'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      var sample = sampleList[index];
      this.updateData({
        values: Object(math["normalize"])(sample.values)
      });
      this.load('$body');
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var values = this.state.values;
      var text = ['R', 'G', 'B', 'A'];
      var a = values.map(function (value, index) {
        var h = '';

        if (index % (COLUMN - 1) === 0) {
          h = "<div>".concat(text[Math.floor(index / (COLUMN - 1))], "</div>");
        }

        var result =
        /*html*/
        "\n                ".concat(h, "\n                <div class='number-editor'>\n                    <input type=\"number\" value=\"").concat(value, "\" step=\"0.01\" data-index=\"").concat(index, "\" />\n                </div>\n            ");
        return result;
      });
      var header =
      /*html*/
      "\n            <div></div>\n            <div>R</div>\n            <div>G</div>\n            <div>B</div>\n            <div>A</div>\n            <div>M</div>\n        ";
      return header + a;
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.state.values, this.props.params);
    }
  }, {
    key: Object(Event["INPUT"])('$body input'),
    value: function value(e) {
      var $el = e.$dt;
      var index = +$el.attr('data-index');
      var value = +$el.value;
      this.state.values[index] = value;
      this.updateData();
    }
  }]);

  return ColorMatrixEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ColorMatrixEditor: ColorMatrixEditor_ColorMatrixEditor
});

/***/ }),
/* 135 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ SVGFilterEditor_SVGFilterEditor; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/RangeEditor.js
var RangeEditor = __webpack_require__(37);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorViewEditor.js
var ColorViewEditor = __webpack_require__(79);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SelectEditor.js
var SelectEditor = __webpack_require__(39);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/TextEditor.js
var TextEditor = __webpack_require__(96);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/NumberRangeEditor.js
var NumberRangeEditor = __webpack_require__(68);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/InputArrayEditor.js
var InputArrayEditor = __webpack_require__(128);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFilter.js + 32 modules
var SVGFilter = __webpack_require__(56);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FuncFilterEditor.js
var FuncFilterEditor = __webpack_require__(129);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/editor/parser/PathStringManager.js
var PathStringManager = __webpack_require__(45);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ColorMatrixEditor.js + 25 modules
var ColorMatrixEditor = __webpack_require__(134);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/grayscale.js
/* harmony default export */ var grayscale = ([{
  type: 'Saturate',
  values: '0'
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/shadow.js
/* harmony default export */ var shadow = ([{
  type: 'SourceAlpha',
  id: 'shadowSource',
  bound: {
    x: 100,
    y: 100
  },
  connected: [{
    id: 'offset'
  }]
}, {
  type: 'Offset',
  id: 'offset',
  bound: {
    x: 200,
    y: 100
  },
  dx: 10,
  dy: 10,
  "in": [{
    id: 'shadowSource'
  }],
  connected: [{
    id: 'blur'
  }]
}, {
  type: 'GaussianBlur',
  id: 'blur',
  bound: {
    x: 300,
    y: 100
  },
  stdDeviationX: 5,
  stdDeviationY: 5,
  "in": [{
    id: 'offset'
  }],
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Flood',
  id: 'flood',
  bound: {
    x: 100,
    y: 200
  },
  color: 'black',
  opacity: 0.7,
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Composite',
  id: 'composite',
  bound: {
    x: 400,
    y: 150
  },
  "in": [{
    id: 'flood'
  }, {
    id: 'blur'
  }],
  operator: 'in',
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'SourceAlpha',
  id: 'shadowSource2',
  bound: {
    x: 400,
    y: 200
  },
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'Merge',
  id: 'merge',
  bound: {
    x: 500,
    y: 150
  },
  "in": [{
    id: 'composite'
  }, {
    id: 'shadowSource2'
  }]
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/inner-shadow.js
/* harmony default export */ var inner_shadow = ([{
  type: 'Flood',
  id: 'flood',
  bound: {
    x: 100,
    y: 200
  },
  color: 'black',
  opacity: 1,
  connected: [{
    id: 'composite1'
  }]
}, {
  type: 'SourceAlpha',
  id: 'shadowSource',
  bound: {
    x: 100,
    y: 100
  },
  connected: [{
    id: 'composite1'
  }]
}, {
  type: 'Composite',
  id: 'composite1',
  bound: {
    x: 200,
    y: 150
  },
  "in": [{
    id: 'flood'
  }, {
    id: 'shadowSource'
  }],
  operator: 'out',
  connected: [{
    id: 'offset'
  }]
}, {
  type: 'Offset',
  id: 'offset',
  bound: {
    x: 300,
    y: 150
  },
  dx: 4,
  dy: 4,
  "in": [{
    id: 'composite1'
  }],
  connected: [{
    id: 'blur'
  }]
}, {
  type: 'GaussianBlur',
  id: 'blur',
  bound: {
    x: 400,
    y: 150
  },
  stdDeviationX: 4,
  stdDeviationY: 4,
  edge: 'none',
  "in": [{
    id: 'offset'
  }],
  connected: [{
    id: 'composite2'
  }]
}, {
  type: 'SourceAlpha',
  id: 'shadowSource2',
  bound: {
    x: 400,
    y: 250
  },
  connected: [{
    id: 'composite2'
  }]
}, {
  type: 'Composite',
  id: 'composite2',
  bound: {
    x: 500,
    y: 150
  },
  "in": [{
    id: 'blur'
  }, {
    id: 'shadowSource2'
  }],
  operator: 'out',
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'SourceGraphic',
  id: 'shadowSource3',
  bound: {
    x: 500,
    y: 250
  },
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'Merge',
  id: 'merge',
  bound: {
    x: 600,
    y: 150
  },
  "in": [{
    id: 'composite2'
  }, {
    id: 'shadowSource3'
  }]
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/stroke.js
/* harmony default export */ var stroke = ([{
  type: 'SourceAlpha',
  id: 'strokeSource',
  bound: {
    x: 100,
    y: 100
  },
  connected: [{
    id: 'morphology'
  }]
}, {
  type: 'Morphology',
  id: 'morphology',
  operator: 'dilate',
  radius: '3 3',
  bound: {
    x: 100,
    y: 200
  },
  "in": [{
    id: 'strokeSource'
  }],
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Flood',
  id: 'flood',
  bound: {
    x: 100,
    y: 200
  },
  color: '#30597E',
  opacity: 1,
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Composite',
  id: 'composite',
  bound: {
    x: 400,
    y: 150
  },
  "in": [{
    id: 'flood'
  }, {
    id: 'morphology'
  }],
  operator: 'in',
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'SourceGraphic',
  id: 'strokeSourceGraphic',
  bound: {
    x: 400,
    y: 200
  },
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'Merge',
  id: 'merge',
  bound: {
    x: 500,
    y: 150
  },
  "in": [{
    id: 'composite'
  }, {
    id: 'strokeSourceGraphic'
  }]
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/dancing-stroke.js
/* harmony default export */ var dancing_stroke = ([{
  type: 'SourceAlpha',
  id: 'strokeSource',
  bound: {
    x: 100,
    y: 100
  },
  connected: [{
    id: 'morphology'
  }]
}, {
  type: 'Morphology',
  id: 'morphology',
  operator: 'dilate',
  radius: '3 3',
  bound: {
    x: 100,
    y: 200
  },
  "in": [{
    id: 'strokeSource'
  }],
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Flood',
  id: 'flood',
  bound: {
    x: 100,
    y: 200
  },
  color: '#30597E',
  opacity: 1,
  connected: [{
    id: 'composite'
  }]
}, {
  type: 'Composite',
  id: 'composite',
  bound: {
    x: 400,
    y: 150
  },
  "in": [{
    id: 'flood'
  }, {
    id: 'morphology'
  }],
  operator: 'in',
  connected: [{
    id: 'composite2'
  }]
}, {
  type: 'SourceAlpha',
  id: 'strokeSourceAlpha2',
  bound: {
    x: 400,
    y: 200
  },
  connected: [{
    id: 'composite2'
  }]
}, {
  type: 'Composite',
  id: 'composite2',
  bound: {
    x: 400,
    y: 150
  },
  "in": [{
    id: 'composite'
  }, {
    id: 'strokeSourceAlpha2'
  }],
  operator: 'out',
  connected: [{
    id: 'displacementMap'
  }]
}, {
  type: 'Turbulence',
  id: 'turbulence',
  filterType: 'fractalNoise',
  baseFrequency: '0.01 0.02',
  numOctaves: 1,
  seed: 0,
  stitchTiles: 'stitch',
  bound: {
    x: 400,
    y: 200
  },
  connected: [{
    id: 'displacementMap'
  }]
}, {
  type: 'DisplacementMap',
  id: 'displacementMap',
  scale: 17,
  xChannelSelector: 'A',
  yChannelSelector: 'A',
  bound: {
    x: 400,
    y: 200
  },
  "in": [{
    id: 'composite2'
  }, {
    id: 'turbulence'
  }],
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'SourceGraphic',
  id: 'strokeSourceGraphic',
  bound: {
    x: 400,
    y: 200
  },
  connected: [{
    id: 'merge'
  }]
}, {
  type: 'Merge',
  id: 'merge',
  bound: {
    x: 500,
    y: 150
  },
  "in": [{
    id: 'strokeSourceGraphic'
  }, {
    id: 'displacementMap'
  }]
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/svg-filter-preset/index.js





/* harmony default export */ var svg_filter_preset = ({
  dancingStroke: dancing_stroke,
  stroke: stroke,
  grayscale: grayscale,
  shadow: shadow,
  innerShadow: inner_shadow
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/ImageSelectEditor.js
var ImageSelectEditor = __webpack_require__(130);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BlendSelectEditor.js
var BlendSelectEditor = __webpack_require__(131);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/SVGFilterEditor.js








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





















var filterTypes = [{
  label: 'GRAPHIC REFERENCES',
  items: [{
    label: 'Source Graphic',
    value: "SourceGraphic"
  }, {
    label: 'Source Alpha',
    value: "SourceAlpha"
  }, {
    label: 'Background Image',
    value: "BackgroundImage"
  }, {
    label: 'Background Alpha',
    value: "BackgroundAlpha"
  }, {
    label: 'Fill Paint',
    value: "FillPaint"
  }, {
    label: 'Stroke Paint',
    value: "StrokePaint"
  }]
}, {
  label: 'SOURCES',
  items: [{
    label: 'Flood',
    value: "Flood"
  }, {
    label: 'Turbulence',
    value: "Turbulence"
  }, {
    label: 'Image',
    value: "Image"
  }]
}, {
  label: 'MODIFIER',
  items: [{
    label: 'Color Matrix',
    value: "ColorMatrix"
  }, {
    label: 'Saturate',
    value: "Saturate"
  }, {
    label: 'HueRotate',
    value: "HueRotate"
  }, {
    label: 'LuminanceToAlpha',
    value: "LuminanceAlpha"
  }, {
    label: 'Drop Shadow',
    value: "DropShadow"
  }, {
    label: 'Morphology',
    value: "Morphology"
  }, {
    label: 'Convolve Matrix',
    value: "ConvolveMatrix"
  }, {
    label: 'Offset',
    value: "Offset"
  }, {
    label: 'Gaussian Blur',
    value: "GaussianBlur"
  }, {
    label: 'Tile',
    value: "Tile"
  }]
}, {
  label: 'LIGHTING',
  items: [{
    label: 'Specular Lighting',
    value: "SpecularLighting"
  }, {
    label: 'Diffuse Lighting',
    value: "DiffuseLighting"
  }, {
    label: 'Point Light',
    value: "PointLight"
  }, {
    label: 'Spot Light',
    value: "SpotLight"
  }, {
    label: 'Distant Light',
    value: "DistantLight"
  }]
}, {
  label: 'COMBINERS',
  items: [{
    label: 'Blend',
    value: "Blend"
  }, {
    label: 'Composite',
    value: "Composite"
  }, {
    label: 'Merge',
    value: "Merge"
  }, {
    label: 'DisplacementMap',
    value: "DisplacementMap"
  }]
}];
var SVGFilterTemplateList = [{
  label: 'Template',
  items: [{
    label: 'Grayscale',
    value: 'grayscale'
  }, {
    label: 'Shadow',
    value: 'shadow'
  }, {
    label: 'Inner Shadow',
    value: 'innerShadow'
  }, {
    label: 'Stroke',
    value: 'stroke'
  }, {
    label: 'Dancing Stroke',
    value: 'dancingStroke'
  }]
}];

function getIcon(type) {
  switch (type) {
    case 'SpecularLighting':
      return icon["a" /* default */].specular;

    case 'DiffuseLighting':
      return icon["a" /* default */].diffuse;

    case 'SourceGraphic':
    case 'SourceAlpha':
      return icon["a" /* default */].image;

    case 'BackgroundImage':
    case 'BackgroundAlpha':
      return icon["a" /* default */].outline_image;

    case 'Flood':
      return icon["a" /* default */].palette;

    case 'Image':
      return icon["a" /* default */].landscape;

    case 'GaussianBlur':
      return icon["a" /* default */].blur;

    case 'ColorMatrix':
      return icon["a" /* default */].blur_linear;

    case 'Turbulence':
      return icon["a" /* default */].waves;

    case 'Saturate':
      return icon["a" /* default */].vintage;

    case 'HueRotate':
      return icon["a" /* default */].looks;

    case 'LuminanceAlpha':
      return icon["a" /* default */].opacity;

    case 'DropShadow':
      return icon["a" /* default */].shadow;

    case 'Morphology':
      return icon["a" /* default */].broken_image;

    case 'ConvolveMatrix':
      return icon["a" /* default */].camera_roll;

    case 'Offset':
      return icon["a" /* default */].transform;

    case 'Tile':
      return icon["a" /* default */].view_comfy;

    case 'Blend':
      return icon["a" /* default */].gradient;

    case 'Composite':
      return icon["a" /* default */].merge;

    case 'Merge':
      return icon["a" /* default */].settings_input_component;

    case 'DisplacementMap':
      return icon["a" /* default */].texture;
  }

  return '';
}

function getSourceTypeString(type) {
  switch (type) {
    case 'SourceGraphic':
    case 'SourceAlpha':
    case 'BackgroundImage':
    case 'BackgroundAlpha':
    case 'FillPaint':
    case 'StrokePaint':
      return 'graphic';

    case 'Flood':
    case 'Turbulence':
    case 'Image':
      return 'source';

    case 'GaussianBlur':
    case 'ColorMatrix':
    case 'Saturate':
    case 'HueRotate':
    case 'LuminanceAlpha':
    case 'DropShadow':
    case 'Morphology':
    case 'ConvolveMatrix':
    case 'Offset':
    case 'Tile':
      return 'modifier';

    case 'SpecularLighting':
    case 'DiffuseLighting':
    case 'SpotLight':
    case 'PointLight':
    case 'DistantLight':
      return 'lighting';

    case 'Blend':
    case 'Composite':
    case 'Merge':
    case 'DisplacementMap':
      return 'combiner';
  }

  return '';
}

var width = 40;
var half_height = 20;
var connectedXAxis = {
  "1": [width + 5]
};
var connectedYAxis = {
  "1": [half_height]
};
var inXAxis = {
  "1": [-7],
  "2": [-7],
  "3": [-7],
  "4": [-7],
  "5": [-7]
};
var inYAxis = {
  "1": [0],
  "2": [-7, 7],
  "3": [-14, 0, 14],
  "4": [-21, -7, 7, 21],
  "5": [-28, -14, 0, 14, 28]
};
Object.keys(inYAxis).forEach(function (len) {
  inYAxis[len] = inYAxis[len].map(function (it) {
    return it + half_height;
  });
});

var SVGFilterEditor_SVGFilterEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SVGFilterEditor, _EditorElement);

  var _super = _createSuper(SVGFilterEditor);

  function SVGFilterEditor() {
    classCallCheck_default()(this, SVGFilterEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFilterEditor, [{
    key: "makeFilterSelect",
    value: function makeFilterSelect() {
      var _this = this;

      return (
        /*html*/
        "\n  \n    <div class='filter-item-list' ref=\"$filterSelect\">\n  \n      ".concat(Object(func["mapjoin"])(filterTypes, function (f) {
          return (
            /*html*/
            "\n          <div class='group' label=\"".concat(_this.$i18n(f.label), "\">\n            ").concat(Object(func["mapjoin"])(f.items, function (i) {
              return (
                /*html*/
                "\n                <div class='item' draggable=\"true\" value=\"".concat(i.value, "\">\n                  <span class='icon'>").concat(getIcon(i.value), "</span>\n                  ").concat(_this.$i18n(i.label), "\n                </div>\n                ")
              );
            }), "\n          </div>\n        ")
          );
        }), "\n    </div>\n    ")
      );
    }
  }, {
    key: "makeFilterTemplateSelect",
    value: function makeFilterTemplateSelect() {
      var _this2 = this;

      return (
        /*html*/
        "\n  \n    <div class='filter-item-list' ref=\"$filterTemplateSelect\">\n  \n      ".concat(Object(func["mapjoin"])(SVGFilterTemplateList, function (f) {
          return (
            /*html*/
            "\n          <div class='group' label=\"".concat(_this2.$i18n(f.label), "\">\n            ").concat(Object(func["mapjoin"])(f.items, function (i) {
              return (
                /*html*/
                " <div class='item' draggable=\"true\" value=\"".concat(i.value, "\">").concat(_this2.$i18n(i.label), "</div>")
              );
            }), "\n          </div>\n        ")
          );
        }), "\n    </div>\n    ")
      );
    }
  }, {
    key: "initState",
    value: function initState() {
      var filters = this.parseFilter(this.props.value || []);
      return {
        filters: filters,
        selectedTabIndex: 1,
        selectedIndex: -1,
        selectedFilter: null
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='svg-filter-editor filter-list'>\n        <div class='left'>\n          <div class=\"tab number-tab\" ref=\"$tab\">\n            <div class=\"tab-header full\" ref=\"$header\">\n              <div class=\"tab-item selected\" data-value=\"1\" title='Item'>\n                <label class='icon'>".concat(this.$i18n('svg.filter.editor.tab.filter'), "</label>\n              </div>\n              <div class=\"tab-item\" data-value=\"2\" title=\"Preset\">\n                <label class='icon'>").concat(this.$i18n('svg.filter.editor.tab.preset'), "</label>\n              </div>\n              <div class=\"tab-item\" data-value=\"3\" title=\"Asset\">\n                <label class='icon'>").concat(this.$i18n('svg.filter.editor.tab.asset'), "</label>\n              </div>\n            </div>\n            <div class=\"tab-body\">\n              <div class=\"tab-content selected\" data-value=\"1\">\n                ").concat(this.makeFilterSelect(), "\n              </div>\n              <div class=\"tab-content\" data-value=\"2\">\n                ").concat(this.makeFilterTemplateSelect(), "\n              </div>\n                     \n            </div>\n          </div>\n        </div>\n        <div  class='center'>\n          <div class='graph'>\n            <div class='drag-line-panel' ref='$dragLinePanel'></div>          \n            <div class='connected-line-panel' ref='$connectedLinePanel'></div>\n            <div class='graph-panel' ref='$graphPanel' droppable=\"true\"></div>\n          </div>\n        </div>\n        <div class='right'>\n          <div class='filter-list' ref='$filterList'></div>\n        </div>\n      </div>")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$header .tab-item:not(.empty-item)"),
    value: function value(e) {
      var selectedTabIndex = +e.$dt.attr('data-value');

      if (this.state.selectedTabIndex === selectedTabIndex) {
        return;
      }

      this.$el.$$("[data-value=\"".concat(this.state.selectedTabIndex, "\"]")).forEach(function (it) {
        return it.removeClass('selected');
      });
      this.$el.$$("[data-value=\"".concat(selectedTabIndex, "\"]")).forEach(function (it) {
        return it.addClass('selected');
      });
      this.setState({
        selectedTabIndex: selectedTabIndex
      }, false);
    }
  }, {
    key: Object(Event["DRAGSTART"])('$filterSelect .item'),
    value: function value(e) {
      var filter = e.$dt.attr('value');
      e.dataTransfer.setData('filter/type', filter);
    }
  }, {
    key: Object(Event["DRAGOVER"])('$connectedLinePanel') + Event["PREVENT"],
    value: function value() {}
  }, {
    key: Object(Event["DROP"])('$connectedLinePanel') + Event["PREVENT"],
    value: function value(e) {
      var offset = {
        x: e.offsetX,
        y: e.offsetY
      };
      var filterType = e.dataTransfer.getData('filter/type');
      this.makeFilterNode(filterType, {
        bound: offset
      });
    }
  }, {
    key: "makeFilterNode",
    value: function makeFilterNode(filterType) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.state.filters.push(this.makeFilter(filterType, opt));
      this.state.selectedIndex = this.state.filters.length - 1;
      this.state.selectedFilter = this.state.filters[this.state.selectedIndex];
      this.refresh();
      this.modifyFilter();
    }
  }, {
    key: "applyTemplate",
    value: function applyTemplate(templateType) {
      var template = svg_filter_preset[templateType];

      if (template) {
        this.setState({
          selectedIndex: -1,
          selectedFilter: null,
          filters: this.parseFilter(template)
        }, false);
        this.refresh();
        this.modifyFilter();
      }
    }
  }, {
    key: "getSpec",
    value: function getSpec(filterType) {
      return SVGFilter["c" /* SVGFilterSpecList */][filterType];
    }
  }, {
    key: "makeFilterEditorTemplate",
    value: function makeFilterEditorTemplate(s, filter, key) {
      var objectId = "".concat(filter.type).concat(key).concat(this.state.selectedIndex).concat(Date.now());

      if (s.inputType === 'color-matrix') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"ColorMatrixEditor\" \n            ref='$colorMatrix".concat(objectId, "' \n            label=\"").concat(s.title, "\"\n            key=\"").concat(key, "\"       \n            column='").concat(s.column, "' \n            values='").concat(filter[key].join(' '), "' \n            onchange=\"changeRangeEditor\"\n          />\n        </div>\n        ")
        );
      } else if (s.inputType === 'input-array') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"InputArrayEditor\" \n            ref='$inputArray".concat(objectId, "' \n            label=\"").concat(s.title, "\"\n            key=\"").concat(key, "\"       \n            column-label=\"R,G,B,A,M\",\n            row-label=\"R,G,B,A\",\n            column='").concat(s.column, "' \n            values='").concat(filter[key].join(' '), "' \n            onchange=\"changeRangeEditor\"\n          />\n        </div>\n        ")
        );
      } else if (s.inputType === 'blend') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"BlendSelectEditor\" \n            ref='$blend".concat(objectId, "' \n            label=\"").concat(s.title, "\"\n            key=\"").concat(key, "\"\n            value='").concat(filter[key].toString(), "' \n            onchange=\"changeRangeEditor\"             \n          />\n        </div>\n        ")
        );
      } else if (s.inputType === 'select') {
        var options = s.options;

        if (Object(func["isFunction"])(s.options)) {
          options = s.options(this.state.filters);
        }

        return (
          /*html*/
          "\n          <div>\n            <object refClass=\"SelectEditor\"  \n              ref='$select".concat(objectId, "' \n              label=\"").concat(s.title, "\"\n              options='").concat(options, "' \n              key=\"").concat(key, "\"\n              value='").concat(filter[key].toString(), "' \n              onchange=\"changeRangeEditor\"             \n            />\n          </div>\n          ")
        );
      } else if (s.inputType === 'text') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"TextEditor\" \n            ref='$text".concat(objectId, "' \n            label=\"").concat(s.title, "\"\n            key=\"").concat(key, "\"\n            value='").concat(filter[key].toString(), "' \n            onchange=\"changeTextEditor\"\n          />\n        </div>\n        ")
        );
      } else if (s.inputType === 'number-range') {
        return (
          /*html*/
          " \n        <div>\n          <object refClass=\"NumberRangeEditor\"  \n            ref='$numberrange".concat(objectId, "' \n            label=\"").concat(s.title, "\" \n            layout='block'             \n            min=\"").concat(s.min, "\"\n            max=\"").concat(s.max, "\"\n            step=\"").concat(s.step, "\"\n            key=\"").concat(key, "\" \n            value=\"").concat(filter[key].toString(), "\" \n            onchange=\"changeRangeEditor\" \n          />\n        </div>\n      ")
        );
      } else if (s.inputType === 'color') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"ColorViewEditor\" \n            ref='$colorview".concat(objectId, "' \n            label=\"").concat(s.title, "\" \n            key=\"").concat(key, "\"\n            value=\"").concat(filter[key].toString(), "\" \n            onchange=\"changeSVGFilterColorViewEditor\" \n          />\n        </div>\n      ")
        );
      } else if (s.inputType === 'FuncFilter') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"FuncFilterEditor\" \n            ref='$funcFilter".concat(objectId, "' \n            label=\"").concat(s.title, "\" \n            key=\"").concat(key, "\"\n            value=\"").concat(filter[key].toString(), "\" \n            onchange=\"changeFuncFilterEditor\" \n          />\n        </div>\n      ")
        );
      } else if (s.inputType === 'ImageSelectEditor') {
        return (
          /*html*/
          "\n        <div>\n          <object refClass=\"ImageSelectEditor\" \n            ref='$imageSelect".concat(objectId, "' \n            label=\"").concat(s.title, "\" \n            key=\"").concat(key, "\"\n            value=\"").concat(filter[key].toString(), "\" \n            onchange=\"changeRangeEditor\" \n          />\n        </div>\n      ")
        );
      }

      return (
        /*html*/
        "\n      <div>\n        <object refClass=\"RangeEditor\"  \n          ref='$range".concat(objectId, "' \n          layout='block' \n          calc='false' \n          label=\"").concat(s.title, "\" \n          min=\"").concat(s.min, "\"\n          max=\"").concat(s.max, "\"\n          step=\"").concat(s.step, "\"\n          key=\"").concat(key, "\" \n          value=\"").concat(filter[key].toString(), "\" \n          units=\"").concat(s.units.join(','), "\" \n          onchange=\"changeRangeEditor\" \n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "makeOneFilterTemplate",
    value: function makeOneFilterTemplate(spec, filter) {
      var _this3 = this;

      return (
        /*html*/
        "\n    <div class=\"filter-item\">\n      <div class=\"title\">\n        <label>".concat(filter.type, "</label>\n        <div class=\"filter-menu\">\n          <button type=\"button\" class=\"del\">").concat(icon["a" /* default */].remove, "</button>\n        </div>\n      </div>\n      <div class=\"filter-ui\">\n        ").concat(Object(func["keyMapJoin"])(spec, function (key, value) {
          return _this3.makeFilterEditorTemplate(value, filter, key);
        }), "\n\n      </div>\n    </div>\n  ")
      );
    }
  }, {
    key: "makeFilterTemplate",
    value: function makeFilterTemplate(filter) {
      return this.makeOneFilterTemplate(this.getSpec(filter.type), filter);
    }
  }, {
    key: Object(Event["LOAD"])("$filterList"),
    value: function value() {
      if (this.state.selectedFilter && this.state.selectedFilter.isSource() === false) {
        return this.makeFilterTemplate(this.state.selectedFilter);
      }

      return '';
    }
  }, {
    key: "modifyFilter",
    value: function modifyFilter() {
      var _this4 = this;

      this.state.filters.forEach(function (f) {
        if (f.isLight() && f.connected.length) {
          f.connected.forEach(function (c) {
            _this4.state.filters.filter(function (s) {
              return s.id === c.id;
            }).forEach(function (lightManager) {
              lightManager.reset({
                lightInfo: f.toLightString()
              });
            });
          });
        }
      });
      this.parent.trigger(this.props.onchange, this.props.key, this.state.filters);
    }
  }, {
    key: "parseFilter",
    value: function parseFilter() {
      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return list.map(function (it) {
        return SVGFilter["a" /* SVGFilter */].parse(it);
      });
    }
  }, {
    key: "makeFilter",
    value: function makeFilter(type) {
      var opt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      return SVGFilter["a" /* SVGFilter */].parse(_objectSpread(_objectSpread({}, opt), {}, {
        type: type
      }));
    }
  }, {
    key: Object(Event["CLICK"])("$filterSelect .item[value]"),
    value: function value(e) {
      var filterType = e.$dt.attr('value');
      this.makeFilterNode(filterType);
    }
  }, {
    key: Object(Event["CLICK"])("$filterTemplateSelect .item[value]"),
    value: function value(e) {
      var templateType = e.$dt.attr('value');
      this.applyTemplate(templateType);
    }
  }, {
    key: Object(Event["CLICK"])("$filterList .filter-menu .del"),
    value: function value(e) {
      this.removeFilter(this.state.selectedFilter.id);
    }
  }, {
    key: Object(Event["LOAD"])('$graphPanel'),
    value: function value() {
      return this.makeGraphPanel();
    }
  }, {
    key: "selectFilter",
    value: function selectFilter(index) {
      this.setState({
        selectedIndex: index,
        selectedFilter: this.state.filters[index]
      }, false);
      this.load('$filterList');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$graphPanel .filter-node') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.$target = e.$dt;
      this.$point = null;
      this.pointType = 'object';
      this.pointIndex = 0;
      var rect = this.refs.$graphPanel.rect();
      this.rect = rect;
      var index = +this.$target.attr('data-index');
      this.selectFilter(index);
      this.$target.onlyOneClass('selected');
      var pointer = Dom["a" /* default */].create(e.target);

      if (pointer.hasClass('out')) {
        this.$point = pointer;
        this.pointType = 'out';
        this.pointIndex = 0;
      } else if (pointer.hasClass('in')) {
        this.$point = pointer;
        this.pointType = 'in';
        this.pointIndex = +pointer.attr('data-index');
      } else {
        var filter = this.state.selectedFilter;
        this.startXY = Object(func["clone"])(filter.bound);
      }

      if (this.pointType === 'in' || this.pointType === 'out') {
        var inRect = pointer.rect();
        var x = inRect.x - rect.x;
        var y = inRect.y - rect.y;
        var centerX = x + inRect.width / 2;
        var centerY = y + inRect.height / 2;
        this.startXY = {
          x: centerX,
          y: centerY
        };
      }

      this.startXY.dx = 0;
      this.startXY.dy = 0;
      this.load('$dragLinePanel');
    }
  }, {
    key: Object(Event["LOAD"])('$dragLinePanel'),
    value: function value() {
      if (this.pointType === 'in' || this.pointType === 'out') {
        var _this$startXY = this.startXY,
            x = _this$startXY.x,
            y = _this$startXY.y,
            dx = _this$startXY.dx,
            dy = _this$startXY.dy;
        return (
          /*html*/
          "\n      <svg>\n        <path \n          class=\"drag-line\"\n          fill=\"transparent\"\n          stroke-width=\"1\"\n          d=\"\n            M".concat(x, ",").concat(y, "\n            L").concat(x + dx, ",").concat(y + dy, " \n            Z\n          \"\n        />\n      </svg>\n      ")
        );
      } else {
        return '';
      }
    }
  }, {
    key: "makeConnectedPath",
    value: function makeConnectedPath(points) {
      var manager = new PathStringManager["a" /* default */]();
      var first = points[0];
      var last = points[points.length - 1];
      if (!first) return '';
      if (!last) return '';
      var dist = Math.abs(first.x - last.x) / 2;
      manager.M(first).C({
        x: first.x + dist,
        y: first.y
      }, {
        x: last.x - dist,
        y: last.y
      }, last);
      return manager.d;
    }
  }, {
    key: "createPath",
    value: function createPath(sourceItem, connectedInfo) {
      if (connectedInfo.path) {
        return connectedInfo.path;
      }

      var sourceX = sourceItem.bound.x + connectedXAxis['1'][0];
      var sourceY = sourceItem.bound.y + connectedYAxis['1'][0];
      var target = this.state.filters.map(function (it, index) {
        return {
          it: it,
          index: index
        };
      }).find(function (it) {
        if (!it) return false;
        if (!it.it) return false;
        return it && it.it.id === connectedInfo.id;
      });
      var len = "".concat(target.it.getInCount());
      var source = target.it["in"].map(function (it, index) {
        return {
          it: it,
          index: index
        };
      }).find(function (it) {
        if (!it) return false;
        if (!it.it) return false;
        return it.it.id === sourceItem.id;
      });

      if (!source) {
        return [];
      }

      var index = source.index;
      var targetX = target.it.bound.x + inXAxis[len][0];
      var targetY = target.it.bound.y + inYAxis[len][index];
      return [{
        x: sourceX,
        y: sourceY
      }, {
        x: targetX,
        y: targetY
      }];
    }
  }, {
    key: Object(Event["LOAD"])('$connectedLinePanel'),
    value: function value() {
      var _this5 = this;

      return (
        /*html*/
        "\n      <svg>\n        ".concat(this.state.filters.map(function (it) {
          return it.connected.map(function (connectedItem) {
            var path = _this5.createPath(it, connectedItem);

            var sourceType = getSourceTypeString(it.type);
            return (
              /*html*/
              "\n              <path \n                class=\"connected-line\"\n                data-source-type=\"".concat(sourceType, "\"\n                d=\"").concat(_this5.makeConnectedPath(path), "\"\n              />\n\n              ").concat(path.length &&
              /*html*/
              "\n                <circle \n                  data-source-type=\"".concat(sourceType, "\"\n                  data-target-id=\"").concat(connectedItem.id, "\"\n                  data-source-id=\"").concat(it.id, "\"\n                  class=\"connected-remove-circle\"\n                  cx=\"").concat((path[0].x + path[1].x) / 2, "\"\n                  cy=\"").concat((path[0].y + path[1].y) / 2, "\"\n                />\n              "), "\n              \n            ")
            );
          }).join('');
        }).join(''), "\n      </svg>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$connectedLinePanel .connected-remove-circle'),
    value: function value(e) {
      var _e$$dt$attrs = e.$dt.attrs('data-target-id', 'data-source-id'),
          _e$$dt$attrs2 = slicedToArray_default()(_e$$dt$attrs, 2),
          tid = _e$$dt$attrs2[0],
          sid = _e$$dt$attrs2[1];

      var filters = this.state.filters;
      filters.filter(function (it) {
        return it.id === sid;
      }).forEach(function (it) {
        it.connected = it.connected.filter(function (c) {
          return c.id != tid;
        });
      });
      filters.filter(function (it) {
        return it.id === tid;
      }).forEach(function (it) {
        it["in"] = it["in"].map(function (inObject) {
          if (inObject && inObject.id == sid) {
            return null;
          }

          return inObject;
        });
      });
      this.refresh();
      this.modifyFilter();
    }
  }, {
    key: "getCenterXY",
    value: function getCenterXY($target) {
      var inRect = $target.rect();
      var x = inRect.x - this.rect.x;
      var y = inRect.y - this.rect.y;
      var centerX = x + inRect.width / 2;
      var centerY = y + inRect.height / 2;
      return {
        x: centerX,
        y: centerY
      };
    }
  }, {
    key: "end",
    value: function end(dx, dy) {
      if (this.pointType === 'in' || this.pointType === 'out') {
        this.startXY.dx = dx;
        this.startXY.dy = dy;
        var filter = this.state.selectedFilter;
        var e = this.$config.get('bodyEvent');
        var $target = Dom["a" /* default */].create(e.target);
        var $targetNode = $target.closest('filter-node');

        if (this.pointType === 'out') {
          if ($target.hasClass('in')) {
            var targetFilter = this.state.filters[+$targetNode.attr('data-index')];

            if (targetFilter) {
              if (!targetFilter.hasLight() && filter.isLight()) {// light 계열은 lighting 에만 갈 수 있음.  
              } else {
                var targetIndex = +$target.attr('data-index');

                if (!targetFilter["in"][targetIndex]) {
                  targetFilter.setIn(targetIndex, filter);
                  filter.setConnected(targetFilter);
                }
              }
            }
          }
        } else if (this.pointType === 'in') {
          if ($target.hasClass('out')) {
            var targetFilter = this.state.filters[+$targetNode.attr('data-index')];

            if (targetFilter) {
              if (filter.hasLight() && !targetFilter.isLight()) {// lighting  는 light 와  연결된다. 
              } else {
                if (!filter["in"][this.pointIndex]) {
                  filter.setIn(this.pointIndex, targetFilter);
                  targetFilter.setConnected(filter);
                }
              }
            }
          }
        }

        this.pointType = '';
      }

      this.load('$dragLinePanel');
      this.load('$connectedLinePanel');
      this.modifyFilter();
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var filter = this.state.selectedFilter;

      if (filter) {
        this.startXY.dx = dx;
        this.startXY.dy = dy;

        if (this.pointType === 'in') {
          this.load('$dragLinePanel');
        } else if (this.pointType === 'out') {
          this.load('$dragLinePanel');
        } else {
          filter.reset({
            bound: {
              x: this.startXY.x + dx,
              y: this.startXY.y + dy
            }
          });
          this.$target.css({
            left: Length["a" /* Length */].px(filter.bound.x),
            top: Length["a" /* Length */].px(filter.bound.y)
          });
          this.load('$connectedLinePanel');
        }
      }
    }
  }, {
    key: "makeGraphPanel",
    value: function makeGraphPanel() {
      var _this6 = this;

      return this.state.filters.map(function (it, index) {
        return (
          /*html*/
          "\n        <div class='filter-node ".concat(Object(func["OBJECT_TO_CLASS"])({
            'selected': index === _this6.state.selectedIndex
          }), "' data-type=\"").concat(it.type, "\" data-index=\"").concat(index, "\" data-filter-id=\"").concat(it.id, "\" style='left: ").concat(it.bound.x, "px;top: ").concat(it.bound.y, "px;'>\n          <div class='label'>").concat(_this6.$i18n(it.type), "</div>\n          <div class='remove'>").concat(icon["a" /* default */].close, "</div>\n          <div class='preview' data-source-type=\"").concat(getSourceTypeString(it.type), "\" data-filter-type='").concat(it.type, "'>").concat(getIcon(it.type), "</div>\n          <div class='in-list'>\n            ").concat(Object(func["repeat"])(it.getInCount()).map(function (itIn, inIndex) {
            return (
              /*html*/
              "<div class='in' data-index='".concat(inIndex, "'></div>")
            );
          }).join(''), "\n          </div>\n          \n          <div class='out' data-index=\"0\">").concat(icon["a" /* default */].chevron_right, "</div>\n          ").concat(it.hasLight() ?
          /*html*/
          "<div class='light'  data-index=\"0\"></div>" : '', "\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSVGFilterColorViewEditor'),
    value: function value(key, color, params) {
      this.trigger('changeRangeEditor', key, color, params);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFuncFilterEditor'),
    value: function value(key, _value) {
      var filter = this.state.selectedFilter;

      if (filter) {
        filter.reset(defineProperty_default()({}, key, _value));
      }

      this.modifyFilter();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value2) {
      var filter = this.state.selectedFilter;

      if (filter) {
        filter.reset(defineProperty_default()({}, key, _value2));
      }

      this.modifyFilter();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTextEditor'),
    value: function value(key, _value3) {
      var filter = this.state.selectedFilter;

      if (filter) {
        filter.reset(defineProperty_default()({}, key, _value3));
      }

      this.modifyFilter();
    }
  }, {
    key: "removeFilter",
    value: function removeFilter(id) {
      var filters = this.state.filters.filter(function (it) {
        return it.id != id;
      });
      filters.forEach(function (it) {
        it.connected = it.connected.filter(function (c) {
          return c.id != id;
        });
        it["in"] = it["in"].filter(function (c) {
          return c.id != id;
        });
      });

      if (this.state.selectedFilter.id === id) {
        this.state.selectedFilter = null;
        this.state.selectedIndex = -1;
      }

      this.setState({
        filters: filters
      });
      this.modifyFilter();
    }
  }, {
    key: Object(Event["CLICK"])('$graphPanel .filter-node .remove'),
    value: function value(e) {
      var $target = e.$dt.closest('filter-node');
      var index = +$target.attr('data-index');
      var f = this.state.filters[index];
      this.removeFilter(f.id);
    }
  }]);

  return SVGFilterEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SVGFilterEditor: SVGFilterEditor_SVGFilterEditor
});

/***/ }),
/* 136 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Keyframe; });
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(46);
/* harmony import */ var _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(16);
/* harmony import */ var _babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8__);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(34);
/* harmony import */ var _Offset__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(91);
/* harmony import */ var el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(21);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(3);










function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_7___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var Keyframe = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_6___default()(Keyframe, _Property);

  var _super = _createSuper(Keyframe);

  function Keyframe() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_3___default()(this, Keyframe);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_4___default()(Keyframe, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Keyframe.prototype), "getDefaultObject", this).call(this, {
        itemType: "keyframe",
        name: 'sample',
        selectedType: 'list',
        offsets: []
      });
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var _this$json = this.json,
          name = _this$json.name,
          selectedType = _this$json.selectedType,
          offsets = _this$json.offsets;
      return _objectSpread(_objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_5___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_8___default()(Keyframe.prototype), "toCloneObject", this).call(this)), this.attrs('name', 'selectedType')), {}, {
        offsets: offsets.map(function (offset) {
          return offset.clone();
        })
      });
    }
  }, {
    key: "isMultiStyle",
    value: function isMultiStyle(key) {
      switch (key) {
        case 'background-image':
        case 'var':
          return true;
      }

      return false;
    }
  }, {
    key: "getMultiStyleString",
    value: function getMultiStyleString(p) {
      switch (p.key) {
        case 'background-image':
          return p.value.toString() + ';';

        case 'var':
          var value = (p.value + '').split(';').map(function (str) {
            return "--" + str;
          }).join(';');
          return value + ';';
      }

      return p.value.toString() + ';';
    }
  }, {
    key: "toOffsetString",
    value: function toOffsetString(it) {
      var _this = this;

      var tabString = '      ';
      return "".concat(it.offset.toString(), " {\n").concat(tabString).concat(it.properties.map(function (p) {
        if (_this.isMultiStyle(p.key)) {
          return _this.getMultiStyleString(p);
        } else {
          var value = (p.value || '').toString();

          if (value) {
            var key = p.key;
            if (key === 'x') key = 'left';else if (key === 'y') key = 'top';
            return "".concat(key, ": ").concat(value, ";");
          } else {
            return '';
          }
        }
      }).join('').replace(/\;/g, ';\n' + tabString).trim(), "\n  }");
    }
  }, {
    key: "toOffsetText",
    value: function toOffsetText() {
      var _this2 = this;

      var offsets = this.json.offsets.map(function (it) {
        return it;
      });
      offsets.sort(function (a, b) {
        return a.offset.value > b.offset.value ? 1 : -1;
      });
      return offsets.map(function (it) {
        if (it.properties.length === 0) return '';
        return _this2.toOffsetString(it);
      }).join('\n');
    }
  }, {
    key: "toCSSText",
    value: function toCSSText() {
      var offsets = this.json.offsets.map(function (it) {
        return it;
      });
      offsets.sort(function (a, b) {
        return a.offset.value > b.offset.value ? 1 : -1;
      });
      return "\n@keyframes ".concat(this.json.name, " {\n\n  ").concat(this.toOffsetText(), "\n\n}\n");
    }
  }, {
    key: "createOffset",
    value: function createOffset() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return this.addOffset(new _Offset__WEBPACK_IMPORTED_MODULE_10__[/* Offset */ "a"](_objectSpread({
        checked: true
      }, data)));
    }
  }, {
    key: "addOffset",
    value: function addOffset(offset) {
      this.json.offsets.push(offset);
    }
  }, {
    key: "removeOffset",
    value: function removeOffset(removeIndex) {
      this.json.offsets.splice(removeIndex, 1);
    }
  }, {
    key: "sortItem",
    value: function sortItem(arr, startIndex, targetIndex) {
      arr.splice.apply(arr, [targetIndex + (startIndex < targetIndex ? -1 : 0), 0].concat(_babel_runtime_helpers_toConsumableArray__WEBPACK_IMPORTED_MODULE_1___default()(arr.splice(startIndex, 1))));
    }
  }, {
    key: "sortOffset",
    value: function sortOffset(startIndex, targetIndex) {
      this.sortItem(this.json.offsets, startIndex, targetIndex);
    }
  }, {
    key: "updateOffset",
    value: function updateOffset(index) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.json.offsets[+index].reset(data);
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {};
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.toCSSText();
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new Keyframe(obj);
    }
    /**
     * 
     * keyframe: {keyframeName} {offset} {property} {value} | ......
     * 
     * @param {} style 
     */

  }, {
    key: "parseStyle",
    value: function parseStyle(style) {
      var keyframes = [];
      var keyframeKeys = {};

      if (style['keyframe']) {
        var results = Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__["convertMatches"])(style["keyframe"]);
        results.str.split('|').map(function (it) {
          return it.trim();
        }).forEach(function (frameInfo, index) {
          var _frameInfo$split = frameInfo.split(' '),
              _frameInfo$split2 = _babel_runtime_helpers_toArray__WEBPACK_IMPORTED_MODULE_0___default()(_frameInfo$split),
              name = _frameInfo$split2[0],
              offset = _frameInfo$split2[1],
              property = _frameInfo$split2[2],
              values = _frameInfo$split2.slice(3);

          var propertyValue = values.join(' ');

          if (!keyframeKeys[name]) {
            keyframeKeys[name] = new Keyframe({
              name: name
            });
            keyframes[index] = name;
          }

          var filteredOffset = keyframeKeys[name].offsets.filter(function (it) {
            return it.offset.equals(el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].parse(offset));
          });
          var offsetObj = null;

          if (filteredOffset.length) {
            offsetObj = filteredOffset[0];
          } else {
            offsetObj = new _Offset__WEBPACK_IMPORTED_MODULE_10__[/* Offset */ "a"]({
              offset: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_12__[/* Length */ "a"].parse(offset)
            });
            keyframeKeys[name].offsets.push(offsetObj);
          }

          offsetObj.addProperty({
            key: property,
            value: Object(el_base_functions_parser__WEBPACK_IMPORTED_MODULE_11__["reverseMatches"])(propertyValue, results.matches)
          });
        });
      }

      return keyframes.map(function (name) {
        keyframeKeys[name].offsets.forEach(function (offset) {
          var vars = [];
          var properties = [];
          offset.properties.forEach(function (p) {
            if (p.key.includes('--')) {
              vars.push(p);
            } else {
              properties.push(p);
            }
          });
          var varValue = vars.map(function (it) {
            return "".concat(it.key, ":").concat(it.value);
          }).join(';');

          if (vars.length) {
            properties.push({
              key: 'var',
              value: varValue
            });
          }

          offset.properties = properties;
        });
        return keyframeKeys[name];
      });
    }
  }]);

  return Keyframe;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_9__[/* Property */ "a"]);

/***/ }),
/* 137 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Selector; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_items_Property__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(34);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }



var Selector = /*#__PURE__*/function (_Property) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(Selector, _Property);

  var _super = _createSuper(Selector);

  function Selector() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, Selector);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(Selector, [{
    key: "getDefaultObject",
    value: function getDefaultObject(obj) {
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Selector.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "selector",
        selector: '',
        properties: []
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Selector.prototype), "toCloneObject", this).call(this)), this.attrs('selector', 'properties'));
    }
  }, {
    key: "isMultiStyle",
    value: function isMultiStyle(key) {
      switch (key) {
        case 'background-image':
        case 'var':
          return true;
      }

      return false;
    }
  }, {
    key: "getMultiStyleString",
    value: function getMultiStyleString(p) {
      switch (p.key) {
        case 'background-image':
          return p.value.toString() + ';';
      }

      return p.value.toString() + ' !important;';
    }
  }, {
    key: "toPropertyString",
    value: function toPropertyString() {
      var _this = this;

      return this.json.properties.map(function (p) {
        if (_this.isMultiStyle(p.key)) {
          return _this.getMultiStyleString(p);
        } else {
          var value = p.value.toString();

          if (value) {
            var key = p.key;
            if (key === 'x') key = 'left';else if (key === 'y') key = 'top';
            return "".concat(key, ": ").concat(value, " !important;");
          } else {
            return '';
          }
        }
      }).join('\n');
    }
  }, {
    key: "toCSSText",
    value: function toCSSText() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return "".concat(prefix).concat(this.json.selector, " {\n    ").concat(this.toPropertyString(), "\n}");
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {};
    }
  }, {
    key: "toString",
    value: function toString() {
      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return this.toCSSText(prefix);
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new Selector(obj);
    }
  }]);

  return Selector;
}(el_editor_items_Property__WEBPACK_IMPORTED_MODULE_7__[/* Property */ "a"]);

/***/ }),
/* 138 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ArtBoard; });
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(11);
/* harmony import */ var _manager_ComponentManager__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(33);
/* harmony import */ var _DomItem__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(102);








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_5___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ArtBoard = /*#__PURE__*/function (_DomItem) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_4___default()(ArtBoard, _DomItem);

  var _super = _createSuper(ArtBoard);

  function ArtBoard() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_1___default()(this, ArtBoard);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_2___default()(ArtBoard, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ArtBoard.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: "artboard",
        name: "New ArtBoard",
        width: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].px(1000),
        height: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"].px(1000),
        'background-color': 'white',
        'transform-style': 'flat'
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return _objectSpread(_objectSpread({}, _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_3___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_6___default()(ArtBoard.prototype), "toCloneObject", this).call(this)), this.attrs('name'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "ArtBoard";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"].artboard;
    }
  }]);

  return ArtBoard;
}(_DomItem__WEBPACK_IMPORTED_MODULE_10__[/* DomItem */ "a"]);
_manager_ComponentManager__WEBPACK_IMPORTED_MODULE_9__[/* ComponentManager */ "a"].registerComponent('artboard', ArtBoard);

/***/ }),
/* 139 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXPORTS
__webpack_require__.d(__webpack_exports__, "a", function() { return /* binding */ makeInterpolateOffset; });

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// EXTERNAL MODULE: ./src/el/editor/parser/Point.js
var Point = __webpack_require__(25);

// EXTERNAL MODULE: ./src/el/editor/interpolate/interpolate-functions/makeInterpolateNumber.js
var makeInterpolateNumber = __webpack_require__(23);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateLine.js

function makeInterpolateLine(x1, y1, x2, y2) {
  var obj = {
    x: Object(makeInterpolateNumber["a" /* makeInterpolateNumber */])('', '', x1, x2),
    y: Object(makeInterpolateNumber["a" /* makeInterpolateNumber */])('', '', y1, y2)
  };
  return function (rate, t) {
    var results = {
      x: obj.x(rate, t),
      y: obj.y(rate, t)
    }; // console.log({x: results.x , t, x1, x2 })

    return results;
  };
}
// EXTERNAL MODULE: ./src/el/base/functions/bezier.js
var bezier = __webpack_require__(24);

// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateQuard.js

function makeInterpolateQuard(sx, sy, cx1, cy1, ex, ey) {
  var points = [{
    x: sx,
    y: sy
  }, {
    x: cx1,
    y: cy1
  }, {
    x: ex,
    y: ey
  }];
  return function (rate, t) {
    return Object(bezier["e" /* getBezierPointOneQuard */])(points, t); // return {x, y}
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateCubic.js

function makeInterpolateCubic(sx, sy, cx1, cy1, cx2, cy2, ex, ey) {
  var points = [{
    x: sx,
    y: sy
  }, {
    x: cx1,
    y: cy1
  }, {
    x: cx2,
    y: cy2
  }, {
    x: ex,
    y: ey
  }];
  return function (rate, t) {
    return Object(bezier["d" /* getBezierPointOne */])(points, t); // return {x, y}
  };
}
// CONCATENATED MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateOffset.js







function makeInterpolateOffset(segments) {
  var interpolateList = [];
  var startPoint = [];
  segments.forEach(function (segment, index) {
    switch (segment.command) {
      case 'M':
        var _segment$values = slicedToArray_default()(segment.values, 2),
            ex = _segment$values[0],
            ey = _segment$values[1];

        startPoint = [ex, ey];
        break;

      case 'm':
        var _startPoint = startPoint,
            _startPoint2 = slicedToArray_default()(_startPoint, 2),
            sx = _startPoint2[0],
            sy = _startPoint2[1];

        var _segment$values2 = slicedToArray_default()(segment.values, 2),
            ex = _segment$values2[0],
            ey = _segment$values2[1];

        ex += sx;
        ey += sy;
        startPoint = [ex, ey];
        break;

      case 'L':
        var _startPoint3 = startPoint,
            _startPoint4 = slicedToArray_default()(_startPoint3, 2),
            sx = _startPoint4[0],
            sy = _startPoint4[1];

        var _segment$values3 = slicedToArray_default()(segment.values, 2),
            ex = _segment$values3[0],
            ey = _segment$values3[1];

        interpolateList.push({
          command: segment.command,
          values: [sx, sy, ex, ey],
          length: Object(math["getDist"])(sx, sy, ex, ey),
          interpolate: makeInterpolateLine(sx, sy, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'l':
        var _startPoint5 = startPoint,
            _startPoint6 = slicedToArray_default()(_startPoint5, 2),
            sx = _startPoint6[0],
            sy = _startPoint6[1];

        var _segment$values4 = slicedToArray_default()(segment.values, 2),
            ex = _segment$values4[0],
            ey = _segment$values4[1];

        ex += sx;
        ey += sy;
        interpolateList.push({
          command: segment.command,
          values: [sx, sy, ex, ey],
          length: Object(math["getDist"])(sx, sy, ex, ey),
          interpolate: makeInterpolateLine(sx, sy, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'C':
        var _startPoint7 = startPoint,
            _startPoint8 = slicedToArray_default()(_startPoint7, 2),
            sx = _startPoint8[0],
            sy = _startPoint8[1];

        var _segment$values5 = slicedToArray_default()(segment.values, 6),
            cx1 = _segment$values5[0],
            cy1 = _segment$values5[1],
            cx2 = _segment$values5[2],
            cy2 = _segment$values5[3],
            ex = _segment$values5[4],
            ey = _segment$values5[5];

        interpolateList.push({
          command: segment.command,
          values: [sx, sy, cx1, cy1, cx2, cy2, ex, ey],
          length: Object(bezier["j" /* getCurveDist */])(sx, sy, cx1, cy1, cx2, cy2, ex, ey),
          interpolate: makeInterpolateCubic(sx, sy, cx1, cy1, cx2, cy2, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'c':
        var _startPoint9 = startPoint,
            _startPoint10 = slicedToArray_default()(_startPoint9, 2),
            sx = _startPoint10[0],
            sy = _startPoint10[1];

        var _segment$values6 = slicedToArray_default()(segment.values, 6),
            cx1 = _segment$values6[0],
            cy1 = _segment$values6[1],
            cx2 = _segment$values6[2],
            cy2 = _segment$values6[3],
            ex = _segment$values6[4],
            ey = _segment$values6[5];

        cx1 += sx;
        cx2 += sx;
        ex += sx;
        cy1 += sy;
        cy2 += sy;
        ey += sy;
        interpolateList.push({
          command: segment.command,
          values: [sx, sy, cx1, cy1, cx2, cy2, ex, ey],
          length: Object(bezier["j" /* getCurveDist */])(sx, sy, cx1, cy1, cx2, cy2, ex, ey),
          interpolate: makeInterpolateCubic(sx, sy, cx1, cy1, cx2, cy2, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'Q':
        var _startPoint11 = startPoint,
            _startPoint12 = slicedToArray_default()(_startPoint11, 2),
            sx = _startPoint12[0],
            sy = _startPoint12[1];

        var _segment$values7 = slicedToArray_default()(segment.values, 4),
            cx1 = _segment$values7[0],
            cy1 = _segment$values7[1],
            ex = _segment$values7[2],
            ey = _segment$values7[3];

        interpolateList.push({
          command: segment.command,
          values: [sx, sy, cx1, cy1, ex, ey],
          length: Object(bezier["l" /* getQuardDist */])(sx, sy, cx1, cy1, ex, ey),
          interpolate: makeInterpolateQuard(sx, sy, cx1, cy1, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'q':
        var _startPoint13 = startPoint,
            _startPoint14 = slicedToArray_default()(_startPoint13, 2),
            sx = _startPoint14[0],
            sy = _startPoint14[1];

        var _segment$values8 = slicedToArray_default()(segment.values, 4),
            cx1 = _segment$values8[0],
            cy1 = _segment$values8[1],
            ex = _segment$values8[2],
            ey = _segment$values8[3];

        cx1 += sx;
        ex += sx;
        cy1 += sy;
        ey += sy;
        interpolateList.push({
          command: segment.command,
          values: [sx, sy, cx1, cy1, ex, ey],
          length: Object(bezier["l" /* getQuardDist */])(sx, sy, cx1, cy1, ex, ey),
          interpolate: makeInterpolateQuard(sx, sy, cx1, cy1, ex, ey)
        });
        startPoint = [ex, ey];
        break;

      case 'S':
        var _startPoint15 = startPoint,
            _startPoint16 = slicedToArray_default()(_startPoint15, 2),
            sx = _startPoint16[0],
            sy = _startPoint16[1];

        var _segment$values9 = slicedToArray_default()(segment.values, 4),
            cx2 = _segment$values9[0],
            cy2 = _segment$values9[1],
            ex = _segment$values9[2],
            ey = _segment$values9[3];

        var prevSegment = interpolateList[interpolateList.length - 1];

        if (['C', 'c', 'S', 's'].includes(prevSegment.command)) {
          var _prevSegment$values = slicedToArray_default()(prevSegment.values, 8),
              _ = _prevSegment$values[0],
              _ = _prevSegment$values[1],
              _ = _prevSegment$values[2],
              _ = _prevSegment$values[3],
              preC1x = _prevSegment$values[4],
              preC1y = _prevSegment$values[5],
              preEx = _prevSegment$values[6],
              preEy = _prevSegment$values[7];

          var _Point$getReversePoin = Point["a" /* default */].getReversePoint({
            x: preEx,
            y: preEy
          }, {
            x: preC1x,
            preC1y: preC1y
          }),
              cx1 = _Point$getReversePoin.x,
              cy1 = _Point$getReversePoin.y;

          interpolateList.push({
            command: segment.command,
            values: [sx, sy, cx1, cy1, cx2, cy2, ex, ey],
            length: getCubicDist(sx, sy, cx1, cy1, cx2, cy2, ex, ey),
            interpolate: makeInterpolateCubic(sx, sy, cx1, cy1, cx2, cy2, ex, ey)
          });
          startPoint = [ex, ey];
          break;
        }

      case 's':
        var _startPoint17 = startPoint,
            _startPoint18 = slicedToArray_default()(_startPoint17, 2),
            sx = _startPoint18[0],
            sy = _startPoint18[1];

        var _segment$values10 = slicedToArray_default()(segment.values, 4),
            cx2 = _segment$values10[0],
            cy2 = _segment$values10[1],
            ex = _segment$values10[2],
            ey = _segment$values10[3];

        cx2 += sx;
        ex += sx;
        cy2 += sy;
        ey += sy;
        var prevSegment = interpolateList[interpolateList.length - 1];

        if (['C', 'c', 'S', 's'].includes(prevSegment.command)) {
          var _prevSegment$values2 = slicedToArray_default()(prevSegment.values, 8),
              _ = _prevSegment$values2[0],
              _ = _prevSegment$values2[1],
              _ = _prevSegment$values2[2],
              _ = _prevSegment$values2[3],
              preC1x = _prevSegment$values2[4],
              preC1y = _prevSegment$values2[5],
              preEx = _prevSegment$values2[6],
              preEy = _prevSegment$values2[7];

          var _Point$getReversePoin2 = Point["a" /* default */].getReversePoint({
            x: preEx,
            y: preEy
          }, {
            x: preC1x,
            preC1y: preC1y
          }),
              cx1 = _Point$getReversePoin2.x,
              cy1 = _Point$getReversePoin2.y;

          interpolateList.push({
            command: segment.command,
            values: [sx, sy, cx1, cy1, cx2, cy2, ex, ey],
            length: getCubicDist(sx, sy, cx1, cy1, cx2, cy2, ex, ey),
            interpolate: makeInterpolateCubic(sx, sy, cx1, cy1, cx2, cy2, ex, ey)
          });
          startPoint = [ex, ey];
          break;
        }

      case 'T':
        var _startPoint19 = startPoint,
            _startPoint20 = slicedToArray_default()(_startPoint19, 2),
            sx = _startPoint20[0],
            sy = _startPoint20[1];

        var _segment$values11 = slicedToArray_default()(segment.values, 2),
            ex = _segment$values11[0],
            ey = _segment$values11[1];

        var prevSegment = interpolateList[interpolateList.length - 1];

        if (['Q', 'q', 'T', 't'].includes(prevSegment.command)) {
          var _prevSegment$values3 = slicedToArray_default()(prevSegment.values, 6),
              _ = _prevSegment$values3[0],
              _ = _prevSegment$values3[1],
              preC1x = _prevSegment$values3[2],
              preC1y = _prevSegment$values3[3],
              preEx = _prevSegment$values3[4],
              preEy = _prevSegment$values3[5];

          var _Point$getReversePoin3 = Point["a" /* default */].getReversePoint({
            x: preEx,
            y: preEy
          }, {
            x: preC1x,
            preC1y: preC1y
          }),
              cx1 = _Point$getReversePoin3.x,
              cy1 = _Point$getReversePoin3.y;

          interpolateList.push({
            command: segment.command,
            values: [sx, sy, cx1, cy1, ex, ey],
            length: Object(bezier["l" /* getQuardDist */])(sx, sy, cx1, cy1, ex, ey),
            interpolate: makeInterpolateQuard(sx, sy, cx1, cy1, ex, ey)
          });
          startPoint = [ex, ey];
        }

        break;

      case 't':
        var _startPoint21 = startPoint,
            _startPoint22 = slicedToArray_default()(_startPoint21, 2),
            sx = _startPoint22[0],
            sy = _startPoint22[1];

        var _segment$values12 = slicedToArray_default()(segment.values, 2),
            ex = _segment$values12[0],
            ey = _segment$values12[1];

        ex += sx;
        ey += sy;
        var prevSegment = interpolateList[interpolateList.length - 1];

        if (['Q', 'q', 'T', 't'].includes(prevSegment.command)) {
          var _prevSegment$values4 = slicedToArray_default()(prevSegment.values, 6),
              _ = _prevSegment$values4[0],
              _ = _prevSegment$values4[1],
              preC1x = _prevSegment$values4[2],
              preC1y = _prevSegment$values4[3],
              preEx = _prevSegment$values4[4],
              preEy = _prevSegment$values4[5];

          var _Point$getReversePoin4 = Point["a" /* default */].getReversePoint({
            x: preEx,
            y: preEy
          }, {
            x: preC1x,
            preC1y: preC1y
          }),
              cx1 = _Point$getReversePoin4.x,
              cy1 = _Point$getReversePoin4.y;

          interpolateList.push({
            command: segment.command,
            values: [sx, sy, cx1, cy1, ex, ey],
            length: Object(bezier["l" /* getQuardDist */])(sx, sy, cx1, cy1, ex, ey),
            interpolate: makeInterpolateQuard(sx, sy, cx1, cy1, ex, ey)
          });
          startPoint = [ex, ey];
        }

        break;
    }
  });
  var totalLength = 0;
  interpolateList.forEach(function (it) {
    totalLength += it.length;
  });
  var start = 0;
  interpolateList.forEach(function (it) {
    it.startT = start / totalLength;
    it.endT = (start + it.length) / totalLength;
    it.totalLength = totalLength;
    start += it.length;
  });
  return {
    totalLength: totalLength,
    interpolateList: interpolateList
  };
}

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

(function (global, factory) {
   true ? module.exports = factory() :
  undefined;
}(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  var getQueryParams = function getQueryParams(qs) {
    if (typeof qs !== 'string') {
      return {};
    }

    qs = qs.split('+').join(' ');
    var params = {};
    var match = qs.match(/(?:[?](?:[^=]+)=(?:[^&#]*)(?:[&](?:[^=]+)=(?:[^&#]*))*(?:[#].*)?)|(?:[#].*)/);
    var split;

    if (match === null) {
      return {};
    }

    split = match[0].substr(1).split(/[&#=]/);

    for (var i = 0; i < split.length; i += 2) {
      params[decodeURIComponent(split[i])] = decodeURIComponent(split[i + 1] || '');
    }

    return params;
  };

  var combineParams = function combineParams(params, hasParams) {
    if (_typeof(params) !== 'object') {
      return '';
    }

    var combined = '';
    var i = 0;
    var keys = Object.keys(params);

    if (keys.length === 0) {
      return '';
    } //always have parameters in the same order


    keys.sort();

    if (!hasParams) {
      combined += '?' + keys[0] + '=' + params[keys[0]];
      i += 1;
    }

    for (; i < keys.length; i += 1) {
      combined += '&' + keys[i] + '=' + params[keys[i]];
    }

    return combined;
  }; //parses strings like 1h30m20s to seconds


  function getLetterTime(timeString) {
    var totalSeconds = 0;
    var timeValues = {
      's': 1,
      'm': 1 * 60,
      'h': 1 * 60 * 60,
      'd': 1 * 60 * 60 * 24,
      'w': 1 * 60 * 60 * 24 * 7
    };
    var timePairs; //expand to "1 h 30 m 20 s" and split

    timeString = timeString.replace(/([smhdw])/g, ' $1 ').trim();
    timePairs = timeString.split(' ');

    for (var i = 0; i < timePairs.length; i += 2) {
      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs[i + 1] || 's'];
    }

    return totalSeconds;
  } //parses strings like 1:30:20 to seconds


  function getColonTime(timeString) {
    var totalSeconds = 0;
    var timeValues = [1, 1 * 60, 1 * 60 * 60, 1 * 60 * 60 * 24, 1 * 60 * 60 * 24 * 7];
    var timePairs = timeString.split(':');

    for (var i = 0; i < timePairs.length; i++) {
      totalSeconds += parseInt(timePairs[i], 10) * timeValues[timePairs.length - i - 1];
    }

    return totalSeconds;
  }

  var getTime = function getTime(timeString) {
    if (typeof timeString === 'undefined') {
      return 0;
    }

    if (timeString.match(/^(\d+[smhdw]?)+$/)) {
      return getLetterTime(timeString);
    }

    if (timeString.match(/^(\d+:?)+$/)) {
      return getColonTime(timeString);
    }

    return 0;
  };

  var util = {
    getQueryParams: getQueryParams,
    combineParams: combineParams,
    getTime: getTime
  };

  var getQueryParams$1 = util.getQueryParams;

  function UrlParser() {
    for (var _i = 0, _arr = ['parseProvider', 'parse', 'bind', 'create']; _i < _arr.length; _i++) {
      var key = _arr[_i];
      this[key] = this[key].bind(this);
    }

    this.plugins = {};
  }

  var urlParser = UrlParser;

  UrlParser.prototype.parseProvider = function (url) {
    var match = url.match(/(?:(?:https?:)?\/\/)?(?:[^.]+\.)?(\w+)\./i);
    return match ? match[1] : undefined;
  };

  UrlParser.prototype.parse = function (url) {
    if (typeof url === 'undefined') {
      return undefined;
    }

    var provider = this.parseProvider(url);
    var result;
    var plugin = this.plugins[provider];

    if (!provider || !plugin || !plugin.parse) {
      return undefined;
    }

    result = plugin.parse.call(plugin, url, getQueryParams$1(url));

    if (result) {
      result = removeEmptyParameters(result);
      result.provider = plugin.provider;
    }

    return result;
  };

  UrlParser.prototype.bind = function (plugin) {
    this.plugins[plugin.provider] = plugin;

    if (plugin.alternatives) {
      for (var i = 0; i < plugin.alternatives.length; i += 1) {
        this.plugins[plugin.alternatives[i]] = plugin;
      }
    }
  };

  UrlParser.prototype.create = function (op) {
    if (_typeof(op) !== 'object' || _typeof(op.videoInfo) !== 'object') {
      return undefined;
    }

    var vi = op.videoInfo;
    var params = op.params;
    var plugin = this.plugins[vi.provider];
    params = params === 'internal' ? vi.params : params || {};

    if (plugin) {
      op.format = op.format || plugin.defaultFormat; // eslint-disable-next-line no-prototype-builtins

      if (plugin.formats.hasOwnProperty(op.format)) {
        return plugin.formats[op.format].apply(plugin, [vi, Object.assign({}, params)]);
      }
    }

    return undefined;
  };

  function removeEmptyParameters(result) {
    if (result.params && Object.keys(result.params).length === 0) {
      delete result.params;
    }

    return result;
  }

  var parser = new urlParser();
  var base = parser;

  var combineParams$1 = util.combineParams;

  function CanalPlus() {
    this.provider = 'canalplus';
    this.defaultFormat = 'embed';
    this.formats = {
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  CanalPlus.prototype.parseParameters = function (params) {
    delete params.vid;
    return params;
  };

  CanalPlus.prototype.parse = function (url, params) {
    var _this = this;

    var result = {
      mediaType: this.mediaTypes.VIDEO,
      id: params.vid
    };
    result.params = _this.parseParameters(params);

    if (!result.id) {
      return undefined;
    }

    return result;
  };

  CanalPlus.prototype.createEmbedUrl = function (vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = 'http://player.canalplus.fr/embed/';
    params.vid = vi.id;
    url += combineParams$1(params);
    return url;
  };

  base.bind(new CanalPlus());

  var combineParams$2 = util.combineParams;

  function Coub() {
    this.provider = 'coub';
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  Coub.prototype.parseUrl = function (url) {
    var match = url.match(/(?:embed|view)\/([a-zA-Z\d]+)/i);
    return match ? match[1] : undefined;
  };

  Coub.prototype.parse = function (url, params) {
    var result = {
      mediaType: this.mediaTypes.VIDEO,
      params: params,
      id: this.parseUrl(url)
    };

    if (!result.id) {
      return undefined;
    }

    return result;
  };

  Coub.prototype.createUrl = function (baseUrl, vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = baseUrl + vi.id;
    url += combineParams$2(params);
    return url;
  };

  Coub.prototype.createLongUrl = function (vi, params) {
    return this.createUrl('https://coub.com/view/', vi, params);
  };

  Coub.prototype.createEmbedUrl = function (vi, params) {
    return this.createUrl('//coub.com/embed/', vi, params);
  };

  base.bind(new Coub());

  var combineParams$3 = util.combineParams,
      getTime$1 = util.getTime;

  function Dailymotion() {
    this.provider = 'dailymotion';
    this.alternatives = ['dai'];
    this.defaultFormat = 'long';
    this.formats = {
      "short": this.createShortUrl,
      "long": this.createLongUrl,
      embed: this.createEmbedUrl,
      image: this.createImageUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  Dailymotion.prototype.parseParameters = function (params) {
    return this.parseTime(params);
  };

  Dailymotion.prototype.parseTime = function (params) {
    if (params.start) {
      params.start = getTime$1(params.start);
    }

    return params;
  };

  Dailymotion.prototype.parseUrl = function (url) {
    var match = url.match(/(?:\/video|ly)\/([A-Za-z0-9]+)/i);
    return match ? match[1] : undefined;
  };

  Dailymotion.prototype.parse = function (url, params) {
    var _this = this;

    var result = {
      mediaType: this.mediaTypes.VIDEO,
      params: _this.parseParameters(params),
      id: _this.parseUrl(url)
    };
    return result.id ? result : undefined;
  };

  Dailymotion.prototype.createUrl = function (base, vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    return base + vi.id + combineParams$3(params);
  };

  Dailymotion.prototype.createShortUrl = function (vi, params) {
    return this.createUrl('https://dai.ly/', vi, params);
  };

  Dailymotion.prototype.createLongUrl = function (vi, params) {
    return this.createUrl('https://dailymotion.com/video/', vi, params);
  };

  Dailymotion.prototype.createEmbedUrl = function (vi, params) {
    return this.createUrl('https://www.dailymotion.com/embed/video/', vi, params);
  };

  Dailymotion.prototype.createImageUrl = function (vi, params) {
    delete params.start;
    return this.createUrl('https://www.dailymotion.com/thumbnail/video/', vi, params);
  };

  base.bind(new Dailymotion());

  var combineParams$4 = util.combineParams,
      getTime$2 = util.getTime;

  function Twitch() {
    this.provider = 'twitch';
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video',
      STREAM: 'stream',
      CLIP: 'clip'
    };
  }

  Twitch.prototype.seperateId = function (id) {
    return {
      pre: id[0],
      id: id.substr(1)
    };
  };

  Twitch.prototype.parseChannel = function (result, params) {
    var channel = params.channel || params.utm_content || result.channel;
    delete params.utm_content;
    delete params.channel;
    return channel;
  };

  Twitch.prototype.parseUrl = function (url, result, params) {
    var match;
    match = url.match(/(clips\.)?twitch\.tv\/(?:(?:videos\/(\d+))|(\w+)(?:\/clip\/(\w+))?)/i);

    if (match && match[2]) {
      //video
      result.id = 'v' + match[2];
    } else if (params.video) {
      //video embed
      result.id = params.video;
      delete params.video;
    } else if (params.clip) {
      //clips embed
      result.id = params.clip;
      result.isClip = true;
      delete params.clip;
    } else if (match && match[1] && match[3]) {
      //clips.twitch.tv/id
      result.id = match[3];
      result.isClip = true;
    } else if (match && match[3] && match[4]) {
      //twitch.tv/channel/clip/id
      result.channel = match[3];
      result.id = match[4];
      result.isClip = true;
    } else if (match && match[3]) {
      result.channel = match[3];
    }

    return result;
  };

  Twitch.prototype.parseMediaType = function (result) {
    var mediaType;

    if (result.id) {
      if (result.isClip) {
        mediaType = this.mediaTypes.CLIP;
        delete result.isClip;
      } else {
        mediaType = this.mediaTypes.VIDEO;
      }
    } else if (result.channel) {
      mediaType = this.mediaTypes.STREAM;
    }

    return mediaType;
  };

  Twitch.prototype.parseParameters = function (params) {
    if (params.t) {
      params.start = getTime$2(params.t);
      delete params.t;
    }

    return params;
  };

  Twitch.prototype.parse = function (url, params) {
    var _this = this;

    var result = {};
    result = _this.parseUrl(url, result, params);
    result.channel = _this.parseChannel(result, params);
    result.mediaType = _this.parseMediaType(result);
    result.params = _this.parseParameters(params);
    return result.channel || result.id ? result : undefined;
  };

  Twitch.prototype.createLongUrl = function (vi, params) {
    var url = '';

    if (vi.mediaType === this.mediaTypes.STREAM && vi.channel) {
      url = 'https://twitch.tv/' + vi.channel;
    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      var sep = this.seperateId(vi.id);
      url = 'https://twitch.tv/videos/' + sep.id;

      if (params.start) {
        params.t = params.start + 's';
        delete params.start;
      }
    } else if (vi.mediaType === this.mediaTypes.CLIP && vi.id) {
      if (vi.channel) {
        url = 'https://www.twitch.tv/' + vi.channel + '/clip/' + vi.id;
      } else {
        url = 'https://clips.twitch.tv/' + vi.id;
      }
    } else {
      return undefined;
    }

    url += combineParams$4(params);
    return url;
  };

  Twitch.prototype.createEmbedUrl = function (vi, params) {
    var url = 'https://player.twitch.tv/';

    if (vi.mediaType === this.mediaTypes.STREAM && vi.channel) {
      params.channel = vi.channel;
    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      params.video = vi.id;

      if (params.start) {
        params.t = params.start + 's';
        delete params.start;
      }
    } else if (vi.mediaType === this.mediaTypes.CLIP && vi.id) {
      url = 'https://clips.twitch.tv/embed';
      params.clip = vi.id;
    } else {
      return undefined;
    }

    url += combineParams$4(params);
    return url;
  };

  base.bind(new Twitch());

  var combineParams$5 = util.combineParams,
      getTime$3 = util.getTime;

  function Vimeo() {
    this.provider = 'vimeo';
    this.alternatives = ['vimeopro'];
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  Vimeo.prototype.parseUrl = function (url) {
    var match = url.match(/(?:\/(?:channels\/[\w]+|(?:(?:album\/\d+|groups\/[\w]+)\/)?videos?))?\/(\d+)/i);
    return match ? match[1] : undefined;
  };

  Vimeo.prototype.parseParameters = function (params) {
    return this.parseTime(params);
  };

  Vimeo.prototype.parseTime = function (params) {
    if (params.t) {
      params.start = getTime$3(params.t);
      delete params.t;
    }

    return params;
  };

  Vimeo.prototype.parse = function (url, params) {
    var result = {
      mediaType: this.mediaTypes.VIDEO,
      params: this.parseParameters(params),
      id: this.parseUrl(url)
    };
    return result.id ? result : undefined;
  };

  Vimeo.prototype.createUrl = function (baseUrl, vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = baseUrl + vi.id;
    var startTime = params.start;
    delete params.start;
    url += combineParams$5(params);

    if (startTime) {
      url += '#t=' + startTime;
    }

    return url;
  };

  Vimeo.prototype.createLongUrl = function (vi, params) {
    return this.createUrl('https://vimeo.com/', vi, params);
  };

  Vimeo.prototype.createEmbedUrl = function (vi, params) {
    return this.createUrl('//player.vimeo.com/video/', vi, params);
  };

  base.bind(new Vimeo());

  var combineParams$6 = util.combineParams,
      getTime$4 = util.getTime;

  function Wistia() {
    this.provider = 'wistia';
    this.alternatives = [];
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl,
      embedjsonp: this.createEmbedJsonpUrl
    };
    this.mediaTypes = {
      VIDEO: 'video',
      EMBEDVIDEO: 'embedvideo'
    };
  }

  Wistia.prototype.parseUrl = function (url) {
    var match = url.match(/(?:(?:medias|iframe)\/|wvideo=)([\w-]+)/);
    return match ? match[1] : undefined;
  };

  Wistia.prototype.parseChannel = function (url) {
    var match = url.match(/(?:(?:https?:)?\/\/)?([^.]*)\.wistia\./);
    var channel = match ? match[1] : undefined;

    if (channel === 'fast' || channel === 'content') {
      return undefined;
    }

    return channel;
  };

  Wistia.prototype.parseParameters = function (params, result) {
    if (params.wtime) {
      params.start = getTime$4(params.wtime);
      delete params.wtime;
    }

    if (params.wvideo === result.id) {
      delete params.wvideo;
    }

    return params;
  };

  Wistia.prototype.parseMediaType = function (result) {
    if (result.id && result.channel) {
      return this.mediaTypes.VIDEO;
    } else if (result.id) {
      delete result.channel;
      return this.mediaTypes.EMBEDVIDEO;
    } else {
      return undefined;
    }
  };

  Wistia.prototype.parse = function (url, params) {
    var result = {
      id: this.parseUrl(url),
      channel: this.parseChannel(url)
    };
    result.params = this.parseParameters(params, result);
    result.mediaType = this.parseMediaType(result);

    if (!result.id) {
      return undefined;
    }

    return result;
  };

  Wistia.prototype.createUrl = function (vi, params, url) {
    if (params.start) {
      params.wtime = params.start;
      delete params.start;
    }

    url += combineParams$6(params);
    return url;
  };

  Wistia.prototype.createLongUrl = function (vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = 'https://' + vi.channel + '.wistia.com/medias/' + vi.id;
    return this.createUrl(vi, params, url);
  };

  Wistia.prototype.createEmbedUrl = function (vi, params) {
    if (!vi.id || !(vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.EMBEDVIDEO)) {
      return undefined;
    }

    var url = 'https://fast.wistia.com/embed/iframe/' + vi.id;
    return this.createUrl(vi, params, url);
  };

  Wistia.prototype.createEmbedJsonpUrl = function (vi) {
    if (!vi.id || !(vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.EMBEDVIDEO)) {
      return undefined;
    }

    return 'https://fast.wistia.com/embed/medias/' + vi.id + '.jsonp';
  };

  base.bind(new Wistia());

  var combineParams$7 = util.combineParams;

  function Youku() {
    this.provider = 'youku';
    this.defaultFormat = 'long';
    this.formats = {
      embed: this.createEmbedUrl,
      "long": this.createLongUrl,
      flash: this.createFlashUrl,
      "static": this.createStaticUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  Youku.prototype.parseUrl = function (url) {
    var match = url.match(/(?:(?:embed|sid)\/|v_show\/id_|VideoIDS=)([a-zA-Z0-9]+)/);
    return match ? match[1] : undefined;
  };

  Youku.prototype.parseParameters = function (params) {
    if (params.VideoIDS) {
      delete params.VideoIDS;
    }

    return params;
  };

  Youku.prototype.parse = function (url, params) {
    var _this = this;

    var result = {
      mediaType: this.mediaTypes.VIDEO,
      id: _this.parseUrl(url),
      params: _this.parseParameters(params)
    };

    if (!result.id) {
      return undefined;
    }

    return result;
  };

  Youku.prototype.createUrl = function (baseUrl, vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = baseUrl + vi.id;
    url += combineParams$7(params);
    return url;
  };

  Youku.prototype.createEmbedUrl = function (vi, params) {
    return this.createUrl('http://player.youku.com/embed/', vi, params);
  };

  Youku.prototype.createLongUrl = function (vi, params) {
    return this.createUrl('http://v.youku.com/v_show/id_', vi, params);
  };

  Youku.prototype.createStaticUrl = function (vi, params) {
    return this.createUrl('http://static.youku.com/v1.0.0638/v/swf/loader.swf?VideoIDS=', vi, params);
  };

  Youku.prototype.createFlashUrl = function (vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = 'http://player.youku.com/player.php/sid/' + vi.id + '/v.swf';
    url += combineParams$7(params);
    return url;
  };

  base.bind(new Youku());

  var combineParams$8 = util.combineParams,
      getTime$5 = util.getTime;

  function YouTube() {
    this.provider = 'youtube';
    this.alternatives = ['youtu', 'ytimg'];
    this.defaultFormat = 'long';
    this.formats = {
      "short": this.createShortUrl,
      "long": this.createLongUrl,
      embed: this.createEmbedUrl,
      shortImage: this.createShortImageUrl,
      longImage: this.createLongImageUrl
    };
    this.imageQualities = {
      '0': '0',
      '1': '1',
      '2': '2',
      '3': '3',
      DEFAULT: 'default',
      HQDEFAULT: 'hqdefault',
      SDDEFAULT: 'sddefault',
      MQDEFAULT: 'mqdefault',
      MAXRESDEFAULT: 'maxresdefault'
    };
    this.defaultImageQuality = this.imageQualities.HQDEFAULT;
    this.mediaTypes = {
      VIDEO: 'video',
      PLAYLIST: 'playlist',
      SHARE: 'share',
      CHANNEL: 'channel'
    };
  }

  YouTube.prototype.parseVideoUrl = function (url) {
    var match = url.match(/(?:(?:v|vi|be|videos|embed)\/(?!videoseries)|(?:v|ci)=)([\w-]{11})/i);
    return match ? match[1] : undefined;
  };

  YouTube.prototype.parseChannelUrl = function (url) {
    // Match an opaque channel ID
    var match = url.match(/\/channel\/([\w-]+)/);

    if (match) {
      return {
        id: match[1],
        mediaType: this.mediaTypes.CHANNEL
      };
    } // Match a vanity channel name or a user name. User urls are deprecated and
    // currently redirect to the channel of that same name.


    match = url.match(/\/(?:c|user)\/([\w-]+)/);

    if (match) {
      return {
        name: match[1],
        mediaType: this.mediaTypes.CHANNEL
      };
    }
  };

  YouTube.prototype.parseParameters = function (params, result) {
    if (params.start || params.t) {
      params.start = getTime$5(params.start || params.t);
      delete params.t;
    }

    if (params.v === result.id) {
      delete params.v;
    }

    if (params.list === result.id) {
      delete params.list;
    }

    return params;
  };

  YouTube.prototype.parseMediaType = function (result) {
    if (result.params.list) {
      result.list = result.params.list;
      delete result.params.list;
    }

    if (result.id && !result.params.ci) {
      result.mediaType = this.mediaTypes.VIDEO;
    } else if (result.list) {
      delete result.id;
      result.mediaType = this.mediaTypes.PLAYLIST;
    } else if (result.params.ci) {
      delete result.params.ci;
      result.mediaType = this.mediaTypes.SHARE;
    } else {
      return undefined;
    }

    return result;
  };

  YouTube.prototype.parse = function (url, params) {
    var channelResult = this.parseChannelUrl(url);

    if (channelResult) {
      return channelResult;
    } else {
      var result = {
        params: params,
        id: this.parseVideoUrl(url)
      };
      result.params = this.parseParameters(params, result);
      result = this.parseMediaType(result);
      return result;
    }
  };

  YouTube.prototype.createShortUrl = function (vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = 'https://youtu.be/' + vi.id;

    if (params.start) {
      url += '#t=' + params.start;
    }

    return url;
  };

  YouTube.prototype.createLongUrl = function (vi, params) {
    var url = '';
    var startTime = params.start;
    delete params.start;

    if (vi.mediaType === this.mediaTypes.CHANNEL) {
      if (vi.id) {
        url += 'https://www.youtube.com/channel/' + vi.id;
      } else if (vi.name) {
        url += 'https://www.youtube.com/c/' + vi.name;
      } else {
        return undefined;
      }
    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list) {
      params.feature = 'share';
      url += 'https://www.youtube.com/playlist';
    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      params.v = vi.id;
      url += 'https://www.youtube.com/watch';
    } else if (vi.mediaType === this.mediaTypes.SHARE && vi.id) {
      params.ci = vi.id;
      url += 'https://www.youtube.com/shared';
    } else {
      return undefined;
    }

    if (vi.list) {
      params.list = vi.list;
    }

    url += combineParams$8(params);

    if (vi.mediaType !== this.mediaTypes.PLAYLIST && startTime) {
      url += '#t=' + startTime;
    }

    return url;
  };

  YouTube.prototype.createEmbedUrl = function (vi, params) {
    var url = 'https://www.youtube.com/embed';

    if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list) {
      params.listType = 'playlist';
    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      url += '/' + vi.id; //loop hack

      if (params.loop === '1') {
        params.playlist = vi.id;
      }
    } else {
      return undefined;
    }

    if (vi.list) {
      params.list = vi.list;
    }

    url += combineParams$8(params);
    return url;
  };

  YouTube.prototype.createImageUrl = function (baseUrl, vi, params) {
    if (!vi.id || vi.mediaType !== this.mediaTypes.VIDEO) {
      return undefined;
    }

    var url = baseUrl + vi.id + '/';
    var quality = params.imageQuality || this.defaultImageQuality;
    return url + quality + '.jpg';
  };

  YouTube.prototype.createShortImageUrl = function (vi, params) {
    return this.createImageUrl('https://i.ytimg.com/vi/', vi, params);
  };

  YouTube.prototype.createLongImageUrl = function (vi, params) {
    return this.createImageUrl('https://img.youtube.com/vi/', vi, params);
  };

  base.bind(new YouTube());

  var combineParams$9 = util.combineParams,
      getTime$6 = util.getTime;

  function SoundCloud() {
    this.provider = 'soundcloud';
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      TRACK: 'track',
      PLAYLIST: 'playlist',
      APITRACK: 'apitrack',
      APIPLAYLIST: 'apiplaylist'
    };
  }

  SoundCloud.prototype.parseUrl = function (url, result) {
    var match = url.match(/(?:m\.)?soundcloud\.com\/(?:([\w-]+)\/(sets\/)?)([\w-]+)/i);

    if (!match) {
      return result;
    }

    result.channel = match[1];

    if (match[1] === 'playlists' || match[2]) {
      //playlist
      result.list = match[3];
    } else {
      //track
      result.id = match[3];
    }

    return result;
  };

  SoundCloud.prototype.parseParameters = function (params) {
    if (params.t) {
      params.start = getTime$6(params.t);
      delete params.t;
    }

    return params;
  };

  SoundCloud.prototype.parseMediaType = function (result) {
    if (result.id) {
      if (result.channel === 'tracks') {
        delete result.channel;
        delete result.params.url;
        result.mediaType = this.mediaTypes.APITRACK;
      } else {
        result.mediaType = this.mediaTypes.TRACK;
      }
    }

    if (result.list) {
      if (result.channel === 'playlists') {
        delete result.channel;
        delete result.params.url;
        result.mediaType = this.mediaTypes.APIPLAYLIST;
      } else {
        result.mediaType = this.mediaTypes.PLAYLIST;
      }
    }

    return result;
  };

  SoundCloud.prototype.parse = function (url, params) {
    var result = {};
    result = this.parseUrl(url, result);
    result.params = this.parseParameters(params);
    result = this.parseMediaType(result);

    if (!result.id && !result.list) {
      return undefined;
    }

    return result;
  };

  SoundCloud.prototype.createLongUrl = function (vi, params) {
    var url = '';
    var startTime = params.start;
    delete params.start;

    if (vi.mediaType === this.mediaTypes.TRACK && vi.id && vi.channel) {
      url = 'https://soundcloud.com/' + vi.channel + '/' + vi.id;
    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.list && vi.channel) {
      url = 'https://soundcloud.com/' + vi.channel + '/sets/' + vi.list;
    } else if (vi.mediaType === this.mediaTypes.APITRACK && vi.id) {
      url = 'https://api.soundcloud.com/tracks/' + vi.id;
    } else if (vi.mediaType === this.mediaTypes.APIPLAYLIST && vi.list) {
      url = 'https://api.soundcloud.com/playlists/' + vi.list;
    } else {
      return undefined;
    }

    url += combineParams$9(params);

    if (startTime) {
      url += '#t=' + startTime;
    }

    return url;
  };

  SoundCloud.prototype.createEmbedUrl = function (vi, params) {
    var url = 'https://w.soundcloud.com/player/';
    delete params.start;

    if (vi.mediaType === this.mediaTypes.APITRACK && vi.id) {
      params.url = 'https%3A//api.soundcloud.com/tracks/' + vi.id;
    } else if (vi.mediaType === this.mediaTypes.APIPLAYLIST && vi.list) {
      params.url = 'https%3A//api.soundcloud.com/playlists/' + vi.list;
    } else {
      return undefined;
    }

    url += combineParams$9(params);
    return url;
  };

  base.bind(new SoundCloud());

  var combineParams$a = util.combineParams;

  function TeacherTube() {
    this.provider = 'teachertube';
    this.alternatives = [];
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video',
      AUDIO: 'audio',
      DOCUMENT: 'document',
      CHANNEL: 'channel',
      COLLECTION: 'collection',
      GROUP: 'group'
    };
  }

  TeacherTube.prototype.parse = function (url, params) {
    var result = {};
    result.list = this.parsePlaylist(params);
    result.params = params;
    var match = url.match(/\/(audio|video|document|user\/channel|collection|group)\/(?:[\w-]+-)?(\w+)/);

    if (!match) {
      return undefined;
    }

    result.mediaType = this.parseMediaType(match[1]);
    result.id = match[2];
    return result;
  };

  TeacherTube.prototype.parsePlaylist = function (params) {
    if (params['playlist-id']) {
      var list = params['playlist-id'];
      delete params['playlist-id'];
      return list;
    }

    return undefined;
  };

  TeacherTube.prototype.parseMediaType = function (mediaTypeMatch) {
    switch (mediaTypeMatch) {
      case 'audio':
        return this.mediaTypes.AUDIO;

      case 'video':
        return this.mediaTypes.VIDEO;

      case 'document':
        return this.mediaTypes.DOCUMENT;

      case 'user/channel':
        return this.mediaTypes.CHANNEL;

      case 'collection':
        return this.mediaTypes.COLLECTION;

      case 'group':
        return this.mediaTypes.GROUP;
    }
  };

  TeacherTube.prototype.createLongUrl = function (vi, params) {
    if (!vi.id) {
      return undefined;
    }

    var url = 'https://www.teachertube.com/';

    if (vi.list) {
      params['playlist-id'] = vi.list;
    }

    if (vi.mediaType === this.mediaTypes.CHANNEL) {
      url += 'user/channel/';
    } else {
      url += vi.mediaType + '/';
    }

    url += vi.id;
    url += combineParams$a(params);
    return url;
  };

  TeacherTube.prototype.createEmbedUrl = function (vi, params) {
    if (!vi.id) {
      return undefined;
    }

    var url = 'https://www.teachertube.com/embed/';

    if (vi.mediaType === this.mediaTypes.VIDEO || vi.mediaType === this.mediaTypes.AUDIO) {
      url += vi.mediaType + '/' + vi.id;
    } else {
      return undefined;
    }

    url += combineParams$a(params);
    return url;
  };

  base.bind(new TeacherTube());

  var combineParams$b = util.combineParams;

  function TikTok() {
    this.provider = 'tiktok';
    this.defaultFormat = 'long';
    this.formats = {
      "long": this.createLongUrl
    };
    this.mediaTypes = {
      VIDEO: 'video'
    };
  }

  TikTok.prototype.parse = function (url, params) {
    var result = {
      params: params,
      mediaType: this.mediaTypes.VIDEO
    };
    var match = url.match(/@([^/]+)\/video\/(\d{19})/);

    if (!match) {
      return;
    }

    result.channel = match[1];
    result.id = match[2];
    return result;
  };

  TikTok.prototype.createLongUrl = function (vi, params) {
    var url = '';

    if (vi.mediaType === this.mediaTypes.VIDEO && vi.id && vi.channel) {
      url += "https://www.tiktok.com/@".concat(vi.channel, "/video/").concat(vi.id);
    } else {
      return undefined;
    }

    url += combineParams$b(params);
    return url;
  };

  base.bind(new TikTok());

  var combineParams$c = util.combineParams;

  function Ted() {
    this.provider = 'ted';
    this.formats = {
      "long": this.createLongUrl,
      embed: this.createEmbedUrl
    };
    this.mediaTypes = {
      VIDEO: 'video',
      PLAYLIST: 'playlist'
    };
  }

  Ted.prototype.parseUrl = function (url, result) {
    var match = url.match(/\/(talks|playlists\/(\d+))\/([\w-]+)/);
    var channel = match ? match[1] : undefined;

    if (!channel) {
      return result;
    }

    result.channel = channel.split('/')[0];
    result.id = match[3];

    if (result.channel === 'playlists') {
      result.list = match[2];
    }

    return result;
  };

  Ted.prototype.parseMediaType = function (result) {
    if (result.id && result.channel === 'playlists') {
      delete result.channel;
      result.mediaType = this.mediaTypes.PLAYLIST;
    }

    if (result.id && result.channel === 'talks') {
      delete result.channel;
      result.mediaType = this.mediaTypes.VIDEO;
    }

    return result;
  };

  Ted.prototype.parse = function (url, params) {
    var result = {
      params: params
    };
    result = this.parseUrl(url, result);
    result = this.parseMediaType(result);

    if (!result.id) {
      return undefined;
    }

    return result;
  };

  Ted.prototype.createLongUrl = function (vi, params) {
    var url = '';

    if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      url += 'https://ted.com/talks/' + vi.id;
    } else if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.id) {
      url += 'https://ted.com/playlists/' + vi.list + '/' + vi.id;
    } else {
      return undefined;
    }

    url += combineParams$c(params);
    return url;
  };

  Ted.prototype.createEmbedUrl = function (vi, params) {
    var url = 'https://embed.ted.com/';

    if (vi.mediaType === this.mediaTypes.PLAYLIST && vi.id) {
      url += 'playlists/' + vi.list + '/' + vi.id;
    } else if (vi.mediaType === this.mediaTypes.VIDEO && vi.id) {
      url += 'talks/' + vi.id;
    } else {
      return undefined;
    }

    url += combineParams$c(params);
    return url;
  };

  base.bind(new Ted());

  var lib = base;

  return lib;

})));


/***/ }),
/* 141 */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 142 */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

module.exports = _iterableToArray;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 143 */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 144 */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 145 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BaseLayout; });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(8);
/* harmony import */ var el_base_functions_math__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(15);
/* harmony import */ var el_editor_types_event__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(87);
/* harmony import */ var el_editor_ui_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var EMPTY_POS = {
  x: 0,
  y: 0
};
var DEFAULT_POS = {
  x: Number.MAX_SAFE_INTEGER,
  y: Number.MAX_SAFE_INTEGER
};
var MOVE_CHECK_MS = 0;

var BaseLayout = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(BaseLayout, _EditorElement);

  var _super = _createSuper(BaseLayout);

  function BaseLayout() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, BaseLayout);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(BaseLayout, [{
    key: "afterRender",
    value: function afterRender() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(BaseLayout.prototype), "afterRender", this).call(this);

      this.$el.attr('data-theme', this.$editor.theme);
      this.$el.addClass(navigator.userAgent.includes('Windows') ? 'ua-window' : 'ua-default');
    }
  }, {
    key: "initialize",
    value: function initialize() {
      var _this$opt$data;

      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(BaseLayout.prototype), "initialize", this).call(this);

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__["isArray"])(this.opt.plugins)) {
        this.$editor.registerPluginList(this.opt.plugins);
      }

      this.emit('load.json', (_this$opt$data = this.opt.data) === null || _this$opt$data === void 0 ? void 0 : _this$opt$data.projects);
      this.$editor.initPlugins();

      this.__initBodyMoves();
    }
  }, {
    key: "__initBodyMoves",
    value: function __initBodyMoves() {
      this.__moves = new Set();
      this.__ends = new Set();

      this.__modifyBodyMoveSecond(MOVE_CHECK_MS);
    }
  }, {
    key: "__modifyBodyMoveSecond",
    value: function __modifyBodyMoveSecond() {
      var ms = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MOVE_CHECK_MS;
      this.$config.set("body.move.ms", ms);
      var callback = ms === 0 ? this.__loopBodyMoves.bind(this) : Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_7__["debounce"])(this.__loopBodyMoves.bind(this), this.$config.get("body.move.ms"));
      this.__funcBodyMoves = callback;
    }
  }, {
    key: "__loopBodyMoves",
    value: function __loopBodyMoves() {
      var pos = this.$config.get("pos");
      var e = this.$config.get('bodyEvent');
      var lastPos = this.$config.get("lastPos") || DEFAULT_POS;
      var isNotEqualLastPos = !(lastPos.x === pos.x && lastPos.y === pos.y);

      if (isNotEqualLastPos && this.__moves.size) {
        this.__moves.forEach(function (v) {
          var dist = Object(el_base_functions_math__WEBPACK_IMPORTED_MODULE_8__["getDist"])(pos.x, pos.y, v.xy.x, v.xy.y);

          if (Math.abs(dist) > 0.5) {
            var dx = Math.floor(pos.x - v.xy.x);
            var dy = Math.floor(pos.y - v.xy.y);
            v.func.call(v.context, dx, dy, 'move', e.pressure);
          }
        });

        this.$config.set('lastPos', pos);
      }

      requestAnimationFrame(this.__funcBodyMoves);
    }
  }, {
    key: "__removeBodyMoves",
    value: function __removeBodyMoves() {
      var pos = this.$config.get("pos");
      var e = this.$config.get("bodyEvent");

      if (pos) {
        this.__ends.forEach(function (v) {
          v.func.call(v.context, pos.x - v.xy.x, pos.y - v.xy.y, 'end', e.pressure);
        });
      }

      this.__moves.clear();

      this.__ends.clear();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE_ALL"])(el_editor_types_event__WEBPACK_IMPORTED_MODULE_9__[/* ADD_BODY_MOUSEMOVE */ "a"]),
    value: function value(func, context, xy) {
      this.__moves.add({
        func: func,
        context: context,
        xy: xy
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE_ALL"])(el_editor_types_event__WEBPACK_IMPORTED_MODULE_9__[/* ADD_BODY_MOUSEUP */ "b"]),
    value: function value(func, context, xy) {
      this.__ends.add({
        func: func,
        context: context,
        xy: xy
      });
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["POINTERMOVE"])("document"),
    value: function value(e) {
      var newPos = e.xy || EMPTY_POS;
      this.$config.set("bodyEvent", e);
      this.$config.set("pos", newPos);

      if (!this.__requestId) {
        this.__requestId = requestAnimationFrame(this.__funcBodyMoves);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["POINTEREND"])("document"),
    value: function value(e) {
      // var newPos = e.xy || EMPTY_POS;
      this.$config.set("bodyEvent", e);

      this.__removeBodyMoves();

      cancelAnimationFrame(this.__requestId);
      this.__requestId = null;
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["RESIZE"])('window') + Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["DEBOUNCE"])(100),
    value: function value() {
      this.emit('resize.window');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('refreshAll'),
    value: function value() {
      this.emit('refreshProjectList');
      this.trigger('refreshAllSelectProject');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('refreshAllSelectProject'),
    value: function value() {
      this.emit('refreshArtboard');
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changeTheme'),
    value: function value() {
      this.$el.attr('data-theme', this.$editor.theme);
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('changed.locale'),
    value: function value() {
      this.rerender();
    }
  }]);

  return BaseLayout;
}(el_editor_ui_common_EditorElement__WEBPACK_IMPORTED_MODULE_10__[/* EditorElement */ "a"]);



/***/ }),
/* 146 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return start; });
/* harmony import */ var _Dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(19);

var start = function start(UIElement, opt) {
  var $container = _Dom__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"].create(opt.container || document.body);
  var app = new UIElement(opt, opt);
  app.render($container);
  return app;
};

/***/ }),
/* 147 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var el_editor_items_Component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(51);
/* harmony import */ var el_editor_ui_menu_items_MenuItem__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(27);
/* harmony import */ var el_editor_renderer_HTMLRenderer_LayerRender__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(43);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1);
/* harmony import */ var el_editor_ui_common_EditorElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(14);
/* harmony import */ var el_editor_manager_Editor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(61);
/* harmony import */ var el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(3);
/* harmony import */ var el_editor_ui_property_BaseProperty__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(20);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(11);


function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }










/* harmony default export */ __webpack_exports__["a"] = (_objectSpread({
  EditorInstance: el_editor_manager_Editor__WEBPACK_IMPORTED_MODULE_6__[/* Editor */ "b"],
  Length: el_editor_unit_Length__WEBPACK_IMPORTED_MODULE_7__[/* Length */ "a"],
  EditorElement: el_editor_ui_common_EditorElement__WEBPACK_IMPORTED_MODULE_5__[/* EditorElement */ "a"],
  HTMLLayerRender: el_editor_renderer_HTMLRenderer_LayerRender__WEBPACK_IMPORTED_MODULE_3__[/* default */ "a"],
  Component: el_editor_items_Component__WEBPACK_IMPORTED_MODULE_1__[/* Component */ "a"],
  MenuItem: el_editor_ui_menu_items_MenuItem__WEBPACK_IMPORTED_MODULE_2__[/* default */ "a"],
  BaseProperty: el_editor_ui_property_BaseProperty__WEBPACK_IMPORTED_MODULE_8__[/* default */ "a"],
  icon: el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_9__[/* default */ "a"]
}, el_base_Event__WEBPACK_IMPORTED_MODULE_4__));

/***/ }),
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),
/* 152 */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  module.exports["default"] = module.exports, module.exports.__esModule = true;
  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 153 */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(141);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 155 */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 156 */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

var getPrototypeOf = __webpack_require__(0);

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

module.exports = _superPropBase;
module.exports["default"] = module.exports, module.exports.__esModule = true;

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),
/* 159 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(10);
/* harmony import */ var _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(1);
/* harmony import */ var el_base_Dom__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(19);
/* harmony import */ var el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(8);
/* harmony import */ var el_editor_items_Project__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(70);
/* harmony import */ var el_editor_renderer_HTMLRenderer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(48);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(14);







function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var TEMP_DIV = el_base_Dom__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].create('div');

var StyleView = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_3___default()(StyleView, _EditorElement);

  var _super = _createSuper(StyleView);

  function StyleView() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, StyleView);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(StyleView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n    <div class='style-view' style='pointer-events: none; position: absolute;display:inline-block;left:-1000px;'>\n      <div ref='$svgArea'></div>\n    </div>\n    "
      );
    }
  }, {
    key: "initialize",
    value: function initialize() {
      _babel_runtime_helpers_get__WEBPACK_IMPORTED_MODULE_2___default()(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5___default()(StyleView.prototype), "initialize", this).call(this);

      this.refs.$head = el_base_Dom__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].create(document.head);
    }
  }, {
    key: "makeStyle",
    value: function makeStyle(item) {
      return el_editor_renderer_HTMLRenderer__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].toStyle(item);
    }
  }, {
    key: "refreshStyleHead",
    value: function refreshStyleHead() {
      var _this = this;

      var project = this.$selection.currentProject || new el_editor_items_Project__WEBPACK_IMPORTED_MODULE_9__[/* Project */ "a"]();
      this.refs.$head.$$("style[data-renderer-type=\"html\"]").forEach(function ($style) {
        return $style.remove();
      }); // project setting 

      this.changeStyleHead(project); // artboard setting 

      project.layers.forEach(function (item) {
        return _this.changeStyleHead(item);
      });
    }
  }, {
    key: "changeStyleHead",
    value: function changeStyleHead(item) {
      var _this2 = this;

      var $temp = el_base_Dom__WEBPACK_IMPORTED_MODULE_7__[/* default */ "a"].create('div');
      var styleTag = this.makeStyle(item);
      $temp.html(styleTag).children().forEach(function ($item) {
        _this2.refs.$head.append($item);
      });
    }
  }, {
    key: "refreshStyleHeadOne",
    value: function refreshStyleHeadOne(item) {
      var isOnlyOne = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var list = [item];

      if (!isOnlyOne) {
        list = item.allLayers;
      }

      var selector = list.map(function (it) {
        return "style[data-renderer-type=\"html\"][data-id=\"".concat(it.id, "\"]");
      }).join(',');
      var isChanged = false;
      this.refs.$head.$$(selector).forEach(function (it) {
        if (item.isChanged(it.attr('data-timestamp'))) {
          isChanged = true;
          it.remove();
        }
      });

      if (isChanged) {
        this.changeStyleHead(item);
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["LOAD"])('$svgArea') + el_base_Event__WEBPACK_IMPORTED_MODULE_6__["DOMDIFF"],
    value: function value() {
      var project = this.$selection.currentProject || {};
      return el_editor_renderer_HTMLRenderer__WEBPACK_IMPORTED_MODULE_10__[/* default */ "a"].renderSVG(project);
    } // timeline 에서 테스트 할 때 이걸 활용할 수 있다. 
    // 움직이기 원하는 객체가 타임라인 전체라 
    // 전체를 리프레쉬 하는걸로 한다. 
    // 애니메이션이 진행되는 동안 임의의 객체는 없는 것으로 하자. 

  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('refreshStyleView', 'moveTimeline', 'playTimeline'),
    value: function value(current) {
      var isOnlyOne = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      if (current) {
        this.load();
        this.refreshStyleHeadOne(current, isOnlyOne);
      } else {
        this.refresh();
      }
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('refreshSVGArea'),
    value: function value() {
      this.load('$svgArea');
    }
    /**
     * 
     * @param {String|Object|Array<string>|Array<object>} obj  ,  id 리스트를 만들기 위한 객체, 없으면 selection에 있는 객체 전체
     */

  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_6__["SUBSCRIBE"])('refreshSelectionStyleView'),
    value: function value() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var ids = obj;

      if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isArray"])(obj)) {
        ids = obj;
      } else if (obj !== null) {
        ids = [obj];
      }

      var items = [];

      if (!ids) {
        items = this.$selection.items;
      } else if (Object(el_base_functions_func__WEBPACK_IMPORTED_MODULE_8__["isString"])(ids[0])) {
        items = this.$selection.itemsByIds(ids);
      } else {
        items = ids;
      }

      var styleTags = [];
      var removeStyleSelector = [];

      for (var i = 0, len = items.length; i < len; i++) {
        var item = items[i];
        var selector = item.allLayers.map(function (it) {
          return "style[data-renderer-type=\"html\"][data-id=\"".concat(it.id, "\"]");
        }).join(',');
        removeStyleSelector.push(selector);
        styleTags.push(this.makeStyle(item));
      }

      if (removeStyleSelector.length) {
        this.refs.$head.$$(removeStyleSelector).forEach(function (it) {
          it.remove();
        });
      }

      var $fragment = TEMP_DIV.html(styleTags.join('')).createChildrenFragment();
      this.refs.$head.append($fragment);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
      this.refreshStyleHead();
    }
  }]);

  return StyleView;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_12__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_11__[/* registElement */ "a"])({
  StyleView: StyleView
});

/***/ }),
/* 160 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export default */
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(0);
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(11);
/* harmony import */ var el_base_Dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(19);
/* harmony import */ var el_base_Event__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(1);
/* harmony import */ var el_base_registElement__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(9);
/* harmony import */ var _common_EditorElement__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(14);






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4___default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3___default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var NotificationView = /*#__PURE__*/function (_EditorElement) {
  _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2___default()(NotificationView, _EditorElement);

  var _super = _createSuper(NotificationView);

  function NotificationView() {
    _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0___default()(this, NotificationView);

    return _super.apply(this, arguments);
  }

  _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1___default()(NotificationView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='notification-view'>\n            </div>\n        "
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["TRANSITIONEND"])('$el'),
    value: function value(e) {
      el_base_Dom__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].create(e.target).remove();
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["CLICK"])('$el .item > .icon'),
    value: function value(e) {
      e.$dt.parent().remove();
    }
  }, {
    key: "getMessageTemplate",
    value: function getMessageTemplate(type, title, description) {
      var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;
      return (
        /*html*/
        "\n        <div class='item ".concat(type, "' style='transition-duration: ").concat(duration, "ms;'>\n            <div class='title'>").concat(title, "</div> \n            <div class='description'>").concat(description, "</div>\n            <span class='icon'>").concat(el_editor_icon_icon__WEBPACK_IMPORTED_MODULE_5__[/* default */ "a"].close, "</span>\n        </div>\n    ")
      );
    }
  }, {
    key: Object(el_base_Event__WEBPACK_IMPORTED_MODULE_7__["SUBSCRIBE"])('notify'),
    value: function value(type, title, description) {
      var duration = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1000;
      var $dom = el_base_Dom__WEBPACK_IMPORTED_MODULE_6__[/* default */ "a"].createByHTML(this.getMessageTemplate(type, title, description, duration));
      this.$el.prepend($dom);
      setTimeout(function ($dom) {
        $dom.css('opacity', 0);
      }, 100, $dom);
    }
  }]);

  return NotificationView;
}(_common_EditorElement__WEBPACK_IMPORTED_MODULE_9__[/* EditorElement */ "a"]);


Object(el_base_registElement__WEBPACK_IMPORTED_MODULE_8__[/* registElement */ "a"])({
  NotificationView: NotificationView
});

/***/ }),
/* 161 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/base/UIElement.js + 4 modules
var UIElement = __webpack_require__(28);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/index.js + 17 modules
var property_editor = __webpack_require__(66);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/BasePopup.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var BasePopup_BasePopup = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(BasePopup, _EditorElement);

  var _super = _createSuper(BasePopup);

  function BasePopup() {
    classCallCheck_default()(this, BasePopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(BasePopup, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='popup ".concat(this.getClassName(), "'>\n            <div class='popup-title' ref=\"$title\">\n                <label>").concat(this.getTitle(), "</label>\n                <span class=\"tools\">\n                  ").concat(this.getTools(), "\n                  <button type='button' class='close' ref='$close'>").concat(icon["a" /* default */].close, "</button>\n                </span>\n            </div>\n            <div class='popup-body'>").concat(this.getBody(), "</div>\n        </div>\n        ")
      );
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return '';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return '';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return '';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return '';
    }
  }, {
    key: Object(Event["CLICK"])('$close'),
    value: function value() {
      this.$el.hide();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$title') + Object(Event["MOVE"])('movePopupTitle') + Object(Event["END"])('endPopupTitle'),
    value: function value() {
      this.x = Length["a" /* Length */].parse(this.$el.css('left'));
      this.y = Length["a" /* Length */].parse(this.$el.css('top'));
    }
  }, {
    key: "movePopupTitle",
    value: function movePopupTitle(dx, dy) {
      var left = Length["a" /* Length */].px(this.x.value + dx);
      var top = Length["a" /* Length */].px(this.y.value + dy);
      this.$el.css({
        left: left,
        top: top,
        right: 'auto',
        bottom: 'auto'
      });
    }
  }, {
    key: "show",
    value: function show() {
      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;
      var popupPadding = 28;
      var rightPosition = 320;
      var top = this.$el.css('top');
      var left = this.$el.css('left');
      var realTop = top !== 'auto' ? Length["a" /* Length */].parse(top) : Length["a" /* Length */].px(110);
      var realLeft = left !== 'auto' ? Length["a" /* Length */].parse(left) : Length["a" /* Length */].px(document.body.clientWidth - rightPosition - popupPadding - width);
      this.$el.css({
        top: realTop,
        left: realLeft,
        'z-index': this.$editor.zIndex
      }).show("inline-block");
    }
  }, {
    key: "hide",
    value: function hide() {
      this.$el.hide();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hidePropertyPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return BasePopup;
}(EditorElement["a" /* EditorElement */]);


// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/BoxShadowPropertyPopup.js







function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function BoxShadowPropertyPopup_createSuper(Derived) { var hasNativeReflectConstruct = BoxShadowPropertyPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BoxShadowPropertyPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BoxShadowPropertyPopup_BoxShadowPropertyPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(BoxShadowPropertyPopup, _BasePopup);

  var _super = BoxShadowPropertyPopup_createSuper(BoxShadowPropertyPopup);

  function BoxShadowPropertyPopup() {
    classCallCheck_default()(this, BoxShadowPropertyPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(BoxShadowPropertyPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return 'Box Shadow Editor';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        color: 'rgba(0, 0, 0, 1)',
        inset: false,
        offsetX: Length["a" /* Length */].z(),
        offsetY: Length["a" /* Length */].z(),
        blurRadius: Length["a" /* Length */].z(),
        spreadRadius: Length["a" /* Length */].z()
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit(this.changeEvent, opt, this.state.params);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='box-shadow-property-popup' ref='$popup'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])("$popup"),
    value: function value() {
      return (
        /*html*/
        "\n      <div class=\"box\">\n        <div class=\"type\">\n          <label>Type</label>\n          <div\n            class=\"select\"\n            data-selected-value=\"".concat(this.state.inset ? "inset" : "outset", "\"\n            ref=\"$type\"\n          >\n            <button type=\"button\" data-value=\"outset\">Outset</button>\n            <button type=\"button\" data-value=\"inset\">Inset</button>\n          </div>\n        </div>\n        <div class=\"drag-board\" ref=\"$dragBoard\">\n          <div\n            class=\"pointer\"\n            ref=\"$pointer\"\n            style=\"left: ").concat(this.state.offsetX, ";top: ").concat(this.state.offsetY, "\"\n          ></div>\n        </div>        \n        <div class=\"popup-item offset-x\">\n          <object refClass=\"RangeEditor\" ref='$offsetX' label='X' key='offsetX' value=\"").concat(this.state.offsetX, "\" onchange='changeRangeEditor' />\n        </div>\n        <div class=\"popup-item offset-y\">\n          <object refClass=\"RangeEditor\" ref='$offsetY' label='Y' key='offsetY' value=\"").concat(this.state.offsetY, "\" onchange='changeRangeEditor' />        \n        </div>\n        <div class=\"popup-item blur-radius\">\n          <object refClass=\"RangeEditor\" ref='$blurRadius' label='Blur' key='blurRadius' value=\"").concat(this.state.blurRadius, "\" onchange='changeRangeEditor' />        \n        </div>\n        <div class=\"popup-item spread-radius\">\n          <object refClass=\"RangeEditor\" \n              ref='$spreadRadius' \n              label='Spread' \n              key='spreadRadius' \n              value=\"").concat(this.state.spreadRadius, "\" \n              onchange='changeRangeEditor' \n            />        \n        </div>\n        <div class='popup-item'>\n          <object refClass=\"ColorViewEditor\" \n              ref='$foreColor' \n              label=\"color\" \n              key='color' \n              value=\"").concat(this.state.color, "\"\n              onchange=\"changeRangeEditor\" />\n        </div>        \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$popup .select button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.getRef("$type").attr("data-selected-value", type);
      this.updateData({
        inset: type === "inset"
      });
    }
  }, {
    key: Object(Event["POINTERSTART"])("$popup .drag-board") + Object(Event["MOVE"])("movePointer"),
    value: function value(e) {
      this.offsetX = e.offsetX;
      this.offsetY = e.offsetY;
      var rect = this.getRef("$dragBoard").rect();
      this.boardWidth = rect.width;
      this.boardHeight = rect.height;
    }
  }, {
    key: "refreshPointer",
    value: function refreshPointer() {
      this.getRef("$pointer").css({
        left: this.state.offsetX,
        top: this.state.offsetY
      });
    }
  }, {
    key: "movePointer",
    value: function movePointer(dx, dy) {
      var realX = this.offsetX + dx;
      var realY = this.offsetY + dy;
      var halfWidth = this.boardWidth / 2;
      var halfHeight = this.boardHeight / 2;
      var x = realX - halfWidth;
      var y = realY - halfHeight;

      if (x < -halfWidth) {
        x = -halfWidth;
      } else if (x > halfWidth) {
        x = halfWidth;
      }

      if (y < -halfHeight) {
        y = -halfHeight;
      } else if (y > halfHeight) {
        y = halfHeight;
      }

      x = Math.floor(x);
      y = Math.floor(y);
      this.getRef("$offsetX").val(x);
      this.getRef("$offsetY").val(y);
      this.updateData({
        offsetX: Length["a" /* Length */].px(x),
        offsetY: Length["a" /* Length */].px(y)
      });
      this.refreshPointer();
      this.children.$offsetX.setValue(this.state.offsetX);
      this.children.$offsetY.setValue(this.state.offsetY);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));

      if (key === 'offsetX' || key === 'offsetY') {
        this.refreshPointer();
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showBoxShadowPropertyPopup"),
    value: function value(data, params) {
      this.changeEvent = data.changeEvent || "changeBoxShadowPropertyPopup";
      this.setState(_objectSpread(_objectSpread({}, data), {}, {
        params: params
      }));
      this.refresh();
      this.show(432);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideBoxShadowPropertyPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return BoxShadowPropertyPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  BoxShadowPropertyPopup: BoxShadowPropertyPopup_BoxShadowPropertyPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/TextShadowPropertyPopup.js







function TextShadowPropertyPopup_createSuper(Derived) { var hasNativeReflectConstruct = TextShadowPropertyPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextShadowPropertyPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var TextShadowPropertyPopup_TextShadowPropertyPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(TextShadowPropertyPopup, _BasePopup);

  var _super = TextShadowPropertyPopup_createSuper(TextShadowPropertyPopup);

  function TextShadowPropertyPopup() {
    classCallCheck_default()(this, TextShadowPropertyPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextShadowPropertyPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return 'Text Shadow Editor';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        color: 'rgba(0, 0, 0, 1)',
        offsetX: Length["a" /* Length */].z(),
        offsetY: Length["a" /* Length */].z(),
        blurRadius: Length["a" /* Length */].z()
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit(this.changeEvent, opt, this.params);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='text-shadow-property-popup' ref='$popup'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])("$popup"),
    value: function value() {
      return (
        /*html*/
        "\n      <div class='box'>\n        <div class=\"drag-board\" ref=\"$dragBoard\">\n          <div\n            class=\"pointer\"\n            ref=\"$pointer\"\n            style=\"left: ".concat(this.state.offsetX, ";top: ").concat(this.state.offsetY, "\"\n          ></div>\n        </div>\n        <div class='popup-item'>\n          <object refClass=\"RangeEditor\"  ref='$offsetX' label='Offset X' key='offsetX' min=\"-100\" max='100' value='").concat(this.state.offsetX, "' onchange='changeShadow' />\n        </div>\n        <div class='popup-item'>\n          <object refClass=\"RangeEditor\"  ref='$offsetY' label=\"Offset Y\" key='offsetY' min=\"-100\" max='100' value='").concat(this.state.offsetY, "' onchange='changeShadow' />\n        </div>\n        <div class='popup-item'>\n          <object refClass=\"RangeEditor\"  ref='$blurRadius' label=\"Blur Radius\" key='blurRadius' value='").concat(this.state.blurRadius, "' onchange='changeShadow' />\n        </div>\n        <div class='popup-item'>\n          <object refClass=\"ColorViewEditor\" \n              ref='$foreColor' \n              label=\"color\" \n              key='color' \n              value=\"").concat(this.state.color, "\"\n              onchange=\"changeShadow\" />\n        </div>        \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeShadow'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));

      if (key === 'offsetX' || key === 'offsetY') {
        this.refreshPointer();
      }
    }
  }, {
    key: Object(Event["POINTERSTART"])("$popup .drag-board") + Object(Event["MOVE"])("movePointer"),
    value: function value(e) {
      this.offsetX = e.offsetX;
      this.offsetY = e.offsetY;
      var rect = this.getRef("$dragBoard").rect();
      this.boardWidth = rect.width;
      this.boardHeight = rect.height;
    }
  }, {
    key: "refreshPointer",
    value: function refreshPointer() {
      this.getRef("$pointer").css({
        left: this.state.offsetX,
        top: this.state.offsetY
      });
    }
  }, {
    key: "movePointer",
    value: function movePointer(dx, dy) {
      var realX = this.offsetX + dx;
      var realY = this.offsetY + dy;
      var halfWidth = this.boardWidth / 2;
      var halfHeight = this.boardHeight / 2;
      var x = realX - halfWidth;
      var y = realY - halfHeight;

      if (x < -halfWidth) {
        x = -halfWidth;
      } else if (x > halfWidth) {
        x = halfWidth;
      }

      if (y < -halfHeight) {
        y = -halfHeight;
      } else if (y > halfHeight) {
        y = halfHeight;
      }

      x = Math.floor(x);
      y = Math.floor(y);
      this.updateData({
        offsetX: Length["a" /* Length */].px(x),
        offsetY: Length["a" /* Length */].px(y)
      });
      this.children.$offsetX.setValue(this.state.offsetX);
      this.children.$offsetY.setValue(this.state.offsetY);
      this.refreshPointer();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showTextShadowPropertyPopup"),
    value: function value(data, params) {
      this.changeEvent = data.changeEvent || "changeTextShadowPropertyPopup";
      this.params = params;
      this.setState(data, false);
      this.refresh();
      this.show(432);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideTextShadowPropertyPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return TextShadowPropertyPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  TextShadowPropertyPopup: TextShadowPropertyPopup_TextShadowPropertyPopup
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CubicBezierEditor.js
var CubicBezierEditor = __webpack_require__(92);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/RangeEditor.js
var RangeEditor = __webpack_require__(37);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/IterationCountEditor.js
var IterationCountEditor = __webpack_require__(116);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SelectEditor.js
var SelectEditor = __webpack_require__(39);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/AnimationPropertyPopup.js







function AnimationPropertyPopup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function AnimationPropertyPopup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { AnimationPropertyPopup_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { AnimationPropertyPopup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function AnimationPropertyPopup_createSuper(Derived) { var hasNativeReflectConstruct = AnimationPropertyPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AnimationPropertyPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var AnimationPropertyPopup_AnimationPropertyPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(AnimationPropertyPopup, _BasePopup);

  var _super = AnimationPropertyPopup_createSuper(AnimationPropertyPopup);

  function AnimationPropertyPopup() {
    classCallCheck_default()(this, AnimationPropertyPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(AnimationPropertyPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('animation.property.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        changeEvent: '',
        instance: {},
        data: {}
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.state.data = AnimationPropertyPopup_objectSpread(AnimationPropertyPopup_objectSpread({}, this.state.data), opt);

      if (this.state.instance) {
        this.state.instance.trigger(this.state.changeEvent, this.state.data);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='animation-property-popup' ref='$popup'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$popup'),
    value: function value() {
      return (
        /*html*/
        "\n      <div class=\"box\">\n        ".concat(this.templateForKeyframe(), "\n        ").concat(this.templateForTimingFunction(), "\n        ").concat(this.templateForIterationCount(), "\n        ").concat(this.templateForDelay(), "\n        ").concat(this.templateForDuration(), "\n        ").concat(this.templateForDirection(), "\n        ").concat(this.templateForFillMode(), "\n        ").concat(this.templateForPlayState(), "\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForTimingFunction",
    value: function templateForTimingFunction() {
      return (
        /*html*/
        "\n    <div class='timing-function'>\n      <label>".concat(this.$i18n('animation.property.popup.timing.function'), "</label>\n      <object refClass=\"CubicBezierEditor\" ref='$cubicBezierEditor' key=\"timingFunction\" value=\"").concat(this.state.data.timingFunction || 'linear', "\" onChange='changeCubicBezier' />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForKeyframe",
    value: function templateForKeyframe() {
      return (
        /*html*/
        "\n      <div class='name'>\n        <label>".concat(this.$i18n('animation.property.popup.keyframe'), "</label>\n        <div class='input grid-1'>\n          <select ref='$name'></select>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$name'),
    value: function value() {
      var _this = this;

      var current = this.$selection.currentProject;
      var names = [];

      if (current && current.keyframes) {
        names = current.keyframes.map(function (it) {
          return {
            key: it.name,
            value: it.name
          };
        });
      }

      names.unshift({
        key: 'Select a keyframe',
        value: ''
      });
      return names.map(function (it) {
        var selected = it.value === _this.name ? 'selected' : '';

        var label = _this.$i18n(it.key);

        return "<option value='".concat(it.value, "' ").concat(selected, ">").concat(label, "</option>");
      });
    }
  }, {
    key: Object(Event["CHANGE"])('$name'),
    value: function value() {
      this.updateData({
        name: this.refs.$name.value
      });
    }
  }, {
    key: "templateForDirection",
    value: function templateForDirection() {
      var _this2 = this;

      var options = 'normal,reverse,alternate,alternate-reverse'.split(',').map(function (it) {
        return "".concat(it, ":").concat(_this2.$i18n(it));
      }).join(',');
      return (
        /*html*/
        "\n      <div class='direction'>\n        <object refClass=\"SelectEditor\"  \n            label='".concat(this.$i18n('animation.property.popup.direction'), "'\n            ref='$direction' \n            key='direction' \n            value=\"").concat(this.state.data.direction, "\"\n            options='").concat(options, "'\n            onChange='changeSelect'\n        /> \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "templateForPlayState",
    value: function templateForPlayState() {
      return (
        /*html*/
        "\n    <div class='play-state'>\n      <object refClass=\"SelectEditor\"  \n          label='".concat(this.$i18n('animation.property.popup.play.state'), "'\n          ref='$playState' \n          key='playState' \n          value=\"").concat(this.state.data.playState, "\"\n          options='").concat(['paused', 'running'], "'\n          onChange='changeSelect'\n      /> \n    </div>\n  ")
      );
    }
  }, {
    key: "templateForFillMode",
    value: function templateForFillMode() {
      var _this3 = this;

      var options = 'none,forwards,backwards,both'.split(',').map(function (it) {
        return "".concat(it, ":").concat(_this3.$i18n(it));
      }).join(',');
      return (
        /*html*/
        "\n    <div class='fill-mode'>\n      <object refClass=\"SelectEditor\"  \n          label='".concat(this.$i18n('animation.property.popup.fill.mode'), "'\n          ref='$fillMode' \n          key='fillMode' \n          value=\"").concat(this.state.data.fillMode, "\"\n          options='").concat(options, "'\n          onChange='changeSelect'\n      /> \n    </div>\n  ")
      );
    }
  }, {
    key: "templateForDelay",
    value: function templateForDelay() {
      return (
        /*html*/
        "\n    <div class='delay'>\n      <object refClass=\"RangeEditor\"  \n        ref='$delay' \n        label='".concat(this.$i18n('animation.property.popup.delay'), "' \n        calc='false' \n        key='delay' \n        value='").concat(this.state.data.delay, "' \n        units='s,ms' \n        onChange=\"changeRangeEditor\" />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForDuration",
    value: function templateForDuration() {
      return (
        /*html*/
        "\n    <div class='duration'>\n      <object refClass=\"RangeEditor\"  \n        ref='$duration' \n        label='".concat(this.$i18n('animation.property.popup.duration'), "'  \n        key='duration' \n        value='").concat(this.state.data.duration, "' \n        units='s,ms' \n        onChange=\"changeRangeEditor\" />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForIterationCount",
    value: function templateForIterationCount() {
      return (
        /*html*/
        "\n      <div class='iteration-count'>\n        <object refClass=\"IterationCountEditor\"\n          ref='$iterationCount' \n          label='".concat(this.$i18n('animation.property.popup.iteration'), "' \n          key='iterationCount' \n          value='").concat(this.state.iterationCount || '0', "' \n          units='normal,infinite' \n          onChange=\"changeRangeEditor\" \n        />\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value2) {
      if (key === 'iterationCount') {
        if (_value2.unit === 'normal') {
          _value2 = Length["a" /* Length */].number(_value2.value);
        } else {
          _value2 = Length["a" /* Length */].string(_value2.unit);
        }
      }

      this.updateData(defineProperty_default()({}, key, _value2));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeCubicBezier'),
    value: function value(key, _value3) {
      this.updateData(defineProperty_default()({}, key, _value3));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showAnimationPropertyPopup"),
    value: function value(data) {
      this.setState(data);
      this.show(250);
      this.children.$cubicBezierEditor.trigger('showCubicBezierEditor', data.data.timingFunction);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideAnimationPropertyPopup"),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return AnimationPropertyPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  AnimationPropertyPopup: AnimationPropertyPopup_AnimationPropertyPopup
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/OffsetEditor.js
var OffsetEditor = __webpack_require__(117);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/KeyframePopup.js






function KeyframePopup_createSuper(Derived) { var hasNativeReflectConstruct = KeyframePopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyframePopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var KeyframePopup_KeyframePopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(KeyframePopup, _BasePopup);

  var _super = KeyframePopup_createSuper(KeyframePopup);

  function KeyframePopup() {
    classCallCheck_default()(this, KeyframePopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyframePopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('keyframe.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        name: 'none',
        offsets: []
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit("changeKeyframePopup", this.state);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n    <div class='keyframe-popup' ref='$popup'>\n      <div class=\"box\">\n        ".concat(this.templateForName(), "\n        ").concat(this.templateForOffset(), "\n      </div>\n    </div>")
      );
    }
  }, {
    key: "templateForOffset",
    value: function templateForOffset() {
      return (
        /*html*/
        "\n      <div>\n        <object refClass=\"OffsetEditor\" ref='$offsetEditor' />\n      </div>\n    "
      );
    }
  }, {
    key: "templateForName",
    value: function templateForName() {
      return (
        /*html*/
        "\n      <div class='name'>\n        <label>Name</label>\n        <div class='input grid-1'>\n          <input type='text' value='".concat(this.state.name, "' ref='$name'/>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["INPUT"])('$name'),
    value: function value(e) {
      if (this.refs.$name.value.match(/^[a-zA-Z0-9\b]+$/)) {
        this.updateData({
          name: this.refs.$name.value
        });
      } else {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }
  }, {
    key: "getOffsetData",
    value: function getOffsetData() {
      var offsets = this.state.offsets.map(function (it) {
        return it;
      });
      return {
        offsets: offsets
      };
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refs.$name.val(this.state.name);
      this.emit('showOffsetEditor', this.getOffsetData());
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeOffsetEditor'),
    value: function value(data) {
      this.updateData(data);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showKeyframePopup"),
    value: function value(data) {
      this.setState(data);
      this.refresh();
      this.show(240);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideKeyframePopup"),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return KeyframePopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  KeyframePopup: KeyframePopup_KeyframePopup
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/ClipPath.js
var ClipPath = __webpack_require__(40);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/clip-path/CircleEditor.js
var CircleEditor = __webpack_require__(127);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/DirectionEditor.js
var DirectionEditor = __webpack_require__(132);

// EXTERNAL MODULE: ./src/el/editor/unit/DirectionLength.js
var DirectionLength = __webpack_require__(64);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/clip-path/InsetEditor.js







function InsetEditor_createSuper(Derived) { var hasNativeReflectConstruct = InsetEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function InsetEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var InsetEditor_InsetEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(InsetEditor, _EditorElement);

  var _super = InsetEditor_createSuper(InsetEditor);

  function InsetEditor() {
    classCallCheck_default()(this, InsetEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(InsetEditor, [{
    key: "parseValue",
    value: function parseValue() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

      var _str$split = str.split('round'),
          _str$split2 = slicedToArray_default()(_str$split, 2),
          inset = _str$split2[0],
          round = _str$split2[1];

      var _DirectionLength$pars = DirectionLength["a" /* DirectionLength */].parse(inset),
          _DirectionLength$pars2 = slicedToArray_default()(_DirectionLength$pars, 5),
          _count = _DirectionLength$pars2[0],
          top = _DirectionLength$pars2[1],
          right = _DirectionLength$pars2[2],
          bottom = _DirectionLength$pars2[3],
          left = _DirectionLength$pars2[4];

      if (round) {
        var _DirectionLength$pars3 = DirectionLength["a" /* DirectionLength */].parse(round),
            _DirectionLength$pars4 = slicedToArray_default()(_DirectionLength$pars3, 5),
            _roundCount = _DirectionLength$pars4[0],
            topRadius = _DirectionLength$pars4[1],
            rightRadius = _DirectionLength$pars4[2],
            bottomRadius = _DirectionLength$pars4[3],
            leftRadius = _DirectionLength$pars4[4];
      }

      return {
        isAll: _count === 1,
        top: top,
        right: right,
        bottom: bottom,
        left: left,
        round: round,
        isAllRadius: _roundCount === 1,
        topRadius: topRadius,
        rightRadius: rightRadius,
        bottomRadius: bottomRadius,
        leftRadius: leftRadius
      };
    }
  }, {
    key: "initState",
    value: function initState() {
      return this.parseValue(this.props.value);
    }
  }, {
    key: "template",
    value: function template() {
      var _this$state = this.state,
          top = _this$state.top,
          right = _this$state.right,
          bottom = _this$state.bottom,
          left = _this$state.left,
          round = _this$state.round;
      var maxWidth = 220;
      var maxHeight = 220;
      var topX = Length["a" /* Length */].percent(Math.abs((left.value - (100 - right.value)) / 2)).toPx(maxWidth);
      var topY = top.toPx(maxHeight);
      var bottomX = topX.clone();
      var bottomY = Length["a" /* Length */].percent(100 - bottom.value).toPx(maxHeight);
      var rightX = Length["a" /* Length */].percent(100 - right.value).toPx(maxWidth);
      var rightY = Length["a" /* Length */].percent(Math.abs((top.value - (100 - bottom.value)) / 2)).toPx(maxHeight);
      var leftX = left.toPx(maxWidth);
      var leftY = Length["a" /* Length */].percent(Math.abs((top.value - (100 - bottom.value)) / 2)).toPx(maxHeight);
      var roundCheckStatus = round ? 'checked' : '';
      return (
        /*html*/
        "\n        <div class='clip-path-editor inset-editor'>\n            <div class='drag-area' ref='$area'>\n                <div class='drag-pointer' data-type='top' ref='$top' style='left: ".concat(topX, ";top: ").concat(topY, ";'></div>\n                <div class='drag-pointer' data-type='right' ref='$right' style='left: ").concat(rightX, ";top: ").concat(rightY, ";'></div>\n                <div class='drag-pointer' data-type='bottom' ref='$bottom' style='left: ").concat(bottomX, ";top: ").concat(bottomY, ";'></div>\n                <div class='drag-pointer' data-type='left' ref='$left' style='left: ").concat(leftX, ";top: ").concat(leftY, ";'></div>\n                <div class='clip-area inset' ref='$clipAreaView' style='pointer-events: none;'></div>\n                <div class='clip-area-handle' ref='$clipArea' style='left: ").concat(leftX, ";top: ").concat(topY, ";width: ").concat(Length["a" /* Length */].px(rightX.value - left.value), ";height: ").concat(Length["a" /* Length */].px(bottomY.value - topY.value), ";'></div>\n            </div>\n            <div class='round-area'>\n                <label><input type=\"checkbox\" ").concat(roundCheckStatus, " ref='$hasRound' /> Round </label>\n                <div ref='$round'></div>\n            </div>\n        </div>\n    ")
      );
    }
  }, {
    key: Object(Event["BIND"])('$clipAreaView'),
    value: function value() {
      return {
        style: {
          'clip-path': "".concat(this.props.key, "(").concat(this.toClipPathValueString(), ")")
        }
      };
    }
  }, {
    key: Object(Event["CLICK"])('$hasRound'),
    value: function value(e) {
      this.updateData({
        round: this.refs.$hasRound.checked()
      });
      this.bindData('$clipAreaView');
    }
  }, {
    key: Object(Event["LOAD"])('$round'),
    value: function value() {
      var _this$state2 = this.state,
          topRadius = _this$state2.topRadius,
          rightRadius = _this$state2.rightRadius,
          bottomRadius = _this$state2.bottomRadius,
          leftRadius = _this$state2.leftRadius;
      var value = [topRadius, rightRadius, bottomRadius, leftRadius].join(' ');
      return (
        /*html*/
        "<object refClass=\"DirectionEditor\" ref='$borderRadius' value='".concat(value, "' onchange='changeBorderRadius' />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBorderRadius'),
    value: function value(_ref) {
      var _ref2 = slicedToArray_default()(_ref, 5),
          _count = _ref2[0],
          topRadius = _ref2[1],
          rightRadius = _ref2[2],
          bottomRadius = _ref2[3],
          leftRadius = _ref2[4];

      this.updateData({
        isAllRadius: _count === 1,
        topRadius: topRadius,
        rightRadius: rightRadius,
        bottomRadius: bottomRadius,
        leftRadius: leftRadius
      });
      this.bindData('$clipAreaView');
    }
  }, {
    key: "refreshPointer",
    value: function refreshPointer() {
      var _this$state3 = this.state,
          top = _this$state3.top,
          right = _this$state3.right,
          bottom = _this$state3.bottom,
          left = _this$state3.left;
      var maxWidth = 220;
      var maxHeight = 220;
      var halfWidth = Math.abs((left.value + (100 - right.value)) / 2);
      var halfHeight = Math.abs((top.value + (100 - bottom.value)) / 2);
      var topX = Length["a" /* Length */].percent(halfWidth).toPx(maxWidth);
      var topY = top.toPx(maxHeight);
      var bottomX = Length["a" /* Length */].percent(halfWidth).toPx(maxWidth);
      var bottomY = Length["a" /* Length */].percent(100 - bottom.value).toPx(maxHeight);
      var rightX = Length["a" /* Length */].percent(100 - right.value).toPx(maxWidth);
      var rightY = Length["a" /* Length */].percent(halfHeight).toPx(maxHeight);
      var leftX = left.toPx(maxWidth);
      var leftY = Length["a" /* Length */].percent(halfHeight).toPx(maxHeight);
      this.refs.$top.css({
        left: topX,
        top: topY
      });
      this.refs.$right.css({
        left: rightX,
        top: rightY
      });
      this.refs.$bottom.css({
        left: bottomX,
        top: bottomY
      });
      this.refs.$left.css({
        left: leftX,
        top: leftY
      });
      this.refs.$clipArea.css({
        left: leftX,
        top: topY,
        width: Length["a" /* Length */].px(rightX.value - leftX.value),
        height: Length["a" /* Length */].px(bottomY.value - topY.value)
      });
      this.bindData('$clipAreaView');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$area .clip-area-handle') + Object(Event["MOVE"])('moveClipArea'),
    value: function value(e) {
      this.type = e.$dt.attr('data-type');
      this.$target = e.$dt;
      this.areaRect = this.refs.$area.rect();
      this.startXY = e.xy;
      this.clipRect = {
        left: Length["a" /* Length */].parse(this.$target.css('left')),
        top: Length["a" /* Length */].parse(this.$target.css('top')),
        width: Length["a" /* Length */].parse(this.$target.css('width')),
        height: Length["a" /* Length */].parse(this.$target.css('height'))
      };
    }
  }, {
    key: "moveClipArea",
    value: function moveClipArea(dx, dy) {
      var clipWidth = this.clipRect.width.value;
      var clipHeight = this.clipRect.height.value;
      var x = this.clipRect.left.value + dx;
      var y = this.clipRect.top.value + dy;

      if (0 > x) {
        x = 0;
      } else if (this.areaRect.width < x + clipWidth) {
        x = this.areaRect.width - clipWidth;
      }

      if (0 > y) {
        y = 0;
      } else if (this.areaRect.height < y + clipHeight) {
        y = this.areaRect.height - clipHeight;
      }

      var left = Length["a" /* Length */].px(x);
      var top = Length["a" /* Length */].px(y);
      this.updateData({
        top: top.toPercent(this.areaRect.height).round(100),
        bottom: Length["a" /* Length */].px(this.areaRect.height - (y + clipHeight)).toPercent(this.areaRect.height).round(100),
        right: Length["a" /* Length */].px(this.areaRect.width - (x + clipWidth)).toPercent(this.areaRect.width).round(100),
        left: left.toPercent(this.areaRect.width).round(100)
      });
      this.refreshPointer();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$area .drag-pointer') + Object(Event["MOVE"])(),
    value: function value(e) {
      this.type = e.$dt.attr('data-type');
      this.$target = e.$dt;
      this.areaRect = this.refs.$area.rect();
      this.startXY = e.xy;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      if (this.areaRect.x > x) {
        x = this.areaRect.x;
      } else if (this.areaRect.right < x) {
        x = this.areaRect.right;
      }

      if (this.areaRect.y > y) {
        y = this.areaRect.y;
      } else if (this.areaRect.bottom < y) {
        y = this.areaRect.bottom;
      }

      var left = Length["a" /* Length */].px(x - this.areaRect.x);
      var top = Length["a" /* Length */].px(y - this.areaRect.y);

      if (this.type === 'top') {
        this.updateData({
          top: top.toPercent(this.areaRect.height).round(100)
        });
      } else if (this.type === 'bottom') {
        this.updateData({
          bottom: Length["a" /* Length */].px(this.areaRect.height - top.value).toPercent(this.areaRect.height).round(100)
        });
      } else if (this.type === 'right') {
        this.updateData({
          right: Length["a" /* Length */].px(this.areaRect.width - left.value).toPercent(this.areaRect.width).round(100)
        });
      } else if (this.type === 'left') {
        this.updateData({
          left: left.toPercent(this.areaRect.width).round(100)
        });
      }

      this.refreshPointer();
    }
  }, {
    key: "toClipPathValueString",
    value: function toClipPathValueString() {
      var _this$state4 = this.state,
          top = _this$state4.top,
          right = _this$state4.right,
          left = _this$state4.left,
          bottom = _this$state4.bottom,
          round = _this$state4.round,
          topRadius = _this$state4.topRadius,
          leftRadius = _this$state4.leftRadius,
          bottomRadius = _this$state4.bottomRadius,
          rightRadius = _this$state4.rightRadius;
      var position = [top, right, bottom, left].join(' ');
      var radius = [topRadius, rightRadius, bottomRadius, leftRadius].join(' ');
      var results = "".concat(position, " ").concat(round && radius.trim() ? "round ".concat(radius) : '');
      return results;
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }]);

  return InsetEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  InsetEditor: InsetEditor_InsetEditor
});
// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/clip-path/PolygonEditor.js








function PolygonEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function PolygonEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PolygonEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PolygonEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PolygonEditor_createSuper(Derived) { var hasNativeReflectConstruct = PolygonEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PolygonEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var PolygonEditor_PolygonEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PolygonEditor, _EditorElement);

  var _super = PolygonEditor_createSuper(PolygonEditor);

  function PolygonEditor() {
    classCallCheck_default()(this, PolygonEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(PolygonEditor, [{
    key: "parseValue",
    value: function parseValue() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var maxWidth = 220;
      var maxHeight = 220;
      return str.split(',').filter(function (it) {
        return it.trim();
      }).map(function (it) {
        var _it$trim$split = it.trim().split(' '),
            _it$trim$split2 = slicedToArray_default()(_it$trim$split, 2),
            x = _it$trim$split2[0],
            y = _it$trim$split2[1];

        return {
          x: Length["a" /* Length */].parse(x).toPx(maxWidth),
          y: Length["a" /* Length */].parse(y).toPx(maxHeight)
        };
      });
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        value: this.parseValue(this.props.value)
      };
    }
  }, {
    key: "template",
    value: function template() {
      return "\n        <div class='clip-path-editor polygon-editor'>\n            <div class='drag-area' ref='$area'>\n                <div class='pointer-list' ref='$list'></div>\n                <div class='clip-area polygon' ref='$clipArea'></div>            \n            </div>\n            <div class='pointer-input' ref='$inputList'></div>\n        </div>\n    ";
    }
  }, {
    key: Object(Event["LOAD"])('$inputList'),
    value: function value() {
      return this.state.value.map(function (it, index) {
        return (
          /*html*/
          "\n            <div class='pointer-item' data-index=\"".concat(index, "\">\n                <div class='input-item'>\n                    <label>X</label><input type='number' class='x' value=\"").concat(it.x.value.toString(), "\" /><span>%</span>\n                </div>\n                <div class='input-item'>\n                    <label>Y</label><input type='number' class='y' value=\"").concat(it.y.value.toString(), "\" /><span>%</span>\n                </div>\n                <div class='tools'>\n                    <button type=\"button\" class='copy' data-index=\"").concat(index, "\">").concat(icon["a" /* default */].copy, "</button>\n                    <button type=\"button\" class='remove' data-index=\"").concat(index, "\">").concat(icon["a" /* default */].remove2, "</button>\n                </div>\n            </div>\n            ")
        );
      });
    }
  }, {
    key: Object(Event["CLICK"])('$area') + Event["PREVENT"],
    value: function value(e) {
      if (Dom["a" /* default */].create(e.target).is(this.refs.$area)) {
        this.areaRect = this.refs.$area.rect();
        var _e$xy = e.xy,
            x = _e$xy.x,
            y = _e$xy.y;
        this.appendValue({
          x: Length["a" /* Length */].px(x - this.areaRect.left),
          y: Length["a" /* Length */].px(y - this.areaRect.top)
        });
        this.refresh();
      }
    }
  }, {
    key: Object(Event["CLICK"])('$inputList .pointer-item .remove'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.removeValue(index);
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$inputList .pointer-item .copy'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.copyValue(index);
      this.refresh();
    }
  }, {
    key: Object(Event["BIND"])('$clipArea'),
    value: function value() {
      return {
        style: {
          'clip-path': "polygon(".concat(this.toClipPathValueString(), ")")
        }
      };
    }
  }, {
    key: Object(Event["LOAD"])('$list'),
    value: function value() {
      var _this = this;

      return this.state.value.map(function (it, index) {
        var className = [index === 0 ? 'first' : '', index === _this.state.value.length - 1 ? 'last' : ''].filter(function (it) {
          return it;
        }).join(' ');
        return "<div class='drag-pointer ".concat(className, "' data-index=\"").concat(index.toString(), "\" style='left: ").concat(it.x, ";top: ").concat(it.y, ";'></div>");
      });
    }
  }, {
    key: Object(Event["CLICK"])('$area .drag-pointer') + Event["ALT"] + Event["PREVENT"],
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.removeValue(index);
      this.refresh();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$area .drag-pointer') + Object(Event["MOVE"])(),
    value: function value(e) {
      this.selectedIndex = +e.$dt.attr('data-index');
      this.$target = e.$dt;
      this.areaRect = this.refs.$area.rect();
      this.startXY = e.xy;
      this.$value = this.state.value[this.selectedIndex];
      var $inputList = this.refs.$inputList;
      this.$x = $inputList.$(".pointer-item[data-index=\"".concat(this.selectedIndex, "\"] input.x"));
      this.$y = $inputList.$(".pointer-item[data-index=\"".concat(this.selectedIndex, "\"] input.y"));
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      if (this.areaRect.x > x) {
        x = this.areaRect.x;
      } else if (this.areaRect.right < x) {
        x = this.areaRect.right;
      }

      if (this.areaRect.y > y) {
        y = this.areaRect.y;
      } else if (this.areaRect.bottom < y) {
        y = this.areaRect.bottom;
      }

      var left = Length["a" /* Length */].px(x - this.areaRect.x);
      var top = Length["a" /* Length */].px(y - this.areaRect.y);
      this.$target.css({
        left: left,
        top: top
      });
      this.updateValue(this.selectedIndex, {
        x: left,
        y: top
      });
      var maxWidth = 220;
      var maxHeight = 220;
      this.$x.val(left.toPercent(maxWidth).round(10).value);
      this.$y.val(top.toPercent(maxHeight).round(10).value);
      this.bindData('$clipArea');
    }
  }, {
    key: "toClipPathValueString",
    value: function toClipPathValueString() {
      var maxWidth = 220;
      var maxHeight = 220;
      return this.state.value.map(function (it) {
        return "".concat(it.x.toPercent(maxWidth).round(10), " ").concat(it.y.toPercent(maxHeight).round(10));
      }).join(',');
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data, false);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: "appendValue",
    value: function appendValue(data) {
      this.state.value.push(data);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: "removeValue",
    value: function removeValue(index) {
      this.state.value.splice(index, 1);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: "copyValue",
    value: function copyValue(index) {
      var _this$state$value$ind = this.state.value[index],
          x = _this$state$value$ind.x,
          y = _this$state$value$ind.y;
      this.state.value.splice(index + 1, 0, {
        x: Length["a" /* Length */].px(x.value + 10),
        y: Length["a" /* Length */].px(y.value + 10)
      });
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: "updateValue",
    value: function updateValue(index, data) {
      this.state.value[index] = PolygonEditor_objectSpread(PolygonEditor_objectSpread({}, this.state.value[index]), data);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }]);

  return PolygonEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PolygonEditor: PolygonEditor_PolygonEditor
});
// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/clip-path/EllipseEditor.js








function EllipseEditor_createSuper(Derived) { var hasNativeReflectConstruct = EllipseEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function EllipseEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var EllipseEditor_EllipseEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(EllipseEditor, _EditorElement);

  var _super = EllipseEditor_createSuper(EllipseEditor);

  function EllipseEditor() {
    classCallCheck_default()(this, EllipseEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(EllipseEditor, [{
    key: "parseValue",
    value: function parseValue() {
      var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '50% 50%';
      var radius = "50% 50%",
          position = '';
      str = str || '50%';

      if (str.includes('at')) {
        var _str$split$map = str.split('at').map(function (it) {
          return it.trim();
        });

        var _str$split$map2 = slicedToArray_default()(_str$split$map, 2);

        radius = _str$split$map2[0];
        position = _str$split$map2[1];
      } else {
        position = str.trim();
      }

      var _position$split = position.split(' '),
          _position$split2 = slicedToArray_default()(_position$split, 2),
          x = _position$split2[0],
          y = _position$split2[1];

      if (Object(func["isUndefined"])(y)) {
        y = x;
      }

      x = Length["a" /* Length */].parse(x);
      y = Length["a" /* Length */].parse(y);

      var _radius$split = radius.split(' '),
          _radius$split2 = slicedToArray_default()(_radius$split, 2),
          radiusX = _radius$split2[0],
          radiusY = _radius$split2[1];

      if (Object(func["isUndefined"])(radiusY)) {
        radiusY = radiusX;
      }

      radiusX = Length["a" /* Length */].parse(radiusX);
      radiusY = Length["a" /* Length */].parse(radiusY);
      return {
        radiusX: radiusX,
        radiusY: radiusY,
        x: x,
        y: y
      };
    }
  }, {
    key: "initState",
    value: function initState() {
      return this.parseValue(this.props.value);
    }
  }, {
    key: "template",
    value: function template() {
      return "\n        <div class='clip-path-editor circle-editor'>\n            <div>\n                <object refClass=\"RangeEditor\"  \n                    ref='$rangeX' \n                    label='Radius X' \n                    key='radiusX' \n                    value='".concat(this.state.radiusX, "' \n                    min=\"0\" \n                    max=\"100\" \n                    step=\"0.1\" \n                    units=\"%\" \n                    onchange='changeRangeEditor' \n                />\n            </div>\n            <div>\n                <object refClass=\"RangeEditor\"  \n                    ref='$rangeY' \n                    label='Radius Y' \n                    key='radiusY' \n                    value='").concat(this.state.radiusY, "' \n                    min=\"0\" \n                    max=\"100\" \n                    step=\"0.1\" \n                    units=\"%\" \n                    onchange='changeRangeEditor' \n                />\n            </div>            \n            <div class='drag-area' ref='$area'>\n                <div class='drag-pointer' ref='$pointer' style='left: ").concat(this.state.x, ";top: ").concat(this.state.y, ";'></div>\n                <div class='clip-area circle' ref='$clipArea'></div>\n            </div>\n        </div>\n    ");
    }
  }, {
    key: Object(Event["BIND"])('$clipArea'),
    value: function value() {
      return {
        style: {
          'clip-path': "".concat(this.props.key, "(").concat(this.toClipPathValueString(), ")")
        }
      };
    }
  }, {
    key: Object(Event["POINTERSTART"])('$area') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.areaRect = this.refs.$area.rect();
      this.startXY = e.xy;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      var x = this.startXY.x + dx;
      var y = this.startXY.y + dy;

      if (this.areaRect.x > x) {
        x = this.areaRect.x;
      } else if (this.areaRect.right < x) {
        x = this.areaRect.right;
      }

      if (this.areaRect.y > y) {
        y = this.areaRect.y;
      } else if (this.areaRect.bottom < y) {
        y = this.areaRect.bottom;
      }

      var left = Length["a" /* Length */].percent((x - this.areaRect.x) / this.areaRect.width * 100).round(1);
      var top = Length["a" /* Length */].percent((y - this.areaRect.y) / this.areaRect.height * 100).round(1);
      this.refs.$pointer.css({
        left: left,
        top: top
      });
      this.updateData({
        x: left,
        y: top
      });
      this.bindData('$clipArea');
    }
  }, {
    key: "toClipPathValueString",
    value: function toClipPathValueString() {
      var _this$state = this.state,
          x = _this$state.x,
          y = _this$state.y,
          radiusX = _this$state.radiusX,
          radiusY = _this$state.radiusY;
      var results = "".concat(x, " ").concat(y);
      var radiusString = "".concat(radiusX, " ").concat(radiusY);
      return "".concat(radiusString, " at ").concat(results);
    }
  }, {
    key: "updateData",
    value: function updateData(data) {
      this.setState(data);
      this.parent.trigger(this.props.onchange, this.props.key, this.toClipPathValueString(), this.props.params);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value.clone()));
    }
  }]);

  return EllipseEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  EllipseEditor: EllipseEditor_EllipseEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/ClipPathPopup.js






function ClipPathPopup_createSuper(Derived) { var hasNativeReflectConstruct = ClipPathPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ClipPathPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var ClipPathPopup_ClipPathPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(ClipPathPopup, _BasePopup);

  var _super = ClipPathPopup_createSuper(ClipPathPopup);

  function ClipPathPopup() {
    classCallCheck_default()(this, ClipPathPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(ClipPathPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return 'ClipPath';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        type: 'none',
        value: ''
      };
    }
  }, {
    key: "toClipPathCSS",
    value: function toClipPathCSS() {
      return ClipPath["a" /* ClipPath */].toCSS(this.state);
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit(this.state.changeEvent || "changeClipPathPopup", this.toClipPathCSS());
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n    <div class='clippath-popup' ref='$popup'>\n      <div class=\"box\">\n        <div class='clip-path-editor clip-path-type' ref='$clippathType'></div>\n        <div class='clip-path-editor' ref='$clippath'></div>\n      </div>\n    </div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$clippathType'),
    value: function value() {
      return (
        /*html*/
        "\n      <div>".concat(this.state.type, " Editor</div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$clippath'),
    value: function value() {
      switch (this.state.type) {
        case 'circle':
          return (
            /*html*/
            "<object refClass=\"CircleEditor\" ref='$circle' key='circle' value='".concat(this.state.value, "' onchange='changeClipPath' />")
          );

        case 'ellipse':
          return (
            /*html*/
            "<object refClass=\"EllipseEditor\" ref='$ellipse' key='ellipse' value='".concat(this.state.value, "' onchange='changeClipPath' />")
          );

        case 'inset':
          return (
            /*html*/
            "<object refClass=\"InsetEditor\" ref='$inset' key='inset' value='".concat(this.state.value, "' onchange='changeClipPath' />")
          );

        case 'polygon':
          return (
            /*html*/
            "<object refClass=\"PolygonEditor\" ref='$polygon' key='polygon' value='".concat(this.state.value, "' onchange='changeClipPath' />")
          );

        case 'path':
          return (
            /*html*/
            "<object refClass=\"PathEditor\" ref='$path' key='path' value='".concat(this.state.value, "' onchange='changeClipPath' />")
          );

        case 'svg':
          var current = this.$selection.currentProject || {
            svg: []
          };
          var options = current.svg.filter(function (it) {
            return it.type === 'clip-path';
          }).map(function (it) {
            return it.name;
          }).join(',');

          if (options.length) {
            options = ',' + options;
          }

          return (
            /*html*/
            "<object refClass=\"SelectEditor\"  ref='$svg' key='svg' value='".concat(this.state.value, "' options='").concat(options, "' onchange='changeClipPath' />")
          );

        default:
          return (
            /*html*/
            "<div class='type none'></div>"
          );
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeClipPath'),
    value: function value(type, _value) {
      this.updateData({
        type: type,
        value: _value
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showClipPathPopup"),
    value: function value(data) {
      this.state.changeEvent = data.changeEvent;
      this.setState(ClipPath["a" /* ClipPath */].parseStyle(data['clip-path']));
      this.refresh();
      this.show(220);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideClipPathPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return ClipPathPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  ClipPathPopup: ClipPathPopup_ClipPathPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/TransitionPropertyPopup.js







function TransitionPropertyPopup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TransitionPropertyPopup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TransitionPropertyPopup_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TransitionPropertyPopup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TransitionPropertyPopup_createSuper(Derived) { var hasNativeReflectConstruct = TransitionPropertyPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TransitionPropertyPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var property_list = ['none', 'all', 'background-color', 'background-position', 'background-size', 'border', 'border-color', 'border-width', 'border-bottom', 'border-bottom-color', 'border-bottom-left-radius', 'border-bottom-right-radius', 'border-bottom-width', 'border-left', 'border-left-color', 'border-left-width', 'border-radius', 'border-right', 'border-right-color', 'border-right-width', 'border-spacing', 'border-top', 'border-top-color', 'border-top-left-radius', 'border-top-right-radius', 'border-top-width', 'bottom', 'box-shadow', 'color', 'filter', 'font-size', 'font-size-adjust', 'font-stretch', 'font-weight', 'height', 'left', 'letter-spacing', 'line-height', 'margin', 'margin-bottom', 'margin-left', 'margin-right', 'margin-top', 'max-height', 'max-width', 'min-height', 'min-width', 'opacity', 'padding', 'padding-bottom', 'padding-left', 'padding-right', 'padding-top', 'perspective', 'perspective-origin', 'right', 'text-decoration', 'text-decoration-color', 'text-indent', 'text-shadow', 'top', 'transform', 'vertical-align', 'visibility', 'width', 'word-spacing', 'z-index'];

var TransitionPropertyPopup_TransitionPropertyPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(TransitionPropertyPopup, _BasePopup);

  var _super = TransitionPropertyPopup_createSuper(TransitionPropertyPopup);

  function TransitionPropertyPopup() {
    classCallCheck_default()(this, TransitionPropertyPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(TransitionPropertyPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return 'Transition';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        changeEvent: '',
        instance: {},
        data: {
          timingFunction: 'linear',
          duration: '0s',
          delay: '0s',
          name: 'all'
        }
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.state.data = TransitionPropertyPopup_objectSpread(TransitionPropertyPopup_objectSpread({}, this.state.data), opt);

      if (this.state.instance) {
        this.state.instance.trigger(this.state.changeEvent, this.state.data);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='transition-property-popup' ref='$popup'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$popup'),
    value: function value() {
      return (
        /*html*/
        "\n      <div class=\"box\">\n        ".concat(this.templateForProperty(), "\n        ").concat(this.templateForTimingFunction(), "\n        ").concat(this.templateForDelay(), "\n        ").concat(this.templateForDuration(), "\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForTimingFunction",
    value: function templateForTimingFunction() {
      return (
        /*html*/
        "\n    <div class='timing-function'>\n      <label>Timing function</label>\n      <object refClass=\"CubicBezierEditor\" ref='$cubicBezierEditor' key=\"timingFunction\" value=\"".concat(this.state.data.timingFunction || 'linear', "\" onChange='changeCubicBezier' />\n    </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTransition'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "templateForProperty",
    value: function templateForProperty() {
      return (
        /*html*/
        "\n      <div class='name'>\n        <object refClass=\"SelectEditor\"  ref='$property' icon=\"true\" label=\"Property\" key='name' value=\"".concat(this.state.data.name, "\" options=\"").concat(property_list.join(','), "\" onChange='changeTransition' /> \n      </div>\n    ")
      );
    }
  }, {
    key: "templateForDelay",
    value: function templateForDelay() {
      return (
        /*html*/
        "\n    <div class='delay'>\n      <object refClass=\"RangeEditor\"  ref='$delay' label='Delay' calc='false' key='delay' value='".concat(this.state.data.delay, "' units='s,ms' onChange=\"changeRangeEditor\" />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForDuration",
    value: function templateForDuration() {
      return (
        /*html*/
        "\n    <div class='duration'>\n      <object refClass=\"RangeEditor\"  ref='$duration' label='Duration'  calc='false' key='duration' value='".concat(this.state.data.duration, "' units='s,ms' onChange=\"changeRangeEditor\" />\n    </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value2) {
      this.updateData(defineProperty_default()({}, key, _value2));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeCubicBezier'),
    value: function value(key, _value3) {
      this.updateData(defineProperty_default()({}, key, _value3));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showTransitionPropertyPopup"),
    value: function value(data) {
      this.setState(data);
      this.show(250);
      this.children.$cubicBezierEditor.trigger('showCubicBezierEditor', data.data.timingFunction);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideTransitionPropertyPopup"),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return TransitionPropertyPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  TransitionPropertyPopup: TransitionPropertyPopup_TransitionPropertyPopup
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(get);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CSSPropertyEditor.js + 1 modules
var CSSPropertyEditor = __webpack_require__(94);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/SelectorPopup.js







function SelectorPopup_createSuper(Derived) { var hasNativeReflectConstruct = SelectorPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SelectorPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SelectorPopup_SelectorPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(SelectorPopup, _BasePopup);

  var _super = SelectorPopup_createSuper(SelectorPopup);

  function SelectorPopup() {
    classCallCheck_default()(this, SelectorPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectorPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('selector.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        selector: '',
        properties: []
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit("changeSelectorPopup", this.state);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n    <div class='selector-popup' ref='$popup'>\n      <div class=\"box\">\n        ".concat(this.templateForSelector(), "\n        ").concat(this.templateForProperty(), "        \n      </div>\n    </div>")
      );
    }
  }, {
    key: "templateForProperty",
    value: function templateForProperty() {
      return (
        /*html*/
        "<object refClass=\"CSSPropertyEditor\" ref='$propertyEditor' onchange='changePropertyEditor' />"
      );
    }
  }, {
    key: "templateForSelector",
    value: function templateForSelector() {
      return (
        /*html*/
        "\n      <div class='name'>\n        <label>".concat(this.$i18n('selector.popup.selector'), "</label>\n        <div class='input grid-1'>\n          <input type='text' value='").concat(this.state.selector, "' ref='$selector'/>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["INPUT"])('$selector'),
    value: function value(e) {
      if (this.refs.$selector.value.match(/^[a-zA-Z0-9\:\_\-\.\b]+$/)) {
        this.updateData({
          selector: this.refs.$selector.value
        });
      } else {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      get_default()(getPrototypeOf_default()(SelectorPopup.prototype), "refresh", this).call(this);

      this.refs.$selector.val(this.state.selector);
      this.children.$propertyEditor.trigger('showCSSPropertyEditor', this.state.properties);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePropertyEditor'),
    value: function value(properties) {
      this.updateData({
        properties: properties
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showSelectorPopup"),
    value: function value(data) {
      this.setState(data);
      this.refresh();
      this.show(250);
    }
  }]);

  return SelectorPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  SelectorPopup: SelectorPopup_SelectorPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colorpicker/ui/control/Hue.js






function Hue_createSuper(Derived) { var hasNativeReflectConstruct = Hue_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Hue_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var Hue_Hue = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(Hue, _EditorElement);

  var _super = Hue_createSuper(Hue);

  function Hue() {
    classCallCheck_default()(this, Hue);

    return _super.apply(this, arguments);
  }

  createClass_default()(Hue, [{
    key: "initState",
    value: function initState() {
      return {
        hue: 0,
        minValue: 0,
        maxValue: 360
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class=\"hue\">\n                <div ref=\"$container\" class=\"hue-container\">\n                    <div ref=\"$bar\" class=\"drag-bar\"></div>\n                </div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["BIND"])('$bar'),
    value: function value() {
      var hue = this.state.hue;
      return {
        style: {
          left: Length["a" /* Length */].percent(hue / 360 * 100)
        },
        "class": {
          first: hue <= this.state.minValue,
          last: hue >= this.state.maxValue
        }
      };
    }
  }, {
    key: Object(Event["POINTERSTART"])('$container') + Object(Event["MOVE"])('movePointer') + Object(Event["END"])('moveEndPointer'),
    value: function value(e) {
      this.rect = this.refs.$container.rect();
      this.refreshColorUI();
    }
  }, {
    key: "movePointer",
    value: function movePointer() {
      this.refreshColorUI();
    }
  }, {
    key: "refreshColorUI",
    value: function refreshColorUI() {
      var minX = this.rect.left;
      var maxX = this.rect.right;
      var currentX = Math.max(Math.min(maxX, this.$config.get('bodyEvent').clientX), minX);
      var rate = (currentX - minX) / (maxX - minX);
      this.parent.changeColor({
        h: rate * this.state.maxValue,
        type: 'hsv'
      });
    }
  }, {
    key: "setValue",
    value: function setValue(hue) {
      this.setState({
        hue: hue
      });
    }
  }]);

  return Hue;
}(EditorElement["a" /* EditorElement */]);


// EXTERNAL MODULE: ./src/el/base/Color.js + 2 modules
var Color = __webpack_require__(26);

// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colorpicker/ui/control/Opacity.js






function Opacity_createSuper(Derived) { var hasNativeReflectConstruct = Opacity_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Opacity_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var Opacity_Opacity = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(Opacity, _EditorElement);

  var _super = Opacity_createSuper(Opacity);

  function Opacity() {
    classCallCheck_default()(this, Opacity);

    return _super.apply(this, arguments);
  }

  createClass_default()(Opacity, [{
    key: "initState",
    value: function initState() {
      return {
        colorbar: Color["a" /* default */].parse('rgba(0, 0, 0, 1)'),
        opacity: 0,
        minValue: 0,
        maxValue: 100
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class=\"opacity\">\n            <div ref=\"$container\" class=\"opacity-container\">\n                <div ref=\"$colorbar\" class=\"color-bar\"></div>\n                <div ref=\"$bar\" class=\"drag-bar2\"></div>\n            </div>\n        </div>\n        "
      );
    }
  }, {
    key: Object(Event["BIND"])('$colorbar'),
    value: function value() {
      var rgb = Object(func["clone"])(this.state.colorbar);
      rgb.a = 0;
      var start = Color["a" /* default */].format(rgb, 'rgb');
      rgb.a = 1;
      var end = Color["a" /* default */].format(rgb, 'rgb');
      return {
        style: {
          background: "linear-gradient(to right, ".concat(start, ", ").concat(end, ")")
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$bar'),
    value: function value() {
      var opacity = this.state.opacity * 100;
      return {
        style: {
          left: Length["a" /* Length */].percent(opacity)
        },
        "class": {
          first: opacity <= this.state.minValue,
          last: opacity >= this.state.maxValue
        }
      };
    }
  }, {
    key: Object(Event["POINTERSTART"])('$container') + Object(Event["MOVE"])('movePointer') + Object(Event["END"])('moveEndPointer'),
    value: function value(e) {
      this.rect = this.refs.$container.rect();
      this.refreshColorUI();
    }
  }, {
    key: "movePointer",
    value: function movePointer() {
      this.refreshColorUI();
    }
  }, {
    key: "refreshColorUI",
    value: function refreshColorUI() {
      var minX = this.rect.left;
      var maxX = this.rect.right;
      var currentX = Math.max(Math.min(maxX, this.$config.get('bodyEvent').clientX), minX);
      var rate = (currentX - minX) / (maxX - minX);
      this.parent.changeColor({
        a: rate.toFixed(2)
      });
    }
  }, {
    key: "setValue",
    value: function setValue(colorbar, opacity) {
      this.setState({
        opacity: opacity,
        colorbar: colorbar
      });
    }
  }]);

  return Opacity;
}(EditorElement["a" /* EditorElement */]);


// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colorpicker/ui/control/ColorView.js






function ColorView_createSuper(Derived) { var hasNativeReflectConstruct = ColorView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ColorView_ColorView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorView, _EditorElement);

  var _super = ColorView_createSuper(ColorView);

  function ColorView() {
    classCallCheck_default()(this, ColorView);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorView, [{
    key: "initState",
    value: function initState() {
      return {
        value: 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='color'></div>"
      );
    }
  }, {
    key: Object(Event["BIND"])('$el'),
    value: function value() {
      return {
        style: {
          'background-color': this.state.value
        }
      };
    }
  }, {
    key: "setValue",
    value: function setValue(value) {
      this.setState({
        value: value
      });
    }
  }]);

  return ColorView;
}(EditorElement["a" /* EditorElement */]);


// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colorpicker/ui/ColorInformation.js






function ColorInformation_createSuper(Derived) { var hasNativeReflectConstruct = ColorInformation_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorInformation_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ColorInformation_ColorInformation = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorInformation, _EditorElement);

  var _super = ColorInformation_createSuper(ColorInformation);

  function ColorInformation() {
    classCallCheck_default()(this, ColorInformation);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorInformation, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class=\"information hex\">\n            <div ref=\"$informationChange\" class=\"information-change\">\n                <button ref=\"$formatChangeButton\" type=\"button\" class=\"format-change-button arrow-button\"></button>\n            </div>\n            <div class=\"information-item hex\">\n                <div class=\"input-field hex\">\n                    <input ref=\"$hexCode\" class=\"input\" type=\"text\" />\n                    <div class=\"title\">HEX</div>\n                </div>\n            </div>\n            <div class=\"information-item rgb\">\n                <div class=\"input-field rgb-r\">\n                    <input ref=\"$rgb_r\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"255\" />\n                    <div class=\"title\">R</div>\n                </div>\n                <div class=\"input-field rgb-g\">\n                    <input ref=\"$rgb_g\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"255\" />\n                    <div class=\"title\">G</div>\n                </div>\n                <div class=\"input-field rgb-b\">\n                    <input ref=\"$rgb_b\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"255\" />\n                    <div class=\"title\">B</div>\n                </div>          \n                <div class=\"input-field rgb-a\">\n                    <input ref=\"$rgb_a\" class=\"input\" type=\"number\" step=\"0.01\" min=\"0\" max=\"1\" />\n                    <div class=\"title\">A</div>\n                </div>                                                            \n            </div>\n            <div class=\"information-item hsl\">\n                <div class=\"input-field hsl-h\">\n                    <input ref=\"$hsl_h\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"360\" />\n                    <div class=\"title\">H</div>\n                </div>\n                <div class=\"input-field hsl-s\">\n                    <input ref=\"$hsl_s\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"100\" />\n                    <div class=\"postfix\">%</div>\n                    <div class=\"title\">S</div>\n                </div>\n                <div class=\"input-field hsl-l\">\n                    <input ref=\"$hsl_l\" class=\"input\" type=\"number\" step=\"1\" min=\"0\" max=\"100\" />\n                    <div class=\"postfix\">%</div>                        \n                    <div class=\"title\">L</div>\n                </div>\n                <div class=\"input-field hsl-a\">\n                    <input ref=\"$hsl_a\" class=\"input\" type=\"number\" step=\"0.01\" min=\"0\" max=\"1\" />\n                    <div class=\"title\">A</div>\n                </div>\n            </div>\n        </div>\n        "
      );
    }
  }, {
    key: "manager",
    get: function get() {
      return this.parent.manager;
    }
  }, {
    key: "setCurrentFormat",
    value: function setCurrentFormat(format) {
      this.format = format;
      this.initFormat();
    }
  }, {
    key: "initFormat",
    value: function initFormat() {
      var _this = this;

      var current_format = this.format || 'hex';
      ['hex', 'rgb', 'hsl'].filter(function (it) {
        return it !== current_format;
      }).forEach(function (formatString) {
        _this.$el.removeClass(formatString);
      });
      this.$el.addClass(current_format);
    }
  }, {
    key: "nextFormat",
    value: function nextFormat() {
      var current_format = this.format || 'hex';
      var next_format = 'hex';

      if (current_format == 'hex') {
        next_format = 'rgb';
      } else if (current_format == 'rgb') {
        next_format = 'hsl';
      } else if (current_format == 'hsl') {
        if (this.parent.alpha == 1) {
          next_format = 'hex';
        } else {
          next_format = 'rgb';
        }
      }

      this.format = next_format;
      this.initFormat();
      this.parent.changeFormat(this.format);
    }
  }, {
    key: "goToFormat",
    value: function goToFormat(to_format) {
      this.format = to_format;

      if (to_format === 'rgb' || to_format === 'hsl') {
        this.initFormat();
      }

      this.parent.changeFormat(this.format);
    }
  }, {
    key: "getFormat",
    value: function getFormat() {
      return this.format || 'hex';
    }
  }, {
    key: "changeRgbColor",
    value: function changeRgbColor() {
      this.parent.lastUpdateColor({
        type: 'rgb',
        r: this.refs.$rgb_r["int"](),
        g: this.refs.$rgb_g["int"](),
        b: this.refs.$rgb_b["int"](),
        a: this.refs.$rgb_a["float"]()
      });
    }
  }, {
    key: "changeHslColor",
    value: function changeHslColor() {
      this.parent.lastUpdateColor({
        type: 'hsl',
        h: this.refs.$hsl_h["int"](),
        s: this.refs.$hsl_s["int"](),
        l: this.refs.$hsl_l["int"](),
        a: this.refs.$hsl_a["float"]()
      });
    }
  }, {
    key: "hasValue",
    value: function hasValue(e) {
      if (e.target.value === '') {
        return false;
      }

      return true;
    }
  }, {
    key: Object(Event["INPUT"])('$rgb_r') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeRgbColor();
    }
  }, {
    key: Object(Event["INPUT"])('$rgb_g') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeRgbColor();
    }
  }, {
    key: Object(Event["INPUT"])('$rgb_b') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeRgbColor();
    }
  }, {
    key: Object(Event["INPUT"])('$rgb_a') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeRgbColor();
    }
  }, {
    key: Object(Event["INPUT"])('$hsl_h') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeHslColor();
    }
  }, {
    key: Object(Event["INPUT"])('$hsl_s') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeHslColor();
    }
  }, {
    key: Object(Event["INPUT"])('$hsl_l') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeHslColor();
    }
  }, {
    key: Object(Event["INPUT"])('$hsl_a') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      this.changeHslColor();
    }
  }, {
    key: Object(Event["KEYUP"])('$hexCode') + Object(Event["IF"])('hasValue'),
    value: function value(e) {
      var code = this.refs.$hexCode.val();

      if (code.charAt(0) == '#' && (code.length == 7 || code.length === 9)) {
        this.parent.initColor(code);
        this.emit('lastUpdateColor');
      }
    }
  }, {
    key: Object(Event["CLICK"])('$formatChangeButton'),
    value: function value(e) {
      this.nextFormat();
    }
  }, {
    key: Object(Event["CLICK"])('$el .information-item.hex .input-field .title'),
    value: function value(e) {
      this.goToFormat('hex');
    }
  }, {
    key: Object(Event["CLICK"])('$el .information-item.rgb .input-field .title'),
    value: function value(e) {
      this.goToFormat('hsl');
    }
  }, {
    key: Object(Event["CLICK"])('$el .information-item.hsl .input-field .title'),
    value: function value(e) {
      this.goToFormat('rgb');
    }
  }, {
    key: "setRGBInput",
    value: function setRGBInput() {
      this.refs.$rgb_r.val(this.manager.rgb.r);
      this.refs.$rgb_g.val(this.manager.rgb.g);
      this.refs.$rgb_b.val(this.manager.rgb.b);
      this.refs.$rgb_a.val(this.manager.alpha);
    }
  }, {
    key: "setHSLInput",
    value: function setHSLInput() {
      this.refs.$hsl_h.val(this.manager.hsl.h);
      this.refs.$hsl_s.val(this.manager.hsl.s);
      this.refs.$hsl_l.val(this.manager.hsl.l);
      this.refs.$hsl_a.val(this.manager.alpha);
    }
  }, {
    key: "setHexInput",
    value: function setHexInput() {
      this.refs.$hexCode.val(this.manager.toString('hex'));
    }
  }, {
    key: "setValue",
    value: function setValue() {
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.setCurrentFormat(this.manager.format);
      this.setRGBInput();
      this.setHSLInput();
      this.setHexInput();
    }
  }]);

  return ColorInformation;
}(EditorElement["a" /* EditorElement */]);


// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/colorpicker/ui/ColorPalette.js






function ColorPalette_createSuper(Derived) { var hasNativeReflectConstruct = ColorPalette_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorPalette_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ColorPalette_ColorPalette = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorPalette, _EditorElement);

  var _super = ColorPalette_createSuper(ColorPalette);

  function ColorPalette() {
    classCallCheck_default()(this, ColorPalette);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorPalette, [{
    key: "initState",
    value: function initState() {
      return {
        hueColor: 'rgba(0, 0, 0, 1)',
        s: 0,
        v: 0
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class=\"color-panel\">\n            <div ref=\"$saturation\" class=\"saturation\">\n                <div ref=\"$value\" class=\"value\">\n                    <div ref=\"$drag_pointer\" class=\"drag-pointer\"></div>\n                </div>\n            </div>        \n        </div>        \n        "
      );
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.rect = this.$el.rect();
    }
  }, {
    key: Object(Event["BIND"])('$el'),
    value: function value() {
      return {
        style: {
          'background-color': this.state.hueColor
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$drag_pointer'),
    value: function value() {
      if (this.rect.width === 0) {
        this.rect = this.$el.rect();
      }

      var x = this.rect.width * this.state.s;
      var y = this.rect.height * (1 - this.state.v);
      return {
        style: {
          left: Length["a" /* Length */].px(x),
          top: Length["a" /* Length */].px(y)
        }
      };
    }
  }, {
    key: Object(Event["POINTERSTART"])('$el') + Object(Event["MOVE"])('movePointer') + Object(Event["END"])('moveEndPointer'),
    value: function value(e) {
      this.rect = this.$el.rect();
      this.refreshColorUI();
    }
  }, {
    key: "movePointer",
    value: function movePointer() {
      this.refreshColorUI();
    }
  }, {
    key: "moveEndPointer",
    value: function moveEndPointer() {
      this.parent.changeEndColor();
    }
  }, {
    key: "refreshColorUI",
    value: function refreshColorUI() {
      var e = this.$config.get('bodyEvent');
      var minX = this.rect.left;
      var maxX = this.rect.right;
      var minY = this.rect.top;
      var maxY = this.rect.bottom;
      var currentX = Math.min(maxX, Math.max(minX, e.clientX));
      var currentY = Math.min(maxY, Math.max(minY, e.clientY));
      var width = maxX - minX;
      var height = maxY - minY;
      var s = (currentX - minX) / width;
      var v = (height - (currentY - minY)) / height;
      this.parent.changeColor({
        type: "hsv",
        s: s,
        v: v
      });
    }
  }, {
    key: "setValue",
    value: function setValue(s, v, hueColor) {
      this.setState({
        s: s,
        v: v,
        hueColor: hueColor
      });
    }
  }]);

  return ColorPalette;
}(EditorElement["a" /* EditorElement */]);


// CONCATENATED MODULE: ./src/el/base/HueColor.js

var hue_color = [{
  rgb: '#ff0000',
  start: .0
}, {
  rgb: '#ffff00',
  start: .17
}, {
  rgb: '#00ff00',
  start: .33
}, {
  rgb: '#00ffff',
  start: .50
}, {
  rgb: '#0000ff',
  start: .67
}, {
  rgb: '#ff00ff',
  start: .83
}, {
  rgb: '#ff0000',
  start: 1
}];

function checkHueColor(p) {
  var startColor, endColor;

  for (var i = 0; i < hue_color.length; i++) {
    if (hue_color[i].start >= p) {
      startColor = hue_color[i - 1];
      endColor = hue_color[i];
      break;
    }
  }

  if (startColor && endColor) {
    return Color["a" /* default */].mix(startColor, endColor, (p - startColor.start) / (endColor.start - startColor.start));
  }

  return hue_color[0].rgb;
}

function initHueColors() {
  for (var i = 0, len = hue_color.length; i < len; i++) {
    var hue = hue_color[i];
    var obj = Color["a" /* default */].parse(hue.rgb);
    hue.r = obj.r;
    hue.g = obj.g;
    hue.b = obj.b;
  }
}

initHueColors();
/* harmony default export */ var HueColor = ({
  colors: hue_color,
  checkHueColor: checkHueColor
});
// CONCATENATED MODULE: ./src/el/base/ColorManagerV2.js




function ColorManagerV2_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ColorManagerV2_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ColorManagerV2_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ColorManagerV2_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





var ColorManagerV2_ColorManagerV2 = /*#__PURE__*/function () {
  function ColorManagerV2() {
    classCallCheck_default()(this, ColorManagerV2);

    this.initialize();
  }

  createClass_default()(ColorManagerV2, [{
    key: "initialize",
    value: function initialize() {
      this.state = {
        rgb: {},
        hsl: {},
        hsv: {},
        alpha: 1,
        format: 'hex' // colorSetsList: [
        //     {   name : "Material", 
        //         edit: true,
        //         colors: [ 
        //             '#F44336', '#E91E63', '#9C27B0', '#673AB7', '#3F51B5', 
        //             '#2196F3', '#03A9F4', '#00BCD4',  '#009688', '#4CAF50', 
        //             '#8BC34A', '#CDDC39', '#FFEB3B', '#FFC107', '#FF9800', 
        //             '#FF5722',  '#795548', '#9E9E9E', '#607D8B' 
        //         ]
        //     },
        //     { name : "Custom", "edit" : true, "colors" : [ ] },
        //     { name: "Color Scale", "scale" : ['red', 'yellow', 'black' ], count : 5 }
        // ],
        // userList: [],
        // currentColorSets: {}    

      };
    }
  }, {
    key: "hsv",
    get: function get() {
      return this.state.hsv;
    }
  }, {
    key: "rgb",
    get: function get() {
      return this.state.rgb;
    }
  }, {
    key: "hsl",
    get: function get() {
      return this.state.hsl;
    }
  }, {
    key: "hex",
    get: function get() {
      return this.state.hex;
    }
  }, {
    key: "alpha",
    get: function get() {
      return this.state.alpha;
    }
  }, {
    key: "format",
    get: function get() {
      return this.state.format;
    }
  }, {
    key: "changeFormat",
    value: function changeFormat(format) {
      this.state.format = format;
    }
  }, {
    key: "initColor",
    value: function initColor(colorObj) {
      this.changeColor(colorObj);
    }
  }, {
    key: "changeColor",
    value: function changeColor(colorObj) {
      colorObj = colorObj || '#FF0000';

      if (Object(func["isString"])(colorObj)) {
        colorObj = Color["a" /* default */].parse(colorObj);
      }

      this.state.alpha = Object(func["isUndefined"])(colorObj.a) ? this.state.alpha : colorObj.a;
      this.state.format = colorObj.type != 'hsv' ? colorObj.type || this.state.format : this.state.format; // if (this.state.format == 'hex' && this.state.alpha < 1) {
      //     this.state.format = 'rgb';
      // }

      if (colorObj.type == 'hsl') {
        this.state.hsl = ColorManagerV2_objectSpread(ColorManagerV2_objectSpread({}, this.state.hsl), colorObj);
        this.state.rgb = Color["a" /* default */].HSLtoRGB(this.state.hsl);
        this.state.hsv = Color["a" /* default */].HSLtoHSV(colorObj);
      } else if (colorObj.type == 'hex') {
        this.state.rgb = ColorManagerV2_objectSpread(ColorManagerV2_objectSpread({}, this.state.rgb), colorObj);
        this.state.hsl = Color["a" /* default */].RGBtoHSL(this.state.rgb);
        this.state.hsv = Color["a" /* default */].RGBtoHSV(colorObj);
      } else if (colorObj.type == 'rgb') {
        this.state.rgb = ColorManagerV2_objectSpread(ColorManagerV2_objectSpread({}, this.state.rgb), colorObj);
        this.state.hsl = Color["a" /* default */].RGBtoHSL(this.state.rgb);
        this.state.hsv = Color["a" /* default */].RGBtoHSV(colorObj);
      } else if (colorObj.type == 'hsv') {
        this.state.hsv = ColorManagerV2_objectSpread(ColorManagerV2_objectSpread({}, this.state.hsv), colorObj);
        this.state.rgb = Color["a" /* default */].HSVtoRGB(this.state.hsv);
        this.state.hsl = Color["a" /* default */].HSVtoHSL(this.state.hsv);
      }
    }
  }, {
    key: "getHueColor",
    value: function getHueColor() {
      return HueColor.checkHueColor(this.state.hsv.h / 360);
    }
  }, {
    key: "toString",
    value: function toString(type) {
      type = type || this.state.format;
      var colorObj = this.state[type] || this.state.rgb;
      return Color["a" /* default */].format(ColorManagerV2_objectSpread(ColorManagerV2_objectSpread({}, colorObj), {}, {
        a: this.state.alpha
      }), type);
    }
  }, {
    key: "toColor",
    value: function toColor(type) {
      type = (type || this.state.format).toLowerCase();
      return this.toString(type);
    } // /** manager for colorsets */
    // setUserPalette(list) {
    //     this.state.userList = list || []; 
    //     this.resetUserPalette();
    //     this.setCurrentColorSets();
    // }
    // resetUserPalette () {
    //     this.state.userList = this.state.userList.map( (element, index) => {
    //         if (isFunction( element.colors )) {
    //             const makeCallback = element.colors; 
    //             element.colors = makeCallback(this.state);
    //             element._colors = makeCallback;
    //         }
    //         return { 
    //             name: `color-${index}`,
    //             colors : [],
    //             ...element
    //         }
    //     })
    // }
    // setCurrentColorSets(nameOrIndex) {
    //     const _list = this.getUserList();
    //     if (isUndefined(nameOrIndex)) {
    //         this.state.currentColorSets = _list[0];
    //     } else if (isNumber(nameOrIndex)) {
    //         this.state.currentColorSets = _list[nameOrIndex];
    //     } else {
    //         this.state.currentColorSets = _list.filter(function (obj) {
    //             return obj.name == nameOrIndex;
    //         })[0];
    //     }
    // }
    // getCurrentColorSets () {
    //     return this.state.currentColorSets;
    // }
    // addCurrentColor (color) {
    //     if (Array.isArray(this.state.currentColorSets.colors)) {
    //         this.state.currentColorSets.colors.push(color);
    //     } 
    // }
    // setCurrentColorAll (colors = []) {
    //     this.state.currentColorSets.colors = colors;
    // }
    // removeCurrentColor (index) {
    //     if (this.state.currentColorSets.colors[index]) {
    //         this.state.currentColorSets.colors.splice(index, 1);
    //     }
    // }
    // removeCurrentColorToTheRight (index) {
    //     if (this.state.currentColorSets.colors[index]) {
    //         this.state.currentColorSets.colors.splice(index, Number.MAX_VALUE);
    //     }
    // }    
    // clearPalette () {
    //     if (this.state.currentColorSets.colors) {
    //         this.state.currentColorSets.colors = [];
    //     }
    // }
    // getUserList() {
    //     return Array.isArray(this.state.userList) && this.state.userList.length ? this.state.userList : this.state.colorSetsList;
    // }    
    // getCurrentColors () {
    //     return this.getColors(this.state.currentColorSets)
    // }
    // getColors (element) {
    //     if (element.scale) {
    //         return Color.scale(element.scale, element.count);
    //     }
    //     return element.colors || []; 
    // }
    // getColorSetsList () {
    //     return this.getUserList().map(element => {
    //        return {
    //            name : element.name,
    //            edit : element.edit,
    //            colors : this.getColors(element)
    //        } 
    //     });
    // }

  }]);

  return ColorManagerV2;
}();


// CONCATENATED MODULE: ./src/el/editor/preset/colors/random.js


/* harmony default export */ var random = ({
  title: 'random',
  key: 'random',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    var colorList = Color["a" /* default */].randomByCount(count).map(function (color) {
      return {
        color: color
      };
    });
    colorList.sort(function (a, b) {
      var localA = Color["a" /* default */].parse(a.color);
      var localB = Color["a" /* default */].parse(b.color);
      return localA.h > localB.h ? 1 : -1;
    });
    return colorList;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-red.js
var colors = ['#ffebee', '#ffcdd2', '#ef9a9a', '#e57373', '#ef5350', '#f44336', '#e53935', '#d32f2f', '#c62828', '#b71c1c', '#f44336', '#ff8a80', '#ff5252', '#ff1744', '#d50000'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_red = ({
  title: 'material red',
  key: 'material-red',
  execute: function execute() {
    return colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-pink.js
var material_pink_colors = ['#fce4ec', '#f8bbd0', '#f48fb1', '#f06292', '#ec407a', '#e91e63', '#d81b60', '#c2185b', '#ad1457', '#880e4f', '#e91e63', '#ff80ab', '#ff4081', '#f50057', '#c51162'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_pink = ({
  title: 'material pink',
  key: 'material-pink',
  execute: function execute() {
    return material_pink_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-purple.js
var material_purple_colors = ['#f3e5f5', '#e1bee7', '#ce93d8', '#ba68c8', '#ab47bc', '#9c27b0', '#8e24aa', '#7b1fa2', '#6a1b9a', '#4a148c', '#9c27b0', '#ea80fc', '#e040fb', '#d500f9', '#aa00ff'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_purple = ({
  title: 'material purple',
  key: 'material-purple',
  execute: function execute() {
    return material_purple_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-deeppurple.js
var material_deeppurple_colors = ['#ede7f6', '#d1c4e9', '#b39ddb', '#9575cd', '#7e57c2', '#673ab7', '#5e35b1', '#512da8', '#4527a0', '#311b92', '#673ab7', '#b388ff', '#7c4dff', '#651fff', '#6200ea'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_deeppurple = ({
  title: 'material deep purple',
  key: 'material-deeppurple',
  execute: function execute() {
    return material_deeppurple_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-indigo.js
var material_indigo_colors = ['#e8eaf6', '#c5cae9', '#9fa8da', '#7986cb', '#5c6bc0', '#3f51b5', '#3949ab', '#303f9f', '#283593', '#1a237e', '#3f51b5', '#8c9eff', '#536dfe', '#3d5afe', '#304ffe'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_indigo = ({
  title: 'material indigo',
  key: 'material-indigo',
  execute: function execute() {
    return material_indigo_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-blue.js
var material_blue_colors = ['#e3f2fd', '#bbdefb', '#90caf9', '#64b5f6', '#42a5f5', '#2196f3', '#1e88e5', '#1976d2', '#1565c0', '#0d47a1', '#2196f3', '#82b1ff', '#448aff', '#2979ff', '#2962ff'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_blue = ({
  title: 'material blue',
  key: 'material-blue',
  execute: function execute() {
    return material_blue_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-lightblue.js
var material_lightblue_colors = ['#e1f5fe', '#b3e5fc', '#81d4fa', '#4fc3f7', '#29b6f6', '#03a9f4', '#039be5', '#0288d1', '#0277bd', '#01579b', '#03a9f4', '#80d8ff', '#40c4ff', '#00b0ff', '#0091ea'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_lightblue = ({
  title: 'material light blue',
  key: 'material-lightblue',
  execute: function execute() {
    return material_lightblue_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-cyan.js
var material_cyan_colors = ['#e0f7fa', '#b2ebf2', '#80deea', '#4dd0e1', '#26c6da', '#00bcd4', '#00acc1', '#0097a7', '#00838f', '#006064', '#00bcd4', '#84ffff', '#18ffff', '#00e5ff', '#00b8d4'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_cyan = ({
  title: 'material cyan',
  key: 'material-cyan',
  execute: function execute() {
    return material_cyan_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-teal.js
var material_teal_colors = ['#e0f2f1', '#b2dfdb', '#80cbc4', '#4db6ac', '#26a69a', '#009688', '#00897b', '#00796b', '#00695c', '#004d40', '#009688', '#a7ffeb', '#64ffda', '#1de9b6', '#00bfa5'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_teal = ({
  title: 'material teal',
  key: 'material-teal',
  execute: function execute() {
    return material_teal_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-green.js
var material_green_colors = ['#E8F5E9', '#C8E6C9', '#A5D6A7', '#81C784', '#66BB6A', '#4CAF50', '#43A047', '#388E3C', '#2E7D32', '#1B5E20', '#B9F6CA', '#69F0AE', '#00E676', '#00C853'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_green = ({
  title: 'material green',
  key: 'material-green',
  execute: function execute() {
    return material_green_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-lightgreen.js
var material_lightgreen_colors = ['#F1F8E9', '#DCEDC8', '#C5E1A5', '#AED581', '#9CCC65', '#8BC34A', '#7CB342', '#689F38', '#558B2F', '#33691E', '#CCFF90', '#B2FF59', '#76FF03', '#64DD17'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_lightgreen = ({
  title: 'material lightgreen',
  key: 'material-lightgreen',
  execute: function execute() {
    return material_lightgreen_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-lime.js
var material_lime_colors = ['#F9FBE7', '#F0F4C3', '#E6EE9C', '#DCE775', '#D4E157', '#CDDC39', '#C0CA33', '#AFB42B', '#9E9D24', '#827717', '#F4FF81', '#EEFF41', '#C6FF00', '#AEEA00'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_lime = ({
  title: 'material lime',
  key: 'material-lime',
  execute: function execute() {
    return material_lime_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-yellow.js
var material_yellow_colors = ['#FFFDE7', '#FFF9C4', '#FFF59D', '#FFF176', '#FFEE58', '#FFEB3B', '#FDD835', '#FBC02D', '#F9A825', '#F57F17', '#FFFF8D', '#FFFF00', '#FFEA00', '#FFD600'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_yellow = ({
  title: 'material yellow',
  key: 'material-yellow',
  execute: function execute() {
    return material_yellow_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-amber.js
var material_amber_colors = ['#FFF8E1', '#FFECB3', '#FFE082', '#FFD54F', '#FFCA28', '#FFC107', '#FFB300', '#FFA000', '#FF8F00', '#FF6F00', '#FFE57F', '#FFD740', '#FFC400', '#FFAB00'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_amber = ({
  title: 'material amber',
  key: 'material-amber',
  execute: function execute() {
    return material_amber_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-orange.js
var material_orange_colors = ['#FFF3E0', '#FFE0B2', '#FFCC80', '#FFB74D', '#FFA726', '#FF9800', '#FB8C00', '#F57C00', '#EF6C00', '#E65100', '#FFD180', '#FFAB40', '#FF9100', '#FF6D00'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_orange = ({
  title: 'material orange',
  key: 'material-orange',
  execute: function execute() {
    return material_orange_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-deeporange.js
var material_deeporange_colors = ['#FBE9E7', '#FFCCBC', '#FFAB91', '#FF8A65', '#FF7043', '#FF5722', '#F4511E', '#E64A19', '#D84315', '#BF360C', '#FF9E80', '#FF6E40', '#FF3D00', '#DD2C00'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_deeporange = ({
  title: 'material deep orange',
  key: 'material-deeporange',
  execute: function execute() {
    return material_deeporange_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-brown.js
var material_brown_colors = ['#EFEBE9', '#D7CCC8', '#BCAAA4', '#A1887F', '#8D6E63', '#795548', '#6D4C41', '#5D4037', '#4E342E', '#3E2723'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_brown = ({
  title: 'material brown',
  key: 'material-brown',
  execute: function execute() {
    return material_brown_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-gray.js
var material_gray_colors = ['#FAFAFA', '#F5F5F5', '#EEEEEE', '#E0E0E0', '#BDBDBD', '#9E9E9E', '#757575', '#616161', '#424242', '#212121'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_gray = ({
  title: 'material gray',
  key: 'material-gray',
  execute: function execute() {
    return material_gray_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/material-bluegray.js
var material_bluegray_colors = ['#ECEFF1', '#CFD8DC', '#B0BEC5', '#90A4AE', '#78909C', '#607D8B', '#546E7A', '#455A64', '#37474F', '#263238'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var material_bluegray = ({
  title: 'material bluegray',
  key: 'material-bluegray',
  execute: function execute() {
    return material_bluegray_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/opencolor-gray.js
var opencolor_gray_colors = ['#f8f9fa', '#f1f3f5', '#e9ecef', '#dee2e6', '#ced4da', '#adb5bd', '#868e96', '#495057', '#343a40', '#212529'].map(function (color) {
  return {
    color: color
  };
});
/* harmony default export */ var opencolor_gray = ({
  title: 'opencolor gray',
  resource: 'https://yeun.github.io/open-color/',
  key: 'opencolor-gray',
  execute: function execute() {
    return opencolor_gray_colors;
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/colors/index.js





















/* harmony default export */ var preset_colors = ([random, opencolor_gray, material_red, material_pink, material_purple, material_deeppurple, material_indigo, material_blue, material_lightblue, material_cyan, material_teal, material_green, material_lightgreen, material_lime, material_yellow, material_amber, material_orange, material_deeporange, material_brown, material_gray, material_bluegray]);
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/ColorAssetsEditor.js







function ColorAssetsEditor_createSuper(Derived) { var hasNativeReflectConstruct = ColorAssetsEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorAssetsEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var ColorAssetsEditor_ColorAssetsEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorAssetsEditor, _EditorElement);

  var _super = ColorAssetsEditor_createSuper(ColorAssetsEditor);

  function ColorAssetsEditor() {
    classCallCheck_default()(this, ColorAssetsEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorAssetsEditor, [{
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid',
        preset: 'random',
        isLoaded: false,
        colors: preset_colors
      };
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "<div ref=\"$tools\"></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$tools'),
    value: function value() {
      var options = this.state.colors.map(function (it) {
        return "".concat(it.key, ":").concat(it.title);
      });
      return (
        /*html*/
        "\n      <object refClass=\"SelectEditor\"  key=\"preset\" value=\"".concat(this.state.preset, "\" options=\"").concat(options, "\" onchange=\"changePreset\"  />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePreset'),
    value: function value(key, _value) {
      this.setState(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='color-assets-editor'>\n        <div class='color-assets-head'>\n          <label>".concat(this.$i18n('color.asset.property.title'), "</label>\n          <div class='tools'>").concat(this.getTools(), "</div>\n        </div>\n        <div class='color-list' ref='$colorList' data-view-mode='").concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$colorList"),
    value: function value() {
      var _this = this;

      var preset = this.state.colors.find(function (it) {
        return it.key === _this.state.preset;
      });

      if (!preset) {
        return '';
      }

      var results = preset.execute().map(function (item, index) {
        return (
          /*html*/
          "\n        <div class='color-item' data-index=\"".concat(index, "\" data-color=\"").concat(item.color, "\">\n          <div class='preview' title=\"").concat(item.color, "\" data-index=\"").concat(index, "\">\n            <div class='color-view' style='background-color: ").concat(item.color, ";'></div>\n          </div>\n        </div>\n      ")
        );
      });
      return results;
    }
  }, {
    key: "executeColor",
    value: function executeColor(callback) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var project = this.$selection.currentProject;

      if (project) {
        callback && callback(project);
        if (isRefresh) this.refresh();
        if (isEmit) this.emit('refreshColorAssets');
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: Object(Event["CLICK"])("$colorList .preview"),
    value: function value(e) {
      var color = e.$dt.$('.color-view').css('background-color');
      this.modifyColorPicker(color);
    }
  }, {
    key: "modifyColorPicker",
    value: function modifyColorPicker(color) {
      this.parent.trigger(this.props.onchange, this.props.key, color, this.props.params);
    }
  }]);

  return ColorAssetsEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ColorAssetsEditor: ColorAssetsEditor_ColorAssetsEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/ColorPickerEditor.js






function ColorPickerEditor_createSuper(Derived) { var hasNativeReflectConstruct = ColorPickerEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorPickerEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













var ColorPickerEditor_ColorPickerEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ColorPickerEditor, _EditorElement);

  var _super = ColorPickerEditor_createSuper(ColorPickerEditor);

  function ColorPickerEditor() {
    classCallCheck_default()(this, ColorPickerEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorPickerEditor, [{
    key: "created",
    value: function created() {
      this.manager = new ColorManagerV2_ColorManagerV2();
    }
  }, {
    key: "initState",
    value: function initState() {
      var value = this.props.value || 'rgba(0, 0, 0, 1)';
      this.manager.initColor(value);
      return {
        key: this.props.key,
        value: this.manager.toString()
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.modifyColorPicker();
    }
  }, {
    key: "modifyColorPicker",
    value: function modifyColorPicker() {
      this.parent.trigger(this.props.onchange, this.props.key, this.state.value, this.props.params);
    }
    /**
     * 
     * initialize color for colorpicker
     * 
     * @param {String|Object} newColor 
     * @param {String} format  hex, rgb, hsl
     */

  }, {
    key: "initColor",
    value: function initColor(newColor, format) {
      this.manager.changeColor(newColor, format);
      this.refresh();
    }
  }, {
    key: "changeColor",
    value: function changeColor(newColor, format) {
      this.manager.changeColor(newColor, format);
      this.refresh();
      this.updateData({
        value: this.manager.toColor()
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('selectColorAssets'),
    value: function value(key, color) {
      this.lastUpdateColor(color);
    }
  }, {
    key: "changeFormat",
    value: function changeFormat(format) {
      this.manager.changeFormat(format);
      this.setState({
        value: this.manager.toColor()
      }, false);
      this.modifyColorPicker();
      this.changeEndColor();
    }
  }, {
    key: "lastUpdateColor",
    value: function lastUpdateColor(newColor, format) {
      this.manager.changeColor(newColor, format);
      this.refresh();
      this.setState({
        value: this.manager.toColor()
      }, false);
      this.modifyColorPicker();
      this.changeEndColor();
    }
  }, {
    key: "changeEndColor",
    value: function changeEndColor() {
      this.parent.trigger(this.props.onchangeend, this.props.key, this.state.value, this.props.params);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var color = this.manager.toColor();
      this.children.$palette.setValue(this.manager.hsv.s, this.manager.hsv.v, this.manager.getHueColor());
      this.children.$opacity.setValue(this.manager.rgb, this.manager.alpha);
      this.children.$hue.setValue(this.manager.hsv.h);
      this.children.$colorview.setValue(color);
      this.children.$information.setValue();
    }
  }, {
    key: "components",
    value: function components() {
      return {
        Hue: Hue_Hue,
        Opacity: Opacity_Opacity,
        ColorView: ColorView_ColorView,
        Palette: ColorPalette_ColorPalette,
        ColorInformation: ColorInformation_ColorInformation,
        ColorAssetsEditor: ColorAssetsEditor_ColorAssetsEditor // CurrentColorSets,
        // ColorSetsChooser,
        // ContextMenu

      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='colorpicker sketch inline'>\n            <div class='colorpicker-body'>\n                <object refClass=\"Palette\" ref='$palette' />\n                <div class=\"control\">\n                    <object refClass=\"Hue\" ref='$hue' />\n                    <object refClass=\"Opacity\" ref='$opacity' />\n                    <div class=\"empty\"></div>\n                    <object refClass=\"ColorView\" ref='$colorview' />\n                </div>\n                <object refClass=\"ColorInformation\" ref='$information' />\n                <object refClass=\"ColorAssetsEditor\" ref='$colorAsset' key=\"colorAssets\" onchange=\"selectColorAssets\" /> \n            </div>\n        </div>\n      "
      );
    }
  }]);

  return ColorPickerEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ColorPickerEditor: ColorPickerEditor_ColorPickerEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/property-editor/EmbedColorPicker.js






function EmbedColorPicker_createSuper(Derived) { var hasNativeReflectConstruct = EmbedColorPicker_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function EmbedColorPicker_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var EmbedColorPicker_EmbedColorPicker = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(EmbedColorPicker, _EditorElement);

  var _super = EmbedColorPicker_createSuper(EmbedColorPicker);

  function EmbedColorPicker() {
    classCallCheck_default()(this, EmbedColorPicker);

    return _super.apply(this, arguments);
  }

  createClass_default()(EmbedColorPicker, [{
    key: "initState",
    value: function initState() {
      return {
        value: this.props.value || 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='embed-color-picker'>\n          <object refClass=\"ColorPickerEditor\" \n            ref='$colorpicker' \n            key=\"colorpicker\" \n            value=\"".concat(this.state.value, "\" \n            onchange='localChangeColor' \n            onchangeend='localLastUpdate' \n          />        \n        </div>\n      ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('localChangeColor'),
    value: function value(key, color) {
      this.parent.trigger(this.props.onchange, color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('localLastUpdate'),
    value: function value(key, color) {
      this.parent.trigger(this.props.onchangeend, color);
    }
  }, {
    key: "setValue",
    value: function setValue(color) {
      this.state.value = color;
      this.children.$colorpicker.initColor(color);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.children.$colorpicker.initColor(this.props.value);
    }
  }]);

  return EmbedColorPicker;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  EmbedColorPicker: EmbedColorPicker_EmbedColorPicker
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/ColorPickerPopup.js






function ColorPickerPopup_createSuper(Derived) { var hasNativeReflectConstruct = ColorPickerPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ColorPickerPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var ColorPickerPopup_ColorPickerPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(ColorPickerPopup, _BasePopup);

  var _super = ColorPickerPopup_createSuper(ColorPickerPopup);

  function ColorPickerPopup() {
    classCallCheck_default()(this, ColorPickerPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(ColorPickerPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('colorpicker.popup.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'compact';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        color: 'rgba(0, 0, 0, 1)'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);

      if (this.state.target) {
        this.state.target.trigger(this.state.changeEvent, this.state.color, this.params);
      }
    }
  }, {
    key: "updateEndData",
    value: function updateEndData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);

      if (this.state.target) {
        this.state.target.trigger(this.state.changeEndEvent, this.state.color, this.params);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"color-picker-popup\">\n        <div class='box'>\n          <object refClass=\"EmbedColorPicker\" ref='$color' value='".concat(this.state.color, "' onchange='changeColor' onchangeend=\"changeEndColor\" />\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$projectColors'),
    value: function value() {
      var project = this.$selection.currentProject || {
        colors: []
      };
      var colors = project.colors;
      return colors.map(function (color) {
        return (
          /*html*/
          "\n      <div class='color-item' title='".concat(color.name, "'>\n        <div class='color-view' data-color='").concat(color.color, "' style='background-color: ").concat(color.color, "'></div>\n      </div>")
        );
      });
    }
  }, {
    key: Object(Event["CLICK"])('$projectColors .color-view'),
    value: function value(e) {
      this.updateData({
        color: e.$dt.attr('data-color')
      });
      this.children.$color.setValue(this.state.color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(color) {
      this.updateData({
        color: color
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeEndColor'),
    value: function value(color) {
      this.updateEndData({
        color: color
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showColorPickerPopup"),
    value: function value(data, params) {
      data.changeEvent = data.changeEvent || 'changeFillPopup';

      if (!(data.target instanceof UIElement["a" /* default */])) {
        throw new Error('ColorPicker needs data.target');
      }

      this.params = params;
      this.setState(data, false);
      this.children.$color.setValue(this.state.color);
      this.show(232);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideColorPickerPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return ColorPickerPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  ColorPickerPopup: ColorPickerPopup_ColorPickerPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/ImageSelectPopup.js






function ImageSelectPopup_createSuper(Derived) { var hasNativeReflectConstruct = ImageSelectPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageSelectPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ImageSelectPopup_ImageSelectPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(ImageSelectPopup, _BasePopup);

  var _super = ImageSelectPopup_createSuper(ImageSelectPopup);

  function ImageSelectPopup() {
    classCallCheck_default()(this, ImageSelectPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageSelectPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return 'Select a image';
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'compact';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        value: ''
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.state.context.trigger(this.state.changeEvent, this.state.value, {
        width: this.state.width,
        height: this.state.height,
        naturalWidth: this.state.naturalWidth,
        naturalHeight: this.state.naturalHeight
      });
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"image-select-popup\">\n        <div class='box' ref='$imageBox'>\n          \n        </div>\n      </div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$imageBox') + Event["DOMDIFF"],
    value: function value() {
      var project = this.$selection.currentProject || {
        images: []
      };
      return project.images.map(function (image, index) {
        return (
          /*html*/
          "<div class='image-item' ><img src='".concat(image.local, "' data-id=\"").concat(image.id, "\" /></div>")
        );
      });
    }
  }, {
    key: Object(Event["CLICK"])('$imageBox .image-item'),
    value: function value(e) {
      var $img = e.$dt.$('img');
      this.updateData({
        value: $img.attr('data-id'),
        naturalWidth: Length["a" /* Length */].px($img.naturalWidth),
        naturalHeight: Length["a" /* Length */].px($img.naturalHeight),
        width: Length["a" /* Length */].px($img.naturalWidth),
        height: Length["a" /* Length */].px($img.naturalHeight)
      });
      this.trigger('hideImageSelectPopup');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showImageSelectPopup"),
    value: function value(data, params) {
      this.setState({
        context: data.context,
        changeEvent: data.changeEvent,
        value: data.value,
        params: params
      }, false);
      this.refresh();
      this.show(500);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideImageSelectPopup"),
    value: function value() {
      this.hide();
    }
  }]);

  return ImageSelectPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  ImageSelectPopup: ImageSelectPopup_ImageSelectPopup
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/Gradient.js
var Gradient = __webpack_require__(41);

// CONCATENATED MODULE: ./src/el/editor/ui/property/ImageAssetPicker.js






function ImageAssetPicker_createSuper(Derived) { var hasNativeReflectConstruct = ImageAssetPicker_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageAssetPicker_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ImageAssetPicker_ImageAssetPicker = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ImageAssetPicker, _EditorElement);

  var _super = ImageAssetPicker_createSuper(ImageAssetPicker);

  function ImageAssetPicker() {
    classCallCheck_default()(this, ImageAssetPicker);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageAssetPicker, [{
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid'
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='image-asset-picker'>\n        <div class='image-list' ref='$imageList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$imageList") + Event["DOMDIFF"],
    value: function value() {
      var current = this.$selection.currentProject || {
        images: []
      };
      var images = current.images;
      var results = images.map(function (image) {
        return (
          /*html*/
          "\n        <div class='image-item'>\n          <div class='preview'>\n            <img src=\"".concat(image.local, "\" />\n          </div>\n        </div>\n      ")
        );
      });
      return results;
    }
  }, {
    key: Object(Event["CLICK"])('$imageList .image-item'),
    value: function value(e) {
      var $img = e.$dt.$('img');
      this.updateData($img.attr('src'));
    }
  }, {
    key: "updateData",
    value: function updateData(localUrl) {
      this.parent.trigger(this.props.onchange, localUrl);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addImageAsset'),
    value: function value() {
      this.refresh();
    }
  }]);

  return ImageAssetPicker;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ImageAssetPicker: ImageAssetPicker_ImageAssetPicker
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/GradientEditor.js
var GradientEditor = __webpack_require__(95);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/GradientPickerPopup.js








function GradientPickerPopup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function GradientPickerPopup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { GradientPickerPopup_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { GradientPickerPopup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function GradientPickerPopup_createSuper(Derived) { var hasNativeReflectConstruct = GradientPickerPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GradientPickerPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }









var GradientPickerPopup_GradientPickerPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(GradientPickerPopup, _BasePopup);

  var _super = GradientPickerPopup_createSuper(GradientPickerPopup);

  function GradientPickerPopup() {
    classCallCheck_default()(this, GradientPickerPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(GradientPickerPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('gradient.picker.popup.title');
    }
  }, {
    key: "initialize",
    value: function initialize() {
      get_default()(getPrototypeOf_default()(GradientPickerPopup.prototype), "initialize", this).call(this);

      this.selectedTab = "static-gradient";
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'fill-picker-popup';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"gradient-picker\" ref='$body' data-selected-editor=''>\n        <div class='box'>\n          <div ref='$gradientEditor'></div>\n        </div>\n        <div class='box'>\n          <div class='colorpicker'>\n            <object refClass=\"EmbedColorPicker\" ref='$color' onchange='changeColor' />                    \n          </div>\n          <div class='assetpicker'>\n            <object refClass=\"ImageAssetPicker\" ref='$asset' onchange='changeImageUrl' />\n          </div>\n        </div>\n      </div>\n     \n    "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTabType'),
    value: function value(type) {
      this.refs.$body.attr('data-selected-editor', type);
    }
  }, {
    key: "getColorString",
    value: function getColorString() {
      var value = '';

      if (this.state.image instanceof Gradient["a" /* Gradient */]) {
        value = this.state.image.getColorString();
      }

      return value;
    }
  }, {
    key: "getCurrentColor",
    value: function getCurrentColor() {
      return this.state.image.colorsteps[this.state.selectColorStepIndex || 0].color;
    }
  }, {
    key: Object(Event["LOAD"])('$gradientEditor'),
    value: function value() {
      return (
        /*html*/
        "<object refClass=\"GradientEditor\" \n      ref=\"$g\" \n      value=\"".concat(this.state.image, "\" \n      selectedIndex=\"").concat(this.state.selectColorStepIndex, "\" \n      onchange='changeGradientEditor'\n    />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeGradientEditor'),
    value: function value(data) {
      this.state.image = data;
      this.updateData();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(color) {
      this.children.$g.trigger('setColorStepColor', color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeImageUrl'),
    value: function value(url) {
      this.children.$g.trigger('setImageUrl', url);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showGradientPickerPopup"),
    value: function value(data, params) {
      data.changeEvent = data.changeEvent || 'changeFillPopup';
      data.image = data.gradient;
      data.params = params;
      this.setState(data);
      this.show(432);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("selectColorStep"),
    value: function value(color) {
      this.children.$color.setValue(color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeColorStep"),
    value: function value() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.state.image.reset(GradientPickerPopup_objectSpread({}, data));
      this.updateData();
    }
  }, {
    key: "updateData",
    value: function updateData() {
      this.state.instance.trigger(this.state.changeEvent, this.state.image, this.state.params);
    }
  }]);

  return GradientPickerPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  GradientPickerPopup: GradientPickerPopup_GradientPickerPopup
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/SVGFilterEditor.js + 6 modules
var SVGFilterEditor = __webpack_require__(135);

// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFilter.js + 32 modules
var SVGFilter = __webpack_require__(56);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/SVGFilterPopup.js






function SVGFilterPopup_createSuper(Derived) { var hasNativeReflectConstruct = SVGFilterPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGFilterPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var SVGFilterPopup_SVGFilterPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(SVGFilterPopup, _BasePopup);

  var _super = SVGFilterPopup_createSuper(SVGFilterPopup);

  function SVGFilterPopup() {
    classCallCheck_default()(this, SVGFilterPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFilterPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('svgfilter.popup.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'transparent';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        changeEvent: 'changeSVGFilterPopup',
        id: '',
        preview: true,
        filters: []
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.emit(this.state.changeEvent, this.state);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n    <div class='svg-property-editor-popup' ref='$popup'>\n      <div class=\"box\">\n        <div class='editor' ref='$editor'></div>\n      </div>\n    </div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$editor'),
    value: function value() {
      return (
        /*html*/
        "\n      <object refClass=\"SVGFilterEditor\" ref='$filter' title='Filter Type' key=\"filter\" onchange='changeFilterEditor'>\n        <property name=\"value\" valueType=\"json\">".concat(JSON.stringify(this.state.filters), "</property>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFilterEditor'),
    value: function value(key, filters) {
      this.updateData({
        filters: filters
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showSVGFilterPopup"),
    value: function value(data) {
      data.filters = data.filters.map(function (it) {
        return SVGFilter["a" /* SVGFilter */].parse(it);
      });
      data.preview = Object(func["isNotUndefined"])(data.preview) ? data.preview : true;
      this.setState(data);
      this.show(500);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("hideSVGFilterPopup"),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return SVGFilterPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  SVGFilterPopup: SVGFilterPopup_SVGFilterPopup
});
// EXTERNAL MODULE: ./src/el/editor/util/Resource.js
var Resource = __webpack_require__(38);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/BackgroundImagePositionPopup.js







function BackgroundImagePositionPopup_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundImagePositionPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundImagePositionPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var BackgroundImagePositionPopup_BackgroundImagePositionPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(BackgroundImagePositionPopup, _BasePopup);

  var _super = BackgroundImagePositionPopup_createSuper(BackgroundImagePositionPopup);

  function BackgroundImagePositionPopup() {
    classCallCheck_default()(this, BackgroundImagePositionPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundImagePositionPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('background.image.position.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        size: this.props.size || 'auto',
        repeat: this.props.repeat || 'repeat',
        x: this.props.x || Length["a" /* Length */].z(),
        y: this.props.y || Length["a" /* Length */].z(),
        width: this.props.width || Length["a" /* Length */].z(),
        height: this.props.height || Length["a" /* Length */].z(),
        blendMode: this.props.blendMode
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      this.emit(this.state.changeEvent, opt, this.state.params);
    }
  }, {
    key: "templateForSize",
    value: function templateForSize() {
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"SelectEditor\"  label=\"".concat(this.$i18n('background.image.position.popup.size'), "\" ref='$size' key='size' value=\"").concat(this.state.size, "\" options=\"contain,cover,auto\" onchange=\"changeRangeEditor\" />      \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "templateForX",
    value: function templateForX() {
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"RangeEditor\"  \n            label=\"X\"\n            calc=\"false\"            \n            ref=\"$x\" \n            key=\"x\"\n            value=\"".concat(this.state.x, "\"\n            min=\"-1000\" max=\"1000\" step=\"1\"\n            onchange=\"changeRangeEditor\"\n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForY",
    value: function templateForY() {
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"RangeEditor\"  \n            label=\"Y\" \n            calc=\"false\"       \n            ref=\"$y\" \n            key=\"y\"\n            value=\"".concat(this.state.y, "\"            \n            min=\"-1000\" max=\"1000\" step=\"1\"\n            onchange=\"changeRangeEditor\"\n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForWidth",
    value: function templateForWidth() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('background.image.position.popup.width'), "\"   \n          calc=\"false\"             \n          ref=\"$width\" \n          key=\"width\"\n          value=\"").concat(this.state.width, "\"          \n          min=\"0\" max=\"500\" step=\"1\" \n          onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForHeight",
    value: function templateForHeight() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('background.image.position.popup.height'), "\"\n          calc=\"false\"          \n          ref=\"$height\" \n          key=\"height\"\n          value=\"").concat(this.state.height, "\"          \n          min=\"0\" max=\"500\" step=\"1\" onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForRepeat",
    value: function templateForRepeat() {
      return (
        /*html*/
        "\n    <div class='popup-item grid-2'>\n      <label>".concat(this.$i18n('background.image.position.popup.repeat'), "</label>\n      <div class='repeat-list' ref=\"$repeat\" data-value='").concat(this.state.repeat, "'>\n          <button type=\"button\" value='no-repeat' title=\"").concat(this.$i18n('background.image.position.popup.type.no-repeat'), "\"></button>\n          <button type=\"button\" value='repeat' title=\"").concat(this.$i18n('background.image.position.popup.type.repeat'), "\"></button>\n          <button type=\"button\" value='repeat-x' title=\"").concat(this.$i18n('background.image.position.popup.type.repeat-x'), "\"></button>\n          <button type=\"button\" value='repeat-y' title=\"").concat(this.$i18n('background.image.position.popup.type.repeat-y'), "\"></button>\n          <button type=\"button\" value='space' title=\"").concat(this.$i18n('background.image.position.popup.type.space'), "\"></button>\n          <button type=\"button\" value='round' title=\"").concat(this.$i18n('background.image.position.popup.type.round'), "\"></button>\n      </div>\n    </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$repeat button"),
    value: function value(_ref) {
      var $t = _ref.$dt;
      this.refs.$repeat.attr("data-value", $t.value);
      this.updateData({
        repeat: $t.value
      });
    }
  }, {
    key: "templateForBlendMode",
    value: function templateForBlendMode() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"SelectEditor\"  label=\"".concat(this.$i18n('background.image.position.popup.blend'), "\" ref='$blend' key='blendMode' value=\"").concat(this.state.blendMode, "\" options=\"").concat(Resource["a" /* blend_list */], "\" onchange=\"changeRangeEditor\" />\n    </div>\n    ")
      );
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"background-image-position-picker\" ref='$picker'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$picker'),
    value: function value() {
      return (
        /*html*/
        "\n      \n      <div class='box'>\n\n        <div class='background-property'>\n          ".concat(this.templateForSize(), "        \n          ").concat(this.templateForX(), "\n          ").concat(this.templateForY(), "\n          ").concat(this.templateForWidth(), "\n          ").concat(this.templateForHeight(), "\n          ").concat(this.templateForRepeat(), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showBackgroundImagePositionPopup"),
    value: function value(data, params) {
      this.state.changeEvent = data.changeEvent || 'changeFillPopup';
      this.state.params = params;
      this.setState(data.data);
      this.show(460);
    }
  }]);

  return BackgroundImagePositionPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  BackgroundImagePositionPopup: BackgroundImagePositionPopup_BackgroundImagePositionPopup
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/FillEditor.js
var FillEditor = __webpack_require__(133);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/SVGStaticGradient.js
var SVGStaticGradient = __webpack_require__(57);

// CONCATENATED MODULE: ./src/el/editor/ui/popup/FillPickerPopup.js








function FillPickerPopup_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function FillPickerPopup_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { FillPickerPopup_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { FillPickerPopup_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function FillPickerPopup_createSuper(Derived) { var hasNativeReflectConstruct = FillPickerPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FillPickerPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }










var FillPickerPopup_FillPickerPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(FillPickerPopup, _BasePopup);

  var _super = FillPickerPopup_createSuper(FillPickerPopup);

  function FillPickerPopup() {
    classCallCheck_default()(this, FillPickerPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(FillPickerPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('fill.picker.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        image: SVGStaticGradient["a" /* SVGStaticGradient */].create()
      };
    }
  }, {
    key: "initialize",
    value: function initialize() {
      get_default()(getPrototypeOf_default()(FillPickerPopup.prototype), "initialize", this).call(this);

      this.selectedTab = "static-gradient";
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'fill-picker-popup';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"gradient-picker\" ref='$body' data-selected-editor=''>\n        <div class='box'>\n          <div ref='$gradientEditor'></div>\n        </div>\n        <div class='box'>\n          <div class='colorpicker'>\n            <object refClass=\"EmbedColorPicker\" ref='$color' onchange='changeColor' />                    \n          </div>\n          <div class='assetpicker'>\n            <object refClass=\"ImageAssetPicker\" ref='$asset' onchange='changeImageUrl' />\n          </div>\n        </div>\n      </div>\n     \n    "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTabType'),
    value: function value(type) {
      this.refs.$body.attr('data-selected-editor', type);
    }
  }, {
    key: "getColorString",
    value: function getColorString() {
      var value = '';

      if (this.state.image instanceof Gradient["a" /* Gradient */]) {
        value = this.state.image.getColorString();
      }

      return value;
    }
  }, {
    key: "getCurrentColor",
    value: function getCurrentColor() {
      return this.state.image.colorsteps[this.state.selectColorStepIndex || 0].color;
    }
  }, {
    key: Object(Event["LOAD"])('$gradientEditor'),
    value: function value() {
      return (
        /*html*/
        "<object refClass=\"FillEditor\" \n      ref=\"$g\" \n      value=\"".concat(this.state.image, "\" \n      selectedIndex=\"").concat(this.state.selectColorStepIndex, "\" \n      onchange='changeFillEditor'\n    />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFillEditor'),
    value: function value(data) {
      this.state.image = data;
      this.updateData();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(color) {
      this.children.$g.trigger('setColorStepColor', color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeImageUrl'),
    value: function value(url) {
      this.children.$g.trigger('setImageUrl', url);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showFillPickerPopup"),
    value: function value(data, params) {
      this.show(220);
      data.changeEvent = data.changeEvent || 'changeFillPopup'; // data.image = data.gradient

      data.params = params;
      this.trigger('selectColorStep', data.image.colorsteps[0].color);
      this.setState(data);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("selectColorStep"),
    value: function value(color) {
      this.children.$color.setValue(color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeColorStep"),
    value: function value() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.state.image.reset(FillPickerPopup_objectSpread({}, data));
      this.updateData();
    }
  }, {
    key: "updateData",
    value: function updateData() {
      this.state.instance.trigger(this.state.changeEvent, this.state.image, this.state.params);
    }
  }]);

  return FillPickerPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  FillPickerPopup: FillPickerPopup_FillPickerPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/PatternInfoPopup.js







function PatternInfoPopup_createSuper(Derived) { var hasNativeReflectConstruct = PatternInfoPopup_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PatternInfoPopup_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PatternInfoPopup_PatternInfoPopup = /*#__PURE__*/function (_BasePopup) {
  inherits_default()(PatternInfoPopup, _BasePopup);

  var _super = PatternInfoPopup_createSuper(PatternInfoPopup);

  function PatternInfoPopup() {
    classCallCheck_default()(this, PatternInfoPopup);

    return _super.apply(this, arguments);
  }

  createClass_default()(PatternInfoPopup, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('pattern.info.popup.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        type: this.props.type || 'grid',
        x: this.props.x || Length["a" /* Length */].z(),
        y: this.props.y || Length["a" /* Length */].z(),
        width: this.props.width || Length["a" /* Length */].z(),
        height: this.props.height || Length["a" /* Length */].z(),
        lineWidth: this.props.lineWidth || Length["a" /* Length */].px(1),
        lineHeight: this.props.lineHeight || Length["a" /* Length */].px(1),
        foreColor: this.props.foreColor || 'black',
        backColor: this.props.backColor || 'transparent',
        blendMode: this.props.blendMode || 'normal'
      };
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(opt, false);
      var _this$state = this.state,
          x = _this$state.x,
          y = _this$state.y,
          width = _this$state.width,
          height = _this$state.height,
          foreColor = _this$state.foreColor,
          backColor = _this$state.backColor,
          blendMode = _this$state.blendMode,
          lineWidth = _this$state.lineWidth,
          lineHeight = _this$state.lineHeight;
      this.state.instance.trigger(this.state.changeEvent, {
        x: x,
        y: y,
        width: width,
        height: height,
        foreColor: foreColor,
        backColor: backColor,
        blendMode: blendMode,
        lineWidth: lineWidth,
        lineHeight: lineHeight
      }, this.state.params);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "templateForX",
    value: function templateForX() {
      if (this.hasNotX()) return '';
      var label = 'X';
      var units = '';

      if (this.state.type === 'diagonal-line') {
        label = this.$i18n('pattern.info.popup.rotate');
        units = 'deg';
      }

      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"RangeEditor\"  \n            label=\"".concat(label, "\"\n            calc=\"false\"            \n            ref=\"$x\" \n            key=\"x\"\n            value=\"").concat(this.state.x, "\"\n            min=\"0\" max=\"1000\" step=\"1\"\n            units=\"").concat(units, "\"\n            onchange=\"changeRangeEditor\"\n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForY",
    value: function templateForY() {
      if (this.hasNotY()) return '';
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"RangeEditor\"  \n            label=\"Y\" \n            calc=\"false\"       \n            ref=\"$y\" \n            key=\"y\"\n            value=\"".concat(this.state.y, "\"            \n            min=\"0\" max=\"1000\" step=\"1\"\n            onchange=\"changeRangeEditor\"\n        />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForWidth",
    value: function templateForWidth() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('pattern.info.popup.width'), "\"   \n          calc=\"false\"             \n          ref=\"$width\" \n          key=\"width\"\n          value=\"").concat(this.state.width, "\"          \n          min=\"0\" max=\"500\" step=\"1\" \n          onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForHeight",
    value: function templateForHeight() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('pattern.info.popup.height'), "\"\n          calc=\"false\"          \n          ref=\"$height\" \n          key=\"height\"\n          value=\"").concat(this.state.height, "\"          \n          min=\"0\" max=\"500\" step=\"1\" onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "hasNotLineWidth",
    value: function hasNotLineWidth() {
      return ['check'].includes(this.state.type);
    }
  }, {
    key: "hasNotLineHeight",
    value: function hasNotLineHeight() {
      return ['cross-dot', 'dot', 'check', 'diagonal-line', 'horizontal-line'].includes(this.state.type);
    }
  }, {
    key: "hasNotX",
    value: function hasNotX() {
      return ['grid', 'dot', 'horizontal-line'].includes(this.state.type);
    }
  }, {
    key: "hasNotY",
    value: function hasNotY() {
      return ['grid', 'dot', 'diagonal-line', 'vertical-line'].includes(this.state.type);
    }
  }, {
    key: "templateForLineWidth",
    value: function templateForLineWidth() {
      if (this.hasNotLineWidth()) return '';
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('pattern.info.popup.lineWidth'), "\"   \n          calc=\"false\"             \n          ref=\"$lineWidth\" \n          key=\"lineWidth\"\n          value=\"").concat(this.state.lineWidth, "\"          \n          min=\"0\" max=\"500\" step=\"1\" \n          onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForLineHeight",
    value: function templateForLineHeight() {
      if (this.hasNotLineHeight()) return '';
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"RangeEditor\"  \n          label=\"".concat(this.$i18n('pattern.info.popup.lineHeight'), "\"\n          calc=\"false\"          \n          ref=\"$lineHeight\" \n          key=\"lineHeight\"\n          value=\"").concat(this.state.lineHeight, "\"          \n          min=\"0\" max=\"500\" step=\"1\" onchange=\"changeRangeEditor\"\n      />\n    </div>\n    ")
      );
    }
  }, {
    key: "templateForForeColor",
    value: function templateForForeColor() {
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"ColorViewEditor\" \n            ref='$foreColor' \n            label=\"".concat(this.$i18n('pattern.info.popup.foreColor'), "\" \n            key='foreColor' \n            value=\"").concat(this.state.foreColor, "\"\n            onchange=\"changeRangeEditor\" />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForBackColor",
    value: function templateForBackColor() {
      return (
        /*html*/
        "\n      <div class='popup-item'>\n        <object refClass=\"ColorViewEditor\" \n            ref='$backColor' \n            label=\"".concat(this.$i18n('pattern.info.popup.backColor'), "\" \n            key='backColor' \n            value=\"").concat(this.state.backColor, "\"\n            onchange=\"changeRangeEditor\" />\n      </div>\n    ")
      );
    }
  }, {
    key: "templateForBlendMode",
    value: function templateForBlendMode() {
      return (
        /*html*/
        "\n    <div class='popup-item'>\n      <object refClass=\"BlendSelectEditor\" \n            ref='$blend' \n            key='blendMode' \n            label=\"".concat(this.$i18n('pattern.info.popup.blend'), "\"\n            value=\"").concat(this.state.blendMode, "\" \n            onchange=\"changeRangeEditor\" \n        />\n    </div>\n    ")
      );
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"background-image-position-picker\" ref='$picker'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$picker'),
    value: function value() {
      return (
        /*html*/
        "\n      \n      <div class='box'>\n\n        <div class='background-property'>      \n          ".concat(this.templateForWidth(), "\n          ").concat(this.templateForHeight(), "        \n          ").concat(this.templateForLineWidth(), "\n          ").concat(this.templateForLineHeight(), "                  \n          ").concat(this.templateForX(), "\n          ").concat(this.templateForY(), "\n          ").concat(this.templateForForeColor(), "\n          ").concat(this.templateForBackColor(), "\n          ").concat(this.templateForBlendMode(), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("showPatternInfoPopup"),
    value: function value(data, params) {
      this.state.changeEvent = data.changeEvent || 'changePatternInfoPopup';
      this.state.params = params;
      this.state.instance = data.instance;
      this.setState(data.data);
      this.show(460);
    }
  }]);

  return PatternInfoPopup;
}(BasePopup_BasePopup);


Object(registElement["a" /* registElement */])({
  PatternInfoPopup: PatternInfoPopup_PatternInfoPopup
});
// CONCATENATED MODULE: ./src/el/editor/ui/popup/index.js














/* harmony default export */ var popup = ({
  PatternInfoPopup: PatternInfoPopup_PatternInfoPopup,
  FillPickerPopup: FillPickerPopup_FillPickerPopup,
  BackgroundImagePositionPopup: BackgroundImagePositionPopup_BackgroundImagePositionPopup,
  SVGFilterPopup: SVGFilterPopup_SVGFilterPopup,
  GradientPickerPopup: GradientPickerPopup_GradientPickerPopup,
  ImageSelectPopup: ImageSelectPopup_ImageSelectPopup,
  ColorPickerPopup: ColorPickerPopup_ColorPickerPopup,
  SelectorPopup: SelectorPopup_SelectorPopup,
  ClipPathPopup: ClipPathPopup_ClipPathPopup,
  KeyframePopup: KeyframePopup_KeyframePopup,
  AnimationPropertyPopup: AnimationPropertyPopup_AnimationPropertyPopup,
  TransitionPropertyPopup: TransitionPropertyPopup_TransitionPropertyPopup,
  TextShadowPropertyPopup: TextShadowPropertyPopup_TextShadowPropertyPopup,
  BoxShadowPropertyPopup: BoxShadowPropertyPopup_BoxShadowPropertyPopup
});

/***/ }),
/* 162 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./src/el/editor/items/Project.js + 45 modules
var Project = __webpack_require__(70);

// EXTERNAL MODULE: ./src/el/editor/items/Component.js
var Component = __webpack_require__(51);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var helpers_get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(helpers_get);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// EXTERNAL MODULE: ./src/el/editor/manager/ComponentManager.js
var ComponentManager = __webpack_require__(33);

// CONCATENATED MODULE: ./src/el/editor/items/layers/CubeLayer.js









function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var faceKeys = ['front', 'back', 'left', 'right', 'top', 'bottom'];
var customSelectorName = {
  'front.color': '.front',
  'back.color': '.back',
  'left.color': '.left',
  'right.color': '.right',
  'top.color': '.top',
  'bottom.color': '.bottom',
  'front.background': '.front',
  'back.background': '.back',
  'left.background': '.left',
  'right.background': '.right',
  'top.background': '.top',
  'bottom.background': '.bottom'
};
var cssKeyValue = {
  'position': true,
  'left': true,
  'top': true,
  'right': true,
  'bottom': true,
  'width': true,
  'height': true,
  'opacity': true,
  'text-fill-color': true,
  'text-stroke-color': true,
  'text-stroke-width': true,
  'background-clip': true,
  'clip-path': true,
  'animation': true,
  'transition': true,
  'transform': true,
  'transform-origin': true,
  'transform-style': true,
  'perspective': true,
  'perspective-origin': true,
  'offset-path': true
};
var nestedCssKeyValue = {
  'filter': true,
  'mix-blend-mode': true,
  'background-image': true,
  'border-radius': true,
  'border': true
};
var CubeLayer_CubeLayer = /*#__PURE__*/function (_Component) {
  inherits_default()(CubeLayer, _Component);

  var _super = _createSuper(CubeLayer);

  function CubeLayer() {
    classCallCheck_default()(this, CubeLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(CubeLayer, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(CubeLayer.prototype), "getDefaultObject", this).call(this, _objectSpread({
        itemType: 'cube',
        name: "New Cube",
        'transform-style': 'preserve-3d',
        'backface-visibility': 'visible',
        rate: Length["a" /* Length */].number(1),
        border: 'border:1px solid black'
      }, obj));
    }
  }, {
    key: "getProps",
    value: function getProps() {
      var rate = this.json.rate.value;
      return [{
        key: "rate",
        editor: 'NumberRangeEditor',
        editorOptions: {
          label: "radius",
          min: 0,
          max: 10,
          step: 0.1
        },
        refresh: true,
        defaultValue: rate
      }, {
        key: "backface-visibility",
        editor: 'SelectIconEditor',
        editorOptions: {
          label: 'visibility',
          options: 'visible,hidden'
        },
        refresh: true,
        defaultValue: this.json['backface-visibility']
      }, 'Background Color'].concat(toConsumableArray_default()(faceKeys.map(function (key) {
        return {
          key: "".concat(key, ".color"),
          editor: 'ColorViewEditor',
          editorOptions: {
            label: key,
            params: "".concat(key, ".color")
          },
          defaultValue: 'rgba(0, 0, 0, 1)'
        };
      })), ['Background Image'], toConsumableArray_default()(faceKeys.map(function (key) {
        return {
          key: "".concat(key, ".background"),
          editor: 'BackgroundImageEditor',
          editorOptions: {
            title: key
          },
          defaultValue: ''
        };
      })));
    }
  }, {
    key: "setCustomKeyframes",
    value: function setCustomKeyframes(keyframes, customProperty) {
      if (customProperty.property.includes('.color')) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] ").concat(customSelectorName[customProperty.property]),
          properties: [_objectSpread(_objectSpread({}, customProperty), {}, {
            'property': 'background-color'
          })]
        });
      }

      if (customProperty.property.includes('.background')) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] ").concat(customSelectorName[customProperty.property]),
          properties: [_objectSpread(_objectSpread({}, customProperty), {}, {
            'property': 'background-image'
          })]
        });
      }
    }
  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      var _this = this;

      var customProperties = [];
      var cssProperties = [];
      var nestedProperties = [];
      properties.forEach(function (p) {
        if (p.property.includes('.color') || p.property.includes('.background')) {
          customProperties.push(p);
        } else if (cssKeyValue[p.property]) {
          cssProperties.push(p);
        } else if (nestedCssKeyValue[p.property]) {
          nestedProperties.push(p);
        }
      });
      var keyframes = [];

      if (cssProperties.length) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"]"),
          properties: cssProperties
        });
      }

      if (nestedProperties.length) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] div"),
          properties: nestedProperties
        });
      }

      if (customProperties.length) {
        customProperties.forEach(function (c) {
          _this.setCustomKeyframes(keyframes, c);
        });
      }

      return keyframes;
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(CubeLayer.prototype), "convert", this).call(this, json);
      json.rate = Length["a" /* Length */].parse(json.rate);
      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var _this2 = this;

      var obj = {};
      faceKeys.forEach(function (key) {
        obj["".concat(key, ".color")] = _this2.json["".concat(key, ".color")];
        obj["".concat(key, ".background")] = _this2.json["".concat(key, ".background")];
      });
      return _objectSpread(_objectSpread({}, get_default()(getPrototypeOf_default()(CubeLayer.prototype), "toCloneObject", this).call(this)), {}, {
        rate: this.json.rate.clone()
      }, obj);
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Cube";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].cube;
    }
  }, {
    key: "toDefaultCSS",
    value: function toDefaultCSS() {
      var obj = {};
      if (this.json.x) obj.left = this.json.x;
      if (this.json.y) obj.top = this.json.y;
      obj.visibility = this.json.visible ? 'visible' : 'hidden';
      return _objectSpread(_objectSpread({}, obj), this.toKeyListCSS('position', 'right', 'bottom', 'width', 'height', 'transform-origin', 'transform', 'transform-style', 'perspective', 'perspective-origin' // 'filter',
      ));
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.toVariableCSS()), this.toDefaultCSS()), this.toWebkitCSS()), this.toBoxModelCSS()), this.toAnimationCSS()), this.toTransitionCSS()), this.toLayoutItemCSS());
    }
  }, {
    key: "toNestedCSS",
    value: function toNestedCSS() {
      var json = this.json;
      var rate = json.rate.value;
      var width = json.width;
      var height = json.height;
      var halfWidth = width.value / 2;
      var halfHeight = height.value / 2;
      var backfaceVisibility = json['backface-visibility'];

      var css = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.toKeyListCSS('filter', 'mix-blend-mode', 'border-radius', 'background-color', 'opacity', 'color')), this.toClipPathCSS()), this.toBackgroundImageCSS()), this.toBorderCSS());

      return [{
        selector: 'div',
        cssText: "\n          position: absolute;\n          left: 0px;\n          top: 0px;\n          bottom: 0px;\n          right: 0px;\n          opacity: 1;\n          pointer-events: none;\n          ".concat(Object(func["CSS_TO_STRING"])(css), "\n        ").trim()
      }, {
        selector: '.front',
        cssText: "\n          transform:rotateY(0deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";     \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(json['front.color'] ? "background-color: ".concat(json['front.color'], ";") : '', "\n          ").concat(json['front.background'] ? "".concat(json['front.background'], ";") : '', "\n\n        ").trim()
      }, {
        selector: '.back',
        cssText: "\n          transform: rotateY(180deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";        \n          backface-visibility: ").concat(backfaceVisibility, ";              \n          ").concat(json['back.color'] ? "background-color: ".concat(json['back.color'], ";") : '', "                  \n          ").concat(json['back.background'] ? "".concat(json['back.background'], ";") : '', "\n        ").trim()
      }, {
        selector: '.left',
        cssText: "\n          transform: rotateY(-90deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";    \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(json['left.color'] ? "background-color: ".concat(json['left.color'], ";") : '', "                          \n          ").concat(json['left.background'] ? "".concat(json['left.background'], ";") : '', "\n        ").trim()
      }, {
        selector: '.right',
        cssText: "\n          transform: rotateY(90deg) translateZ(".concat(halfWidth * rate, "px);\n          width: ").concat(width, ";\n          height: ").concat(height, ";      \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(json['right.color'] ? "background-color: ".concat(json['right.color'], ";") : '', "                        \n          ").concat(json['right.background'] ? "".concat(json['right.background'], ";") : '', "          \n        ").trim()
      }, {
        selector: '.top',
        cssText: "\n          transform: rotateX(90deg) translateZ(".concat(halfHeight * rate, "px);\n          top: ").concat(halfHeight - halfWidth, "px;\n          width: ").concat(width, ";\n          height: ").concat(width, ";\n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(json['top.color'] ? "background-color: ".concat(json['top.color'], ";") : '', "      \n          ").concat(json['top.background'] ? "".concat(json['top.background'], ";") : '', "              \n        ").trim()
      }, {
        selector: '.bottom',
        cssText: "\n          transform: rotateX(-90deg) translateZ(".concat(halfHeight * rate, "px);\n          top: ").concat(halfHeight - halfWidth, "px;          \n          width: ").concat(width, ";\n          height: ").concat(width, ";    \n          backface-visibility: ").concat(backfaceVisibility, ";          \n          ").concat(json['bottom.color'] ? "background-color: ".concat(json['bottom.color'], ";") : '', "\n          ").concat(json['bottom.background'] ? "".concat(json['bottom.background'], ";") : '', "                          \n        ").trim()
      }];
    }
  }, {
    key: "html",
    get: function get() {
      var _this$json = this.json,
          id = _this$json.id,
          itemType = _this$json.itemType;
      return (
        /*html*/
        "\n      <div class='element-item ".concat(itemType, "' data-id=\"").concat(id, "\">\n        ").concat(this.toDefString, "\n        ").concat(faceKeys.map(function (key) {
          return (
            /*html*/
            "<div class='".concat(key, "'></div>")
          );
        }).join(''), "\n      </div>")
      );
    }
  }, {
    key: "svg",
    get: function get() {
      var x = this.json.x.value;
      var y = this.json.y.value;
      return this.toSVG(x, y);
    }
  }, {
    key: "toSVG",
    value: function toSVG(x, y) {
      var isRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var _this$json2 = this.json,
          width = _this$json2.width,
          height = _this$json2.height;
      var css = this.toCSS();
      var nestedCSS = this.toNestedCSS();
      var keyCSS = {};
      var common = nestedCSS.find(function (it) {
        return it.selector === 'div';
      }) || {
        cssText: ''
      };
      common = common.cssText.replace(/\n/g, '');
      faceKeys.forEach(function (key) {
        keyCSS[key] = nestedCSS.find(function (it) {
          return it.selector === '.' + key;
        }) || {
          cssText: ''
        };
        keyCSS[key] = keyCSS[key].cssText.replace(/\n/g, '');
      });

      if (isRoot) {
        delete css.left;
        delete css.top;

        if (css.position === 'absolute') {
          delete css.position;
        }

        return this.wrapperRootSVG(x, y, width, height,
        /*html*/
        "\n        <foreignObject ".concat(Object(func["OBJECT_TO_PROPERTY"])({
          width: width.value,
          height: height.value,
          overflow: 'visible'
        }), ">\n          <div xmlns=\"http://www.w3.org/1999/xhtml\">\n            <div style=\"").concat(Object(func["CSS_TO_STRING"])(css), "\">\n            ").concat(faceKeys.map(function (key) {
          return "<div style=\"".concat(common, ";").concat(keyCSS[key], "\"></div>");
        }).join(''), "          \n          </div>   \n          </div>\n        </foreignObject>          \n\n      "));
      } else {
        return (
          /*html*/
          "\n        ".concat(this.toDefString, "\n        <foreignObject ").concat(Object(func["OBJECT_TO_PROPERTY"])({
            width: width.value,
            height: height.value,
            overflow: 'visible'
          }), ">\n          <div xmlns=\"http://www.w3.org/1999/xhtml\">\n            <div style=\"").concat(Object(func["CSS_TO_STRING"])(css), "\">\n              ").concat(faceKeys.map(function (key) {
            return "<div style=\"".concat(common, ";").concat(keyCSS[key], "\"></div>");
          }).join(''), "          \n            </div>   \n          </div>\n        </foreignObject>          \n      ")
        );
      }
    }
  }], [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].cube;
    }
  }]);

  return CubeLayer;
}(Component["a" /* Component */]);
ComponentManager["a" /* ComponentManager */].registerComponent('cube', CubeLayer_CubeLayer);
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// CONCATENATED MODULE: ./src/el/editor/items/layers/CylinderLayer.js










function CylinderLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function CylinderLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CylinderLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CylinderLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function CylinderLayer_createSuper(Derived) { var hasNativeReflectConstruct = CylinderLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CylinderLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var customKeyValue = {
  'count': true,
  'rate': true,
  'face': true
};
var CylinderLayer_cssKeyValue = {
  'position': true,
  'left': true,
  'top': true,
  'right': true,
  'bottom': true,
  'width': true,
  'height': true,
  'opacity': true,
  'text-fill-color': true,
  'text-stroke-color': true,
  'text-stroke-width': true,
  'background-clip': true,
  'clip-path': true,
  'animation': true,
  'transition': true,
  'transform': true,
  'transform-origin': true,
  'transform-style': true,
  'perspective': true,
  'perspective-origin': true,
  'offset-path': true
};
var CylinderLayer_nestedCssKeyValue = {
  'filter': true,
  'mix-blend-mode': true,
  'background-image': true,
  'background-color': true,
  'border-radius': true,
  'border': true
};
var CylinderLayer_CylinderLayer = /*#__PURE__*/function (_Component) {
  inherits_default()(CylinderLayer, _Component);

  var _super = CylinderLayer_createSuper(CylinderLayer);

  function CylinderLayer() {
    classCallCheck_default()(this, CylinderLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(CylinderLayer, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(CylinderLayer.prototype), "getDefaultObject", this).call(this, CylinderLayer_objectSpread({
        itemType: 'cylinder',
        name: "New Cylinder",
        'transform-style': 'preserve-3d',
        'backface-visibility': 'visible',
        transform: 'rotateX(10deg) rotateY(30deg)',
        count: Length["a" /* Length */].number(40),
        rate: Length["a" /* Length */].number(1),
        border: 'border-top: 1px solid black;border-bottom: 1px solid black;'
      }, obj));
    }
  }, {
    key: "getProps",
    value: function getProps() {
      var count = this.json.count.value;
      var rate = this.json.rate.value;
      return ['Side', {
        key: "count",
        editor: 'NumberRangeEditor',
        editorOptions: {
          label: "Count",
          min: 3,
          max: 100,
          step: 1
        },
        refresh: true,
        defaultValue: count
      }, {
        key: "rate",
        editor: 'NumberRangeEditor',
        editorOptions: {
          label: "radius",
          min: 0,
          max: 10,
          step: 0.1
        },
        refresh: true,
        defaultValue: rate
      }, {
        key: "backface-visibility",
        editor: 'SelectIconEditor',
        editorOptions: {
          label: 'visibility',
          options: 'visible,hidden'
        },
        refresh: true,
        defaultValue: this.json['backface-visibility']
      }, 'Color'].concat(toConsumableArray_default()(Object(func["repeat"])(count).map(function (it, index) {
        return {
          key: "face.".concat(index, ".color"),
          editor: 'ColorViewEditor',
          editorOptions: {
            label: "face ".concat(index),
            params: "face.".concat(index, ".color")
          },
          defaultValue: 'rgba(0, 0, 0, 1)'
        };
      })), ['Background'], toConsumableArray_default()(Object(func["repeat"])(count).map(function (it, index) {
        return {
          key: "face.".concat(index, ".background"),
          editor: 'BackgroundImageEditor',
          editorOptions: {
            title: "face ".concat(index)
          },
          defaultValue: ''
        };
      })));
    }
  }, {
    key: "setCustomKeyframes",
    value: function setCustomKeyframes(keyframes, customProperty) {
      var _this = this;

      if (customProperty.property === 'rate') {
        var width = this.json.width;
        var count = this.json.count.value;
        var w = width.value;
        var r = w / 2;
        var angle = 360 / count;
        var faceList = Object(func["repeat"])(count).map(function (it, index) {
          var rotateY = index * angle;
          return {
            selector: "[data-id=\"".concat(_this.json.id, "\"] .face[data-index=\"").concat(index, "\"]"),
            properties: [{
              keyframes: customProperty.keyframes.map(function (_ref) {
                var time = _ref.time,
                    value = _ref.value,
                    timing = _ref.timing;
                return {
                  time: time,
                  value: "rotateY(".concat(rotateY, "deg) translateZ(").concat(r * value, "px)"),
                  timing: timing
                };
              }),
              'property': 'transform' // 흠 하나씩 나열해야할 듯 

            }]
          };
        });
        keyframes.push.apply(keyframes, faceList);
      }

      if (customProperty.property.includes('.color')) {
        var _customProperty$prope = customProperty.property.split('.'),
            _customProperty$prope2 = slicedToArray_default()(_customProperty$prope, 3),
            _ = _customProperty$prope2[0],
            index = _customProperty$prope2[1],
            _ = _customProperty$prope2[2];

        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] .face[data-index=\"").concat(index, "\"]"),
          properties: [CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, customProperty), {}, {
            'property': 'background-color' // 흠 하나씩 나열해야할 듯 

          })]
        });
      }

      if (customProperty.property.includes('.background')) {
        var _customProperty$prope3 = customProperty.property.split('.'),
            _customProperty$prope4 = slicedToArray_default()(_customProperty$prope3, 3),
            _ = _customProperty$prope4[0],
            index = _customProperty$prope4[1],
            _ = _customProperty$prope4[2];

        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] .face[data-index=\"").concat(index, "\"]"),
          properties: [CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, customProperty), {}, {
            'property': 'background-image' // 흠 하나씩 나열해야할 듯 

          })]
        });
      }
    }
  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      var _this2 = this;

      var customProperties = [];
      var cssProperties = [];
      var nestedProperties = [];
      properties.forEach(function (p) {
        if (p.property.includes('face') || customKeyValue[p.property]) {
          customProperties.push(p);
        } else if (CylinderLayer_cssKeyValue[p.property]) {
          cssProperties.push(p);
        } else if (CylinderLayer_nestedCssKeyValue[p.property]) {
          nestedProperties.push(p);
        }
      });
      var keyframes = [];

      if (cssProperties.length) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"]"),
          properties: cssProperties
        });
      }

      if (nestedProperties.length) {
        keyframes.push({
          selector: "[data-id=\"".concat(this.json.id, "\"] div"),
          properties: nestedProperties
        });
      }

      if (customProperties.length) {
        customProperties.forEach(function (c) {
          _this2.setCustomKeyframes(keyframes, c);
        });
      }

      return keyframes;
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(CylinderLayer.prototype), "convert", this).call(this, json);
      json.count = Length["a" /* Length */].parse(json.count);
      json.rate = Length["a" /* Length */].parse(json.rate);
      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var _this3 = this;

      var obj = {};
      var count = this.json.count.value;
      Object(func["repeat"])(count).forEach(function (it, index) {
        obj["face.".concat(index, ".color")] = _this3.json["face.".concat(index, ".color")];
        obj["face.".concat(index, ".background")] = _this3.json["face.".concat(index, ".background")];
      });
      return CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, get_default()(getPrototypeOf_default()(CylinderLayer.prototype), "toCloneObject", this).call(this)), {}, {
        count: this.json.count.clone(),
        rate: this.json.rate.clone()
      }, obj);
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Cylinder";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].cylinder;
    }
  }, {
    key: "toDefaultCSS",
    value: function toDefaultCSS() {
      var obj = {};
      if (this.json.x) obj.left = this.json.x;
      if (this.json.y) obj.top = this.json.y;
      return CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, obj), this.toKeyListCSS('position', 'right', 'bottom', 'width', 'height', 'transform-origin', 'transform', 'transform-style', 'perspective', 'perspective-origin' // 'filter',
      ));
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, this.toVariableCSS()), this.toDefaultCSS()), this.toWebkitCSS()), this.toBoxModelCSS()), this.toAnimationCSS()), this.toTransitionCSS());
    }
  }, {
    key: "toNestedCSS",
    value: function toNestedCSS() {
      var json = this.json;
      var count = json.count.value;
      var width = json.width;
      var backfaceVisibility = json['backface-visibility'];
      var rate = json.rate.value;
      var _this$cylinderInfo = this.cylinderInfo,
          angle = _this$cylinderInfo.angle,
          r = _this$cylinderInfo.r,
          faceWidth = _this$cylinderInfo.faceWidth;

      var css = CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread(CylinderLayer_objectSpread({}, this.toKeyListCSS('filter', 'mix-blend-mode', 'border-radius', 'opacity', 'background-color')), this.toBackgroundImageCSS()), this.toBorderCSS()), this.toClipPathCSS());

      var faceList = Object(func["repeat"])(count).map(function (it, index) {
        var rotateY = index * angle;
        var colorKey = "face.".concat(index, ".color");
        var backgroundKey = "face.".concat(index, ".background");
        return {
          selector: ".face[data-index=\"".concat(index, "\"]"),
          cssText: "\n          transform:rotateY(".concat(rotateY, "deg) translateZ(").concat(r * rate, "px);\n          ").concat(json[colorKey] ? "background-color: ".concat(json[colorKey], ";") : '', "\n          ").concat(json[backgroundKey] ? "".concat(json[backgroundKey], ";") : '', "\n        ").trim()
        };
      });
      return [{
        selector: '.face',
        cssText: "\n          position: absolute;\n          left: ".concat(width.value / 2 - faceWidth / 2, "px;\n          top: 0px;\n          bottom: 0px;\n          right: 0px;\n          width: ").concat(faceWidth, "px;\n          backface-visibility: ").concat(backfaceVisibility, ";\n          opacity: 1;\n          pointer-events: none;\n          ").concat(Object(func["CSS_TO_STRING"])(css), "\n        ").trim()
      }].concat(toConsumableArray_default()(faceList));
    }
  }, {
    key: "cylinderInfo",
    get: function get() {
      var width = this.json.width;
      var w = width.value;
      var h = w;
      var r = w / 2;
      var yr = h / 2;
      var center = {
        x: r,
        y: yr
      };
      var polygon = [];
      var count = this.json.count.value;
      if (count < 3) count = 3;
      var angle = 360 / count;

      for (var i = 0; i < 360; i += angle) {
        polygon.push(Object(math["getXYInCircle"])(i, r, center.x, center.y));
      }

      var faceWidth = Object(math["getDist"])(polygon[0].x, polygon[0].y, polygon[1].x, polygon[1].y);
      var centerR = {
        x: (polygon[0].x + polygon[1].x) / 2,
        y: (polygon[0].y + polygon[1].y) / 2
      };
      var r = Object(math["getDist"])(centerR.x, centerR.y, center.x, center.y);
      return {
        polygon: polygon,
        faceWidth: faceWidth,
        angle: angle,
        r: r
      };
    }
  }, {
    key: "updateFunction",
    value: function updateFunction(currentElement) {
      get_default()(getPrototypeOf_default()(CylinderLayer.prototype), "updateFunction", this).call(this, currentElement);

      var count = +currentElement.attr('data-count');

      if (count !== this.json.count.value) {
        currentElement.$$('.face').forEach(function (it) {
          return it.remove();
        });
        var string = Object(func["repeat"])(this.json.count.value).map(function (it, index) {
          return (
            /*html*/
            "<div class='face' data-index=\"".concat(index, "\"></div>")
          );
        }).join('');
        currentElement.appendHTML(string);
        currentElement.attr('data-count', this.json.count);
      }
    }
  }, {
    key: "html",
    get: function get() {
      var _this$json = this.json,
          id = _this$json.id,
          itemType = _this$json.itemType;
      var count = this.json.count.value;
      return (
        /*html*/
        "\n      <div class='element-item ".concat(itemType, "' data-id=\"").concat(id, "\" data-count=\"").concat(count, "\">\n        ").concat(this.toDefString, "\n        ").concat(Object(func["repeat"])(count).map(function (it, index) {
          return (
            /*html*/
            "<div class='face' data-index=\"".concat(index, "\"></div>")
          );
        }).join(''), "\n      </div>")
      );
    }
  }, {
    key: "svg",
    get: function get() {
      var _this$json2 = this.json,
          width = _this$json2.width,
          height = _this$json2.height,
          x = _this$json2.x,
          y = _this$json2.y;
      x = x.value;
      y = y.value;
      var css = this.toCSS();
      var nestedCSS = this.toNestedCSS();
      var count = this.json.count.value;
      var common = nestedCSS.find(function (it) {
        return it.selector === '.face';
      }) || {
        cssText: ''
      };
      common = common.cssText.replace(/\n/g, '');
      var cssTextList = Object(func["repeat"])(count).map(function (it, index) {
        return nestedCSS[index + 1].cssText.replace(/\n/g, '');
      });
      delete css.left;
      delete css.top;

      if (css.position === 'absolute') {
        delete css.position;
      }

      return (
        /*html*/
        "\n    <g transform=\"translate(".concat(x, ", ").concat(y, ")\">\n    ").concat(this.toDefString, "\n      <foreignObject ").concat(Object(func["OBJECT_TO_PROPERTY"])({
          width: width.value,
          height: height.value,
          overflow: 'visible'
        }), ">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">\n          <div style=\"").concat(Object(func["CSS_TO_STRING"])(css), "\">\n            ").concat(Object(func["repeat"])(count).map(function (it, index) {
          return (
            /*html*/
            "<div class='face' data-index=\"".concat(index, "\" style='").concat(common, ";").concat(cssTextList[index], ";'></div>")
          );
        }).join(''), "\n          </div>\n        </div>\n      </foreignObject>    \n    </g>\n")
      );
    }
  }], [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].cylinder;
    }
  }]);

  return CylinderLayer;
}(Component["a" /* Component */]);
ComponentManager["a" /* ComponentManager */].registerComponent('cylinder', CylinderLayer_CylinderLayer);
// EXTERNAL MODULE: ./src/el/editor/items/ArtBoard.js
var ArtBoard = __webpack_require__(138);

// EXTERNAL MODULE: ./src/el/editor/items/Layer.js
var Layer = __webpack_require__(47);

// CONCATENATED MODULE: ./src/el/editor/items/layers/ImageLayer.js








function ImageLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ImageLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ImageLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ImageLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ImageLayer_createSuper(Derived) { var hasNativeReflectConstruct = ImageLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ImageLayer_ImageLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(ImageLayer, _Layer);

  var _super = ImageLayer_createSuper(ImageLayer);

  function ImageLayer() {
    classCallCheck_default()(this, ImageLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].image;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(ImageLayer.prototype), "getDefaultObject", this).call(this, ImageLayer_objectSpread({
        itemType: 'image',
        name: "New Image",
        elementType: 'image',
        src: ''
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Image";
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return ImageLayer_objectSpread(ImageLayer_objectSpread({}, get_default()(getPrototypeOf_default()(ImageLayer.prototype), "toCloneObject", this).call(this)), this.attrs('src'));
    }
  }, {
    key: "resize",
    value: function resize() {
      this.reset({
        width: this.json.naturalWidth.clone(),
        height: this.json.naturalHeight.clone()
      });
    }
  }]);

  return ImageLayer;
}(Layer["a" /* Layer */]);
ComponentManager["a" /* ComponentManager */].registerComponent('image', ImageLayer_ImageLayer);
// EXTERNAL MODULE: ./src/el/editor/items/layers/SVGPathItem.js
var SVGPathItem = __webpack_require__(101);

// EXTERNAL MODULE: ./src/el/editor/items/layers/SVGItem.js
var SVGItem = __webpack_require__(82);

// EXTERNAL MODULE: ./src/el/editor/util/Resource.js
var Resource = __webpack_require__(38);

// EXTERNAL MODULE: ./src/el/editor/manager/Editor.js + 152 modules
var Editor = __webpack_require__(61);

// CONCATENATED MODULE: ./src/el/editor/items/layers/SVGTextItem.js








function SVGTextItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextItem_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextItem_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextItem_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGTextItem_SVGTextItem = /*#__PURE__*/function (_SVGItem) {
  inherits_default()(SVGTextItem, _SVGItem);

  var _super = SVGTextItem_createSuper(SVGTextItem);

  function SVGTextItem() {
    classCallCheck_default()(this, SVGTextItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextItem, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].title;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SVGTextItem.prototype), "getDefaultObject", this).call(this, SVGTextItem_objectSpread({
        itemType: 'svg-text',
        name: "New Text",
        totalLength: 0,
        fill: 'rgba(0, 0, 0, 1)',
        text: 'Insert a text',
        'font-weight': Length["a" /* Length */].number(100),
        textLength: Length["a" /* Length */].em(0),
        lengthAdjust: 'spacingAndGlyphs',
        'shape-inside': '',
        'shape-subtract': '',
        'shape-margin': '',
        'shape-padding': ''
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "setCache",
    value: function setCache() {
      this.rect = this.clone(false);
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(SVGTextItem.prototype), "convert", this).call(this, json);
      json.textLength = Length["a" /* Length */].parse(json.textLength);
      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      var json = this.json;
      return SVGTextItem_objectSpread(SVGTextItem_objectSpread({}, get_default()(getPrototypeOf_default()(SVGTextItem.prototype), "toCloneObject", this).call(this)), this.attrs('totalLength', 'text', 'textLength', 'lengthAdjust', 'shape-inside'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Text";
    }
  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      var svgProperties = properties.filter(function (it) {
        return Object(Resource["g" /* hasSVGProperty */])(it.property);
      });
      var cssProperties = properties.filter(function (it) {
        return Object(Resource["e" /* hasCSSProperty */])(it.property);
      });
      return [{
        selector: "[data-id=\"".concat(this.json.id, "\"]"),
        properties: cssProperties
      }, {
        selector: "[data-id=\"".concat(this.json.id, "\"] text"),
        properties: svgProperties
      }];
    }
  }]);

  return SVGTextItem;
}(SVGItem["a" /* SVGItem */]);
Editor["b" /* Editor */].registerComponent('svgtext', SVGTextItem_SVGTextItem);
// EXTERNAL MODULE: ./src/el/editor/parser/PathParser.js
var PathParser = __webpack_require__(32);

// CONCATENATED MODULE: ./src/el/editor/items/layers/SVGTextPathItem.js








function SVGTextPathItem_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SVGTextPathItem_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SVGTextPathItem_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SVGTextPathItem_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function SVGTextPathItem_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextPathItem_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextPathItem_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SVGTextPathItem_SVGTextPathItem = /*#__PURE__*/function (_SVGItem) {
  inherits_default()(SVGTextPathItem, _SVGItem);

  var _super = SVGTextPathItem_createSuper(SVGTextPathItem);

  function SVGTextPathItem() {
    classCallCheck_default()(this, SVGTextPathItem);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextPathItem, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].text_rotate;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(SVGTextPathItem.prototype), "getDefaultObject", this).call(this, SVGTextPathItem_objectSpread({
        itemType: 'svg-textpath',
        name: "New TextPath",
        d: '',
        // segments: [],
        totalLength: 0,
        fill: 'rgba(0, 0, 0, 1)',
        text: 'Insert a text',
        textLength: Length["a" /* Length */].em(0),
        lengthAdjust: 'spacingAndGlyphs',
        startOffset: Length["a" /* Length */].em(0)
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "setCache",
    value: function setCache() {
      // 캐쉬 할 때는  0~1 사이 값으로 가지고 있다가 
      this.cachePath = new PathParser["a" /* default */](this.json.d);
      this.cachePath.scale(1 / this.json.width.value, 1 / this.json.height.value);
    }
  }, {
    key: "recover",
    value: function recover() {
      // 캐쉬가 없는 상태에서는 초기 캐쉬를 생성해준다. 
      if (!this.cachePath) this.setCache();
      var sx = this.json.width.value;
      var sy = this.json.height.value; // 마지막 크기(width, height) 기준으로 다시 확대한다. 

      this.json.d = this.cachePath.clone().scaleTo(sx, sy);
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(SVGTextPathItem.prototype), "convert", this).call(this, json);
      json.textLength = Length["a" /* Length */].parse(json.textLength);
      json.startOffset = Length["a" /* Length */].parse(json.startOffset);
      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return SVGTextPathItem_objectSpread(SVGTextPathItem_objectSpread({}, get_default()(getPrototypeOf_default()(SVGTextPathItem.prototype), "toCloneObject", this).call(this)), this.attrs('totalLength', 'd', 'text', 'textLength', 'lengthAdjust', 'startOffset'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "TextPath";
    }
  }, {
    key: "toAnimationKeyframes",
    value: function toAnimationKeyframes(properties) {
      var svgProperties = properties.filter(function (it) {
        return Object(Resource["g" /* hasSVGProperty */])(it.property);
      });
      var svgPathProperties = properties.filter(function (it) {
        return Object(Resource["f" /* hasSVGPathProperty */])(it.property);
      });
      var cssProperties = properties.filter(function (it) {
        return Object(Resource["e" /* hasCSSProperty */])(it.property);
      });
      return [{
        selector: "[data-id=\"".concat(this.json.id, "\"]"),
        properties: cssProperties
      }, {
        selector: "[data-id=\"".concat(this.json.id, "\"] textPath"),
        properties: svgProperties
      }, {
        selector: "[data-id=\"".concat(this.json.id, "\"] path"),
        properties: svgPathProperties
      }];
    }
  }]);

  return SVGTextPathItem;
}(SVGItem["a" /* SVGItem */]);
ComponentManager["a" /* ComponentManager */].registerComponent('svg-textpath', SVGTextPathItem_SVGTextPathItem);
// CONCATENATED MODULE: ./src/el/editor/items/layers/TextLayer.js








function TextLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TextLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TextLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TextLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TextLayer_createSuper(Derived) { var hasNativeReflectConstruct = TextLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TextLayer_TextLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(TextLayer, _Layer);

  var _super = TextLayer_createSuper(TextLayer);

  function TextLayer() {
    classCallCheck_default()(this, TextLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].title;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(TextLayer.prototype), "getDefaultObject", this).call(this, TextLayer_objectSpread({
        itemType: 'text',
        name: "New Text",
        elementType: 'p',
        content: ''
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Text";
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return TextLayer_objectSpread(TextLayer_objectSpread({}, get_default()(getPrototypeOf_default()(TextLayer.prototype), "toCloneObject", this).call(this)), this.attrs('content'));
    }
  }]);

  return TextLayer;
}(Layer["a" /* Layer */]);
ComponentManager["a" /* ComponentManager */].registerComponent('text', TextLayer_TextLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/RectLayer.js








function RectLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function RectLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { RectLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { RectLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function RectLayer_createSuper(Derived) { var hasNativeReflectConstruct = RectLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RectLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var RectLayer_RectLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(RectLayer, _Layer);

  var _super = RectLayer_createSuper(RectLayer);

  function RectLayer() {
    classCallCheck_default()(this, RectLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(RectLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].rect;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(RectLayer.prototype), "getDefaultObject", this).call(this, RectLayer_objectSpread({
        itemType: 'rect',
        name: 'New Rect'
      }, obj));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Rect";
    }
  }]);

  return RectLayer;
}(Layer["a" /* Layer */]);
ComponentManager["a" /* ComponentManager */].registerComponent('rect', RectLayer_RectLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/CircleLayer.js








function CircleLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function CircleLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { CircleLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { CircleLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function CircleLayer_createSuper(Derived) { var hasNativeReflectConstruct = CircleLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CircleLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var CircleLayer_CircleLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(CircleLayer, _Layer);

  var _super = CircleLayer_createSuper(CircleLayer);

  function CircleLayer() {
    classCallCheck_default()(this, CircleLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(CircleLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].lens;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(CircleLayer.prototype), "getDefaultObject", this).call(this, CircleLayer_objectSpread({
        itemType: 'circle',
        name: 'New Circle',
        'border-radius': '100%'
      }, obj));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Circle";
    }
  }]);

  return CircleLayer;
}(Layer["a" /* Layer */]);
ComponentManager["a" /* ComponentManager */].registerComponent('circle', CircleLayer_CircleLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/VideoLayer.js








function VideoLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function VideoLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { VideoLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { VideoLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function VideoLayer_createSuper(Derived) { var hasNativeReflectConstruct = VideoLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var VideoLayer_VideoLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(VideoLayer, _Layer);

  var _super = VideoLayer_createSuper(VideoLayer);

  function VideoLayer() {
    classCallCheck_default()(this, VideoLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoLayer, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(VideoLayer.prototype), "getDefaultObject", this).call(this, VideoLayer_objectSpread({
        itemType: 'video',
        name: "New Video",
        elementType: 'video',

        /** source property */
        src: '',
        srcType: 'video/mp4',

        /** video property */
        controls: false,
        preload: "auto",
        // none, metadata
        poster: "",
        autoplay: false,
        buffered: false,
        crossorigin: 'anonymous',
        // or "use-credentials"
        loop: false,
        muted: false,
        played: false,
        currentTime: 0,
        playbackRate: 1.0,
        //
        playTime: '0:1:1'
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Video";
    }
  }, {
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].video;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return VideoLayer_objectSpread(VideoLayer_objectSpread({}, get_default()(getPrototypeOf_default()(VideoLayer.prototype), "toCloneObject", this).call(this)), this.attrs('src'));
    }
  }, {
    key: "resize",
    value: function resize() {
      this.reset({
        width: this.json.naturalWidth.clone(),
        height: this.json.naturalHeight.clone()
      });
    }
  }], [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].video;
    }
  }]);

  return VideoLayer;
}(Layer["a" /* Layer */]);
Editor["b" /* Editor */].registerComponent('video', VideoLayer_VideoLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/IFrameLayer.js








function IFrameLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function IFrameLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { IFrameLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { IFrameLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function IFrameLayer_createSuper(Derived) { var hasNativeReflectConstruct = IFrameLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function IFrameLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var IFrameLayer_IFrameLayer = /*#__PURE__*/function (_Layer) {
  inherits_default()(IFrameLayer, _Layer);

  var _super = IFrameLayer_createSuper(IFrameLayer);

  function IFrameLayer() {
    classCallCheck_default()(this, IFrameLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(IFrameLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].web;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(IFrameLayer.prototype), "getDefaultObject", this).call(this, IFrameLayer_objectSpread({
        itemType: 'iframe',
        elementType: 'iframe',
        name: 'New IFrame',
        url: ''
      }, obj));
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return IFrameLayer_objectSpread(IFrameLayer_objectSpread({}, get_default()(getPrototypeOf_default()(IFrameLayer.prototype), "toCloneObject", this).call(this)), this.attrs('url'));
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "IFrame";
    }
  }]);

  return IFrameLayer;
}(Layer["a" /* Layer */]);
ComponentManager["a" /* ComponentManager */].registerComponent('iframe', IFrameLayer_IFrameLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/TemplateLayer.js








function TemplateLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TemplateLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TemplateLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TemplateLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TemplateLayer_createSuper(Derived) { var hasNativeReflectConstruct = TemplateLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TemplateLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var DEFAULT_TEMPLATE = "\n  <svg>\n    <rect width=\"100%\" height=\"100%\" fill=\"black\" />\n  </svg>\n";
var TemplateLayer_TemplateLayer = /*#__PURE__*/function (_Component) {
  inherits_default()(TemplateLayer, _Component);

  var _super = TemplateLayer_createSuper(TemplateLayer);

  function TemplateLayer() {
    classCallCheck_default()(this, TemplateLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(TemplateLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].auto_awesome;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(TemplateLayer.prototype), "getDefaultObject", this).call(this, TemplateLayer_objectSpread({
        itemType: 'template',
        name: "New Template",
        engine: 'dom',
        template: DEFAULT_TEMPLATE,
        params: []
      }, obj));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Template";
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return TemplateLayer_objectSpread(TemplateLayer_objectSpread({}, get_default()(getPrototypeOf_default()(TemplateLayer.prototype), "toCloneObject", this).call(this)), this.attrs('template'));
    }
  }]);

  return TemplateLayer;
}(Component["a" /* Component */]);
ComponentManager["a" /* ComponentManager */].registerComponent('template', TemplateLayer_TemplateLayer);
// CONCATENATED MODULE: ./src/el/editor/items/layers/ChartLayer.js








function ChartLayer_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ChartLayer_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ChartLayer_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ChartLayer_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ChartLayer_createSuper(Derived) { var hasNativeReflectConstruct = ChartLayer_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ChartLayer_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ChartLayer_ChartLayer = /*#__PURE__*/function (_Component) {
  inherits_default()(ChartLayer, _Component);

  var _super = ChartLayer_createSuper(ChartLayer);

  function ChartLayer() {
    classCallCheck_default()(this, ChartLayer);

    return _super.apply(this, arguments);
  }

  createClass_default()(ChartLayer, [{
    key: "getIcon",
    value: function getIcon() {
      return icon["a" /* default */].chart;
    }
  }, {
    key: "getDefaultObject",
    value: function getDefaultObject() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return get_default()(getPrototypeOf_default()(ChartLayer.prototype), "getDefaultObject", this).call(this, ChartLayer_objectSpread({
        itemType: 'chart',
        name: "New Chart",
        chartEngine: 'tui-chart',
        chartType: 'BarChart',
        chartOption: {},
        chartData: {}
      }, obj));
    }
  }, {
    key: "getProps",
    value: function getProps() {
      return [{
        key: "chartEngine",
        editor: 'SelectIconEditor',
        editorOptions: {
          label: 'Chart Engine',
          options: 'tui-chart'
        },
        refresh: true,
        defaultValue: this.json['chartEngine']
      }, {
        key: "chartOption",
        editor: 'SelectIconEditor',
        editorOptions: {
          label: 'Chart Engine',
          options: 'tui-chart'
        },
        refresh: true,
        defaultValue: this.json['chartOption']
      }, {
        key: "chartData",
        editor: 'SelectIconEditor',
        editorOptions: {
          label: 'Chart Engine',
          options: 'tui-chart'
        },
        refresh: true,
        defaultValue: this.json['chartData']
      }];
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return ChartLayer_objectSpread(ChartLayer_objectSpread({}, get_default()(getPrototypeOf_default()(ChartLayer.prototype), "toCloneObject", this).call(this)), this.attrs('chartEngine', 'chartType', 'chartData', 'chartOption'));
    }
  }, {
    key: "enableHasChildren",
    value: function enableHasChildren() {
      return false;
    }
  }, {
    key: "getDefaultTitle",
    value: function getDefaultTitle() {
      return "Chart";
    }
  }]);

  return ChartLayer;
}(Component["a" /* Component */]);
ComponentManager["a" /* ComponentManager */].registerComponent('chart', ChartLayer_ChartLayer);
// CONCATENATED MODULE: ./src/el/editor/items/index.js
















/* harmony default export */ var items = ({
  Project: Project["a" /* Project */],
  ArtBoard: ArtBoard["a" /* ArtBoard */],
  RectLayer: RectLayer_RectLayer,
  CircleLayer: CircleLayer_CircleLayer,
  ChartLayer: ChartLayer_ChartLayer,
  ImageLayer: ImageLayer_ImageLayer,
  TextLayer: TextLayer_TextLayer,
  VideoLayer: VideoLayer_VideoLayer,
  SVGPathItem: SVGPathItem["a" /* SVGPathItem */],
  SVGTextItem: SVGTextItem_SVGTextItem,
  SVGTextPathItem: SVGTextPathItem_SVGTextPathItem,
  Component: Component["a" /* Component */],
  CubeLayer: CubeLayer_CubeLayer,
  CylinderLayer: CylinderLayer_CylinderLayer,
  IFrameLayer: IFrameLayer_IFrameLayer,
  TemplateLayer: TemplateLayer_TemplateLayer
});

/***/ }),
/* 163 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/window-list/BaseWindow.js






function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var BaseWindow_BaseWindow = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(BaseWindow, _EditorElement);

  var _super = _createSuper(BaseWindow);

  function BaseWindow() {
    classCallCheck_default()(this, BaseWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(BaseWindow, [{
    key: "template",
    value: function template() {
      return "\n      <div class='window-background'>\n        <div class='window ".concat(this.getClassName(), "'>\n            <div class='window-title' ref=\"$title\">\n                <label>").concat(this.getTitle(), "</label>\n                <span class=\"tools\">\n                  ").concat(this.getTools(), "\n                  <button type='button' class='close' ref='$close'>").concat(icon["a" /* default */].close, "</button>\n                </span>\n            </div>\n            <div class='window-body'>").concat(this.getBody(), "</div>\n        </div>\n      </div>\n        ");
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return '';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return '';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return '';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return '';
    }
  }, {
    key: Object(Event["CLICK"])('$close'),
    value: function value() {
      this.$el.hide();
    }
  }, {
    key: "show",
    value: function show() {
      var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 200;
      this.$el.show("block");
    }
  }, {
    key: "hide",
    value: function hide() {
      this.$el.hide();
    }
  }]);

  return BaseWindow;
}(EditorElement["a" /* EditorElement */]);


// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/editor/renderer/HTMLRenderer/index.js + 14 modules
var HTMLRenderer = __webpack_require__(48);

// EXTERNAL MODULE: ./src/el/editor/renderer/SVGRenderer/index.js + 15 modules
var SVGRenderer = __webpack_require__(80);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// CONCATENATED MODULE: ./src/el/editor/ui/window-list/ExportWindow.js






function ExportWindow_createSuper(Derived) { var hasNativeReflectConstruct = ExportWindow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ExportWindow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var ExportWindow_ExportWindow = /*#__PURE__*/function (_BaseWindow) {
  inherits_default()(ExportWindow, _BaseWindow);

  var _super = ExportWindow_createSuper(ExportWindow);

  function ExportWindow() {
    classCallCheck_default()(this, ExportWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(ExportWindow, [{
    key: "getClassName",
    value: function getClassName() {
      return 'export-window';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'Export';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        selectedIndex: 1
      };
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class=\"tab number-tab\" ref=\"$tab\">\n            <div class=\"tab-header full\" ref=\"$header\">\n                <div class=\"tab-item selected\" data-value=\"1\">\n                    <label>HTML</label>\n                </div>\n                <div class=\"tab-item\" data-value=\"2\">\n                    <label>CSS</label>\n                </div>                \n                <div class=\"tab-item\" data-value=\"4\">\n                    <label>Assets</label>\n                </div>                                             \n                <div class=\"tab-item\" data-value=\"6\">\n                    <label>SVG Image</label>\n                </div>     \n                <div class=\"tab-item\" data-value=\"7\">\n                    <label>SVG Image Preview</label>\n                </div>                        \n            </div>\n            <div class=\"tab-body\" ref=\"$body\">\n                <div class=\"tab-content selected\" data-value=\"1\">\n                    <pre ref='$html'></pre>\n                </div>\n                <div class='tab-content' data-value='2'>\n                    <pre ref='$css'></pre>\n                </div>                        \n                <div class=\"tab-content\" data-value=\"4\">\n                    <pre ref='$assets'></pre>\n                </div>\n                <div class=\"tab-content\" data-value=\"6\">\n                    <pre ref='$svgimage'></pre>\n                </div>                                                                       \n                <div class=\"tab-content\" data-value=\"7\">\n                    <div ref='$svgimagePreview'></div>\n                </div>                                                       \n            </div>\n      </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showExportWindow'),
    value: function value() {
      this.show();
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this = this;

      var project = this.$selection.currentProject || {
        layers: []
      }; // css code

      var css = "\n".concat(this.makeStyle(project), "\n").concat(project.layers.map(function (item) {
        return _this.makeStyle(item);
      }).join('\n'), "\n");
      this.refs.$css.text(css); // html code 

      var html = "\n".concat(HTMLRenderer["a" /* default */].renderSVG(project), "\n").concat(HTMLRenderer["a" /* default */].render(project), "\n        ");
      this.refs.$html.text(html); // export svg image 

      var svgData = project.layers.map(function (item) {
        return SVGRenderer["a" /* default */].render(item);
      }); // svg code 

      this.refs.$svgimage.text(svgData.join("\n\n")); // svg preview image 

      this.refs.$svgimagePreview.html(Dom["a" /* default */].createByHTML("<div>".concat(svgData.map(function (it) {
        return "<div>".concat(it, "</div>");
      }).join(""), "</div>")));
    }
  }, {
    key: "makeStyle",
    value: function makeStyle(item) {
      return HTMLRenderer["a" /* default */].toStyle(item);
    }
  }, {
    key: "makeHTML",
    value: function makeHTML(item) {
      return HTMLRenderer["a" /* default */].render(item);
    }
  }, {
    key: Object(Event["CLICK"])("$header .tab-item"),
    value: function value(e) {
      var selectedIndex = +e.$dt.attr('data-value');

      if (this.state.selectedIndex === selectedIndex) {
        return;
      }

      this.$el.$$("[data-value=\"".concat(this.state.selectedIndex, "\"]")).forEach(function (it) {
        return it.removeClass('selected');
      });
      this.$el.$$("[data-value=\"".concat(selectedIndex, "\"]")).forEach(function (it) {
        return it.addClass('selected');
      });
      this.setState({
        selectedIndex: selectedIndex
      }, false);
    }
  }]);

  return ExportWindow;
}(BaseWindow_BaseWindow);


Object(registElement["a" /* registElement */])({
  ExportWindow: ExportWindow_ExportWindow
});
// CONCATENATED MODULE: ./src/el/editor/ui/window-list/LoginWindow.js






function LoginWindow_createSuper(Derived) { var hasNativeReflectConstruct = LoginWindow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LoginWindow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var LoginWindow_LoginWindow = /*#__PURE__*/function (_BaseWindow) {
  inherits_default()(LoginWindow, _BaseWindow);

  var _super = LoginWindow_createSuper(LoginWindow);

  function LoginWindow() {
    classCallCheck_default()(this, LoginWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(LoginWindow, [{
    key: "getClassName",
    value: function getClassName() {
      return 'login-window';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'Login';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n            <div >\n                <label>email <input type=\"text\" ref=\"$email\" /></label>\n                <label>password <input type=\"text\" ref=\"$password\" /></label>\n                <button type=\"button\" ref='$login'>Login</button>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["CLICK"])('$login'),
    value: function value(e) {
      var _this = this;

      var email = this.refs.$email.value;
      var password = this.refs.$password.value;
      firebase.auth().signInWithEmailAndPassword(email, password).then(function (user) {
        _this.$editor.setUser(user);

        _this.hide();
      })["catch"](function (error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        console.log(error); // ...
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showLoginWindow'),
    value: function value() {
      this.show();
    }
  }]);

  return LoginWindow;
}(BaseWindow_BaseWindow);


Object(registElement["a" /* registElement */])({
  LoginWindow: LoginWindow_LoginWindow
});
// CONCATENATED MODULE: ./src/el/editor/ui/window-list/SignWindow.js






function SignWindow_createSuper(Derived) { var hasNativeReflectConstruct = SignWindow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SignWindow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SignWindow_SignWindow = /*#__PURE__*/function (_BaseWindow) {
  inherits_default()(SignWindow, _BaseWindow);

  var _super = SignWindow_createSuper(SignWindow);

  function SignWindow() {
    classCallCheck_default()(this, SignWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(SignWindow, [{
    key: "getClassName",
    value: function getClassName() {
      return 'sign-window';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'Sign';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n            <div >\n                <label>fullname <input type=\"text\" ref=\"$fullname\" /></label>\n                <label>email <input type=\"text\" ref=\"$email\" /></label>\n                <label>password <input type=\"text\" ref=\"$password\" /></label>\n                <button type=\"button\" ref='$register'>Register</button>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["CLICK"])('$register'),
    value: function value() {
      console.log(firebase);
      var email = this.refs.$email.value;
      var password = this.refs.$password.value;
      firebase.auth().createUserWithEmailAndPassword(email, password)["catch"](function (error) {
        // Handle Errors here.
        var errorCode = error.code;
        var errorMessage = error.message;
        console.log(error); // ...
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showSignWindow'),
    value: function value() {
      this.show();
    }
  }]);

  return SignWindow;
}(BaseWindow_BaseWindow);


Object(registElement["a" /* registElement */])({
  SignWindow: SignWindow_SignWindow
});
// EXTERNAL MODULE: ./src/el/editor/shortcuts/index.js + 46 modules
var shortcuts = __webpack_require__(86);

// EXTERNAL MODULE: ./src/el/base/functions/detect.js
var detect = __webpack_require__(88);

// CONCATENATED MODULE: ./src/el/editor/ui/window-list/ShortcutWindow.js






function ShortcutWindow_createSuper(Derived) { var hasNativeReflectConstruct = ShortcutWindow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ShortcutWindow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var categories = new Set();
shortcuts["a" /* default */].forEach(function (it) {
  categories.add(it.category);
});
var keys = {};
categories.forEach(function (it) {
  shortcuts["a" /* default */].filter(function (item) {
    return item.category === it;
  }).forEach(function (item) {
    if (!keys[item.category]) {
      keys[item.category] = [];
    }

    keys[item.category].push(item);
  });
});
var keyAlias = {
  'ARROWRIGHT': '→',
  'ARROWLEFT': '←',
  'ARROWUP': '↑',
  'ARROWDOWN': '→',
  'BACKSPACE': '⌫',
  'CMD': '⌘'
};
var OSName = Object(detect["a" /* os */])();

var ShortcutWindow_ShortcutWindow = /*#__PURE__*/function (_BaseWindow) {
  inherits_default()(ShortcutWindow, _BaseWindow);

  var _super = ShortcutWindow_createSuper(ShortcutWindow);

  function ShortcutWindow() {
    classCallCheck_default()(this, ShortcutWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(ShortcutWindow, [{
    key: "getClassName",
    value: function getClassName() {
      return 'shortcut-window';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'ShortCuts';
    }
  }, {
    key: "getKeyString",
    value: function getKeyString(os, item) {
      return (item[os] || item.key).split('+').map(function (it) {
        return it.trim();
      }).map(function (it) {
        var keyString = it.toUpperCase();
        return (
          /*html*/
          "<span>".concat(keyAlias[keyString] || keyString, "</span>")
        );
      }).join(' + ');
    }
  }, {
    key: "getTemplateForShortcutItem",
    value: function getTemplateForShortcutItem(item) {
      return (
        /*html*/
        "\n            <div class='shortcut-view-item'>\n                <div class='title'>".concat(item.description, "</div>\n                <div class='os-item'>").concat(this.getKeyString(OSName, item), "</div>\n            </div>                        \n        ")
      );
    }
  }, {
    key: "getTemplateForCategory",
    value: function getTemplateForCategory(category) {
      var _this = this;

      var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      return (
        /*html*/
        "\n            <div class='item'>\n                <h2>".concat(category, "</h2>\n                <div>\n                    ").concat(list.map(function (it) {
          return _this.getTemplateForShortcutItem(it);
        }).join(''), "\n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: "getTemplateForLayer",
    value: function getTemplateForLayer() {
      return (
        /*html*/
        "\n            <div class='item'>\n                <h2>Layer</h2>\n                <div>\n                    <div class='shortcut-view-item'>\n                        <div class='title'>\n                            Add Rect\n                            <span class='description'>fdsafdsfdf</span>\n                        </div>\n\n                        <div class='os-item mac'><span>CTRL</span>+<span>R</span></div>\n                        <div class='os-item win'>R</div>\n                        <div class='os-item linux'>R</div>\n                    </div>\n                </div>\n            </div>\n        "
      );
    }
  }, {
    key: "getBody",
    value: function getBody() {
      var _this2 = this;

      return (
        /*html*/
        "\n        <div class=\"list\">\n            ".concat(Object.keys(keys).map(function (category) {
          return _this2.getTemplateForCategory(category, keys[category]);
        }).join(''), "\n        </div>\n        ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showShortcutWindow'),
    value: function value() {
      this.show();
    }
  }]);

  return ShortcutWindow;
}(BaseWindow_BaseWindow);


Object(registElement["a" /* registElement */])({
  ShortcutWindow: ShortcutWindow_ShortcutWindow
});
// CONCATENATED MODULE: ./src/el/editor/ui/window-list/ProjectWindow.js






function ProjectWindow_createSuper(Derived) { var hasNativeReflectConstruct = ProjectWindow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectWindow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var ProjectWindow_ProjectWindow = /*#__PURE__*/function (_BaseWindow) {
  inherits_default()(ProjectWindow, _BaseWindow);

  var _super = ProjectWindow_createSuper(ProjectWindow);

  function ProjectWindow() {
    classCallCheck_default()(this, ProjectWindow);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectWindow, [{
    key: "getClassName",
    value: function getClassName() {
      return 'project-window';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'Project Manager';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        selectedIndex: 1
      };
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class=\"project-container\">\n            <div class=\"project-menu left\">\n                Project Menu\n            </div>\n            <div class=\"project-list right\">\n                Project List\n            </div>\n        </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('open.projects'),
    value: function value() {
      this.show();
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var project = this.$selection.currentProject || {
        layers: []
      };
    }
  }]);

  return ProjectWindow;
}(BaseWindow_BaseWindow);


Object(registElement["a" /* registElement */])({
  ProjectWindow: ProjectWindow_ProjectWindow
});
// CONCATENATED MODULE: ./src/el/editor/ui/window-list/index.js





/* harmony default export */ var window_list = ({
  ProjectWindow: ProjectWindow_ProjectWindow,
  ShortcutWindow: ShortcutWindow_ShortcutWindow,
  SignWindow: SignWindow_SignWindow,
  LoginWindow: LoginWindow_LoginWindow,
  ExportWindow: ExportWindow_ExportWindow
});

/***/ }),
/* 164 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/defineProperty.js
var defineProperty = __webpack_require__(7);
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty);

// EXTERNAL MODULE: ./src/scss/index.scss
var scss = __webpack_require__(151);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/classCallCheck.js
var classCallCheck = __webpack_require__(2);
var classCallCheck_default = /*#__PURE__*/__webpack_require__.n(classCallCheck);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/createClass.js
var createClass = __webpack_require__(4);
var createClass_default = /*#__PURE__*/__webpack_require__.n(createClass);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/inherits.js
var inherits = __webpack_require__(5);
var inherits_default = /*#__PURE__*/__webpack_require__.n(inherits);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/possibleConstructorReturn.js
var possibleConstructorReturn = __webpack_require__(6);
var possibleConstructorReturn_default = /*#__PURE__*/__webpack_require__.n(possibleConstructorReturn);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/getPrototypeOf.js
var getPrototypeOf = __webpack_require__(0);
var getPrototypeOf_default = /*#__PURE__*/__webpack_require__.n(getPrototypeOf);

// EXTERNAL MODULE: ./src/el/base/Dom.js + 1 modules
var Dom = __webpack_require__(19);

// EXTERNAL MODULE: ./src/el/base/Event.js
var Event = __webpack_require__(1);

// EXTERNAL MODULE: ./src/el/editor/unit/Length.js
var unit_Length = __webpack_require__(3);

// EXTERNAL MODULE: ./src/el/editor/items/index.js + 12 modules
var editor_items = __webpack_require__(162);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/asyncToGenerator.js
var asyncToGenerator = __webpack_require__(18);
var asyncToGenerator_default = /*#__PURE__*/__webpack_require__.n(asyncToGenerator);

// EXTERNAL MODULE: ./node_modules/@babel/runtime/regenerator/index.js
var regenerator = __webpack_require__(17);
var regenerator_default = /*#__PURE__*/__webpack_require__.n(regenerator);

// EXTERNAL MODULE: ./src/el/editor/icon/icon.js + 164 modules
var icon = __webpack_require__(11);

// EXTERNAL MODULE: ./src/el/base/registElement.js
var registElement = __webpack_require__(9);

// EXTERNAL MODULE: ./src/el/editor/ui/common/EditorElement.js
var EditorElement = __webpack_require__(14);

// CONCATENATED MODULE: ./src/el/editor/ui/control/ArtboardItems.js








function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ArtboardItems_ArtboardItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ArtboardItems, _EditorElement);

  var _super = _createSuper(ArtboardItems);

  function ArtboardItems() {
    classCallCheck_default()(this, ArtboardItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(ArtboardItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='artboard-items'>\n        <div class='artboard-items-tools'>\n          <div class='title'><label>Artboard Assets</label></div>\n          <div class='tools'>\n            <button type=\"button\" ref='$addArtboard'>".concat(icon["a" /* default */].add, "</button>\n          </div>\n        </div>\n        <div class='artboard-list' ref='$list'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$list'),
    value: function () {
      var _value = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var data;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$storageManager.getArtboardList();

              case 2:
                data = _context.sent;
                return _context.abrupt("return", data.map(function (it) {
                  return (
                    /*html*/
                    "\n        <div class='artboard-preview' draggable=\"true\" data-preview-id=\"".concat(it.id, "\">\n          <div class='thumbnail'><img src='").concat(it.preview, "' /></div>\n          <div class='tools'>\n            <div class='title'>").concat(it.artboard.name, "</div>\n            <div class='buttons'>\n              <button type=\"button\" class='remove-artboard-preview' data-preview-id=\"").concat(it.id, "\">").concat(icon["a" /* default */].remove, "</button>\n            </div>\n          </div>\n        </div>\n      ")
                  );
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function value() {
        return _value.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["CLICK"])('$list .remove-artboard-preview'),
    value: function () {
      var _value2 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2(e) {
        var id;
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!confirm(this.$i18n('app.confirm.message.artboard.items.removeArtboard'))) {
                  _context2.next = 5;
                  break;
                }

                id = e.$dt.data('preview-id');
                _context2.next = 4;
                return this.$storageManager.removeArtboard(id);

              case 4:
                this.refresh();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function value(_x) {
        return _value2.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["DRAGSTART"])('$list .artboard-preview'),
    value: function value(e) {
      var id = e.$dt.data('preview-id');
      e.dataTransfer.effectAllowed = "copy";
      e.dataTransfer.setData("text/artboard", id);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('afterSaveArtboard'),
    value: function () {
      var _value3 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee3(datauri) {
        return regenerator_default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.$storageManager.saveArtboard(datauri);

              case 2:
                this.refresh();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function value(_x2) {
        return _value3.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["CLICK"])('$addArtboard'),
    value: function value(e) {
      this.emit('savePNG', 'afterSaveArtboard');
    }
  }]);

  return ArtboardItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ArtboardItems: ArtboardItems_ArtboardItems
});
// EXTERNAL MODULE: ./src/el/editor/ui/property/BaseProperty.js
var BaseProperty = __webpack_require__(20);

// CONCATENATED MODULE: ./src/el/editor/ui/property/AppearanceProperty.js







function AppearanceProperty_createSuper(Derived) { var hasNativeReflectConstruct = AppearanceProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AppearanceProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var overflow_list = ['visible', 'hidden', 'scroll', 'auto'];

var AppearanceProperty_AppearanceProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(AppearanceProperty, _BaseProperty);

  var _super = AppearanceProperty_createSuper(AppearanceProperty);

  function AppearanceProperty() {
    classCallCheck_default()(this, AppearanceProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(AppearanceProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('background.color.property.title');
    }
  }, {
    key: "getOverflowList",
    value: function getOverflowList() {
      var _this = this;

      return overflow_list.map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("background.color.property.overflow.".concat(it)));
      }).join(',');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='background-color'></span>\n        </div>\n        <object refClass=\"ColorViewEditor\" ref='$color' label=\"".concat(this.$i18n('background.color.property.color'), "\" key='background-color' onchange=\"changeColor\" />\n      </div>   \n        <div class='property-item animation-property-item' style='display:none;'>\n          <div class='group'>\n            <span class='add-timeline-property' data-property='z-index'></span>\n          </div>\n          <object refClass=\"NumberRangeEditor\"  \n            ref='$zIndex' \n            key='z-index' \n            label='").concat(this.$i18n('background.color.property.zindex'), "'\n            min=\"-1000\"\n            max=\"1000\"\n            step=\"1\"\n            onchange=\"changeSelect\" />\n        </div>\n        \n        <div class='property-item animation-property-item'>\n          <div class='group'>\n            <span class='add-timeline-property' data-property='mix-blend-mode'></span>\n          </div>\n          <object refClass=\"BlendSelectEditor\" \n            label='").concat(this.$i18n('background.color.property.blend'), "'\n            ref='$mixBlend' \n            removable='true'\n            key='mix-blend-mode' \n            icon=\"true\" \n            tabIndex=\"1\"\n            onchange=\"changeSelect\" />\n        </div>        \n\n        <div class='property-item animation-property-item'>\n          <div class='group'>\n            <span class='add-timeline-property' data-property='overflow'></span>\n          </div>\n          <object refClass=\"SelectEditor\"  \n            label='").concat(this.$i18n('background.color.property.overflow'), "'\n            ref='$overflow' \n            removable='true'\n            key='overflow' \n            icon=\"true\" \n            tabIndex=\"1\"\n            options=\"").concat(this.getOverflowList(), "\" \n            onchange=\"changeSelect\" />\n        </div>                \n      ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(key, color) {
      this.command('setAttribute', 'change background color', defineProperty_default()({}, key, color));
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$zIndex.setValue(current['z-index'] || 0);
        this.children.$mixBlend.setValue(current['mix-blend-mode']);
        this.children.$overflow.setValue(current['overflow']);
        this.children.$color.setValue(current['background-color'] || 'rgba(0, 0, 0, 1)');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value) {
      this.command("setAttribute", "change attribute : ".concat(key), defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }]);

  return AppearanceProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AppearanceProperty: AppearanceProperty_AppearanceProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BorderRadiusProperty.js






function BorderRadiusProperty_createSuper(Derived) { var hasNativeReflectConstruct = BorderRadiusProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BorderRadiusProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var BorderRadiusProperty_BorderRadiusProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BorderRadiusProperty, _BaseProperty);

  var _super = BorderRadiusProperty_createSuper(BorderRadiusProperty);

  function BorderRadiusProperty() {
    classCallCheck_default()(this, BorderRadiusProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BorderRadiusProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('border.radius.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'border-radius';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class=\"property-item full border-radius-item\" ref='$body'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['border-radius'] || '';
      return (
        /*html*/
        "\n      <object refClass=\"BorderRadiusEditor\" ref='$1' value='".concat(value, "' onchange='changeBorderRadius' />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBorderRadius'),
    value: function value(_value) {
      this.command("setAttribute", 'change border radius', {
        'border-radius': _value
      });
    }
  }]);

  return BorderRadiusProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BorderRadiusProperty: BorderRadiusProperty_BorderRadiusProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BoxShadowProperty.js






function BoxShadowProperty_createSuper(Derived) { var hasNativeReflectConstruct = BoxShadowProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BoxShadowProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BoxShadowProperty_BoxShadowProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BoxShadowProperty, _BaseProperty);

  var _super = BoxShadowProperty_createSuper(BoxShadowProperty);

  function BoxShadowProperty() {
    classCallCheck_default()(this, BoxShadowProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BoxShadowProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('boxshadow.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"full box-shadow-item\" ref=\"$shadowList\"></div>\n    "
      );
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'box-shadow';
    }
  }, {
    key: Object(Event["LOAD"])("$shadowList"),
    value: function value() {
      var current = this.$selection.current || {};
      return (
        /*html*/
        "\n      <object refClass=\"BoxShadowEditor\" ref='$boxshadow' value=\"".concat(current['box-shadow'] || '', "\" hide-label=\"true\" onChange=\"changeBoxShadow\" />\n    ")
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "<button type=\"button\" ref='$add'>".concat(icon["a" /* default */].add, "</button>")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.children.$boxshadow.trigger('add');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeBoxShadow"),
    value: function value(boxshadow) {
      this.command('setAttribute', 'change box shadow', {
        'box-shadow': boxshadow
      });
    }
  }]);

  return BoxShadowProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BoxShadowProperty: BoxShadowProperty_BoxShadowProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BoxModelProperty.js






function BoxModelProperty_createSuper(Derived) { var hasNativeReflectConstruct = BoxModelProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BoxModelProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var BoxModelProperty_fields = ["margin", "padding"];
var styleKeys = [];
BoxModelProperty_fields.forEach(function (field) {
  styleKeys.push.apply(styleKeys, ["-top", "-bottom", "-left", "-right"].map(function (it) {
    return field + it;
  }));
});

var BoxModelProperty_BoxModelProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BoxModelProperty, _BaseProperty);

  var _super = BoxModelProperty_createSuper(BoxModelProperty);

  function BoxModelProperty() {
    classCallCheck_default()(this, BoxModelProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BoxModelProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('box.model.property.title');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['artboard', 'rect', 'circle', 'text']);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class=\"property-item box-model-item\" ref=\"$boxModelItem\"></div>"
      );
    }
  }, {
    key: "templateInput",
    value: function templateInput(key, current) {
      var value = current[key] || unit_Length["a" /* Length */].z();
      return (
        /*html*/
        "<input type=\"number\" ref=\"$".concat(key, "\" value=\"").concat(value.value, "\" tabIndex=\"1\" />")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$boxModelItem"),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return '';
      return (
        /*html*/
        "\n      <div>\n        <div class=\"margin\" data-title=\"".concat(this.$i18n('box.model.property.margin'), "\">\n          <div data-value=\"top\">\n            ").concat(this.templateInput("margin-top", current), "\n          </div>\n          <div data-value=\"bottom\">\n            ").concat(this.templateInput("margin-bottom", current), "\n          </div>\n          <div data-value=\"left\">\n            ").concat(this.templateInput("margin-left", current), "\n          </div>\n          <div data-value=\"right\">\n            ").concat(this.templateInput("margin-right", current), "\n          </div>\n        </div>\n        <div class=\"padding\" data-title=\"").concat(this.$i18n('box.model.property.padding'), "\">\n          <div data-value=\"top\">\n            ").concat(this.templateInput("padding-top", current), "\n          </div>\n          <div data-value=\"bottom\">\n            ").concat(this.templateInput("padding-bottom", current), "\n          </div>\n          <div data-value=\"left\">\n            ").concat(this.templateInput("padding-left", current), "\n          </div>\n          <div data-value=\"right\">\n            ").concat(this.templateInput("padding-right", current), "\n          </div>\n        </div>\n        <div class='content' title='Content'>\n        \n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["INPUT"])("$boxModelItem input"),
    value: function value(e) {
      this.resetBoxModel();
    }
  }, {
    key: "resetBoxModel",
    value: function resetBoxModel() {
      var _this = this;

      var data = {};
      styleKeys.forEach(function (key) {
        data[key] = unit_Length["a" /* Length */].px(_this.getRef("$", key).value);
      });
      this.command("setAttribute", 'change padding or margin', data);
    }
  }]);

  return BoxModelProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BoxModelProperty: BoxModelProperty_BoxModelProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/ContentProperty.js






function ContentProperty_createSuper(Derived) { var hasNativeReflectConstruct = ContentProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ContentProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ContentProperty_ContentProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ContentProperty, _BaseProperty);

  var _super = ContentProperty_createSuper(ContentProperty);

  function ContentProperty() {
    classCallCheck_default()(this, ContentProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ContentProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return "Content";
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshContent') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['text']);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"property-item content-item\">\n        <textarea ref=\"$contentItem\"></textarea>\n      </div>\n    "
      );
    }
  }, {
    key: Object(Event["BIND"])("$contentItem"),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return '';
      return {
        value: current.content || ""
      };
    }
  }, {
    key: Object(Event["INPUT"])("$contentItem"),
    value: function value(e) {
      this.setContent();
    }
  }, {
    key: "setContent",
    value: function setContent() {
      var current = this.$selection.current;

      if (current) {
        var data = {
          content: this.refs.$contentItem.value
        };
        current.reset(data);
        this.emit('refreshSelectionStyleView', current);
      }
    }
  }]);

  return ContentProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ContentProperty: ContentProperty_ContentProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/FontProperty.js







function FontProperty_createSuper(Derived) { var hasNativeReflectConstruct = FontProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FontProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var FontProperty_FontProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(FontProperty, _BaseProperty);

  var _super = FontProperty_createSuper(FontProperty);

  function FontProperty() {
    classCallCheck_default()(this, FontProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(FontProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('font.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'item';
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$color.setValue(current['color'] || 'rgba(0, 0, 0, 1)');
        this.children.$size.setValue(current['font-size']);
        this.children.$stretch.setValue(current['font-stretch'] || '0%');
        this.children.$style.setValue(current['font-style']);
        this.children.$family.setValue(current['font-family']);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='color'></span>\n        </div>\n        <object refClass=\"ColorViewEditor\" ref='$color' label='".concat(this.$i18n('font.property.color'), "' key='color' onchange=\"changeColor\" />\n      </div>      \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='font-size'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  \n          ref='$size' \n          label='").concat(this.$i18n('font.property.size'), "' \n          key=\"font-size\" \n          \n          onchange=\"changeRangeEditor\" />\n      </div>\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='font-stretch'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  \n          ref='$stretch' \n          label='").concat(this.$i18n('font.property.stretch'), "' \n          key=\"font-stretch\" \n          \n          units='%',\n          onchange=\"changeRangeEditor\" />\n      </div>      \n \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='font-weight'></span>\n        </div>\n        <object refClass=\"NumberRangeEditor\"  \n          ref='$weightRange' \n          label='").concat(this.$i18n('font.property.weight'), "' \n          key='font-weight' \n         \n          value=\"400\" \n          min=\"100\"\n          max=\"900\"\n          step=\"1\"\n          calc=\"false\"\n          unit=\"number\" \n          onchange=\"changeRangeEditor\" \n          />\n      </div>              \n      <div class='property-item'>\n        <object refClass=\"SelectIconEditor\" \n          ref='$style' \n          label='").concat(this.$i18n('font.property.style'), "' \n          key=\"font-style\"\n          compact=\"true\"\n          options=\"normal,italic\" \n          icons='title,italic'\n          onchange=\"changeRangeEditor\" />\n      </div>      \n\n      <div class='property-item'>\n        <object refClass=\"FontSelectEditor\"  \n          ref='$family' \n          icon=\"true\"\n          label='").concat(this.$i18n('font.property.family'), "' \n          key=\"font-family\" \n          onchange=\"changeRangeEditor\" \n        />\n      </div> \n         \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(key, color) {
      this.trigger('changeRangeEditor', key, color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change font attribute', defineProperty_default()({}, key, _value));
    }
  }]);

  return FontProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  FontProperty: FontProperty_FontProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TextShadowProperty.js






function TextShadowProperty_createSuper(Derived) { var hasNativeReflectConstruct = TextShadowProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextShadowProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var TextShadowProperty_TextShadowProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TextShadowProperty, _BaseProperty);

  var _super = TextShadowProperty_createSuper(TextShadowProperty);

  function TextShadowProperty() {
    classCallCheck_default()(this, TextShadowProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextShadowProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('text.shadow.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "\n      <div class=\"full text-shadow-item\" ref=\"$shadowList\"></div>\n    ";
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'text-shadow';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return "<button type=\"button\" ref='$add'>".concat(icon["a" /* default */].add, "</button>");
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.children.$textshadow.trigger('add');
    }
  }, {
    key: Object(Event["LOAD"])("$shadowList"),
    value: function value() {
      var current = this.$selection.current || {};
      return (
        /*html*/
        "\n      <object refClass=\"TextShadowEditor\" ref='$textshadow' value=\"".concat(current['text-shadow'] || '', "\" hide-label=\"true\" onChange=\"changeTextShadow\" />\n    ")
      );
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeTextShadow"),
    value: function value(textshadow) {
      this.command('setAttribute', 'change text shadow', {
        'text-shadow': textshadow
      });
    }
  }]);

  return TextShadowProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TextShadowProperty: TextShadowProperty_TextShadowProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TextProperty.js







function TextProperty_createSuper(Derived) { var hasNativeReflectConstruct = TextProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TextProperty_TextProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TextProperty, _BaseProperty);

  var _super = TextProperty_createSuper(TextProperty);

  function TextProperty() {
    classCallCheck_default()(this, TextProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('text.property.title');
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      // TODO: 데이타 로드를 어떻게 해야할까? 
      var current = this.$selection.current;

      if (current) {
        this.children.$align.setValue(current['text-align']);
        this.children.$transform.setValue(current['text-transform']);
        this.children.$decoration.setValue(current['text-decoration']);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"property-item\">\n        <object refClass=\"SelectIconEditor\" \n          ref='$align' \n          label='".concat(this.$i18n('text.property.align'), "' \n          key='text-align' \n          value='left' \n          options=\"left,center,right,justify\" \n          icons=\"align_left,align_center,align_right,align_justify\" \n          onchange='changeTextValue' />        \n      </div>        \n      <div class=\"property-item\">\n        <object refClass=\"SelectIconEditor\" \n          ref='$transform' \n          label='").concat(this.$i18n('text.property.transform'), "' \n          key='text-transform' \n          options=\"none,uppercase:AG,lowercase:ag,capitalize:Ag\"\n          icons=\"horizontal_rule\"\n          onchange='changeTextValue' />                \n      </div>        \n      <div class=\"property-item\">\n        <object refClass=\"SelectIconEditor\" \n          ref='$decoration' \n          label='").concat(this.$i18n('text.property.decoration'), "' \n          key='text-decoration' \n          options=\"none,underline,overline:O,line-through\" \n          icons=\"horizontal_rule,underline,O,strikethrough\"\n          onchange='changeTextValue' />        \n      </div>                    \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTextValue'),
    value: function value(key, _value) {
      this.command('setAttribute', "change text property : ".concat(key), defineProperty_default()({}, key, _value));
    }
  }]);

  return TextProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TextProperty: TextProperty_TextProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/FontSpacingProperty.js







function FontSpacingProperty_createSuper(Derived) { var hasNativeReflectConstruct = FontSpacingProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FontSpacingProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var FontSpacingProperty_FontSpacingProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(FontSpacingProperty, _BaseProperty);

  var _super = FontSpacingProperty_createSuper(FontSpacingProperty);

  function FontSpacingProperty() {
    classCallCheck_default()(this, FontSpacingProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(FontSpacingProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('font.spacing.property.title');
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$lineHeight.setValue(current['line-height'] || unit_Length["a" /* Length */].number(1));
        this.children.$letter.setValue(current['letter-spacing'] || '0px');
        this.children.$word.setValue(current['word-spacing'] || '0px');
        this.children.$indent.setValue(current['text-indent'] || '0px');
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n\n    <div class='property-item animation-property-item'>\n      <div class='group'>\n        <span class='add-timeline-property' data-property='line-height'></span>\n      </div>\n      <object refClass=\"RangeEditor\"  \n        ref='$lineHeight' \n        label='".concat(this.$i18n('font.spacing.property.lineHeight'), "' \n        key=\"line-height\" \n        min=\"0\"\n        max=\"10\"\n        step=\"0.01\"\n        units=\",px,%,em\"\n        onchange=\"changeRangeEditor\" />\n    </div>       \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='letter-spacing'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  ref='$letter' label='").concat(this.$i18n('font.spacing.property.letterSpacing'), "' key=\"letter-spacing\" min=\"-100\" max=\"100\" onchange=\"changeRangeEditor\" />\n      </div>\n\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='word-spacing'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  ref='$word' label='").concat(this.$i18n('font.spacing.property.wordSpacing'), "' key=\"word-spacing\"  min=\"-100\" max=\"100\" onchange=\"changeRangeEditor\" />\n      </div>\n\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='text-indent'></span>\n        </div>      \n        <object refClass=\"RangeEditor\"  ref='$indent' label='").concat(this.$i18n('font.spacing.property.indent'), "' key=\"text-indent\"  min=\"-100\" max=\"100\" onchange=\"changeRangeEditor\" />\n      </div>      \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      if (_value.unit === '') {
        _value = unit_Length["a" /* Length */].number(_value.value);
      }

      this.command('setAttribute', "change font attribute: ".concat(key), defineProperty_default()({}, key, _value));
    }
  }]);

  return FontSpacingProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  FontSpacingProperty: FontSpacingProperty_FontSpacingProperty
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/toConsumableArray.js
var toConsumableArray = __webpack_require__(16);
var toConsumableArray_default = /*#__PURE__*/__webpack_require__.n(toConsumableArray);

// CONCATENATED MODULE: ./src/el/editor/ui/property/BorderImageProperty.js








function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function BorderImageProperty_createSuper(Derived) { var hasNativeReflectConstruct = BorderImageProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BorderImageProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var typeList = [{
  key: "top",
  title: "Top"
}, {
  key: "bottom",
  title: "Bottom"
}, {
  key: "left",
  title: "Left"
}, {
  key: "right",
  title: "Right"
}];
var keyList = typeList.map(function (it) {
  return it.key;
});
var names = {
  image: "Image",
  "static-gradient": "Static",
  "linear-gradient": "Linear",
  "repeating-linear-gradient": "".concat(icon["a" /* default */].repeat, " Linear"),
  "radial-gradient": "Radial",
  "repeating-radial-gradient": "".concat(icon["a" /* default */].repeat, " Radial"),
  "conic-gradient": "Conic",
  "repeating-conic-gradient": "".concat(icon["a" /* default */].repeat, " Conic")
};
var types = {
  image: "image",
  "static-gradient": "gradient",
  "linear-gradient": "gradient",
  "repeating-linear-gradient": "gradient",
  "radial-gradient": "gradient",
  "repeating-radial-gradient": "gradient",
  "conic-gradient": "gradient",
  "repeating-conic-gradient": "gradient"
};

var BorderImageProperty_BorderImageProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BorderImageProperty, _BaseProperty);

  var _super = BorderImageProperty_createSuper(BorderImageProperty);

  function BorderImageProperty() {
    classCallCheck_default()(this, BorderImageProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BorderImageProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return "Border Image";
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "getTools",
    value: function getTools() {
      var current = this.$selection.current || {};
      var appliedBorderImage = current.appliedBorderImage || false;
      return "\n      <label><input type='checkbox' ".concat(appliedBorderImage ? 'checked' : '', " ref='$apply' /> Apply</label>\n    ");
    }
  }, {
    key: Object(Event["CLICK"])('$apply'),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return;
      var applyBorderImage = this.refs.$apply.checked();
      current.reset({
        applyBorderImage: applyBorderImage
      });
      this.emit("refreshElement", current);
    }
  }, {
    key: "getColorStepList",
    value: function getColorStepList(image) {
      switch (image.type) {
        case "static-gradient":
        case "linear-gradient":
        case "repeating-linear-gradient":
        case "radial-gradient":
        case "repeating-radial-gradient":
        case "conic-gradient":
        case "repeating-conic-gradient":
          return this.getColorStepString(image.colorsteps);
      }

      return '';
    }
  }, {
    key: "getColorStepString",
    value: function getColorStepString(colorsteps) {
      return colorsteps.map(function (step) {
        return "<div class='step' data-colorstep-id=\"".concat(step.id, "\" data-selected='").concat(step.selected, "' style='background-color:").concat(step.color, ";'></div>");
      }).join('');
    }
  }, {
    key: Object(Event["LOAD"])('$borderImageView'),
    value: function value() {
      var current = this.$selection.current || {
        borderImage: {
          image: {}
        }
      };
      var borderImage = current.borderImage;
      var backgroundTypeName = borderImage.type ? names[borderImage.type] : '';
      var imageCSS = "background-image: ".concat(borderImage.image.toString(), "; background-size: cover;");
      return " \n      <div class='preview' ref=\"$preview\">\n        <div class='mini-view'>\n          <div class='color-view'  style=\"".concat(imageCSS, "\" ref=\"$miniView\"></div>\n        </div>\n      </div> \n      <div class='fill-info'>\n        <div class='gradient-info'>\n          <div class='fill-title' ref=\"$fillTitle\">").concat(backgroundTypeName, "</div>\n          <div class='colorsteps' ref=\"$colorsteps\">\n            ").concat(this.getColorStepList(borderImage.image), "\n          </div>\n        </div>\n      </div>\n    ");
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBorderImage'),
    value: function value(key, _value) {
      var _this = this;

      if (key === 'border-image-slice') {
        keyList.forEach(function (type) {
          _this.children["$".concat(type, "Slice")].setValue(_value);
        });
      }

      this.setBorderImageProperty();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"property-item border-image-item\" ref='$borderImageView'></div>    \n      <div class=\"property-item border-slice-item\">\n        <div class=\"slice-selector\" data-selected-value=\"all\" ref=\"$selector\">\n          <button type=\"button\" data-value=\"all\">".concat(icon["a" /* default */].border_all, "</button>\n          <button type=\"button\" data-value=\"partitial\">\n            ").concat(icon["a" /* default */].border_inner, "\n          </button>\n        </div>\n        <div class=\"slice-value\">\n          <object refClass=\"RangeEditor\"  ref='$allSlice' key='border-image-slice' onchange='changeBorderImage' />\n        </div>\n      </div>\n      <div\n        class=\"property-item border-slice-item full has-list\"\n        ref=\"$partitialSetting\"\n        style=\"display: none;\"\n      >\n        <div class=\"slice-setting-box\" ref=\"$sliceSettingBox\">\n          ").concat(typeList.map(function (it) {
          return "\n              <div>\n                <label class='title'>".concat(it.title, "</label>\n              </div>\n              <div>\n                <object refClass=\"RangeEditor\"  ref='$").concat(it.key, "Slice' label='Slice' key='border-image-slice-").concat(it.key, "' onchange='changeBorderImage' /> \n              </div>  \n              <div>\n                <object refClass=\"RangeEditor\"  ref='$").concat(it.key, "Width' label='Width' key='border-image-width-").concat(it.key, "' onchange='changeBorderImage' /> \n              </div>                \n            ");
        }).join(''), "\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CHANGE"])("$sliceSettingBox select"),
    value: function value(e) {
      this.setBorderImageProperty();
    }
  }, {
    key: Object(Event["CLICK"])('$borderImageView .preview'),
    value: function value() {
      this.viewFillPopup(this.refs.$preview, '');
    }
  }, {
    key: Object(Event["CLICK"])("$borderImageView .colorsteps .step"),
    value: function value(e) {
      this.refs.$colorsteps.$("[data-selected=\"true\"]").removeAttr('data-selected');
      var selectColorStepId = e.$dt.attr("data-colorstep-id");
      e.$dt.attr('data-selected', true);
      var $preview = e.$dt.closest("border-image-item").$(".preview");
      this.viewFillPopup($preview, selectColorStepId);
    }
  }, {
    key: "getFillData",
    value: function getFillData(borderImage) {
      var data = {
        type: borderImage.type
      };

      switch (data.type) {
        case "image":
          data.url = borderImage.image ? borderImage.image.url : "";
          break;

        default:
          if (borderImage.image) {
            var image = borderImage.image;
            data.type = image.type;
            data.colorsteps = toConsumableArray_default()(image.colorsteps);
            data.angle = image.angle;
            data.radialType = image.radialType || "ellipse";
            data.radialPosition = image.radialPosition || unit_Length["b" /* Position */].CENTER;
          } else {
            data.colorsteps = [];
            data.angle = 0;
            data.radialType = "ellipse";
            data.radialPosition = unit_Length["b" /* Position */].CENTER;
          }

          break;
      }

      return data;
    }
  }, {
    key: "viewFillPopup",
    value: function viewFillPopup($preview, selectColorStepId) {
      var current = this.$selection.current;
      if (!current) return;
      this.emit("showFillPopup", _objectSpread(_objectSpread({
        changeEvent: 'changeBorderImageFillPopup'
      }, this.getFillData(current.borderImage)), {}, {
        selectColorStepId: selectColorStepId,
        refresh: true
      }));
    }
  }, {
    key: "viewChangeImage",
    value: function viewChangeImage(data) {
      var current = this.$selection.current;
      if (!current) return;
      var borderImage = current.borderImage;
      if (!borderImage) return;
      var $el = this.getRef("$miniView");

      if ($el && borderImage.image) {
        $el.css({
          'background-image': borderImage.image.toString(),
          "background-size": "cover"
        });
      }

      var $el = this.getRef("$fillTitle");

      if ($el) {
        $el.html(names["image"]);
      }

      var $el = this.getRef("$colorsteps", this.selectedIndex);

      if ($el) {
        $el.empty();
      }
    }
  }, {
    key: "setImage",
    value: function setImage(data) {
      var current = this.$selection.current;
      if (!current) return;
      current.borderImage.setImageUrl(data);
      this.viewChangeImage(data);
      this.emit("refreshElement", current);
    }
  }, {
    key: "viewChangeGradient",
    value: function viewChangeGradient(data) {
      var current = this.$selection.current;
      if (!current) return;
      var borderImage = current.borderImage;
      if (!borderImage) return;
      var $el = this.getRef("$miniView");

      if ($el) {
        $el.css({
          'background-image': borderImage.image.toString(),
          "background-size": "cover"
        });
      }

      var $el = this.getRef("$fillTitle");

      if ($el) {
        $el.html(names[data.type]);
      }

      var $el = this.getRef("$colorsteps", this.selectedIndex);

      if ($el) {
        $el.html(this.getColorStepString(data.colorsteps));
      }
    }
  }, {
    key: "setGradient",
    value: function setGradient(data) {
      var current = this.$selection.current;
      if (!current) return;
      current.borderImage.setGradient(data);
      this.viewChangeGradient(data);
      this.emit("refreshElement", current);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeBorderImageFillPopup"),
    value: function value(data) {
      switch (data.type) {
        case "image":
          this.setImage(data);
          break;

        default:
          this.setGradient(data);
          break;
      }
    }
  }, {
    key: "setBorderImageProperty",
    value: function setBorderImageProperty() {
      var _this2 = this;

      var current = this.$selection.current;
      if (!current) return;
      var borderImage = current.borderImage;
      var type = this.refs.$selector.attr("data-selected-value");

      if (type === "all") {
        var len = this.children.$allSlice.getValue();
        borderImage.reset({
          slice: {
            top: len.clone(),
            right: len.clone(),
            bottom: len.clone(),
            left: len.clone()
          }
        });
      } else {
        keyList.forEach(function (type) {
          borderImage.slice[type] = _this2.children["$".concat(type, "Slice")].getValue();
          borderImage.width[type] = _this2.children["$".concat(type, "Width")].getValue();
        });
      }

      this.emit("refreshElement", current);
    }
  }, {
    key: Object(Event["CLICK"])("$selector button"),
    value: function value(e) {
      var type = e.$dt.attr("data-value");
      this.refs.$selector.attr("data-selected-value", type);

      if (type === "all") {
        this.refs.$partitialSetting.hide();
      } else {
        this.refs.$partitialSetting.show("grid");
      }

      this.setBorderImageProperty();
    }
  }]);

  return BorderImageProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BorderImageProperty: BorderImageProperty_BorderImageProperty
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/get.js
var helpers_get = __webpack_require__(10);
var get_default = /*#__PURE__*/__webpack_require__.n(helpers_get);

// EXTERNAL MODULE: ./src/el/editor/items/Property.js
var Property = __webpack_require__(34);

// CONCATENATED MODULE: ./src/el/base/functions/customParser.js
function getCustomParseIndexString(it) {
  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '@';
  return "".concat(prefix).concat(it.startIndex).padEnd(10, '0');
}
function customParseMatches(str, regexp) {
  var matches = str.match(regexp);
  var result = [];

  if (!matches) {
    return result;
  }

  for (var i = 0, len = matches.length; i < len; i++) {
    result.push({
      parsedString: matches[i]
    });
  }

  var pos = {
    next: 0
  };
  result.forEach(function (item) {
    var startIndex = str.indexOf(item.parsedString, pos.next);
    item.startIndex = startIndex;
    item.endIndex = startIndex + item.parsedString.length;
    pos.next = item.endIndex;
  });
  return result;
}
function customParseConvertMatches(str, regexp) {
  var m = customParseMatches(str, regexp);
  m.forEach(function (it) {
    str = str.replace(it.parsedString, getCustomParseIndexString(it));
  });
  return {
    str: str,
    matches: m
  };
}
function customParseReverseMatches(str, matches) {
  matches.forEach(function (it) {
    str = str.replace(getCustomParseIndexString(it), it.parsedString);
  });
  return str;
}
// CONCATENATED MODULE: ./src/el/editor/property-parser/Animation.js








function Animation_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function Animation_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { Animation_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { Animation_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function Animation_createSuper(Derived) { var hasNativeReflectConstruct = Animation_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Animation_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ANIMATION_TIMING_REG = /((cubic-bezier|steps)\(([^\)]*)\))/gi;
var Animation_Animation = /*#__PURE__*/function (_Property) {
  inherits_default()(Animation, _Property);

  var _super = Animation_createSuper(Animation);

  function Animation() {
    classCallCheck_default()(this, Animation);

    return _super.apply(this, arguments);
  }

  createClass_default()(Animation, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return {
        itemType: "animation",
        checked: true,
        name: 'none',
        direction: 'normal',
        duration: unit_Length["a" /* Length */].second(0),
        timingFunction: 'linear',
        delay: unit_Length["a" /* Length */].second(0),
        iterationCount: unit_Length["a" /* Length */].string('infinite'),
        playState: 'running',
        fillMode: 'none'
      };
    }
  }, {
    key: "convert",
    value: function convert(json) {
      json = get_default()(getPrototypeOf_default()(Animation.prototype), "convert", this).call(this, json);
      json.duration = unit_Length["a" /* Length */].parse(json.duration);
      json.iterationCount = unit_Length["a" /* Length */].parse(json.iterationCount);
      return json;
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return Animation_objectSpread({}, this.attrs('name', 'direction', 'duration', 'timingFunction', 'delay', 'iterationCount', 'playState', 'fillMode'));
    }
  }, {
    key: "togglePlayState",
    value: function togglePlayState(forcedValue) {
      if (forcedValue) {
        this.reset({
          playState: forcedValue === 'running' ? 'running' : 'paused'
        });
      } else {
        if (this.json.playState === 'paused') {
          this.reset({
            playState: 'running'
          });
        } else {
          this.reset({
            playState: 'paused'
          });
        }
      }
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      if (!this.json.name) return {};
      return {
        "animation": this.toString()
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return [json.duration, json.timingFunction, json.delay, json.iterationCount, json.direction, json.fillMode, json.playState, json.name].join(' ');
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new Animation(obj);
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return new Animation(it).toString();
      }).join(',');
    }
  }, {
    key: "add",
    value: function add(animation) {
      var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var list = Animation.parseStyle(animation);
      list.push(Animation.parse(item));
      return Animation.join(list);
    }
  }, {
    key: "remove",
    value: function remove(animation, removeIndex) {
      return Animation.filter(animation, function (it, index) {
        return removeIndex != index;
      });
    }
  }, {
    key: "filter",
    value: function filter(animation, filterFunction) {
      return Animation.join(Animation.parseStyle(animation).filter(function (it) {
        return filterFunction(it);
      }));
    }
  }, {
    key: "replace",
    value: function replace(animation, replaceIndex, valueObject) {
      var list = Animation.parseStyle(animation);

      if (list[replaceIndex]) {
        list[replaceIndex] = valueObject;
      } else {
        list.push(valueObject);
      }

      return Animation.join(list);
    }
  }, {
    key: "get",
    value: function get(animation, index) {
      var arr = Animation.parseStyle(animation);
      return arr[index];
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(animation) {
      var list = [];
      if (!animation) return list;
      var result = customParseConvertMatches(animation, ANIMATION_TIMING_REG);
      list = result.str.split(',').map(function (it) {
        var fields = it.split(' ').filter(Boolean);

        if (fields.length >= 7) {
          /* @keyframes duration | timing-function | delay | 
          iteration-count | direction | fill-mode | play-state | name */
          //animation: 3s ease-in 1s 2 reverse both paused slidein;        
          return {
            duration: unit_Length["a" /* Length */].parse(fields[0]),
            timingFunction: customParseReverseMatches(fields[1], result.matches),
            delay: unit_Length["a" /* Length */].parse(fields[2]),
            iterationCount: fields[3] === 'infinite' ? unit_Length["a" /* Length */].string('infinite') : unit_Length["a" /* Length */].parse(fields[3]),
            direction: fields[4],
            fillMode: fields[5],
            playState: fields[6],
            name: fields[7]
          };
        } else if (fields.length >= 3) {
          /* @keyframes duration | timing-function | delay | name */
          //animation: 3s linear 1s slidein;        
          return {
            duration: unit_Length["a" /* Length */].parse(fields[0]),
            timingFunction: customParseReverseMatches(fields[1], result.matches),
            delay: unit_Length["a" /* Length */].parse(fields[2]),
            name: fields[3]
          };
        } else if (fields.length >= 1) {
          /* @keyframes duration | name */
          //animation: 3s slidein;        
          return {
            duration: unit_Length["a" /* Length */].parse(fields[0]),
            name: fields[1]
          };
        } else {
          return {};
        }
      });
      return list.map(function (it) {
        return Animation.parse(it);
      });
    }
  }]);

  return Animation;
}(Property["a" /* Property */]);
// EXTERNAL MODULE: ./src/el/base/functions/func.js
var func = __webpack_require__(8);

// CONCATENATED MODULE: ./src/el/editor/ui/property/AnimationProperty.js







function AnimationProperty_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function AnimationProperty_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { AnimationProperty_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { AnimationProperty_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function AnimationProperty_createSuper(Derived) { var hasNativeReflectConstruct = AnimationProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AnimationProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var AnimationProperty_AnimationProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(AnimationProperty, _BaseProperty);

  var _super = AnimationProperty_createSuper(AnimationProperty);

  function AnimationProperty() {
    classCallCheck_default()(this, AnimationProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(AnimationProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('animation.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='animation-list' ref='$animationList'></div>"
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n        <button type=\"button\" ref=\"$add\" title=\"add Fill\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return true;
    }
  }, {
    key: Object(Event["LOAD"])("$animationList") + Event["DOMDIFF"],
    value: function value() {
      var _this = this;

      var current = this.$selection.current;
      if (!current) return '';
      return Animation_Animation.parseStyle(current.animation).map(function (it, index) {
        var selectedClass = _this.state.selectedIndex === index ? "selected" : "";
        var path = Object(func["curveToPath"])(it.timingFunction, 30, 30);
        return (
          /*html*/
          "\n      <div class='animation-group-item'>\n        <div class='animation-item ".concat(selectedClass, "' \n             data-index='").concat(index, "' \n             ref=\"animationIndex").concat(index, "\" \n          >\n            <div class='timing preview' data-index='").concat(index, "' ref='$preview").concat(index, "'>\n              <svg class='item-canvas' width=\"30\" height=\"30\" viewBox=\"0 0 30 30\">\n                <path d=\"").concat(path, "\" stroke=\"white\" stroke-width=\"1\" fill='none' />\n              </svg>\n            </div>\n            <div class='name'>\n              <div class='title' ref=\"animationName").concat(index, "\">\n                ").concat(it.name ? it.name : "&lt; ".concat(_this.$i18n('animation.property.select a keyframe'), " &gt;"), "\n              </div>\n              <div class='labels'>\n                <label class='count' title='").concat(_this.$i18n('animation.property.iteration.count'), "'><small>").concat(it.iterationCount, "</small></label>\n                <label class='delay' title='").concat(_this.$i18n('animation.property.delay'), "'><small>").concat(it.delay, "</small></label>\n                <label class='duration' title='").concat(_this.$i18n('animation.property.duration'), "'><small>").concat(it.duration, "</small></label>\n                <label class='direction' title='").concat(_this.$i18n('animation.property.direction'), "'><small>").concat(it.direction, "</small></label>\n                <label class='fill-mode' title='").concat(_this.$i18n('animation.property.fill.mode'), "'><small>").concat(it.fillMode, "</small></label>\n                <label class='play-state' title='").concat(_this.$i18n('animation.property.play.state'), "' data-index='").concat(index, "' data-play-state-selected-value=\"").concat(it.playState, "\">\n                  <small data-play-state-value='running'>").concat(icon["a" /* default */].play, "</small>\n                  <small data-play-state-value='paused'>").concat(icon["a" /* default */].pause, "</small>\n                </label>\n              </div>\n            </div>\n            <div class='tools'>\n                <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n                  ").concat(icon["a" /* default */].remove2, "\n                </button>\n            </div>\n        </div>\n      </div>        \n      ")
        );
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot('project');
      this.emit("hideAnimationPropertyPopup");
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value(e) {
      var current = this.$selection.current;

      if (current) {
        current.reset({
          animation: Animation_Animation.add(current.animation, {
            name: null
          })
        });
        this.emit("refreshElement", current);
      }

      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])("$animationList .tools .del"),
    value: function value(e) {
      var removeIndex = e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      current.reset({
        animation: Animation_Animation.remove(current.animation, removeIndex)
      });
      this.emit("refreshElement", current);
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$animationList .play-state'),
    value: function value(e) {
      var index = +e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      var list = Animation_Animation.parseStyle(current.animation);
      var animation = list[index];

      if (animation) {
        animation.togglePlayState();
        e.$dt.attr('data-play-state-selected-value', animation.playState);
        current.reset({
          animation: Animation_Animation.join(list)
        });
        this.emit("refreshElement", current);
      }
    }
  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.refs["animationIndex".concat(selectedIndex)].addClass("selected");
      } else {
        this.refs["animationIndex".concat(selectedIndex)].removeClass("selected");
      }
    }
  }, {
    key: "viewAnimationPicker",
    value: function viewAnimationPicker($preview) {
      if (typeof this.selectedIndex === "number") {
        this.selectItem(this.selectedIndex, false);
      }

      this.selectedIndex = +$preview.attr("data-index");
      this.current = this.$selection.current;
      if (!this.current) return;
      this.currentAnimation = Animation_Animation.get(this.current.animation, this.selectedIndex);
      this.viewAnimationPropertyPopup();
    }
  }, {
    key: "viewAnimationPropertyPopup",
    value: function viewAnimationPropertyPopup() {
      if (!this.currentAnimation) return;
      var animation = this.currentAnimation;
      this.emit("showAnimationPropertyPopup", {
        changeEvent: 'changeAnimationPropertyPopup',
        data: animation.toCloneObject(),
        instance: this
      });
    }
  }, {
    key: Object(Event["CLICK"])("$animationList .preview"),
    value: function value(e) {
      this.viewAnimationPicker(e.$dt);
    }
  }, {
    key: "getRef",
    value: function getRef() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.refs[args.join("")];
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeAnimationPropertyPopup"),
    value: function value(data) {
      if (this.currentAnimation) {
        this.currentAnimation.reset(AnimationProperty_objectSpread({}, data));

        if (this.current) {
          this.command("setAttribute", "change animation property", {
            animation: Animation_Animation.replace(this.current.animation, this.selectedIndex, this.currentAnimation)
          }); // this.current.reset({
          //   animation: Animation.replace(this.current.animation, this.selectedIndex, this.currentAnimation)
          // })
          // this.emit("refreshElement", this.current);        

          this.refresh();
        }
      }
    }
  }]);

  return AnimationProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AnimationProperty: AnimationProperty_AnimationProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/Keyframe.js
var Keyframe = __webpack_require__(136);

// CONCATENATED MODULE: ./src/el/editor/ui/property/KeyframeProperty.js






function KeyframeProperty_createSuper(Derived) { var hasNativeReflectConstruct = KeyframeProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyframeProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var KeyframeProperty_KeyframeProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(KeyframeProperty, _BaseProperty);

  var _super = KeyframeProperty_createSuper(KeyframeProperty);

  function KeyframeProperty() {
    classCallCheck_default()(this, KeyframeProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyframeProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('keyframe.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div class='keyframe-list' ref='$keyframeList'></div>";
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return "\n      <button type=\"button\" ref=\"$add\" title=\"add Filter\">".concat(icon["a" /* default */].add, "</button>\n    ");
    }
  }, {
    key: "makeProperty",
    value: function makeProperty(property) {
      var key = property.key;
      if (key === 'x') key = 'left';else if (key === 'y') key = 'top';
      return (
        /*html*/
        "\n      <div class='offset-property-item'>\n        <label>".concat(key, ":</label>\n        <div class='value'>").concat(property.value, "</div>\n      </div>\n    ")
      );
    }
  }, {
    key: "makeOffset",
    value: function makeOffset(offset) {
      var _this = this;

      return (
        /*html*/
        "\n      <div class='offset'>\n        <label>".concat(offset.offset, "</label>\n        <div class='properties'>\n          ").concat(offset.properties.map(function (p) {
          return _this.makeProperty(p);
        }).join(''), "\n        </div>        \n      </div>\n    ")
      );
    }
  }, {
    key: "makeKeyframeTemplate",
    value: function makeKeyframeTemplate(keyframe, index) {
      var _this2 = this;

      index = index.toString();
      return (
        /*html*/
        "\n      <div class='keyframe-item' data-selected-value='".concat(keyframe.selectedType, "' ref='$keyframeIndex").concat(index, "' data-index='").concat(index, "'>\n        <div class='title'>\n          <div class='name'>").concat(keyframe.name, "</div>\n          <div class='tools'>\n            <div class='group'>\n              <button type=\"button\" data-type='list'>").concat(icon["a" /* default */].list, "</button>\n              <button type=\"button\" data-type='code'>").concat(icon["a" /* default */].code, "</button>\n            </div>\n            <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">").concat(icon["a" /* default */].remove2, "</button>\n          </div>\n        </div>\n        <div class='offset-list'>\n          <div class='container'>\n            ").concat(keyframe.offsets.map(function (o) {
          return (
            /*html*/
            "\n              <div class='offset' style='left: ".concat(o.offset, "; background-color: ").concat(o.color, "'></div>\n              ")
          );
        }).join(''), "\n          </div>\n        </div>\n        <div class='keyframe-code' data-type='list'>\n          ").concat(keyframe.offsets.map(function (offset) {
          return _this2.makeOffset(offset);
        }).join(''), "\n        </div>\n        <div class='keyframe-code' data-type='code'>\n          <pre>").concat(keyframe.toString().trim(), "</pre>\n        </div>        \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$keyframeList .keyframe-item .title .group button[data-type]'),
    value: function value(e) {
      var $keyframeItem = e.$dt.closest('keyframe-item');
      var index = +$keyframeItem.attr('data-index');
      var type = e.$dt.attr('data-type');
      var current = this.$selection.currentProject;
      if (!current) return;
      var currentKeyframe = current.keyframes[index];

      if (currentKeyframe) {
        currentKeyframe.reset({
          selectedType: type
        });
      }

      $keyframeItem.attr('data-selected-value', type);
    }
  }, {
    key: Object(Event["CLICK"])('$keyframeList .keyframe-item .offset-list'),
    value: function value(e) {
      var index = +e.$dt.closest('keyframe-item').attr('data-index');
      var current = this.$selection.currentProject;
      if (!current) return;
      this.viewKeyframePicker(index);
    }
  }, {
    key: Object(Event["CLICK"])('$keyframeList .del') + Event["PREVENT"],
    value: function value(e) {
      var removeIndex = e.$dt.attr("data-index");
      var current = this.$selection.currentProject;
      if (!current) return;
      current.removeKeyframe(removeIndex); // project 는 항상 최상위이기 때문에  true 옵션을 줘서 혼자서 갱신 해야함 

      this.emit('refreshProject', current);
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["LOAD"])("$keyframeList"),
    value: function value() {
      var _this3 = this;

      var current = this.$selection.currentProject;
      if (!current) return '';
      var keyframes = current.keyframe ? Keyframe["a" /* Keyframe */].parseStyle(current) : current.keyframes;
      current.keyframe = '';
      current.keyframes = keyframes;
      return keyframes.map(function (keyframe, index) {
        return _this3.makeKeyframeTemplate(keyframe, index);
      });
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var current = this.$selection.currentProject;

      if (current) {
        current.createKeyframe();
        this.refresh();
        this.emit('refreshProject', current);
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: "viewKeyframePicker",
    value: function viewKeyframePicker(index) {
      if (typeof this.selectedIndex === "number") {
        this.selectItem(this.selectedIndex, false);
      }

      this.selectedIndex = +index;
      this.selectItem(this.selectedIndex, true);
      this.current = this.$selection.currentProject;
      if (!this.current) return;
      this.currentKeyframe = this.current.keyframes[this.selectedIndex];
      this.viewKeyframePropertyPopup();
    }
  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.getRef('$keyframeIndex', selectedIndex).addClass("selected");
      } else {
        this.getRef('$keyframeIndex', selectedIndex).removeClass("selected");
      }

      if (this.current) {
        this.current.keyframes.forEach(function (it, index) {
          it.selected = index === selectedIndex;
        });
      }
    }
  }, {
    key: "viewKeyframePropertyPopup",
    value: function viewKeyframePropertyPopup(position) {
      this.current = this.$selection.currentProject;
      if (!this.current) return;
      this.currentKeyframe = this.current.keyframes[this.selectedIndex];
      var back = this.currentKeyframe;
      var name = back.name;
      var offsets = back.offsets;
      this.emit("showKeyframePopup", {
        position: position,
        name: name,
        offsets: offsets
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyframePopup'),
    value: function value(data) {
      var project = this.$selection.currentProject;
      if (!project) return;
      this.currentKeyframe = project.keyframes[this.selectedIndex];

      if (this.currentKeyframe) {
        this.currentKeyframe.reset(data);
      }

      this.refresh();
      this.emit('refreshProject', project);
    }
  }]);

  return KeyframeProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  KeyframeProperty: KeyframeProperty_KeyframeProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BackgroundImageProperty.js







function BackgroundImageProperty_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundImageProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundImageProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BackgroundImageProperty_BackgroundImageProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BackgroundImageProperty, _BaseProperty);

  var _super = BackgroundImageProperty_createSuper(BackgroundImageProperty);

  function BackgroundImageProperty() {
    classCallCheck_default()(this, BackgroundImageProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundImageProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('background.image.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'background-image';
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'background-image';
    }
  }, {
    key: "getBodyClassName",
    value: function getBodyClassName() {
      return 'no-padding';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='full' ref='$property'></div>               \n    "
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return "<button type=\"button\" ref='$add'>".concat(icon["a" /* default */].add, "</button>");
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.children.$backgroundImageEditor.trigger('add');
    }
  }, {
    key: Object(Event["LOAD"])('$property'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['background-image'] || '';
      return (
        /*html*/
        "<object refClass=\"BackgroundImageEditor\" \n              ref='$backgroundImageEditor' \n              key='background-image'\n              value='".concat(value, "' \n              hide-label=\"true\"\n              onchange='changeBackgroundImage' \n            />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.load();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeBackgroundImage'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change background image', defineProperty_default()({}, key, _value));
    }
  }]);

  return BackgroundImageProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BackgroundImageProperty: BackgroundImageProperty_BackgroundImageProperty
});
// EXTERNAL MODULE: ./src/el/editor/util/Resource.js
var Resource = __webpack_require__(38);

// CONCATENATED MODULE: ./src/el/editor/ui/property/FilterProperty.js








function FilterProperty_createSuper(Derived) { var hasNativeReflectConstruct = FilterProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FilterProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var FilterProperty_FilterProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(FilterProperty, _BaseProperty);

  var _super = FilterProperty_createSuper(FilterProperty);

  function FilterProperty() {
    classCallCheck_default()(this, FilterProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(FilterProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('filter.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'filter';
    }
  }, {
    key: "getTitleClassName",
    value: function getTitleClassName() {
      return 'filter';
    }
  }, {
    key: "getBodyClassName",
    value: function getBodyClassName() {
      return 'no-padding';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div class='full filter-property' ref='$body'></div>";
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <select ref=\"$filterSelect\">      \n      </select>\n      <button type=\"button\" ref=\"$add\" title=\"add Filter\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var filterType = this.refs.$filterSelect.value;
      this.children.$filterEditor.trigger('add', filterType);
    }
  }, {
    key: Object(Event["LOAD"])('$filterSelect'),
    value: function value() {
      var _this = this;

      var list = Resource["c" /* filter_list */].map(function (it) {
        return {
          title: _this.$i18n("filter.property.".concat(it)),
          value: it
        };
      });
      var svgFilterList = this.getSVGFilterList();
      var totalList = [];

      if (svgFilterList.length) {
        totalList = [].concat(toConsumableArray_default()(list), [{
          title: '-------',
          value: ''
        }], toConsumableArray_default()(svgFilterList));
      } else {
        totalList = toConsumableArray_default()(list);
      }

      return totalList.map(function (it) {
        var title = it.title,
            value = it.value;
        return "<option value='".concat(value, "'>").concat(title, "</option>");
      });
    }
  }, {
    key: "getSVGFilterList",
    value: function getSVGFilterList() {
      var current = this.$selection.currentProject;
      var arr = [];

      if (current) {
        arr = current.svgfilters.map(function (it) {
          var id = it.id;
          return {
            title: "svg - #".concat(id),
            value: id
          };
        });
      }

      return arr;
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current.filter;
      return (
        /*html*/
        "\n      <div>\n        <object refClass=\"FilterEditor\" ref='$filterEditor' key=\"filter\" value='".concat(value, "' hide-label='true' onchange='changeFilterEditor' />\n      </div>")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFilterEditor'),
    value: function value(key, filter) {
      this.command('setAttribute', 'change filter', defineProperty_default()({}, key, filter));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSVGArea') + Object(Event["DEBOUNCE"])(1000),
    value: function value() {
      this.load('$filterSelect');
    }
  }]);

  return FilterProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  FilterProperty: FilterProperty_FilterProperty
});
// EXTERNAL MODULE: ./src/el/editor/renderer/HTMLRenderer/index.js + 14 modules
var HTMLRenderer = __webpack_require__(48);

// EXTERNAL MODULE: ./src/el/editor/renderer/SVGRenderer/index.js + 15 modules
var SVGRenderer = __webpack_require__(80);

// CONCATENATED MODULE: ./src/el/editor/ui/property/CodeViewProperty.js






function CodeViewProperty_createSuper(Derived) { var hasNativeReflectConstruct = CodeViewProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CodeViewProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var CodeViewProperty_CodeViewProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(CodeViewProperty, _BaseProperty);

  var _super = CodeViewProperty_createSuper(CodeViewProperty);

  function CodeViewProperty() {
    classCallCheck_default()(this, CodeViewProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(CodeViewProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('code.view.property.title');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionStyleView', 'refreshStyleView', 'refreshSelection', 'refreshSVGArea') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "\n      <div class=\"property-item code-view-item\" ref='$body'></div>\n    ";
    }
  }, {
    key: Object(Event["LOAD"])('$body') + Event["DOMDIFF"],
    value: function value() {
      return [HTMLRenderer["a" /* default */].codeview(this.$selection.current), SVGRenderer["a" /* default */].codeview(this.$selection.current)];
    }
  }]);

  return CodeViewProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  CodeViewProperty: CodeViewProperty_CodeViewProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BackdropFilterProperty.js








function BackdropFilterProperty_createSuper(Derived) { var hasNativeReflectConstruct = BackdropFilterProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackdropFilterProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var BackdropFilterProperty_BackdropFilterProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BackdropFilterProperty, _BaseProperty);

  var _super = BackdropFilterProperty_createSuper(BackdropFilterProperty);

  function BackdropFilterProperty() {
    classCallCheck_default()(this, BackdropFilterProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackdropFilterProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('backdrop.filter.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getTitleClassName",
    value: function getTitleClassName() {
      return 'filter';
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'backdrop-filter';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='full filter-property' ref='$body'></div>"
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <select ref=\"$filterSelect\"></select>\n      <button type=\"button\" ref=\"$add\" title=\"add Filter\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var filterType = this.refs.$filterSelect.value;
      this.children.$filterEditor.trigger('add', filterType);
    }
  }, {
    key: Object(Event["LOAD"])('$filterSelect'),
    value: function value() {
      var _this = this;

      var list = Resource["c" /* filter_list */].map(function (it) {
        return {
          title: _this.$i18n("filter.property.".concat(it)),
          value: it
        };
      });
      var svgFilterList = this.getSVGFilterList();
      var totalList = [];

      if (svgFilterList.length) {
        totalList = [].concat(toConsumableArray_default()(list), [{
          title: '-------',
          value: ''
        }], toConsumableArray_default()(svgFilterList));
      } else {
        totalList = toConsumableArray_default()(list);
      }

      return totalList.map(function (it) {
        var title = it.title,
            value = it.value;
        return "<option value='".concat(value, "'>").concat(title, "</option>");
      });
    }
  }, {
    key: "getSVGFilterList",
    value: function getSVGFilterList() {
      var current = this.$selection.currentProject;
      var arr = [];

      if (current) {
        arr = current.svgfilters.map(function (it) {
          return {
            title: "svg - #".concat(it.id),
            value: it.id
          };
        });
      }

      return arr;
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['backdrop-filter'];
      return (
        /*html*/
        "\n      <div>\n        <object refClass=\"FilterEditor\" ref='$filterEditor' key=\"backdrop-filter\" value='".concat(value, "' hide-label=\"true\" onchange='changeFilterEditor' />\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFilterEditor'),
    value: function value(key, filter) {
      this.command("setAttribute", "change backdrop filter", defineProperty_default()({}, key, filter));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project', 'artboard']);
    }
  }]);

  return BackdropFilterProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BackdropFilterProperty: BackdropFilterProperty_BackdropFilterProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/Transform.js + 1 modules
var Transform = __webpack_require__(30);

// EXTERNAL MODULE: ./src/el/base/functions/math.js + 1 modules
var math = __webpack_require__(15);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/RotateEditorView.js






function RotateEditorView_createSuper(Derived) { var hasNativeReflectConstruct = RotateEditorView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RotateEditorView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var directions = ['top-left', 'top', 'top-right', 'left', 'right', 'bottom-left', 'bottom', 'bottom-right'];
var DEFINED_ANGLES = {
  "top": "0",
  "top-right": "45",
  "right": "90",
  "bottom-right": "135",
  "bottom": "180",
  "bottom-left": "225",
  "left": "270",
  "top-left": "315"
};

var RotateEditorView_RotateEditorView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(RotateEditorView, _EditorElement);

  var _super = RotateEditorView_createSuper(RotateEditorView);

  function RotateEditorView() {
    classCallCheck_default()(this, RotateEditorView);

    return _super.apply(this, arguments);
  }

  createClass_default()(RotateEditorView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='rotate-editor-view'>            \n                <div class='rotate-area' ref='$rotateArea'>\n                    <div class='rotate-container' ref='$rotateContainer'>\n                        <div class='rotate-item rotate-x'></div>\n                        <div class='rotate-item rotate-y'></div>\n                    </div>\n                </div>\n                <div class='direction-area' ref='$directionArea'>\n                    ".concat(directions.map(function (it) {
          return (
            /*html*/
            "<div class='direction' data-value='".concat(it, "'></div>")
          );
        }).join(''), "\n                </div>                \n                <div class='rotate-z' ref='$rotateZ'>\n                    <div class='handle-line'></div>                \n                    <div class='handle icon' ref='$handle'>").concat(icon["a" /* default */].gps_fixed, "</div>\n                </div>                \n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$directionArea .direction'),
    value: function value(e) {
      var direction = e.$dt.attr('data-value');
      var value = unit_Length["a" /* Length */].deg(DEFINED_ANGLES[direction] || 0);
      this.$selection.each(function (item) {
        var transform = Transform["a" /* Transform */].replace(item.transform, {
          type: 'rotateZ',
          value: [value]
        });
        item.reset({
          transform: transform
        });
      });
      this.bindData('$rotateZ');
      this.emit('refreshSelectionStyleView', null, false, true);
      this.emit('refreshRect');
      this.$selection.setRectCache();
    }
  }, {
    key: Object(Event["BIND"])('$rotateContainer'),
    value: function value() {
      var current = this.$selection.current || {
        transform: ''
      };
      var transform = Transform["a" /* Transform */].filter(current.transform || '', function (it) {
        return it.type === 'rotateX' || it.type === 'rotateY';
      });
      return {
        style: {
          transform: transform
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$rotateZ'),
    value: function value() {
      var current = this.$selection.current || {
        transform: ''
      };
      var transform = Transform["a" /* Transform */].filter(current.transform || '', function (it) {
        return it.type === 'rotate' || it.type === 'rotateZ';
      });
      return {
        style: {
          transform: transform
        }
      };
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$rotateArea'),
    value: function value() {
      this.$selection.each(function (item) {
        item.reset({
          transform: Transform["a" /* Transform */].remove(item.transform, ['rotateX', 'rotateY'])
        });
      });
      this.$selection.setRectCache();
      this.bindData('$rotateContainer');
      this.emit('refreshSelectionStyleView', null, false, true);
      this.emit('refreshRect');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$rotateArea') + Object(Event["MOVE"])('moveRotateXY') + Object(Event["END"])('moveEndRotateXY'),
    value: function value() {
      // this.setCacheRotateXY () 
      this.state.rotateCache = this.$selection.map(function (item) {
        var rotateX = Transform["a" /* Transform */].get(item['transform'], 'rotateX');
        var rotateY = Transform["a" /* Transform */].get(item['transform'], 'rotateY');
        return {
          item: item,
          rotateX: rotateX ? rotateX[0] : unit_Length["a" /* Length */].deg(0),
          rotateY: rotateY ? rotateY[0] : unit_Length["a" /* Length */].deg(0)
        };
      });
    }
  }, {
    key: "moveRotateXY",
    value: function moveRotateXY(dx, dy) {
      var rx = unit_Length["a" /* Length */].deg(-dy);
      var ry = unit_Length["a" /* Length */].deg(dx);
      this.state.rotateCache.forEach(function (cache) {
        var transform = cache.item.transform;
        transform = Transform["a" /* Transform */].rotateX(transform, unit_Length["a" /* Length */].deg(cache.rotateX.value + rx.value));
        transform = Transform["a" /* Transform */].rotateY(transform, unit_Length["a" /* Length */].deg(cache.rotateY.value + ry.value));
        cache.item.transform = transform;
      });
      this.bindData('$rotateContainer');
      this.emit('refreshSelectionStyleView', null, false, true);
      this.emit('refreshRect');
    }
  }, {
    key: "moveEndRotateXY",
    value: function moveEndRotateXY(dx, dy) {
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
      this.$selection.setRectCache();
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$handle'),
    value: function value() {
      this.$selection.each(function (item) {
        item.reset({
          transform: Transform["a" /* Transform */].remove(item.transform, ['rotateZ', 'rotate'])
        });
      });
      this.bindData('$rotateZ');
      this.emit('refreshSelectionStyleView', null, false, true);
      this.emit('refreshRect');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$handle') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value() {
      var pointerRect = this.refs.$handle.rect();
      var targetRect = this.refs.$rotateZ.rect();
      this.rotateZCenter = {
        x: targetRect.x + targetRect.width / 2,
        y: targetRect.y + targetRect.height / 2
      };
      this.rotateZStart = {
        x: pointerRect.x + pointerRect.width / 2,
        y: pointerRect.y + pointerRect.height / 2
      };
      this.state.rotateCache = this.$selection.map(function (item) {
        var rotateZ = Transform["a" /* Transform */].get(item['transform'], 'rotateZ');
        return {
          item: item,
          rotateZ: rotateZ ? rotateZ[0] : unit_Length["a" /* Length */].deg(0)
        };
      });
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      this.modifyRotateZ(dx, dy);
      this.bindData('$rotateZ');
      this.emit('refreshSelectionStyleView', null, false, true);
      this.emit('refreshRect');
    }
  }, {
    key: "end",
    value: function end() {
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
      this.$selection.setRectCache();
    }
  }, {
    key: "modifyRotateZ",
    value: function modifyRotateZ(dx, dy) {
      var e = this.$config.get('bodyEvent');
      var distAngle = unit_Length["a" /* Length */].deg(Math.floor(Object(math["calculateAnglePointDistance"])(this.rotateZStart, this.rotateZCenter, {
        dx: dx,
        dy: dy
      })));
      this.state.rotateCache.forEach(function (cache) {
        var transform = cache.item.transform;
        transform = Transform["a" /* Transform */].rotateZ(transform, unit_Length["a" /* Length */].deg(cache.rotateZ.value + distAngle.value));
        cache.item.transform = transform;
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }]);

  return RotateEditorView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  RotateEditorView: RotateEditorView_RotateEditorView
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TransformProperty.js






function TransformProperty_createSuper(Derived) { var hasNativeReflectConstruct = TransformProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TransformProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var transformList = ['rotate', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d', // 'skewX',    
// 'skewY',   
'translate', 'translateX', 'translateY', 'translateZ', 'translate3d', 'perspective', 'scale', 'scaleX', 'scaleY', 'scaleZ', 'scale3d', 'matrix', 'matrix3d'];

var TransformProperty_TransformProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TransformProperty, _BaseProperty);

  var _super = TransformProperty_createSuper(TransformProperty);

  function TransformProperty() {
    classCallCheck_default()(this, TransformProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TransformProperty, [{
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('transform.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <object refClass=\"RotateEditorView\" />\n      <div class='full transform-property' ref='$body'></div>\n    "
      );
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'transform';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      var _this = this;

      return (
        /*html*/
        "\n      <select ref=\"$transformSelect\">\n      ".concat(transformList.map(function (transform) {
          var label = _this.$i18n('css.item.' + transform);

          return "<option value='".concat(transform, "'>").concat(label, "</option>");
        }).join(''), "\n      </select>\n      <button type=\"button\" ref=\"$add\" title=\"add Filter\">").concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var transformType = this.refs.$transformSelect.value;
      this.children.$transformEditor.trigger('add', transformType);
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current.transform;
      return (
        /*html*/
        "\n      <object refClass=\"TransformEditor\" ref='$transformEditor' value='".concat(value, "' hide-label=\"true\" onchange='changeTransformEditor' />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTransformEditor'),
    value: function value(_transform) {
      this.command('setAttribute', 'change transform property', {
        transform: function transform(item) {
          return Transform["a" /* Transform */].replaceAll(item.transform, _transform);
        }
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshRect') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }]);

  return TransformProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TransformProperty: TransformProperty_TransformProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/ClipPath.js
var ClipPath = __webpack_require__(40);

// CONCATENATED MODULE: ./src/el/editor/ui/property/ClipPathProperty.js






function ClipPathProperty_createSuper(Derived) { var hasNativeReflectConstruct = ClipPathProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ClipPathProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var clipPathList = ['circle', 'ellipse', 'inset', 'polygon', 'path', 'svg'];

var ClipPathProperty_ClipPathProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ClipPathProperty, _BaseProperty);

  var _super = ClipPathProperty_createSuper(ClipPathProperty);

  function ClipPathProperty() {
    classCallCheck_default()(this, ClipPathProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ClipPathProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('clippath.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'clip-path';
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'clip-path-property';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='clip-path-list' ref='$clippathList'></div>"
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <select ref=\"$clipPathSelect\">      \n        ".concat(clipPathList.map(function (it) {
          return "<option value='".concat(it, "'>").concat(it, "</option>");
        }).join(''), "\n      </select>\n      <button type=\"button\" ref=\"$add\" title=\"add Clip Path\">").concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: "makeClipPathTemplate",
    value: function makeClipPathTemplate(clippath) {
      return (
        /*html*/
        "\n      <div class='clippath-item'>\n        <div class='title'>\n          <div class='name'>".concat(clippath, "</div>\n        </div>\n        <div class='tools'>\n          <button type=\"button\" class=\"del\">").concat(icon["a" /* default */].remove2, "</button>\n        </div>        \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$clippathList .clippath-item .title'),
    value: function value(e) {
      var current = this.$selection.current;
      if (!current) return;
      this.viewClipPathPicker();
    }
  }, {
    key: Object(Event["CLICK"])('$clippathList .del') + Event["PREVENT"],
    value: function value(e) {
      var _this = this;

      var current = this.$selection.current;
      if (!current) return;
      this.command('setAttribute', 'delete clip-path', {
        'clip-path': ''
      }, current.id);
      this.emit('hideClipPathPopup');
      setTimeout(function () {
        _this.refresh();
      }, 100);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["LOAD"])("$clippathList"),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return '';
      if (!current['clip-path']) return '';
      return this.makeClipPathTemplate(current['clip-path'].split('(')[0]);
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return;

      if (current['clip-path']) {
        alert('clip-path is already exists.');
        return;
      }

      if (current) {
        current['clip-path'] = this.refs.$clipPathSelect.value;
        this.command("setAttribute", 'change clip-path', {
          'clip-path': this.refs.$clipPathSelect.value
        }, current.id);
      }

      this.refresh();
    }
  }, {
    key: "viewClipPathPicker",
    value: function viewClipPathPicker() {
      var current = this.$selection.current;
      if (!current) return;
      var obj = ClipPath["a" /* ClipPath */].parseStyle(current['clip-path']);

      switch (obj.type) {
        case 'path':
          var d = current.accumulatedPath(obj.value.trim()).d;
          var mode = d ? 'modify' : 'path';
          this.emit('showPathEditor', mode, {
            changeEvent: 'updateClipPathString',
            current: current,
            d: d,
            // box: 'box',
            screenX: current.screenX,
            screenY: current.screenY,
            screenWidth: current.screenWidth,
            screenHeight: current.screenHeight
          });
          break;

        case 'svg':
          // TODO: clip art 선택하기 
          break;

        default:
          this.emit("showClipPathPopup", {
            'clip-path': current['clip-path']
          });
          break;
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateClipPathString'),
    value: function value(data) {
      var current = this.$selection.current;
      if (!current) return;
      data.d = current.invertPath(data.d).round(1000).d;
      current.reset({
        'clip-path': "path(".concat(data.d, ")")
      });
      this.refresh();
      this.emit('updateClipPath', data);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeClipPathPopup'),
    value: function value(data) {
      var current = this.$selection.current;
      if (!current) return;
      current.reset(data);
      this.refresh();
      this.command('setAttribute', 'change clip-path', data, current.id);
    }
  }]);

  return ClipPathProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ClipPathProperty: ClipPathProperty_ClipPathProperty
});
// CONCATENATED MODULE: ./src/el/editor/property-parser/Transition.js






function Transition_createSuper(Derived) { var hasNativeReflectConstruct = Transition_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Transition_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var TRANSITION_TIMING_REG = /((cubic-bezier|steps)\(([^\)]*)\))/gi;
var Transition_Transition = /*#__PURE__*/function (_Property) {
  inherits_default()(Transition, _Property);

  var _super = Transition_createSuper(Transition);

  function Transition() {
    classCallCheck_default()(this, Transition);

    return _super.apply(this, arguments);
  }

  createClass_default()(Transition, [{
    key: "getDefaultObject",
    value: function getDefaultObject() {
      return {
        name: 'all',
        duration: unit_Length["a" /* Length */].second(0),
        timingFunction: 'linear',
        delay: unit_Length["a" /* Length */].second(0)
      };
    }
  }, {
    key: "toCloneObject",
    value: function toCloneObject() {
      return {
        name: this.json.name,
        duration: this.json.duration + "",
        timingFunction: this.json.timingFunction,
        delay: this.json.delay + ''
      };
    }
  }, {
    key: "toCSS",
    value: function toCSS() {
      return {
        "transition": this.toString()
      };
    }
  }, {
    key: "toString",
    value: function toString() {
      var json = this.json;
      return [json.name, json.duration, json.timingFunction, json.delay].join(' ');
    }
  }], [{
    key: "parse",
    value: function parse(obj) {
      return new Transition(obj);
    }
  }, {
    key: "join",
    value: function join(list) {
      return list.map(function (it) {
        return new Transition(it).toString();
      }).join(',');
    }
  }, {
    key: "add",
    value: function add(transition) {
      var item = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var list = Transition.parseStyle(transition);
      list.push(Transition.parse(item));
      return Transition.join(list);
    }
  }, {
    key: "remove",
    value: function remove(transition, removeIndex) {
      return Transition.filter(transition, function (it, index) {
        return removeIndex != index;
      });
    }
  }, {
    key: "filter",
    value: function filter(transition, filterFunction) {
      return Transition.join(Transition.parseStyle(transition).filter(function (it) {
        return filterFunction(it);
      }));
    }
  }, {
    key: "replace",
    value: function replace(transition, replaceIndex, valueObject) {
      var list = Transition.parseStyle(transition);

      if (list[replaceIndex]) {
        list[replaceIndex] = valueObject;
      } else {
        list.push(valueObject);
      }

      return Transition.join(list);
    }
  }, {
    key: "get",
    value: function get(transition, index) {
      var arr = Transition.parseStyle(transition);
      return arr[index];
    }
  }, {
    key: "parseStyle",
    value: function parseStyle(transition) {
      var list = [];
      if (!transition) return list;
      var result = customParseConvertMatches(transition, TRANSITION_TIMING_REG);
      list = result.str.split(',').map(function (it) {
        var fields = it.split(' ').filter(Boolean);

        if (fields.length >= 4) {
          /* @keyframes duration | timing-function | delay | 
          iteration-count | direction | fill-mode | play-state | name */
          //animation: 3s ease-in 1s 2 reverse both paused slidein;        
          return {
            name: fields[0],
            duration: unit_Length["a" /* Length */].parse(fields[1]),
            timingFunction: customParseReverseMatches(fields[2], result.matches),
            delay: unit_Length["a" /* Length */].parse(fields[3])
          };
        } else if (fields.length >= 3) {
          /* @keyframes duration | timing-function | delay | name */
          //animation: 3s linear 1s slidein;        
          return {
            name: fields[0],
            duration: unit_Length["a" /* Length */].parse(fields[1]),
            delay: unit_Length["a" /* Length */].parse(fields[2])
          };
        } else if (fields.length >= 1) {
          /* @keyframes duration | name */
          //animation: 3s slidein;        
          return {
            name: fields[0],
            duration: unit_Length["a" /* Length */].parse(fields[1])
          };
        } else {
          return {};
        }
      });
      return list.map(function (it) {
        return Transition.parse(it);
      });
    }
  }]);

  return Transition;
}(Property["a" /* Property */]);
// CONCATENATED MODULE: ./src/el/editor/ui/property/TransitionProperty.js







function TransitionProperty_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TransitionProperty_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TransitionProperty_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TransitionProperty_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TransitionProperty_createSuper(Derived) { var hasNativeReflectConstruct = TransitionProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TransitionProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var TransitionProperty_TransitionProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TransitionProperty, _BaseProperty);

  var _super = TransitionProperty_createSuper(TransitionProperty);

  function TransitionProperty() {
    classCallCheck_default()(this, TransitionProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TransitionProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('transition.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class='transition-list' ref='$transitionList'></div>"
      );
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n        <button type=\"button\" ref=\"$add\" title=\"add Transition\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return true;
    }
  }, {
    key: Object(Event["LOAD"])("$transitionList") + Event["DOMDIFF"],
    value: function value() {
      var _this = this;

      var current = this.$selection.current;
      if (!current) return '';
      return Transition_Transition.parseStyle(current.transition).map(function (it, index) {
        var selectedClass = _this.state.selectedIndex === index ? "selected" : "";
        var path = Object(func["curveToPath"])(it.timingFunction, 30, 30);
        return (
          /*html*/
          "\n      <div class='transition-group-item'>\n        <div class='transition-item ".concat(selectedClass, "' data-index='").concat(index, "' ref=\"transitionIndex").concat(index, "\">\n            <div class='timing preview' data-index='").concat(index, "' ref='$preview").concat(index, "'>\n              <svg class='item-canvas' width=\"30\" height=\"30\" viewBox=\"0 0 30 30\">\n                <path d=\"").concat(path, "\" stroke=\"white\" stroke-width=\"1\" fill='none' />\n              </svg>\n            </div>\n            <div class='name'>\n              <div class='labels'>\n                <span class='property-name' title='Property'>").concat(it.name, "</span>\n                <span class='duration' title='Duration'><small>Duration: ").concat(it.duration, "</small></span>\n                <span class='delay' title='Delay'><small>Delay: ").concat(it.delay, "</small></span>\n              </div>\n            </div>\n            <div class='tools'>\n                <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">\n                  ").concat(icon["a" /* default */].remove2, "\n                </button>\n            </div>\n        </div>\n      </div>        \n      ")
        );
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot([]);
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value(e) {
      var current = this.$selection.current;

      if (current) {
        current.reset({
          transition: Transition_Transition.add(current.transition)
        });
        this.emit("refreshElement", current);
      }

      this.refresh();
    }
  }, {
    key: "getCurrentTransition",
    value: function getCurrentTransition() {
      return this.current.transitions[this.selectedIndex];
    }
  }, {
    key: Object(Event["CLICK"])("$transitionList .tools .del"),
    value: function value(e) {
      var removeIndex = e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      current.reset({
        transition: Transition_Transition.remove(current.transition, removeIndex)
      });
      this.emit("refreshElement", current);
      this.refresh();
    } // 객체를 선택하는 괜찮은 패턴이 어딘가에 있을 텐데......
    // 언제까지 selected 를 설정해야하는가?

  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.refs["transitionIndex".concat(selectedIndex)].addClass("selected");
      } else {
        this.refs["transitionIndex".concat(selectedIndex)].removeClass("selected");
      }
    }
  }, {
    key: "viewTransitionPicker",
    value: function viewTransitionPicker($preview) {
      if (typeof this.selectedIndex === "number") {
        this.selectItem(this.selectedIndex, false);
      }

      this.selectedIndex = +$preview.attr("data-index");
      this.current = this.$selection.current;
      if (!this.current) return;
      this.currentTransition = Transition_Transition.get(this.current.transition, this.selectedIndex);
      this.viewTransitionPropertyPopup();
    }
  }, {
    key: "viewTransitionPropertyPopup",
    value: function viewTransitionPropertyPopup() {
      if (!this.currentTransition) return;
      var transition = this.currentTransition;
      this.emit("showTransitionPropertyPopup", {
        changeEvent: 'changeTransitionPropertyPopup',
        data: transition.toCloneObject(),
        instance: this
      });
    }
  }, {
    key: Object(Event["CLICK"])("$transitionList .preview"),
    value: function value(e) {
      this.viewTransitionPicker(e.$dt);
    }
  }, {
    key: "getRef",
    value: function getRef() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return this.refs[args.join("")];
    }
  }, {
    key: Object(Event["SUBSCRIBE"])("changeTransitionPropertyPopup"),
    value: function value(data) {
      if (this.currentTransition) {
        this.currentTransition.reset(TransitionProperty_objectSpread({}, data));

        if (this.current) {
          this.current.reset({
            transition: Transition_Transition.replace(this.current.transition, this.selectedIndex, this.currentTransition)
          });
          this.emit("refreshElement", this.current);
          this.refresh();
        }
      }
    }
  }]);

  return TransitionProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TransitionProperty: TransitionProperty_TransitionProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/PerspectiveOriginProperty.js






function PerspectiveOriginProperty_createSuper(Derived) { var hasNativeReflectConstruct = PerspectiveOriginProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PerspectiveOriginProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PerspectiveOriginProperty_PerspectiveOriginProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PerspectiveOriginProperty, _BaseProperty);

  var _super = PerspectiveOriginProperty_createSuper(PerspectiveOriginProperty);

  function PerspectiveOriginProperty() {
    classCallCheck_default()(this, PerspectiveOriginProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PerspectiveOriginProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('perspective.origin.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return false;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'perspective-origin';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n        <button type=\"button\" class=\"remove\" ref='$remove'>".concat(icon["a" /* default */].remove, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$remove'),
    value: function value() {
      this.trigger('changePerspectiveOrigin', '');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"property-item full perspective-origin-item\" ref='$body'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['perspective-origin'] || '';
      return (
        /*html*/
        "<object refClass=\"PerspectiveOriginEditor\" \n              ref='$1' \n              value='".concat(value, "' \n              onchange='changePerspectiveOrigin' \n            />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePerspectiveOrigin'),
    value: function value(_value) {
      this.command('setAttribute', 'change perspective origin', {
        'perspective-origin': _value
      });
    }
  }]);

  return PerspectiveOriginProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PerspectiveOriginProperty: PerspectiveOriginProperty_PerspectiveOriginProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/PerspectiveProperty.js







function PerspectiveProperty_createSuper(Derived) { var hasNativeReflectConstruct = PerspectiveProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PerspectiveProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PerspectiveProperty_PerspectiveProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PerspectiveProperty, _BaseProperty);

  var _super = PerspectiveProperty_createSuper(PerspectiveProperty);

  function PerspectiveProperty() {
    classCallCheck_default()(this, PerspectiveProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PerspectiveProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('perspective.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return false;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'perspective';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n        <button type=\"button\" class=\"remove\" ref='$remove'>".concat(icon["a" /* default */].remove, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$remove'),
    value: function value() {
      this.trigger('changePerspective', 'perspective', '');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div class='property-item' ref='$perspective'></div>";
    }
  }, {
    key: Object(Event["LOAD"])("$perspective"),
    value: function value() {
      var current = this.$selection.current || {};
      var perspective = current['perspective'] || '';
      return (
        /*html*/
        "\n        <object refClass=\"RangeEditor\"  ref='$1' key='perspective' value=\"".concat(perspective, "\" max=\"2000px\" onchange=\"changePerspective\" />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePerspective'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change perspective', defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }]);

  return PerspectiveProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PerspectiveProperty: PerspectiveProperty_PerspectiveProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TransformOriginProperty.js






function TransformOriginProperty_createSuper(Derived) { var hasNativeReflectConstruct = TransformOriginProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TransformOriginProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TransformOriginProperty_TransformOriginProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TransformOriginProperty, _BaseProperty);

  var _super = TransformOriginProperty_createSuper(TransformOriginProperty);

  function TransformOriginProperty() {
    classCallCheck_default()(this, TransformOriginProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TransformOriginProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('transform.origin.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'transform-origin';
    }
  }, {
    key: Object(Event["CLICK"])('$remove'),
    value: function value() {
      this.trigger('changeTransformOrigin', '');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"property-item full transform-origin-item\" ref='$body'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['transform-origin'] || '';
      return (
        /*html*/
        "<object refClass=\"TransformOriginEditor\" ref='$1' value='".concat(value, "' onchange='changeTransformOrigin' />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshRect') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project', 'artboard']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTransformOrigin'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change transform-origin', {
        'transform-origin': _value
      });
    }
  }]);

  return TransformOriginProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TransformOriginProperty: TransformOriginProperty_TransformOriginProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/BackgroundClipProperty.js







function BackgroundClipProperty_createSuper(Derived) { var hasNativeReflectConstruct = BackgroundClipProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BackgroundClipProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var BackgroundClipProperty_BackgroundClipProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BackgroundClipProperty, _BaseProperty);

  var _super = BackgroundClipProperty_createSuper(BackgroundClipProperty);

  function BackgroundClipProperty() {
    classCallCheck_default()(this, BackgroundClipProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BackgroundClipProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return "Background Clip";
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return false;
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "<div ref='$backgroundClip' style='padding-top: 3px;'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])("$backgroundClip"),
    value: function value() {
      var current = this.$selection.current || {};
      var clip = current['background-clip'] || '';
      return (
        /*html*/
        "<object refClass=\"SelectEditor\"  ref='$1' key='background-clip' icon=\"true\" value=\"".concat(clip, "\" options=\",paddinb-box,border-box,content-box,text\" onchange=\"changeSelect\" />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value) {
      this.command('setAttribute', "change background clip", defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['rect', 'circle', 'text']);
    }
  }]);

  return BackgroundClipProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BackgroundClipProperty: BackgroundClipProperty_BackgroundClipProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/Selector.js
var Selector = __webpack_require__(137);

// CONCATENATED MODULE: ./src/el/editor/ui/property/SelectorProperty.js






function SelectorProperty_createSuper(Derived) { var hasNativeReflectConstruct = SelectorProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SelectorProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var selectorList = ['', // custom 
':hover', ':active', ':before', ':after', ':first-child', ':last-child', ':link', ':active', ':focus'].join(',');
/**
 * 객체별 class, selector 를 줄 수 있는 개념을 다시 만들자. 
 * @deprecated
 */

var SelectorProperty_SelectorProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(SelectorProperty, _BaseProperty);

  var _super = SelectorProperty_createSuper(SelectorProperty);

  function SelectorProperty() {
    classCallCheck_default()(this, SelectorProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectorProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('selector.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div class='selector-list' ref='$selectorList'></div>";
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <div style='display:inline-block;'>\n        <object refClass=\"SelectEditor\"  ref='$select' key='selector' icon=\"true\" key-value-char=';' none-value=\"selector\" options=\"".concat(selectorList, "\" />\n      </div>\n      <button type=\"button\" ref=\"$add\" title=\"add Selector\">").concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: "makeSelectorTemplate",
    value: function makeSelectorTemplate(selector, index) {
      index = index.toString();
      return (
        /*html*/
        "\n      <div class='selector-item' draggable='true' ref='$selectorIndex".concat(index, "' data-index='").concat(index, "'>\n        <div class='title'>\n          <div class='name'>\n            <span>").concat(selector.selector || "&lt;".concat(this.$i18n('selector.property.none'), "&gt;"), "</span>\n          </div>\n          <div class='tools'>\n              <button type=\"button\" class=\"del\" data-index=\"").concat(index, "\">").concat(icon["a" /* default */].remove2, "</button>\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$selectorList .selector-item .name'),
    value: function value(e) {
      var index = +e.$dt.closest('selector-item').attr('data-index');
      var current = this.$selection.current;
      if (!current) return;
      this.viewSelectorPicker(index);
    }
  }, {
    key: Object(Event["CLICK"])('$selectorList .selector-item .del') + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      var removeIndex = e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      current.removeSelector(removeIndex);
      this.emit('refreshElement', current);
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project', 'svg-path', 'svg-brush', 'svg-textpath', 'svg-text']);
    }
  }, {
    key: Object(Event["LOAD"])("$selectorList"),
    value: function value() {
      var _this = this;

      var current = this.$selection.current;
      if (!current) return '';
      var selectors = current.selector ? Selector["a" /* Selector */].parseStyle(current) : current.selectors;
      current.selector = '';
      current.selectors = selectors;
      return (selectors || []).map(function (selector, index) {
        return _this.makeSelectorTemplate(selector, index);
      });
    } // selector-item 을 통째로  dragstart 를 걸어버리니깐
    // 다른 ui 를 핸들링 할 수가 없어서
    // title  에만 dragstart 거는 걸로 ok ?

  }, {
    key: Object(Event["DRAGSTART"])("$selectorList .selector-item .title"),
    value: function value(e) {
      this.startIndex = +e.$dt.attr("data-index");
    } // drop 이벤트를 걸 때 dragover 가 같이 선언되어 있어야 한다.

  }, {
    key: Object(Event["DRAGOVER"])("$selectorList .selector-item") + Event["PREVENT"],
    value: function value(e) {}
  }, {
    key: Object(Event["DROP"])("$selectorList .selector-item") + Event["PREVENT"],
    value: function value(e) {
      var targetIndex = +e.$dt.attr("data-index");
      var current = this.$selection.current;
      if (!current) return;
      current.sortSelector(this.startIndex, targetIndex);
      this.emit('refreshElement', current);
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var current = this.$selection.current;

      if (current) {
        current.createSelector({
          selector: this.children.$select.getValue()
        });
        this.emit('refreshElement', current);
      }

      this.refresh();
    }
  }, {
    key: "viewSelectorPicker",
    value: function viewSelectorPicker(index) {
      if (typeof this.selectedIndex === "number") {
        this.selectItem(this.selectedIndex, false);
      }

      this.selectedIndex = +index;
      this.selectItem(this.selectedIndex, true);
      this.current = this.$selection.current;
      if (!this.current) return;
      this.currentSelector = this.current.selectors[this.selectedIndex];
      this.viewSelectorPropertyPopup();
    } // 객체를 선택하는 괜찮은 패턴이 어딘가에 있을 텐데......
    // 언제까지 selected 를 설정해야하는가?

  }, {
    key: "selectItem",
    value: function selectItem(selectedIndex) {
      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

      if (isSelected) {
        this.getRef('$selectorIndex', selectedIndex).addClass("selected");
      } else {
        this.getRef('$selectorIndex', selectedIndex).removeClass("selected");
      }

      if (this.current) {
        this.current.selectors.forEach(function (it, index) {
          it.selected = index === selectedIndex;
        });
      }
    }
  }, {
    key: "viewSelectorPropertyPopup",
    value: function viewSelectorPropertyPopup(position) {
      this.current = this.$selection.current;
      if (!this.current) return;
      this.currentSelector = this.current.selectors[this.selectedIndex];
      var back = this.currentSelector;
      var selector = back.selector;
      var properties = back.properties;
      this.emit("showSelectorPopup", {
        position: position,
        selector: selector,
        properties: properties
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelectorPopup'),
    value: function value(data) {
      this.current = this.$selection.current;
      if (!this.current) return;
      this.currentselector = this.current.selectors[this.selectedIndex];

      if (this.currentSelector) {
        this.currentSelector.reset(data);
      }

      this.refresh();
      this.emit('refreshElement', this.current);
    }
  }]);

  return SelectorProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SelectorProperty: SelectorProperty_SelectorProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/PositionProperty.js







function PositionProperty_createSuper(Derived) { var hasNativeReflectConstruct = PositionProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PositionProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PositionProperty_PositionProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PositionProperty, _BaseProperty);

  var _super = PositionProperty_createSuper(PositionProperty);

  function PositionProperty() {
    classCallCheck_default()(this, PositionProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PositionProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('position.property.title');
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshRect'),
    value: function value() {
      var current = this.$selection.current;
      if (!current) return '';
      this.children.$x.setValue(current.x || Length.z());
      this.children.$y.setValue(current.y || Length.z());
      this.children.$width.setValue(current.width || Length.z());
      this.children.$height.setValue(current.height || Length.z());
      this.children.$opacity.setValue(current['opacity'] || '1');
      var rotateZ = Transform["a" /* Transform */].get(current.transform, 'rotateZ');

      if (rotateZ) {
        this.children.$rotate.setValue(rotateZ[0]);
      } else {
        this.children.$rotate.setValue(current.rotate);
      }
    }
  }, {
    key: "isHideHeader",
    value: function isHideHeader() {
      return true;
    }
  }, {
    key: "getBodyClassName",
    value: function getBodyClassName() {
      return 'no-padding';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"position-item\" ref=\"$positionItem\" style='padding: 5px 10px;'>\n        <div style='display: grid;grid-template-columns: repeat(2, 1fr); grid-column-gap: 10px;'>\n          <div class='property-item animation-property-item' style='padding: 0px;'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='x'></span>\n            </div>\n            <object refClass='InputRangeEditor' ref='$x' compact=\"true\" label=\"X\" key='x' min=\"-1000\" max='1000' onchange='changRangeEditor' />\n          </div>\n          <div class='property-item animation-property-item' style='padding: 0px;'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='y'></span>\n            </div>\n            <object refClass='InputRangeEditor' ref='$y' compact=\"true\"  label=\"Y\" key='y' min=\"-1000\" max='1000' onchange='changRangeEditor' />\n          </div>\n        </div>\n        <div style='display: grid;grid-template-columns: repeat(2, 1fr); grid-column-gap: 10px; padding-top: 10px;'>\n          <div class='property-item animation-property-item' style='padding:0px'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='width'></span>\n            </div>\n            <object refClass='InputRangeEditor' ref='$width' compact=\"true\"  label=\"".concat(this.$i18n('position.property.width'), "\" key='width' min=\"0\" max='3000' onchange='changRangeEditor' />\n          </div>\n          <div class='property-item animation-property-item' style='padding:0px'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='height'></span>      \n            </div>\n            <object refClass='InputRangeEditor' ref='$height' compact=\"true\"  label=\"").concat(this.$i18n('position.property.height'), "\" key='height' min=\"0\" max='3000' onchange='changRangeEditor' />\n          </div>      \n        </div> \n        <div style='display: grid;grid-template-columns: repeat(2, 1fr); grid-column-gap: 10px; padding-top: 10px;'>\n          <div class='property-item animation-property-item'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='rotate'></span>\n            </div>\n            <object refClass='InputRangeEditor' \n              ref='$rotate' \n              key='rotateZ' \n              compact=\"true\" \n              label='rotate_left'\n              min=\"0\"\n              max=\"360\"\n              step=\"0.01\"\n              units=\"deg\"\n              onchange=\"changeRotate\" />\n          </div>        \n\n          <div class='property-item animation-property-item'>\n            <div class='group'>\n              <span class='add-timeline-property' data-property='opacity'></span>\n            </div>\n            <object refClass=\"NumberInputEditor\"\n              ref='$opacity' \n              key='opacity' \n              compact=\"true\" \n              label='opacity'\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              onchange=\"changeSelect\" />\n          </div>        \n        </div>                \n      </div>\n    ")
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$x.setValue(current.x);
        this.children.$y.setValue(current.y);
        this.children.$width.setValue(current.width);
        this.children.$height.setValue(current.height);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changRangeEditor'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change position or size', defineProperty_default()({}, key, _value));
      this.emit('refreshAllElementBoundSize');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRotate'),
    value: function value(key, rotate) {
      this.command('setAttribute', "change rotate", {
        rotate: rotate
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value2) {
      this.command("setAttribute", "change ".concat(key), defineProperty_default()({}, key, _value2));
    }
  }]);

  return PositionProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PositionProperty: PositionProperty_PositionProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/ProjectProperty.js






function ProjectProperty_createSuper(Derived) { var hasNativeReflectConstruct = ProjectProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ProjectProperty_ProjectProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ProjectProperty, _BaseProperty);

  var _super = ProjectProperty_createSuper(ProjectProperty);

  function ProjectProperty() {
    classCallCheck_default()(this, ProjectProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('project.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'full';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <button type='button' ref='$add' title=\"Add a project\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value() {
      this.emit('addProject');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"project-list scrollbar\" ref=\"$projectList\"></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])("$projectList") + Event["DOMDIFF"],
    value: function value() {
      var _this = this;

      var projects = this.$editor.projects || [];
      return projects.map(function (project, index) {
        var selected = project === _this.$selection.currentProject ? 'selected' : '';
        return (
          /*html*/
          "\n        <div class='project-item ".concat(selected, "'>\n          <div class='detail'>\n            <label data-index='").concat(index, "'>").concat(project.name || 'New Project', "</label>\n            <div class=\"tools\">\n              <button type=\"button\" class=\"remove\" data-index=\"").concat(index, "\" title='Remove'>").concat(icon["a" /* default */].remove2, "</button>\n            </div>\n          </div>\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$projectList .project-item'),
    value: function value(e) {
      this.startInputEditing(e.$dt.$('label'));
    }
  }, {
    key: "modifyDoneInputEditing",
    value: function modifyDoneInputEditing(input) {
      var _this2 = this;

      this.endInputEditing(input, function (index, text) {
        var project = _this2.$editor.projects[index];

        if (project) {
          project.reset({
            name: text
          });
        }
      });
    }
  }, {
    key: Object(Event["KEYDOWN"])('$projectList .project-item label') + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt);
      return false;
    }
  }, {
    key: Object(Event["FOCUSOUT"])('$projectList .project-item label') + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt);
    }
  }, {
    key: "selectProject",
    value: function selectProject(project) {
      if (project) {
        this.$selection.selectProject(project);

        if (project.artboards.length) {
          this.$selection.selectArtboard(project.artboards[0]);
          this.$selection.select();
        }
      }

      this.refresh();
      this.emit('refreshAllSelectProject');
    }
  }, {
    key: Object(Event["CLICK"])('$projectList .project-item label'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.selectProject(this.$editor.projects[index]);
    }
  }, {
    key: Object(Event["CLICK"])('$projectList .project-item .remove'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.$editor.projects.splice(index);
      var project = this.$editor.projects[index] || this.$editor.projects[index - 1];
      this.selectProject(project);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshProjectList'),
    value: function value() {
      this.refresh();
    }
  }]);

  return ProjectProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ProjectProperty: ProjectProperty_ProjectProperty
});
// EXTERNAL MODULE: ./src/el/base/Color.js + 2 modules
var Color = __webpack_require__(26);

// EXTERNAL MODULE: ./src/el/editor/types/key.js
var types_key = __webpack_require__(72);

// CONCATENATED MODULE: ./src/el/editor/ui/property/LayerTreeProperty.js






function LayerTreeProperty_createSuper(Derived) { var hasNativeReflectConstruct = LayerTreeProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayerTreeProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var DRAG_START_CLASS = 'drag-start';

var LayerTreeProperty_LayerTreeProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(LayerTreeProperty, _BaseProperty);

  var _super = LayerTreeProperty_createSuper(LayerTreeProperty);

  function LayerTreeProperty() {
    classCallCheck_default()(this, LayerTreeProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayerTreeProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('layer.tree.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'full';
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        hideDragPointer: true,
        lastDragOverPosition: 0,
        lastDragOverOffset: 0,
        rootRect: {
          top: 0
        },
        itemRect: {
          height: 0
        }
      };
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"layer-list scrollbar\" ref=\"$layerList\"></div>\n      <div class='drag-point' ref='$dragPointer'></div>\n    "
      );
    }
  }, {
    key: Object(Event["BIND"])('$dragPointer'),
    value: function value() {
      var offset = this.state.lastDragOverOffset;
      var dist = this.state.itemRect.height / 3;
      var bound = {};

      if (this.state.lastDragOverOffset < dist) {
        offset = 0;
        var top = this.state.lastDragOverPosition + offset - this.state.rootRect.top;
        bound = {
          top: unit_Length["a" /* Length */].px(top),
          height: '1px',
          width: '100%',
          left: '0px'
        };
        this.state.lastDragOverItemDirection = 'before';
      } else if (this.state.lastDragOverOffset > this.state.itemRect.height - dist) {
        offset = this.state.itemRect.height;
        var top = this.state.lastDragOverPosition + offset - this.state.rootRect.top;
        bound = {
          top: unit_Length["a" /* Length */].px(top),
          height: '1px',
          width: '100%',
          left: '0px'
        };
        this.state.lastDragOverItemDirection = 'after';
      } else {
        offset = 0;
        var top = this.state.lastDragOverPosition + offset - this.state.rootRect.top;
        bound = {
          top: unit_Length["a" /* Length */].px(top),
          height: unit_Length["a" /* Length */].px(this.state.itemRect.height),
          width: '100%',
          left: '0px'
        };
        this.state.lastDragOverItemDirection = 'self';
      }

      bound.display = this.state.hideDragPointer ? 'none' : 'block';
      return {
        style: bound
      };
    } //FIXME: 개별 객체가 아이콘을 리턴 할 수 있도록 구조를 맞춰보자. 

  }, {
    key: "getIcon",
    value: function getIcon(item) {
      // return '';
      if (item.isGroup && item.is('artboard') === false) {
        return icon["a" /* default */].group;
      }

      switch (item.itemType) {
        case 'artboard':
          return icon["a" /* default */].artboard;

        case 'circle':
          return icon["a" /* default */].lens;

        case 'image':
          return icon["a" /* default */].image;

        case 'text':
        case 'svg-text':
          return icon["a" /* default */].title;

        case 'svg-textpath':
          return icon["a" /* default */].text_rotate;

        case 'svg-path':
          return icon["a" /* default */].pentool;

        case 'cube':
          return icon["a" /* default */].cube;

        case 'cylinder':
          return icon["a" /* default */].cylinder;

        default:
          return icon["a" /* default */].rect;
      }
    }
  }, {
    key: "makeLayerList",
    value: function makeLayerList(parentObject) {
      var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (!parentObject.layers) return '';
      var layers = parentObject.layers;
      var data = [];

      for (var last = layers.length - 1; last > -1; last--) {
        var layer = layers[last];
        var selected = this.$selection.check(layer) ? 'selected' : '';
        var hovered = this.$selection.checkHover(layer) ? 'hovered' : '';
        var name = layer.name;

        if (layer.is('text')) {
          name = layer.text || layer.name;
        }

        var title = '';

        if (layer.hasLayout()) {
          title = this.$i18n('layer.tree.property.layout.title.' + layer.layout);
        }

        var isHide = layer.isTreeItemHide();
        var depthPadding = unit_Length["a" /* Length */].px(depth * 24);
        data.push(
        /*html*/
        "        \n        <div class='layer-item ".concat(selected, " ").concat(hovered, "' data-is-group=\"").concat(layer.isGroup, "\" data-depth=\"").concat(depth, "\" data-layout='").concat(layer.layout, "' data-layer-id='").concat(layer.id, "' data-is-hide=\"").concat(isHide, "\"  draggable=\"true\">\n          <div class='detail'>\n            <label data-layout-title='").concat(title, "' style='padding-left: ").concat(depthPadding, "' > \n              <div class='folder ").concat(layer.collapsed ? 'collapsed' : '', "'>").concat(icon["a" /* default */].arrow_right, "</div>\n              <span class='icon' data-item-type=\"").concat(layer.itemType, "\">").concat(this.getIcon(layer), "</span> \n              <span class='name'>").concat(name, "</span>\n            </label>\n            <div class=\"tools\">\n              <button type=\"button\" class=\"lock\" data-lock=\"").concat(layer.lock, "\" title='Lock'>").concat(layer.lock ? icon["a" /* default */].lock : icon["a" /* default */].lock_open, "</button>\n              <button type=\"button\" class=\"visible\" data-visible=\"").concat(layer.visible, "\" title='Visible'>").concat(icon["a" /* default */].visible, "</button>\n              <button type=\"button\" class=\"remove\" title='Remove'>").concat(icon["a" /* default */].remove2, "</button>            \n            </div>\n          </div>\n        </div>\n\n        ").concat(this.makeLayerList(layer, depth + 1), "\n      "));
      }

      return data.join(' ');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshContent'),
    value: function value(arr) {
      this.refresh();
    }
  }, {
    key: Object(Event["LOAD"])("$layerList") + Event["DOMDIFF"],
    value: function value() {
      var project = this.$selection.currentProject;
      if (!project) return '';
      return this.makeLayerList(project, 0) +
      /*html*/
      "\n      <div class='layer-item ' data-depth=\"0\" data-is-last=\"true\">\n      </div>\n    ";
    }
  }, {
    key: Object(Event["DRAGSTART"])('$layerList .layer-item'),
    value: function value(e) {
      var layerId = e.$dt.attr('data-layer-id');
      e.$dt.addClass(DRAG_START_CLASS);
      e.dataTransfer.setData('layer/id', layerId);
      this.state.rootRect = this.refs.$layerList.rect();
      this.state.itemRect = e.$dt.rect();
      this.setState({
        hideDragPointer: false
      }, false);
      this.bindData('$dragPointer');
    }
  }, {
    key: Object(Event["DRAGEND"])('$layerList .layer-item'),
    value: function value(e) {
      this.setState({
        hideDragPointer: true
      }, false);
      this.bindData('$dragPointer');
      this.refs.$layerList.$$(".".concat(DRAG_START_CLASS)).forEach(function (it) {
        it.removeClass(DRAG_START_CLASS);
      });
    }
  }, {
    key: Object(Event["DRAGOVER"])("$layerList .layer-item:not(.".concat(DRAG_START_CLASS, ")")) + Event["PREVENT"],
    value: function value(e) {
      var targetLayerId = e.$dt.attr('data-layer-id'); // console.log({targetLayerId, x: e.offsetX, y: e.offsetY});

      this.state.lastDragOverItemId = targetLayerId;
      this.state.lastDragOverPosition = e.$dt.rect().top;
      this.state.lastDragOverOffset = e.offsetY;
      this.bindData('$dragPointer');
    }
  }, {
    key: Object(Event["DROP"])("$layerList .layer-item:not(.".concat(DRAG_START_CLASS, ")")),
    value: function value(e) {
      var targetLayerId = e.$dt.attr('data-layer-id');
      var sourceLayerId = e.dataTransfer.getData('layer/id');
      if (targetLayerId === sourceLayerId) return;
      var project = this.$selection.currentProject;
      var targetItem = project.searchById(targetLayerId);
      var sourceItem = project.searchById(sourceLayerId);
      if (targetItem && targetItem.hasParent(sourceItem.id)) return;

      switch (this.state.lastDragOverItemDirection) {
        case 'self':
          targetItem.appendChildItem(sourceItem);
          break;

        case 'before':
          targetItem.appendBefore(sourceItem);
          break;

        case 'after':
          targetItem.appendAfter(sourceItem);
          break;
      }

      this.$selection.select(sourceItem);
      this.setState({
        hideDragPointer: true
      });
      this.emit('refreshAll');
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$layerList .layer-item'),
    value: function value(e) {
      this.startInputEditing(e.$dt.$('.name'));
    }
  }, {
    key: "modifyDoneInputEditing",
    value: function modifyDoneInputEditing(input, event) {
      var _this = this;

      if (types_key["a" /* KEY_CODE */].enter === event.keyCode) {
        this.endInputEditing(input, function () {
          var id = input.closest('layer-item').attr('data-layer-id');
          var text = input.text();

          _this.emit('refreshItemName', id, text);
        });
      } else {
        var id = input.closest('layer-item').attr('data-layer-id');
        var text = input.text();
        this.emit('refreshItemName', id, text);
      }
    }
  }, {
    key: Object(Event["KEYDOWN"])('$layerList .layer-item .name') + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt, e);
    }
  }, {
    key: Object(Event["FOCUSOUT"])('$layerList .layer-item .name') + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt, {
        keyCode: types_key["a" /* KEY_CODE */].enter
      });
    }
  }, {
    key: "selectLayer",
    value: function selectLayer(layer) {
      if (layer) {
        this.$selection.select(layer);
      }

      this.refresh();
      this.emit('refreshSelection');
    }
  }, {
    key: "addLayer",
    value: function addLayer(layer) {
      if (layer) {
        this.$selection.select(layer);
        this.emit('refreshArtboard');
      }
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value(e) {
      this.emit('newComponent', 'rect', {
        'background-color': Color["a" /* default */].random(),
        width: unit_Length["a" /* Length */].px(200),
        height: unit_Length["a" /* Length */].px(100)
      });
    }
  }, {
    key: Object(Event["CLICK"])('$layerList .layer-item label .name'),
    value: function value(e) {
      var $item = e.$dt.closest('layer-item');
      $item.onlyOneClass('selected');
      var id = $item.attr('data-layer-id');
      var item = this.$selection.currentProject.searchById(id);
      this.$selection.select(item);
      this.emit('history.refreshSelection');
    }
  }, {
    key: Object(Event["CLICK"])('$layerList .layer-item label .folder'),
    value: function value(e) {
      var project = this.$selection.currentProject;
      var $item = e.$dt.closest('layer-item');
      var id = $item.attr('data-layer-id');
      var item = project.searchById(id);
      item.reset({
        collapsed: !item.collapsed
      });
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$layerList .layer-item .visible'),
    value: function value(e) {
      var project = this.$selection.currentProject;
      var $item = e.$dt.closest('layer-item');
      var id = $item.attr('data-layer-id');
      var item = project.searchById(id);
      e.$dt.attr('data-visible', !item.visible);
      this.command('setAttribute', 'change visible for layer', {
        visible: !item.visible
      }, item.id);
    }
  }, {
    key: Object(Event["CLICK"])('$layerList .layer-item .remove'),
    value: function value(e) {
      var project = this.$selection.currentProject;
      var $item = e.$dt.closest('layer-item');
      var id = $item.attr('data-layer-id'); // 객체 지우기 command 로 만들어야 함 

      this.$selection.removeById(id);
      var item = project.searchById(id);
      item.remove();
      this.refresh();
      this.emit('refreshArtboard');
    }
  }, {
    key: Object(Event["CLICK"])('$layerList .layer-item .lock'),
    value: function value(e) {
      var project = this.$selection.currentProject;
      var $item = e.$dt.closest('layer-item');
      var id = $item.attr('data-layer-id');
      var item = project.searchById(id);
      var lastLock = !item.lock;
      e.$dt.attr('data-lock', lastLock);

      if (lastLock) {
        this.$selection.removeById(id);
        this.emit('history.refreshSelection');
      }

      this.command('setAttribute', 'change lock for layer', {
        lock: lastLock
      }, item.id);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeHoverItem'),
    value: function value() {
      this.refs.$layerList.$$('.hovered').forEach(function (it) {
        it.removeClass('hovered');
      });

      if (this.$selection.hoverItems.length) {
        var selector = this.$selection.hoverItems.map(function (it) {
          return "[data-layer-id=\"".concat(it.id, "\"]");
        }).join(',');
        this.refs.$layerList.$$(selector).forEach(function (it) {
          it.addClass('hovered');
        });
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelection'),
    value: function value() {
      var _this2 = this;

      var isSelection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (isSelection && this.refs.$layerList) {
        this.refs.$layerList.$$('.selected').forEach(function (it) {
          it.removeClass('selected');
        });
        var selector = this.$selection.items.map(function (it) {
          return "[data-layer-id=\"".concat(it.id, "\"]");
        }).join(',');

        if (selector) {
          this.refs.$layerList.$$(selector).forEach(function (it) {
            it.addClass('selected');

            var item = _this2.$selection.itemKeys[it.attr('data-layer-id')];

            if (item.is('svg-path', 'svg-polygon')) {
              it.$('.icon').html(_this2.getIcon(item));
            }
          });
        }
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'history.refreshSelection'),
    value: function value() {
      this.trigger('changeSelection', true);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshStylePosition'),
    value: function value() {
      this.trigger('changeSelection');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshLayerTreeView'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeItemLayout'),
    value: function value() {
      this.refresh();
    }
  }]);

  return LayerTreeProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  LayerTreeProperty: LayerTreeProperty_LayerTreeProperty
});
// CONCATENATED MODULE: ./src/el/editor/preset/artboards/artboard.size.js
/* harmony default export */ var artboard_size = ([{
  category: 'Web',
  groups: [{
    group: 'Landscape',
    devices: [{
      device: 'Web Small',
      size: '1024x600'
    }, {
      device: 'Web Medium',
      size: '1280x800'
    }, {
      device: 'Web Large',
      size: '1440x900'
    }, {
      device: 'Web X Large',
      size: '1920x1200'
    }]
  }, {
    group: 'Portrait',
    devices: [{
      device: 'Web Small',
      size: '600x1024'
    }, {
      device: 'Web Medium',
      size: '800x1280'
    }, {
      device: 'Web Large',
      size: '900x1440'
    }, {
      device: 'Web X Large',
      size: '1200x1920'
    }]
  }]
}, {
  category: 'Apple Devices',
  groups: [{
    group: 'iphone',
    devices: [{
      device: 'iPhone 8',
      size: '375x667'
    }, {
      device: 'iPhone 8 Plus',
      size: '414x736'
    }, {
      device: 'iPhone SE',
      size: '320x568'
    }, {
      device: 'iPhone XS',
      size: '375x812'
    }, {
      device: 'iPhone XR',
      size: '414x896'
    }, {
      device: 'iPhone XS Max',
      size: '414x896'
    }]
  }, {
    group: 'ipad',
    devices: [{
      device: 'iPad',
      size: '768x1024'
    }, {
      device: 'iPad Pro',
      size: '1024x1366'
    }]
  }, {
    group: 'apple watch',
    devices: [{
      device: 'Apple Watch 38nm',
      size: '272x340'
    }, {
      device: 'Apple Watch 40nm',
      size: '326x394'
    }, {
      device: 'Apple Watch 42nm',
      size: '313x390'
    }, {
      device: 'Apple Watch 44nm',
      size: '368x448'
    }]
  }, {
    group: 'apple tv',
    devices: [{
      device: 'Apple TV',
      size: '1920x1080'
    }]
  }, {
    group: 'MAC',
    devices: [{
      device: 'Touch Bar',
      size: '1085x30'
    }]
  }]
}, {
  category: 'Android Devices',
  groups: [{
    group: 'android mobile',
    devices: [{
      device: 'Android Mobile',
      size: '360x640'
    }]
  }, {
    group: 'android tablet',
    devices: [{
      device: 'Android Tablet',
      size: '768x1024'
    }]
  }]
}]);
// CONCATENATED MODULE: ./src/el/editor/ui/property/ArtBoardSizeProperty.js






function ArtBoardSizeProperty_createSuper(Derived) { var hasNativeReflectConstruct = ArtBoardSizeProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ArtBoardSizeProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ArtBoardSizeProperty_ArtBoardSizeProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ArtBoardSizeProperty, _BaseProperty);

  var _super = ArtBoardSizeProperty_createSuper(ArtBoardSizeProperty);

  function ArtBoardSizeProperty() {
    classCallCheck_default()(this, ArtBoardSizeProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ArtBoardSizeProperty, [{
    key: "getClassName",
    value: function getClassName() {
      return 'artboard-size-list';
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShow(['artboard']);
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        selectedIndex: 0
      };
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "ArtBoard Preset";
    }
  }, {
    key: "getTools",
    value: function getTools() {
      var categories = artboard_size.map(function (it, index) {
        return {
          category: it.category,
          index: index
        };
      });
      return (
        /*html*/
        "\n      <object refClass=\"SelectEditor\"  ref='$select' value=\"".concat(categories[0].category, "\" options=\"").concat(categories.map(function (it) {
          return it.category;
        }).join(','), "\" onchange='changeSizeIndex'/>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSizeIndex'),
    value: function value(key, _value) {
      var selectedIndex = this.state.selectedIndex;
      artboard_size.forEach(function (it, index) {
        if (it.category === _value) {
          selectedIndex = index;
        }
      });
      this.state.selectedIndex = selectedIndex;
      this.refresh();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='artboard-size-item' ref='$list'></div>\n    "
      );
    }
  }, {
    key: "makeDevice",
    value: function makeDevice(device) {
      return (
        /*html*/
        "\n      <div class='device-item' data-size='".concat(device.size, "'>\n        <div class='title'>").concat(device.device, "</div>\n        <div class='size'>").concat(device.size, "</div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$list .device-item'),
    value: function value(e) {
      var size = e.$dt.attr('data-size');
      this.emit('resizeArtBoard', size);
    }
  }, {
    key: "makeGroup",
    value: function makeGroup(group) {
      var _this = this;

      return (
        /*html*/
        "\n      <div class='group-item'>\n        <div class='title'>".concat(group.group, "</div>\n      </div>\n      <div class='devices'>\n        ").concat(group.devices.map(function (device) {
          return _this.makeDevice(device);
        }).join(''), "\n      </div>\n    ")
      );
    }
  }, {
    key: "makeCategory",
    value: function makeCategory(category) {
      var _this2 = this;

      return (
        /*html*/
        "\n      <div class='category'>\n        <div class='title'>".concat(category.category, "</div>\n      </div>\n      <div class='groups'>\n        ").concat(category.groups.map(function (group) {
          return _this2.makeGroup(group);
        }).join(''), "\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$list') + Event["DOMDIFF"],
    value: function value() {
      var _this3 = this;

      var category = artboard_size[this.state.selectedIndex];
      return category.groups.map(function (group) {
        return _this3.makeGroup(group);
      });
    }
  }]);

  return ArtBoardSizeProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ArtBoardSizeProperty: ArtBoardSizeProperty_ArtBoardSizeProperty
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/slicedToArray.js
var slicedToArray = __webpack_require__(13);
var slicedToArray_default = /*#__PURE__*/__webpack_require__.n(slicedToArray);

// CONCATENATED MODULE: ./src/el/editor/ui/property/ImageProperty.js








function ImageProperty_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ImageProperty_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ImageProperty_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ImageProperty_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ImageProperty_createSuper(Derived) { var hasNativeReflectConstruct = ImageProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var image_size = ['', '100x100', '200x200', '300x300', '400x300', '900x600', '1024x762'];

var ImageProperty_ImageProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ImageProperty, _BaseProperty);

  var _super = ImageProperty_createSuper(ImageProperty);

  function ImageProperty() {
    classCallCheck_default()(this, ImageProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageProperty, [{
    key: "getClassName",
    value: function getClassName() {
      return 'item';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('image.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div ref='$body' style='padding-top: 3px;'></div>";
    }
  }, {
    key: "getFooter",
    value: function getFooter() {
      return (
        /*html*/
        "\n      <div>\n        <label> ".concat(this.$i18n('image.property.origin'), " </label> \n        <span ref='$sizeInfo'></span> \n        <button type=\"button\" ref='$resize'>").concat(icon["a" /* default */].size, "</button>\n      </div>\n      <div>\n        <object refClass=\"SelectEditor\"  ref='$select' label=\"").concat(this.$i18n('image.property.size'), "\" key='size' value='' options='").concat(image_size.join(','), "' onchange='changeImageSize' />\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeImageSize'),
    value: function value(key, _value) {
      var _value$split$map = _value.split('x').map(function (it) {
        return unit_Length["a" /* Length */].px(it);
      }),
          _value$split$map2 = slicedToArray_default()(_value$split$map, 2),
          width = _value$split$map2[0],
          height = _value$split$map2[1];

      this.command('setAttribute', 'resize image', {
        width: width,
        height: height
      });
    }
  }, {
    key: Object(Event["CLICK"])('$resize'),
    value: function value() {
      var current = this.$selection.current;

      if (current) {
        var data = {
          width: current.naturalWidth.clone(),
          height: current.naturalHeight.clone()
        };
        this.command('setAttribute', 'resize image', data);
      }
    }
  }, {
    key: Object(Event["BIND"])('$sizeInfo'),
    value: function value() {
      var current = this.$selection.current || {};
      return {
        innerHTML: "".concat(this.$i18n('image.property.width'), ": ").concat(current.naturalWidth, ", ").concat(this.$i18n('image.property.height'), ": ").concat(current.naturalHeight)
      };
    }
  }, {
    key: Object(Event["LOAD"])("$body"),
    value: function value() {
      var current = this.$selection.current || {};
      var src = current.src || '';
      return (
        /*html*/
        "<object refClass=\"ImageSelectEditor\" \n              ref='$1' \n              key='src' \n              value=\"".concat(src, "\" \n              onchange=\"changeSelect\" />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value2, info) {
      var current = this.$selection.current;

      if (current) {
        current.reset(ImageProperty_objectSpread({
          src: _value2
        }, info));
        this.bindData('$sizeInfo');
        this.command('setAttribute', 'change image', ImageProperty_objectSpread({
          src: _value2
        }, info), current.id);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['image']);
    }
  }]);

  return ImageProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ImageProperty: ImageProperty_ImageProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TextFillProperty.js







function TextFillProperty_createSuper(Derived) { var hasNativeReflectConstruct = TextFillProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextFillProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TextFillProperty_TextFillProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TextFillProperty, _BaseProperty);

  var _super = TextFillProperty_createSuper(TextFillProperty);

  function TextFillProperty() {
    classCallCheck_default()(this, TextFillProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextFillProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('text.fill.property.title');
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      // update 를 어떻게 할지 고민 
      var current = this.$selection.current;

      if (current) {
        this.children.$fillColor.setValue(current['text-fill-color'] || 'rgba(0, 0, 0, 1)');
        this.children.$strokeColor.setValue(current['text-stroke-color'] || 'rgba(0, 0, 0, 1)');
        this.children.$width.setValue(current['text-stroke-width'] || '0px');
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='text-fill-color'></span>\n        </div>\n        <object refClass=\"ColorViewEditor\" ref='$fillColor' label='".concat(this.$i18n('text.fill.property.fill'), "' key='text-fill-color' onchange=\"changeColor\" />\n      </div>           \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='text-stroke-color'></span>\n        </div>\n        <object refClass=\"ColorViewEditor\" ref='$strokeColor' label='").concat(this.$i18n('text.fill.property.stroke'), "' key='text-stroke-color' onchange=\"changeColor\" />\n      </div>                 \n\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='text-stroke-width'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  \n          ref='$width' \n          label='").concat(this.$i18n('text.fill.property.strokeWidth'), "' \n          key=\"text-stroke-width\" \n          \n          max=\"50\"\n          onchange=\"changeRangeEditor\" />\n      </div>\n    \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeColor'),
    value: function value(key, color, params) {
      this.trigger('changeRangeEditor', key, color);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor'),
    value: function value(key, _value) {
      this.command('setAttribute', 'change text fill', defineProperty_default()({}, key, _value));
    }
  }]);

  return TextFillProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TextFillProperty: TextFillProperty_TextFillProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/Gradient.js
var Gradient = __webpack_require__(41);

// EXTERNAL MODULE: ./src/el/editor/property-parser/image-resource/ColorStep.js
var ColorStep = __webpack_require__(22);

// CONCATENATED MODULE: ./src/el/editor/preset/gradients/linear.js


var angle_list = ['0deg', '45deg', '90deg'];
/* harmony default export */ var linear = ({
  title: 'Linear',
  key: 'linear',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "linear-gradient(".concat(func["randomItem"].apply(void 0, angle_list), ", ").concat(ColorStep["a" /* ColorStep */].createColorStep(2), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/radial.js


/* harmony default export */ var radial = ({
  title: 'Radial',
  key: 'radial',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      var shape = 'circle';
      return {
        gradient: "radial-gradient(".concat(shape, ", ").concat(ColorStep["a" /* ColorStep */].createColorStep(2), ")")
      };
    });
  }
});
// EXTERNAL MODULE: ./src/el/base/functions/create.js
var create = __webpack_require__(53);

// CONCATENATED MODULE: ./src/el/editor/preset/gradients/conic.js




/* harmony default export */ var conic = ({
  title: 'Conic',
  key: 'conic',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      var x = Object(create["randomNumber"])(45, 55);
      var y = Object(create["randomNumber"])(45, 55);
      var angle = Object(create["randomNumber"])(0, 360);
      return {
        gradient: "conic-gradient(from ".concat(angle, "deg at ").concat(x, "% ").concat(y, "%, ").concat(ColorStep["a" /* ColorStep */].createColorStep(2, 360, 'deg'), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/random-linear.js


var random_linear_angle_list = ['0deg', '45deg', '90deg'];
/* harmony default export */ var random_linear = ({
  title: 'Random Linear',
  key: 'random-linear',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "linear-gradient(".concat(func["randomItem"].apply(void 0, random_linear_angle_list), ", ").concat(ColorStep["a" /* ColorStep */].createColorStep(10), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/random-radial.js


/* harmony default export */ var random_radial = ({
  title: 'Random Radial',
  key: 'random-radial',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "radial-gradient(circle, ".concat(ColorStep["a" /* ColorStep */].createColorStep(10), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/random-conic.js


/* harmony default export */ var random_conic = ({
  title: 'Random Conic',
  key: 'random-conic',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "conic-gradient(from 0deg at 50% 50%, ".concat(ColorStep["a" /* ColorStep */].createColorStep(10, 360, 'deg'), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/repeat-linear.js


var repeat_linear_angle_list = ['0deg', '45deg', '90deg'];
/* harmony default export */ var repeat_linear = ({
  title: 'Repeat Linear',
  key: 'repeat-linear',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "repeating-linear-gradient(".concat(func["randomItem"].apply(void 0, repeat_linear_angle_list), ", ").concat(ColorStep["a" /* ColorStep */].createRepeatColorStep(2, '10px'), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/repeat-radial.js


/* harmony default export */ var repeat_radial = ({
  title: 'Repeat Radial',
  key: 'repeat-radial',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      var shape = 'circle';
      return {
        gradient: "repeating-radial-gradient(".concat(shape, ", ").concat(ColorStep["a" /* ColorStep */].createRepeatColorStep(3, '6px'), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/repeat-conic.js


/* harmony default export */ var repeat_conic = ({
  title: 'Repeat Conic',
  key: 'repeat-conic',
  execute: function execute() {
    var count = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 42;
    return Object(func["repeat"])(count).map(function (it) {
      return {
        gradient: "repeating-conic-gradient(from 0deg at 0% 50%, ".concat(ColorStep["a" /* ColorStep */].createRepeatColorStep(10, '10deg'), ")")
      };
    });
  }
});
// CONCATENATED MODULE: ./src/el/editor/preset/gradients/index.js









/* harmony default export */ var gradients = ([linear, random_linear, repeat_linear, radial, random_radial, repeat_radial, conic, random_conic, repeat_conic]);
// CONCATENATED MODULE: ./src/el/editor/ui/property/GradientAssetsProperty.js







function GradientAssetsProperty_createSuper(Derived) { var hasNativeReflectConstruct = GradientAssetsProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GradientAssetsProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var GradientAssetsProperty_GradientAssetsProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(GradientAssetsProperty, _BaseProperty);

  var _super = GradientAssetsProperty_createSuper(GradientAssetsProperty);

  function GradientAssetsProperty() {
    classCallCheck_default()(this, GradientAssetsProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(GradientAssetsProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('gradient.asset.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid',
        preset: 'linear'
      };
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "<div ref=\"$tools\"></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$tools'),
    value: function value() {
      var options = gradients.map(function (it) {
        return "".concat(it.key, ":").concat(it.title);
      });
      return (
        /*html*/
        "\n      <object refClass=\"SelectEditor\"  key=\"preset\" value=\"".concat(this.state.preset, "\" options=\"").concat(options, "\" onchange=\"changePreset\"  />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePreset'),
    value: function value(key, _value) {
      this.setState(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'gradient-assets-property';
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.show();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item gradient-assets'>\n        <div class='gradient-list' ref='$gradientList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["DRAGSTART"])('$gradientList .gradient-item'),
    value: function value(e) {
      var gradient = e.$dt.attr('data-gradient');
      e.dataTransfer.effectAllowed = "copy";
      e.dataTransfer.setData("text/gradient", gradient);
    }
  }, {
    key: Object(Event["LOAD"])("$gradientList"),
    value: function value() {
      var _this = this;

      var preset = gradients.find(function (it) {
        return it.key === _this.state.preset;
      });

      if (!preset) {
        return '';
      }

      var results = preset.execute().map(function (item, index) {
        return (
          /*html*/
          "\n        <div class='gradient-item' data-index=\"".concat(index, "\" data-gradient='").concat(item.gradient, "' data-custom=\"").concat(item.custom, "\">\n          <div class='preview' title=\"").concat(item.gradient, "\" draggable=\"true\">\n            <div class='gradient-view' style='background-image: ").concat(item.gradient, ";'></div>\n          </div>\n        </div>\n      ")
        );
      });

      if (preset.edit) {
        results.push(
        /*html*/
        "<div class='add-gradient-item'><butto type=\"button\">".concat(icon["a" /* default */].add, "</button></div>"));
      }

      return results;
    }
  }, {
    key: "executeGradient",
    value: function executeGradient(callback) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var project = this.$selection.currentProject;

      if (project) {
        callback && callback(project);
        if (isRefresh) this.refresh();
        if (isEmit) this.emit('refreshGradientAssets');
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: Object(Event["CLICK"])('$gradientList .add-gradient-item'),
    value: function value() {
      this.executeGradient(function (project) {
        project.createGradient({
          gradient: Gradient["a" /* Gradient */].random(),
          name: '',
          variable: ''
        });
      });
    }
  }, {
    key: Object(Event["CLICK"])("$gradientList .preview"),
    value: function value(e) {
      var $item = e.$dt.closest('gradient-item');
      var gradient = $item.attr('data-gradient');
      this.emit('drop.asset', {
        gradient: gradient
      });
    }
  }]);

  return GradientAssetsProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  GradientAssetsProperty: GradientAssetsProperty_GradientAssetsProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/SVGItemProperty.js







function SVGItemProperty_createSuper(Derived) { var hasNativeReflectConstruct = SVGItemProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGItemProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SVGItemProperty_SVGItemProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(SVGItemProperty, _BaseProperty);

  var _super = SVGItemProperty_createSuper(SVGItemProperty);

  function SVGItemProperty() {
    classCallCheck_default()(this, SVGItemProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGItemProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('svg.item.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return "item";
    }
  }, {
    key: "isSVGItem",
    value: function isSVGItem(current) {
      return current.is('svg-path', 'svg-brush', 'svg-polygon', 'svg-textpath', 'svg-text');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      var current = this.$selection.current;

      if (current && this.isSVGItem(current)) {
        if (this.$el.isHide()) {
          this.$el.show();
        }

        this.children.$fill.setValue(current['fill'] || 'rgba(0, 0, 0, 0)');
        this.children.$stroke.setValue(current['stroke'] || 'rgba(0, 0, 0, 1)');
        this.children.$fillOpacity.setValue(current['fill-opacity'] || unit_Length["a" /* Length */].number(1));
        this.children.$strokeWidth.setValue(current['stroke-width'] || unit_Length["a" /* Length */].number(1));
        this.children.$fillRule.setValue(current['fill-rule'] || 'nonzero');
        this.children.$strokeDashOffset.setValue(current['stroke-dashoffset'] || unit_Length["a" /* Length */].number(0));
        this.children.$strokeDashArray.setValue(current['stroke-dasharray'] || ' ');
        this.children.$strokeLineCap.setValue(current['stroke-linecap'] || 'butt');
        this.children.$strokeLineJoin.setValue(current['stroke-linejoin'] || 'miter');
        this.children.$mixBlend.setValue(current['mix-blend-mode']);
      } else {
        this.$el.hide();
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {// update 를 어떻게 할지 고민 
    }
  }, {
    key: "getBody",
    value: function getBody() {
      var current = this.$selection.current || {};
      return (
        /*html*/
        "\n      <div ref='$svgProperty'>\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='fill'></span>\n          </div>\n          <object refClass=\"FillSingleEditor\" ref='$fill' label='".concat(this.$i18n('svg.item.property.fill'), "' key='fill' onchange=\"changeValue\" />\n        </div>\n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='fill-opacity'></span>\n          </div>            \n          <object refClass=\"NumberRangeEditor\"  \n            ref='$fillOpacity' \n            label='").concat(this.$i18n('svg.item.property.fillOpacity'), "' \n            key='fill-opacity' \n            value=\"1\" \n            min=\"0\"\n            max=\"1\"\n            step=\"0.01\"\n            onchange=\"changeValue\" \n            />\n        </div>   \n\n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='fill-rule'></span>\n          </div>\n          <object refClass=\"SelectIconEditor\" \n            ref='$fillRule' \n            label='").concat(this.$i18n('svg.item.property.fillRule'), "' \n            key=\"fill-rule\" \n            options=\"nonzero,evenodd\" \n            onchange=\"changeValue\" />\n        </div>            \n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke'></span>\n          </div>\n          <object refClass=\"FillSingleEditor\" ref='$stroke' label='").concat(this.$i18n('svg.item.property.stroke'), "' key='stroke' onchange=\"changeValue\" />\n        </div>      \n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke-width'></span>\n          </div>\n          <object refClass=\"RangeEditor\"  \n            ref='$strokeWidth' \n            label='").concat(this.$i18n('svg.item.property.strokeWidth'), "' \n            key=\"stroke-width\" \n            onchange=\"changeValue\" />\n        </div>\n        <!--<div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke-dasharray'></span>      \n          </div>          \n          <label>").concat(this.$i18n('svg.item.property.dashArray'), "</label>\n        </div>-->\n        <div class='property-item'>\n          <object refClass=\"StrokeDashArrayEditor\" label=\"").concat(this.$i18n('svg.item.property.dashArray'), "\" ref='$strokeDashArray' key='stroke-dasharray' onchange=\"changeValue\" />\n        </div>\n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke-dashoffset'></span>      \n          </div>          \n          <object refClass=\"NumberRangeEditor\"  \n            ref='$strokeDashOffset' \n            key='stroke-dashoffset' \n            label='").concat(this.$i18n('svg.item.property.dashOffset'), "'\n            value=\"0\" \n            min=\"-1000\"\n            max=\"1000\"\n            step=\"1\"\n            onchange=\"changeValue\" \n            />\n        </div>         \n\n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke-linecap'></span>      \n          </div>          \n          <object refClass=\"SelectIconEditor\" \n            ref='$strokeLineCap' \n            label='").concat(this.$i18n('svg.item.property.lineCap'), "' \n            key=\"stroke-linecap\" \n            options=\"butt,round,square\" \n            onchange=\"changeValue\" \n          />\n        </div> \n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='stroke-linejoin'></span>      \n          </div>          \n          <object refClass=\"SelectIconEditor\" \n            ref='$strokeLineJoin' \n            label='").concat(this.$i18n('svg.item.property.lineJoin'), "'             \n            key=\"stroke-linejoin\" \n            options=\"miter,bevel,round\" \n            onchange=\"changeValue\" \n          />\n        </div>       \n        <div class='property-item animation-property-item'>\n          <div class='group'>\n            <span class='add-timeline-property' data-property='mix-blend-mode'></span>\n          </div>\n          <object refClass=\"BlendSelectEditor\" \n            label='").concat(this.$i18n('background.color.property.blend'), "'\n            ref='$mixBlend' \n            removable='true'\n            key='mix-blend-mode' \n            icon=\"true\" \n            tabIndex=\"1\"\n            onchange=\"changeSelect\" />\n        </div>                 \n        <div class='property-item animation-property-item'>\n          <div class='group'>        \n            <span class='add-timeline-property' data-property='svgfilter'></span>      \n          </div>\n          <object refClass=\"SVGFilterSelectEditor\" \n            ref='$svgFilter' \n            label='").concat(this.$i18n('svg.item.property.filter'), "' \n            key=\"svgfilter\" \n            onchange=\"changeValue\" \n          />\n        </div>         \n      </div>\n   \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeValue'),
    value: function value(key, _value, params) {
      this.command('setAttribute', "change svg item property : ".concat(key), defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value2) {
      this.command("setAttribute", "change attribute : ".concat(key), defineProperty_default()({}, key, _value2));
    }
  }]);

  return SVGItemProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SVGItemProperty: SVGItemProperty_SVGItemProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TextClipProperty.js







function TextClipProperty_createSuper(Derived) { var hasNativeReflectConstruct = TextClipProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TextClipProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TextClipProperty_TextClipProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TextClipProperty, _BaseProperty);

  var _super = TextClipProperty_createSuper(TextClipProperty);

  function TextClipProperty() {
    classCallCheck_default()(this, TextClipProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TextClipProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('text.clip.property.title');
    }
  }, {
    key: "isFirstShow",
    value: function isFirstShow() {
      return false;
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'item';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return "<div ref='$textClip'></div>";
    }
  }, {
    key: Object(Event["LOAD"])("$textClip"),
    value: function value() {
      var current = this.$selection.current || {};
      var clip = current['text-clip'] || '';
      return (
        /*html*/
        "\n      <object refClass=\"SelectEditor\"  ref='$1' key='text-clip' icon=\"true\" value=\"".concat(clip, "\" options=\",text\" onchange=\"changeSelect\" />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value) {
      this.emit('setAttribute', defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['text']);
    }
  }]);

  return TextClipProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TextClipProperty: TextClipProperty_TextClipProperty
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFilter.js + 32 modules
var SVGFilter = __webpack_require__(56);

// CONCATENATED MODULE: ./src/el/editor/ui/property/SVGFilterAssetsProperty.js






function SVGFilterAssetsProperty_createSuper(Derived) { var hasNativeReflectConstruct = SVGFilterAssetsProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGFilterAssetsProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var SVGFilterAssetsProperty_SVGFilterAssetsProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(SVGFilterAssetsProperty, _BaseProperty);

  var _super = SVGFilterAssetsProperty_createSuper(SVGFilterAssetsProperty);

  function SVGFilterAssetsProperty() {
    classCallCheck_default()(this, SVGFilterAssetsProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGFilterAssetsProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('svgfilter.asset.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid'
      };
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'svgfilter-assets-property';
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.show();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item svgfilter-assets'>\n        <div class='svgfilter-list' ref='$svgfilterList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$svgfilterList"),
    value: function value() {
      var current = this.$selection.currentProject || {
        svgfilters: []
      };
      var svgfilters = current.svgfilters;
      var results = svgfilters.map(function (svgfilter, index) {
        var filters = svgfilter.filters.map(function (filter) {
          return SVGFilter["a" /* SVGFilter */].parse(filter);
        });
        return (
          /*html*/
          "\n        <div class='svgfilter-item' data-index=\"".concat(index, "\">\n          <div class='preview' data-index=\"").concat(index, "\">\n            <svg width=\"0\" height=\"0\">\n              <filter id=\"svgfilter-").concat(index, "\">\n                ").concat(filters.join(''), " \n              </filter>\n            </svg>\n            <div class='svgfilter-view' style='filter: url(#svgfilter-").concat(index, ");'></div>\n          </div>\n          <div class='title'>\n            <div>\n              <input type='text' class='id' data-key='id' value='").concat(svgfilter.id, "' placeholder=\"id\" />\n            </div>\n          </div>\n          <div class='tools'>\n            <button type=\"button\" class='copy'>").concat(icon["a" /* default */].copy, "</button>          \n            <button type=\"button\" class='remove'>").concat(icon["a" /* default */].remove, "</button>\n          </div>\n        </div>\n      ")
        );
      });
      results.push("<div class='add-svgfilter-item'><button type=\"button\">".concat(icon["a" /* default */].add, "</button></div>"));
      return results;
    }
  }, {
    key: "executeSVGFilter",
    value: function executeSVGFilter(callback) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var project = this.$selection.currentProject;

      if (project) {
        callback && callback(project);
        if (isRefresh) this.refresh();
        if (isEmit) this.emit('refreshSVGFilterAssets');
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: Object(Event["CLICK"])('$svgfilterList .add-svgfilter-item'),
    value: function value() {
      this.executeSVGFilter(function (project) {
        project.createSVGFilter({
          id: Object(math["uuidShort"])(),
          filters: []
        });
      });
    }
  }, {
    key: Object(Event["CLICK"])('$svgfilterList .remove'),
    value: function value(e) {
      var $item = e.$dt.closest('svgfilter-item');
      var index = +$item.attr('data-index');
      this.executeSVGFilter(function (project) {
        project.removeSVGFilter(index);
      });
    }
  }, {
    key: Object(Event["CLICK"])('$svgfilterList .copy'),
    value: function value(e) {
      var $item = e.$dt.closest('svgfilter-item');
      var index = +$item.attr('data-index');
      this.executeSVGFilter(function (project) {
        project.copySVGFilter(index);
      });
    }
  }, {
    key: Object(Event["INPUT"])('$svgfilterList input'),
    value: function value(e) {
      var _this = this;

      var $item = e.$dt.closest('svgfilter-item');
      var index = +$item.attr('data-index');
      var obj = e.$dt.attrKeyValue('data-key');
      this.executeSVGFilter(function (project) {
        project.setSVGFilterValue(index, obj);

        _this.emit('refreshSVGArea');
      }, false);
    }
  }, {
    key: Object(Event["CLICK"])("$svgfilterList .preview"),
    value: function value(e) {
      var $item = e.$dt.closest('svgfilter-item');
      var index = +$item.attr('data-index');
      this.state.$item = $item;
      this.state.$el = e.$dt.$('.svgfilter-view');
      var currentProject = this.$selection.currentProject || {
        svgfilters: []
      };
      var svgfilter = currentProject.svgfilters[index];
      this.emit("showSVGFilterPopup", {
        changeEvent: 'changeSVGFilterAssets',
        id: this.id,
        index: index,
        filters: svgfilter.filters
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateSVGFilterAssets'),
    value: function value(params) {
      var _this2 = this;

      this.executeSVGFilter(function (project) {
        project.setSVGFilterValue(params.index, {
          filters: params.filters
        }); // preview 업데이트 해주세요. 

        _this2.state.$item.$('filter').html(params.filters.join('\n'));

        _this2.emit('refreshSVGArea');
      }, false);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSVGFilterAssets'),
    value: function value(params) {
      if (params.id === this.id) {
        this.trigger('updateSVGFilterAssets', params);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSVGFilterAssets'),
    value: function value() {
      this.refresh();
    }
  }]);

  return SVGFilterAssetsProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SVGFilterAssetsProperty: SVGFilterAssetsProperty_SVGFilterAssetsProperty
});
// EXTERNAL MODULE: ./src/el/editor/ui/menu-items/MenuItem.js
var MenuItem = __webpack_require__(27);

// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Github.js






function Github_createSuper(Derived) { var hasNativeReflectConstruct = Github_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Github_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Github_Github = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Github, _MenuItem);

  var _super = Github_createSuper(Github);

  function Github() {
    classCallCheck_default()(this, Github);

    return _super.apply(this, arguments);
  }

  createClass_default()(Github, [{
    key: "getIcon",
    value: function getIcon() {
      return "github";
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.github.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      window.open("https://github.com/easylogic/editor", "github-window");
    }
  }]);

  return Github;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Github: Github_Github
});
// EXTERNAL MODULE: ./src/el/editor/manager/ExportManager.js + 2 modules
var ExportManager = __webpack_require__(71);

// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/ExportCodePen.js







function ExportCodePen_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ExportCodePen_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ExportCodePen_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ExportCodePen_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ExportCodePen_createSuper(Derived) { var hasNativeReflectConstruct = ExportCodePen_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ExportCodePen_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ExportCodePen_ExportCodePen = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ExportCodePen, _EditorElement);

  var _super = ExportCodePen_createSuper(ExportCodePen);

  function ExportCodePen() {
    classCallCheck_default()(this, ExportCodePen);

    return _super.apply(this, arguments);
  }

  createClass_default()(ExportCodePen, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n    <form class='codepen' action=\"https://codepen.io/pen/define\" method=\"POST\" target=\"_code_pen\">\n      <input type=\"hidden\" name=\"data\" ref=\"$codepen\" value=''>\n      <button type=\"submit\">\n        <div class='icon codepen'></div>\n        <div class='title'>".concat(this.$i18n('menu.item.codepen.title'), "</div>\n      </button>\n    </form>     \n    ")
      );
    }
  }, {
    key: Object(Event["SUBMIT"])(),
    value: function value() {
      var obj = ExportManager["a" /* default */].generate(this.$editor);
      this.refs.$codepen.val(JSON.stringify(ExportCodePen_objectSpread({
        title: "sapa - editor.easylogic.studio",
        description: "https://editor.easylogic.studio",
        js_external: "https://cdn.jsdelivr.net/npm/@easylogic/anipa@0.0.11/dist/main.js"
      }, obj)));
      return false;
    }
  }]);

  return ExportCodePen;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ExportCodePen: ExportCodePen_ExportCodePen
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddRect.js






function AddRect_createSuper(Derived) { var hasNativeReflectConstruct = AddRect_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddRect_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddRect_AddRect = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddRect, _MenuItem);

  var _super = AddRect_createSuper(AddRect);

  function AddRect() {
    classCallCheck_default()(this, AddRect);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddRect, [{
    key: "getIconString",
    value: function getIconString() {
      return 'rect';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Rect";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'rect');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'rect');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddRect;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddRect: AddRect_AddRect
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddCircle.js






function AddCircle_createSuper(Derived) { var hasNativeReflectConstruct = AddCircle_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddCircle_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddCircle_AddCircle = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddCircle, _MenuItem);

  var _super = AddCircle_createSuper(AddCircle);

  function AddCircle() {
    classCallCheck_default()(this, AddCircle);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddCircle, [{
    key: "getIconString",
    value: function getIconString() {
      return 'lens';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Circle";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'circle');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'circle');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddCircle;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddCircle: AddCircle_AddCircle
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/LeftAlign.js






function LeftAlign_createSuper(Derived) { var hasNativeReflectConstruct = LeftAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LeftAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var LeftAlign_LeftAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(LeftAlign, _MenuItem);

  var _super = LeftAlign_createSuper(LeftAlign);

  function LeftAlign() {
    classCallCheck_default()(this, LeftAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(LeftAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_horizontal_left';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Left";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.left');
    }
  }]);

  return LeftAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  LeftAlign: LeftAlign_LeftAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/RightAlign.js






function RightAlign_createSuper(Derived) { var hasNativeReflectConstruct = RightAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function RightAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var RightAlign_RightAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(RightAlign, _MenuItem);

  var _super = RightAlign_createSuper(RightAlign);

  function RightAlign() {
    classCallCheck_default()(this, RightAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(RightAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_horizontal_right';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Right";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.right');
    }
  }]);

  return RightAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  RightAlign: RightAlign_RightAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/CenterAlign.js






function CenterAlign_createSuper(Derived) { var hasNativeReflectConstruct = CenterAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CenterAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var CenterAlign_CenterAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(CenterAlign, _MenuItem);

  var _super = CenterAlign_createSuper(CenterAlign);

  function CenterAlign() {
    classCallCheck_default()(this, CenterAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(CenterAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_horizontal_center';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Center";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.center');
    }
  }]);

  return CenterAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  CenterAlign: CenterAlign_CenterAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/TopAlign.js






function TopAlign_createSuper(Derived) { var hasNativeReflectConstruct = TopAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TopAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TopAlign_TopAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(TopAlign, _MenuItem);

  var _super = TopAlign_createSuper(TopAlign);

  function TopAlign() {
    classCallCheck_default()(this, TopAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(TopAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_vertical_top';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Top";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.top');
    }
  }]);

  return TopAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TopAlign: TopAlign_TopAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/BottomAlign.js






function BottomAlign_createSuper(Derived) { var hasNativeReflectConstruct = BottomAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BottomAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var BottomAlign_BottomAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(BottomAlign, _MenuItem);

  var _super = BottomAlign_createSuper(BottomAlign);

  function BottomAlign() {
    classCallCheck_default()(this, BottomAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(BottomAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_vertical_bottom';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Bottom";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.bottom');
    }
  }]);

  return BottomAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BottomAlign: BottomAlign_BottomAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/MiddleAlign.js






function MiddleAlign_createSuper(Derived) { var hasNativeReflectConstruct = MiddleAlign_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function MiddleAlign_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var MiddleAlign_MiddleAlign = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(MiddleAlign, _MenuItem);

  var _super = MiddleAlign_createSuper(MiddleAlign);

  function MiddleAlign() {
    classCallCheck_default()(this, MiddleAlign);

    return _super.apply(this, arguments);
  }

  createClass_default()(MiddleAlign, [{
    key: "getIconString",
    value: function getIconString() {
      return 'align_vertical_center';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "middle";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('sort.middle');
    }
  }]);

  return MiddleAlign;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  MiddleAlign: MiddleAlign_MiddleAlign
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/SameHeight.js






function SameHeight_createSuper(Derived) { var hasNativeReflectConstruct = SameHeight_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SameHeight_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SameHeight_SameHeight = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(SameHeight, _MenuItem);

  var _super = SameHeight_createSuper(SameHeight);

  function SameHeight() {
    classCallCheck_default()(this, SameHeight);

    return _super.apply(this, arguments);
  }

  createClass_default()(SameHeight, [{
    key: "getIconString",
    value: function getIconString() {
      return 'vertical_distribute';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "height";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('same.height');
    }
  }]);

  return SameHeight;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SameHeight: SameHeight_SameHeight
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/SameWidth.js






function SameWidth_createSuper(Derived) { var hasNativeReflectConstruct = SameWidth_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SameWidth_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SameWidth_SameWidth = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(SameWidth, _MenuItem);

  var _super = SameWidth_createSuper(SameWidth);

  function SameWidth() {
    classCallCheck_default()(this, SameWidth);

    return _super.apply(this, arguments);
  }

  createClass_default()(SameWidth, [{
    key: "getIconString",
    value: function getIconString() {
      return 'horizontal_distribute';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "width";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "isDisabled",
    value: function isDisabled() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('same.width');
    }
  }]);

  return SameWidth;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SameWidth: SameWidth_SameWidth
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddText.js






function AddText_createSuper(Derived) { var hasNativeReflectConstruct = AddText_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddText_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddText_AddText = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddText, _MenuItem);

  var _super = AddText_createSuper(AddText);

  function AddText() {
    classCallCheck_default()(this, AddText);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddText, [{
    key: "getIconString",
    value: function getIconString() {
      return 'title';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Text";
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'text';
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'text');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'text');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddText;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddText: AddText_AddText
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/ExportView.js






function ExportView_createSuper(Derived) { var hasNativeReflectConstruct = ExportView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ExportView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var ExportView_ExportView = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(ExportView, _MenuItem);

  var _super = ExportView_createSuper(ExportView);

  function ExportView() {
    classCallCheck_default()(this, ExportView);

    return _super.apply(this, arguments);
  }

  createClass_default()(ExportView, [{
    key: "getIconString",
    value: function getIconString() {
      return 'launch';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.export.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('showExportView');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return ExportView;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ExportView: ExportView_ExportView
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Manual.js






function Manual_createSuper(Derived) { var hasNativeReflectConstruct = Manual_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Manual_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Manual_Manual = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Manual, _MenuItem);

  var _super = Manual_createSuper(Manual);

  function Manual() {
    classCallCheck_default()(this, Manual);

    return _super.apply(this, arguments);
  }

  createClass_default()(Manual, [{
    key: "getIconString",
    value: function getIconString() {
      return 'note';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.learn.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      window.open("https://www.easylogic.studio/docs/getting-started.html", "learn-window");
    }
  }]);

  return Manual;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Manual: Manual_Manual
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddCube.js






function AddCube_createSuper(Derived) { var hasNativeReflectConstruct = AddCube_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddCube_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddCube_AddCube = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddCube, _MenuItem);

  var _super = AddCube_createSuper(AddCube);

  function AddCube() {
    classCallCheck_default()(this, AddCube);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddCube, [{
    key: "getIconString",
    value: function getIconString() {
      return 'cube';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Cube";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'cube');
    }
  }]);

  return AddCube;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddCube: AddCube_AddCube
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddImage.js






function AddImage_createSuper(Derived) { var hasNativeReflectConstruct = AddImage_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddImage_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddImage_AddImage = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddImage, _MenuItem);

  var _super = AddImage_createSuper(AddImage);

  function AddImage() {
    classCallCheck_default()(this, AddImage);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddImage, [{
    key: "getIconString",
    value: function getIconString() {
      return 'photo';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Image";
    }
  }, {
    key: "clickButton",
    value: function clickButton() {
      this.emit('addLayerView', 'image');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddImage;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddImage: AddImage_AddImage
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddPath.js






function AddPath_createSuper(Derived) { var hasNativeReflectConstruct = AddPath_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddPath_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddPath_AddPath = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddPath, _MenuItem);

  var _super = AddPath_createSuper(AddPath);

  function AddPath() {
    classCallCheck_default()(this, AddPath);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddPath, [{
    key: "getIconString",
    value: function getIconString() {
      return 'pentool';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Path";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'path');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'path');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddPath;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddPath: AddPath_AddPath
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Save.js






function Save_createSuper(Derived) { var hasNativeReflectConstruct = Save_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Save_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var Save_Save = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Save, _MenuItem);

  var _super = Save_createSuper(Save);

  function Save() {
    classCallCheck_default()(this, Save);

    return _super.apply(this, arguments);
  }

  createClass_default()(Save, [{
    key: "getIconString",
    value: function getIconString() {
      return 'storage';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.save.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('saveJSON');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return Save;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Save: Save_Save
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Download.js






function Download_createSuper(Derived) { var hasNativeReflectConstruct = Download_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Download_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Download_Download = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Download, _MenuItem);

  var _super = Download_createSuper(Download);

  function Download() {
    classCallCheck_default()(this, Download);

    return _super.apply(this, arguments);
  }

  createClass_default()(Download, [{
    key: "getIconString",
    value: function getIconString() {
      return 'archive';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.download.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('downloadJSON');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return Download;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Download: Download_Download
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/SelectTool.js






function SelectTool_createSuper(Derived) { var hasNativeReflectConstruct = SelectTool_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SelectTool_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SelectTool_SelectTool = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(SelectTool, _MenuItem);

  var _super = SelectTool_createSuper(SelectTool);

  function SelectTool() {
    classCallCheck_default()(this, SelectTool);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectTool, [{
    key: "getIconString",
    value: function getIconString() {
      return 'navigation';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Select";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'select');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'select');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return SelectTool;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SelectTool: SelectTool_SelectTool
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddSVGRect.js






function AddSVGRect_createSuper(Derived) { var hasNativeReflectConstruct = AddSVGRect_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddSVGRect_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddSVGRect_AddSVGRect = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddSVGRect, _MenuItem);

  var _super = AddSVGRect_createSuper(AddSVGRect);

  function AddSVGRect() {
    classCallCheck_default()(this, AddSVGRect);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddSVGRect, [{
    key: "getIconString",
    value: function getIconString() {
      return 'outline_rect';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "RectPath";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'svg-rect');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddSVGRect;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddSVGRect: AddSVGRect_AddSVGRect
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddSVGCircle.js






function AddSVGCircle_createSuper(Derived) { var hasNativeReflectConstruct = AddSVGCircle_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddSVGCircle_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddSVGCircle_AddSVGCircle = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddSVGCircle, _MenuItem);

  var _super = AddSVGCircle_createSuper(AddSVGCircle);

  function AddSVGCircle() {
    classCallCheck_default()(this, AddSVGCircle);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddSVGCircle, [{
    key: "getIconString",
    value: function getIconString() {
      return 'outline_circle';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "CirclePath";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'svg-circle');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddSVGCircle;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddSVGCircle: AddSVGCircle_AddSVGCircle
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Fullscreen.js






function Fullscreen_createSuper(Derived) { var hasNativeReflectConstruct = Fullscreen_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Fullscreen_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Fullscreen_Fullscreen = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Fullscreen, _MenuItem);

  var _super = Fullscreen_createSuper(Fullscreen);

  function Fullscreen() {
    classCallCheck_default()(this, Fullscreen);

    return _super.apply(this, arguments);
  }

  createClass_default()(Fullscreen, [{
    key: "getIconString",
    value: function getIconString() {
      return 'fullscreen';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.fullscreen.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('toggle.fullscreen');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return Fullscreen;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Fullscreen: Fullscreen_Fullscreen
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddSVGTextPath.js






function AddSVGTextPath_createSuper(Derived) { var hasNativeReflectConstruct = AddSVGTextPath_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddSVGTextPath_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddSVGTextPath_AddSVGTextPath = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddSVGTextPath, _MenuItem);

  var _super = AddSVGTextPath_createSuper(AddSVGTextPath);

  function AddSVGTextPath() {
    classCallCheck_default()(this, AddSVGTextPath);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddSVGTextPath, [{
    key: "getIconString",
    value: function getIconString() {
      return 'text_rotate';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "TextPath";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'svg-textpath');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddSVGTextPath;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddSVGTextPath: AddSVGTextPath_AddSVGTextPath
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddCylinder.js






function AddCylinder_createSuper(Derived) { var hasNativeReflectConstruct = AddCylinder_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddCylinder_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddCylinder_AddCylinder = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddCylinder, _MenuItem);

  var _super = AddCylinder_createSuper(AddCylinder);

  function AddCylinder() {
    classCallCheck_default()(this, AddCylinder);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddCylinder, [{
    key: "getIconString",
    value: function getIconString() {
      return 'cylinder';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Cylinder";
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'cylinder';
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'cylinder');
    }
  }]);

  return AddCylinder;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddCylinder: AddCylinder_AddCylinder
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddSVGText.js






function AddSVGText_createSuper(Derived) { var hasNativeReflectConstruct = AddSVGText_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddSVGText_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddSVGText_AddSVGText = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddSVGText, _MenuItem);

  var _super = AddSVGText_createSuper(AddSVGText);

  function AddSVGText() {
    classCallCheck_default()(this, AddSVGText);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddSVGText, [{
    key: "getIconString",
    value: function getIconString() {
      return 'title';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "SVGText";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'svg-text');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddSVGText;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddSVGText: AddSVGText_AddSVGText
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/LoginButton.js






function LoginButton_createSuper(Derived) { var hasNativeReflectConstruct = LoginButton_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LoginButton_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var LoginButton_LoginButton = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(LoginButton, _MenuItem);

  var _super = LoginButton_createSuper(LoginButton);

  function LoginButton() {
    classCallCheck_default()(this, LoginButton);

    return _super.apply(this, arguments);
  }

  createClass_default()(LoginButton, [{
    key: "getIcon",
    value: function getIcon() {
      return "github";
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Login";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('showLoginWindow');
    }
  }]);

  return LoginButton;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  LoginButton: LoginButton_LoginButton
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/SignButton.js






function SignButton_createSuper(Derived) { var hasNativeReflectConstruct = SignButton_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SignButton_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var SignButton_SignButton = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(SignButton, _MenuItem);

  var _super = SignButton_createSuper(SignButton);

  function SignButton() {
    classCallCheck_default()(this, SignButton);

    return _super.apply(this, arguments);
  }

  createClass_default()(SignButton, [{
    key: "getIcon",
    value: function getIcon() {
      return "github";
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return "Sign";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('showSignWindow');
    }
  }]);

  return SignButton;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SignButton: SignButton_SignButton
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddArtboard.js






function AddArtboard_createSuper(Derived) { var hasNativeReflectConstruct = AddArtboard_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddArtboard_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddArtboard_AddArtboard = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddArtboard, _MenuItem);

  var _super = AddArtboard_createSuper(AddArtboard);

  function AddArtboard() {
    classCallCheck_default()(this, AddArtboard);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddArtboard, [{
    key: "getIconString",
    value: function getIconString() {
      return 'artboard';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "ArtBoard";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'artboard');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'artboard');
    }
  }]);

  return AddArtboard;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddArtboard: AddArtboard_AddArtboard
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddDrawPath.js






function AddDrawPath_createSuper(Derived) { var hasNativeReflectConstruct = AddDrawPath_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddDrawPath_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddDrawPath_AddDrawPath = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddDrawPath, _MenuItem);

  var _super = AddDrawPath_createSuper(AddDrawPath);

  function AddDrawPath() {
    classCallCheck_default()(this, AddDrawPath);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddDrawPath, [{
    key: "getIconString",
    value: function getIconString() {
      return 'edit';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Draw";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'brush');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddDrawPath;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddDrawPath: AddDrawPath_AddDrawPath
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddDrawBrush.js






function AddDrawBrush_createSuper(Derived) { var hasNativeReflectConstruct = AddDrawBrush_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddDrawBrush_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddDrawBrush_AddDrawBrush = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddDrawBrush, _MenuItem);

  var _super = AddDrawBrush_createSuper(AddDrawBrush);

  function AddDrawBrush() {
    classCallCheck_default()(this, AddDrawBrush);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddDrawBrush, [{
    key: "getIconString",
    value: function getIconString() {
      return 'brush';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "draw a brush";
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'brush');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'brush');
    }
  }]);

  return AddDrawBrush;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddDrawBrush: AddDrawBrush_AddDrawBrush
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddVideo.js






function AddVideo_createSuper(Derived) { var hasNativeReflectConstruct = AddVideo_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddVideo_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var AddVideo_AddVideo = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddVideo, _MenuItem);

  var _super = AddVideo_createSuper(AddVideo);

  function AddVideo() {
    classCallCheck_default()(this, AddVideo);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddVideo, [{
    key: "getIconString",
    value: function getIconString() {
      return 'video';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "Video";
    }
  }, {
    key: "clickButton",
    value: function clickButton() {
      this.emit('addLayerView', 'video');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddVideo;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddVideo: AddVideo_AddVideo
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/KeyBoard.js






function KeyBoard_createSuper(Derived) { var hasNativeReflectConstruct = KeyBoard_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyBoard_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var KeyBoard_KeyBoard = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(KeyBoard, _MenuItem);

  var _super = KeyBoard_createSuper(KeyBoard);

  function KeyBoard() {
    classCallCheck_default()(this, KeyBoard);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyBoard, [{
    key: "getIconString",
    value: function getIconString() {
      return 'keyboard';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.shortcuts.title');
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('showShortcutWindow');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return KeyBoard;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  KeyBoard: KeyBoard_KeyBoard
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/AddIFrame.js






function AddIFrame_createSuper(Derived) { var hasNativeReflectConstruct = AddIFrame_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AddIFrame_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AddIFrame_AddIFrame = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(AddIFrame, _MenuItem);

  var _super = AddIFrame_createSuper(AddIFrame);

  function AddIFrame() {
    classCallCheck_default()(this, AddIFrame);

    return _super.apply(this, arguments);
  }

  createClass_default()(AddIFrame, [{
    key: "getIconString",
    value: function getIconString() {
      return 'web';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.props.title || "IFrame";
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('addLayerView', 'iframe');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addLayerView'),
    value: function value(type) {
      this.setSelected(type === 'iframe');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }]);

  return AddIFrame;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AddIFrame: AddIFrame_AddIFrame
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/Projects.js






function Projects_createSuper(Derived) { var hasNativeReflectConstruct = Projects_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Projects_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var Projects_Projects = /*#__PURE__*/function (_MenuItem) {
  inherits_default()(Projects, _MenuItem);

  var _super = Projects_createSuper(Projects);

  function Projects() {
    classCallCheck_default()(this, Projects);

    return _super.apply(this, arguments);
  }

  createClass_default()(Projects, [{
    key: "getIconString",
    value: function getIconString() {
      return 'note';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('menu.item.projects.title');
    }
  }, {
    key: "isHideTitle",
    value: function isHideTitle() {
      return true;
    }
  }, {
    key: "clickButton",
    value: function clickButton(e) {
      this.emit('open.projects');
    }
  }]);

  return Projects;
}(MenuItem["a" /* default */]);


Object(registElement["a" /* registElement */])({
  Projects: Projects_Projects
});
// CONCATENATED MODULE: ./src/el/editor/ui/menu-items/index.js




































/* harmony default export */ var menu_items = ({
  Projects: Projects_Projects,
  AddIFrame: AddIFrame_AddIFrame,
  KeyBoard: KeyBoard_KeyBoard,
  AddVideo: AddVideo_AddVideo,
  AddDrawBrush: AddDrawBrush_AddDrawBrush,
  AddDrawPath: AddDrawPath_AddDrawPath,
  AddArtboard: AddArtboard_AddArtboard,
  SignButton: SignButton_SignButton,
  LoginButton: LoginButton_LoginButton,
  AddSVGText: AddSVGText_AddSVGText,
  AddCylinder: AddCylinder_AddCylinder,
  AddSVGTextPath: AddSVGTextPath_AddSVGTextPath,
  Fullscreen: Fullscreen_Fullscreen,
  AddSVGCircle: AddSVGCircle_AddSVGCircle,
  AddSVGRect: AddSVGRect_AddSVGRect,
  SelectTool: SelectTool_SelectTool,
  Download: Download_Download,
  Save: Save_Save,
  AddCube: AddCube_AddCube,
  AddImage: AddImage_AddImage,
  AddPath: AddPath_AddPath,
  Manual: Manual_Manual,
  ExportView: ExportView_ExportView,
  AddText: AddText_AddText,
  SameHeight: SameHeight_SameHeight,
  SameWidth: SameWidth_SameWidth,
  TopAlign: TopAlign_TopAlign,
  BottomAlign: BottomAlign_BottomAlign,
  MiddleAlign: MiddleAlign_MiddleAlign,
  CenterAlign: CenterAlign_CenterAlign,
  RightAlign: RightAlign_RightAlign,
  LeftAlign: LeftAlign_LeftAlign,
  AddCircle: AddCircle_AddCircle,
  AddRect: AddRect_AddRect,
  ExportCodePen: ExportCodePen_ExportCodePen,
  Github: Github_Github
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/AlignmentProperty.js






function AlignmentProperty_createSuper(Derived) { var hasNativeReflectConstruct = AlignmentProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AlignmentProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var AlignmentProperty_AlignmentProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(AlignmentProperty, _BaseProperty);

  var _super = AlignmentProperty_createSuper(AlignmentProperty);

  function AlignmentProperty() {
    classCallCheck_default()(this, AlignmentProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(AlignmentProperty, [{
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('alignment.property.title');
    }
  }, {
    key: "isHideHeader",
    value: function isHideHeader() {
      return true;
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"alignment-item\">\n        <object refClass=\"LeftAlign\" />\n        <object refClass=\"CenterAlign\" />\n        <object refClass=\"RightAlign\" />\n\n        <object refClass=\"TopAlign\" />\n        <object refClass=\"MiddleAlign\" />\n        <object refClass=\"BottomAlign\" />  \n\n        <object refClass=\"SameWidth\" />\n        <object refClass=\"SameHeight\" />\n      </div>\n    "
      );
    }
  }]);

  return AlignmentProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  AlignmentProperty: AlignmentProperty_AlignmentProperty
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/OffsetPathListEditor.js
var OffsetPathListEditor = __webpack_require__(105);

// CONCATENATED MODULE: ./src/el/editor/ui/property/MotionProperty.js







function MotionProperty_createSuper(Derived) { var hasNativeReflectConstruct = MotionProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function MotionProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var MotionProperty_MotionProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(MotionProperty, _BaseProperty);

  var _super = MotionProperty_createSuper(MotionProperty);

  function MotionProperty() {
    classCallCheck_default()(this, MotionProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(MotionProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('motion.property.title');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshRect') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$offsetPathList.setValue(current['offset-path']);
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      var current = this.$selection.current || {
        'offset-path': ''
      };
      return (
        /*html*/
        "\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='offset-path'></span>\n        </div>\n        <object refClass=\"OffsetPathListEditor\" ref=\"$offsetPathList\" key=\"offset-path\" value=\"".concat(current['offset-path'], "\" onchange=\"changRangeEditor\" />\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changRangeEditor'),
    value: function value(key, _value) {
      this.command('setAttribute', "change motion attribute : ".concat(key), defineProperty_default()({}, key, _value));
    }
  }]);

  return MotionProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  MotionProperty: MotionProperty_MotionProperty
});
// CONCATENATED MODULE: ./src/el/editor/util/revokeObjectUrl.js
function revokeObjectUrl(url) {
  URL.revokeObjectURL(url);
}
// CONCATENATED MODULE: ./src/el/editor/ui/property/ImageAssetsProperty.js







function ImageAssetsProperty_createSuper(Derived) { var hasNativeReflectConstruct = ImageAssetsProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ImageAssetsProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var ImageAssetsProperty_ImageAssetsProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ImageAssetsProperty, _BaseProperty);

  var _super = ImageAssetsProperty_createSuper(ImageAssetsProperty);

  function ImageAssetsProperty() {
    classCallCheck_default()(this, ImageAssetsProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ImageAssetsProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('image.asset.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid'
      };
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'image-assets-property';
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item image-assets'>\n        <div class='image-list' ref='$imageList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$imageList") + Event["DOMDIFF"],
    value: function value() {
      var current = this.$selection.currentProject || {
        images: []
      };
      var images = current.images;
      var results = images.map(function (image, index) {
        return (
          /*html*/
          "\n        <div class='image-item' data-index=\"".concat(index, "\">\n          <div class='preview' draggable=\"true\">\n            <img src=\"").concat(image.local, "\" />\n          </div>\n          <div class='tools'>\n            <button type=\"button\" class='copy'>").concat(icon["a" /* default */].copy, "</button>          \n            <button type=\"button\" class='remove'>").concat(icon["a" /* default */].remove, "</button>\n          </div>\n        </div>\n      ")
        );
      });
      return (
        /*html*/
        "\n      <div class='loaded-list'>\n        ".concat(results.join(''), "\n        <div class='add-image-item'>\n          <input type='file' accept='image/*' ref='$file' />\n          <button type=\"button\">").concat(icon["a" /* default */].add, "</button>\n        </div>        \n      </div>\n\n    ")
      );
    }
  }, {
    key: "executeImage",
    value: function executeImage(callback) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var project = this.$selection.currentProject;

      if (project) {
        callback && callback(project);
        if (isRefresh) this.refresh();
        if (isEmit) this.emit('refreshImageAssets');
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: Object(Event["DRAGSTART"])('$imageList .preview img'),
    value: function value(e) {
      var index = +e.$dt.closest('image-item').attr('data-index');
      var project = this.$selection.currentProject;

      if (project) {
        var imageInfo = project.images[index];
        e.dataTransfer.setData('image/info', imageInfo.local);
      }
    }
  }, {
    key: Object(Event["CHANGE"])('$imageList .add-image-item input[type=file]'),
    value: function value(e) {
      var _this = this;

      this.executeImage(function (project) {
        toConsumableArray_default()(e.target.files).forEach(function (item) {
          _this.emit('updateImageAssetItem', item);
        });
      });
    }
  }, {
    key: Object(Event["CLICK"])('$imageList .remove'),
    value: function value(e) {
      var $item = e.$dt.closest('image-item');
      var index = +$item.attr('data-index');
      this.executeImage(function (project) {
        project.removeImage(index);
        revokeObjectUrl($item.$('.preview img').attr('src'));
      });
    }
  }, {
    key: Object(Event["CLICK"])('$imageList .copy'),
    value: function value(e) {
      var $item = e.$dt.closest('image-item');
      var index = +$item.attr('data-index');
      this.executeImage(function (project) {
        project.copyImage(index);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addImageAsset'),
    value: function value() {
      this.refresh();
    }
  }]);

  return ImageAssetsProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ImageAssetsProperty: ImageAssetsProperty_ImageAssetsProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/VideoAssetsProperty.js







function VideoAssetsProperty_createSuper(Derived) { var hasNativeReflectConstruct = VideoAssetsProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoAssetsProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var VideoAssetsProperty_VideoAssetsProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(VideoAssetsProperty, _BaseProperty);

  var _super = VideoAssetsProperty_createSuper(VideoAssetsProperty);

  function VideoAssetsProperty() {
    classCallCheck_default()(this, VideoAssetsProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoAssetsProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('video.asset.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid'
      };
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'video-assets-property';
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item video-assets'>\n        <div class='video-list' ref='$videoList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])("$videoList") + Event["DOMDIFF"],
    value: function value() {
      var current = this.$selection.currentProject || {
        videos: []
      };
      var videos = current.videos;
      var results = videos.map(function (video, index) {
        return (
          /*html*/
          "\n        <div class='video-item' data-index=\"".concat(index, "\">\n          <div class='preview' draggable=\"true\">\n            <img src=\"").concat(video.local, "\" />\n          </div>\n          <div class='tools'>\n            <button type=\"button\" class='copy'>").concat(icon["a" /* default */].copy, "</button>          \n            <button type=\"button\" class='remove'>").concat(icon["a" /* default */].remove, "</button>\n          </div>\n        </div>\n      ")
        );
      });
      return (
        /*html*/
        "\n      <div class='loaded-list'>\n        ".concat(results.join(''), "\n        <div class='add-video-item'>\n          <input type='file' accept='video/*' ref='$file' />\n          <button type=\"button\">").concat(icon["a" /* default */].add, "</button>\n        </div>        \n      </div>\n\n    ")
      );
    }
  }, {
    key: "executeVideo",
    value: function executeVideo(callback) {
      var isRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var isEmit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      var project = this.$selection.currentProject;

      if (project) {
        callback && callback(project);
        if (isRefresh) this.refresh();
        if (isEmit) this.emit('refreshVideoAssets');
      } else {
        alert('Please select a project.');
      }
    }
  }, {
    key: Object(Event["DRAGSTART"])('$videoList .preview img'),
    value: function value(e) {
      var index = +e.$dt.closest('video-item').attr('data-index');
      var project = this.$selection.currentProject;

      if (project) {
        var videoInfo = project.videos[index];
        e.dataTransfer.setData('video/info', videoInfo.local);
      }
    }
  }, {
    key: Object(Event["CHANGE"])('$videoList .add-video-item input[type=file]'),
    value: function value(e) {
      var _this = this;

      this.executeVideo(function (project) {
        toConsumableArray_default()(e.target.files).forEach(function (item) {
          _this.emit('updateVideoAssetItem', item);
        });
      });
    }
  }, {
    key: Object(Event["CLICK"])('$videoList .remove'),
    value: function value(e) {
      var $item = e.$dt.closest('video-item');
      var index = +$item.attr('data-index');
      this.executeVideo(function (project) {
        project.removeVideo(index);
        revokeObjectUrl($item.$('.preview img').attr('src'));
      });
    }
  }, {
    key: Object(Event["CLICK"])('$videoList .copy'),
    value: function value(e) {
      var $item = e.$dt.closest('video-item');
      var index = +$item.attr('data-index');
      this.executeVideo(function (project) {
        project.copyVideo(index);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addVideoAsset'),
    value: function value() {
      this.refresh();
    }
  }]);

  return VideoAssetsProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  VideoAssetsProperty: VideoAssetsProperty_VideoAssetsProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/ComponentProperty.js







function ComponentProperty_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function ComponentProperty_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ComponentProperty_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ComponentProperty_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function ComponentProperty_createSuper(Derived) { var hasNativeReflectConstruct = ComponentProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ComponentProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ComponentProperty_ComponentProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ComponentProperty, _BaseProperty);

  var _super = ComponentProperty_createSuper(ComponentProperty);

  function ComponentProperty() {
    classCallCheck_default()(this, ComponentProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ComponentProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return "Component";
    }
  }, {
    key: "isShow",
    value: function isShow() {
      var current = this.$selection.current;

      if (current && current.is('component')) {
        return true;
      }

      return false;
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      var _this = this;

      this.refreshShow(function (type) {
        var current = _this.$selection.current;

        var inspector = _this.$editor.components.createInspector(current);

        return inspector.length > 0;
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.setTitle(current.getDefaultTitle() || current.itemType || current.name);
        this.load();
      }
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div ref='$body'></div>\n    "
      );
    }
  }, {
    key: "getPropertyEditor",
    value: function getPropertyEditor(index, key, value, selfEditor, selfEditorOptions) {
      if (Object(func["isString"])(selfEditor)) {
        return (
          /*html*/
          "\n        <div>  \n          <object refClass=\"".concat(selfEditor, "\" ").concat(Object(func["OBJECT_TO_PROPERTY"])(ComponentProperty_objectSpread(ComponentProperty_objectSpread({}, selfEditorOptions), {}, {
            onchange: 'changeComponentProperty',
            ref: "".concat(key).concat(index),
            key: key
          })), ">\n            <property name=\"value\" valueType=\"json\">").concat(JSON.stringify(value || {}), "</property>\n          </object>\n        </div>")
        );
      } else {
        return Object.keys(selfEditor).map(function (selfEditorKey) {
          return (
            /*html*/
            "\n          <div>\n            <object refClass=\"".concat(selfEditorKey, "\" ").concat(Object(func["OBJECT_TO_PROPERTY"])(ComponentProperty_objectSpread(ComponentProperty_objectSpread({}, selfEditorOptions), {}, {
              onchange: 'changeComponentProperty',
              ref: "".concat(key).concat(index).concat(selfEditorKey),
              key: key
            })), ">\n              <property name=\"value\" valueType=\"json\">").concat(JSON.stringify(value || {}), "</property>\n            </object>\n          </div>")
          );
        }).join('');
      }
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var _this2 = this;

      var current = this.$selection.current;
      if (!current) return '';

      if (current && !current.is('component')) {
        return '';
      }

      var inspector = this.$editor.components.createInspector(current);
      var self = inspector.map(function (it, index) {
        if (Object(func["isString"])(it)) {
          return (
            /*html*/
            "\n          <div class='property-item is-label'> \n            <label class='label string-label'>".concat(it, "</label>\n          </div>")
          );
        } else {
          return (
            /*html*/
            "\n          <div class='property-item'> \n            ".concat(_this2.getPropertyEditor(index, it.key, current[it.key] || it.defaultValue, it.editor, it.editorOptions), "\n          </div>\n        ")
          );
        }
      });
      return self;
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeComponentProperty'),
    value: function value(key, _value) {
      var _inspector$find;

      var current = this.$selection.current;
      var inspector = this.$editor.components.createInspector(current);
      var convert = (_inspector$find = inspector.find(function (it) {
        return it.key === key;
      })) === null || _inspector$find === void 0 ? void 0 : _inspector$find.convert;
      var realValueObject = convert ? convert(current, key, _value) : defineProperty_default()({}, key, _value);
      this.command("setAttribute", 'change component', realValueObject, null, true);
    }
  }]);

  return ComponentProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ComponentProperty: ComponentProperty_ComponentProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/TimelineAnimationProperty.js






function TimelineAnimationProperty_createSuper(Derived) { var hasNativeReflectConstruct = TimelineAnimationProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineAnimationProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var TimelineAnimationProperty_TimelineAnimationProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TimelineAnimationProperty, _BaseProperty);

  var _super = TimelineAnimationProperty_createSuper(TimelineAnimationProperty);

  function TimelineAnimationProperty() {
    classCallCheck_default()(this, TimelineAnimationProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineAnimationProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('timeline.animation.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'full';
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <button type='button' ref='$add' title=\"Add an animation\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"timeline-animation-list\" ref=\"$timelineAnimationList\"></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])("$timelineAnimationList") + Event["DOMDIFF"],
    value: function value() {
      var project = this.$selection.currentProject;
      if (!project) return '';
      return project.timeline.map(function (timeline, index) {
        var selected = timeline.selected ? 'selected' : '';
        return (
          /*html*/
          "\n        <div class='timeline-animation-item ".concat(selected, "'>\n          <div class='preview icon'>\n            ").concat(icon["a" /* default */].local_movie, "\n          </div>\n          <div class='detail'>\n            <label data-id='").concat(timeline.id, "'>").concat(timeline.title, "</label>\n            <div class=\"tools\">\n              <button type=\"button\" class=\"remove\" data-id=\"").concat(timeline.id, "\" title='Remove'>").concat(icon["a" /* default */].remove2, "</button>\n            </div>\n          </div>\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$timelineAnimationList .timeline-animation-item'),
    value: function value(e) {
      this.startInputEditing(e.$dt.$('label'));
    }
  }, {
    key: "modifyDoneInputEditing",
    value: function modifyDoneInputEditing(input) {
      var _this = this;

      this.endInputEditing(input, function (index, text) {
        var id = input.attr('data-id');
        var project = _this.$selection.currentProject;

        if (project) {
          project.setTimelineTitle(id, text);
        }
      });
    }
  }, {
    key: Object(Event["KEYDOWN"])('$timelineAnimationList .timeline-animation-item label') + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt);
    }
  }, {
    key: Object(Event["FOCUSOUT"])('$timelineAnimationList .timeline-animation-item label') + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      this.modifyDoneInputEditing(e.$dt);
    }
  }, {
    key: Object(Event["CLICK"])('$add'),
    value: function value(e) {
      this.emit('addTimelineItem');
    }
  }, {
    key: Object(Event["CLICK"])('$timelineAnimationList .timeline-animation-item .remove'),
    value: function value(e) {
      var id = e.$dt.attr('data-id');
      this.emit('removeAnimationItem', id); // this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$timelineAnimationList .timeline-animation-item label'),
    value: function value(e) {
      var id = e.$dt.attr('data-id');
      var project = this.$selection.currentProject;

      if (project) {
        project.selectTimeline(id);
        var $item = e.$dt.closest('timeline-animation-item');
        $item.onlyOneClass('selected');
        this.emit('refreshTimeline');
        this.emit('selectTimeline');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addTimeline', 'removeTimeline', 'removeAnimation'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline', 'refreshSelection', 'refreshArtboard') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }]);

  return TimelineAnimationProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TimelineAnimationProperty: TimelineAnimationProperty_TimelineAnimationProperty
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/BorderEditor.js
var BorderEditor = __webpack_require__(106);

// CONCATENATED MODULE: ./src/el/editor/ui/property/BorderNewProperty.js







function BorderNewProperty_createSuper(Derived) { var hasNativeReflectConstruct = BorderNewProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BorderNewProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var BorderNewProperty_BorderNewProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(BorderNewProperty, _BaseProperty);

  var _super = BorderNewProperty_createSuper(BorderNewProperty);

  function BorderNewProperty() {
    classCallCheck_default()(this, BorderNewProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(BorderNewProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('border.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'border';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div class=\"property-item full border-item\" ref='$body'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current['border'] || '';
      return (
        /*html*/
        "\n      <object refClass='BorderEditor' ref='$1' key='border' value='".concat(value, "' onchange='changeKeyValue' />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot(['project']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyValue'),
    value: function value(key, _value) {
      this.command("setAttribute", 'change border', defineProperty_default()({}, key, _value));
    }
  }]);

  return BorderNewProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  BorderNewProperty: BorderNewProperty_BorderNewProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/ProjectInformationProperty.js






function ProjectInformationProperty_createSuper(Derived) { var hasNativeReflectConstruct = ProjectInformationProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ProjectInformationProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ProjectInformationProperty_ProjectInformationProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ProjectInformationProperty, _BaseProperty);

  var _super = ProjectInformationProperty_createSuper(ProjectInformationProperty);

  function ProjectInformationProperty() {
    classCallCheck_default()(this, ProjectInformationProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ProjectInformationProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('project.information.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'full';
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var project = this.$selection.currentProject || {
        name: '',
        description: ''
      };
      this.refs.$name.val(project.name);
      this.refs.$description.val(project.description);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      var project = this.$selection.currentProject || {
        name: '',
        description: ''
      };
      return (
        /*html*/
        "\n      <div class=\"project-info\" ref=\"$info\">\n        <div class='project-info-item'>\n          <label>".concat(this.$i18n('project.information.property.name'), "</label>\n          <div class='input'>\n            <input type='text' value='").concat(project.name, "' ref='$name' />\n          </div>\n        </div>\n        <div class='project-info-item'>\n          <label>").concat(this.$i18n('project.information.property.description'), "</label>\n          <div class='input'>\n            <textarea  value='").concat(project.description, "' ref='$description'></textarea>\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshProjectList', 'refreshAllSelectProject'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["CHANGEINPUT"])('$name'),
    value: function value() {
      var currentProject = this.$selection.currentProject;

      if (currentProject) {
        currentProject.name = this.refs.$name.value;
      }
    }
  }, {
    key: Object(Event["CHANGEINPUT"])('$description'),
    value: function value() {
      var currentProject = this.$selection.currentProject;

      if (currentProject) {
        currentProject.description = this.refs.$description.value;
      }
    }
  }]);

  return ProjectInformationProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ProjectInformationProperty: ProjectInformationProperty_ProjectInformationProperty
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/PathDataEditor.js
var PathDataEditor = __webpack_require__(104);

// CONCATENATED MODULE: ./src/el/editor/ui/property/PathDataProperty.js







function PathDataProperty_createSuper(Derived) { var hasNativeReflectConstruct = PathDataProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PathDataProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PathDataProperty_PathDataProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PathDataProperty, _BaseProperty);

  var _super = PathDataProperty_createSuper(PathDataProperty);

  function PathDataProperty() {
    classCallCheck_default()(this, PathDataProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PathDataProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('path.data.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return "item path-data-property";
    }
  }, {
    key: "isSVGItem",
    value: function isSVGItem(current) {
      return current.is('svg-path', 'svg-brush', 'svg-textpath');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshStyleView', 'refreshRect') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShow(['svg-path', 'svg-brush', 'svg-textpath']);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current || {};
      this.children.$pathData.setValue(current.d);
    }
  }, {
    key: "getBody",
    value: function getBody() {
      var current = this.$selection.current || {};
      return (
        /*html*/
        "\n      <div>\n        <object refClass=\"PathDataEditor\" ref='$pathData' key='d' value='".concat(current.d, "' onchange='changeValue' />\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeValue'),
    value: function value(key, _value, params) {
      this.emit("updatePathItem", this.$selection.current, defineProperty_default()({}, key, _value));
    }
  }]);

  return PathDataProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PathDataProperty: PathDataProperty_PathDataProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/SVGTextProperty.js







function SVGTextProperty_createSuper(Derived) { var hasNativeReflectConstruct = SVGTextProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SVGTextProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var SVGTextProperty_SVGTextProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(SVGTextProperty, _BaseProperty);

  var _super = SVGTextProperty_createSuper(SVGTextProperty);

  function SVGTextProperty() {
    classCallCheck_default()(this, SVGTextProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(SVGTextProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('svg.text.property.title');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShow(['svg-textpath', 'svg-text', 'svg-tspan']);
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.setAllValue(['lengthAdjust', 'textLength', 'startOffset', 'text-anchor', 'text']);
      }
    }
  }, {
    key: "setAllValue",
    value: function setAllValue() {
      var _this = this;

      var list = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var current = this.$selection.current;
      if (!current) return;
      list.forEach(function (key) {
        _this.children["$".concat(key)].setValue(current[key]);
      });
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='text'></span>\n        </div>\n        <object refClass=\"TextAreaEditor\" \n          ref='$text' \n          label='".concat(this.$i18n('svg.text.property.textarea'), "' \n          key=\"text\"\n          onchange=\"changeTextValue\" />\n      </div>        \n      <div class='property-item'>\n        <object refClass=\"SelectIconEditor\" \n          ref='$text-anchor' \n          label='").concat(this.$i18n('svg.text.property.anchor'), "' \n          key=\"text-anchor\" \n          options=\"start,middle,end\" \n          onchange=\"changeTextValue\" />\n      </div>            \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='lengthAdjust'></span>\n        </div>\n        <object refClass=\"SelectEditor\"  \n          ref='$lengthAdjust' \n          label='").concat(this.$i18n('svg.text.property.length.adjust'), "' \n          key='lengthAdjust' \n          value='spacing' \n          options=\"spacing,spacingAndGlyphs\" \n          onchange='changeTextValue' />        \n      </div>        \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='textLength'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  \n          ref='$textLength' \n          label='").concat(this.$i18n('svg.text.property.text.length'), "' \n          key='textLength'\n          min=\"0\"\n          max='1000'\n          step=\"0.1\"\n          onchange='changeTextValue' />                \n      </div>        \n      <div class='property-item animation-property-item'>\n        <div class='group'>\n          <span class='add-timeline-property' data-property='startOffset'></span>\n        </div>\n        <object refClass=\"RangeEditor\"  \n          ref='$startOffset' \n          label='").concat(this.$i18n('svg.text.property.start.offset'), "' \n          key='startOffset' \n          min=\"0\"\n          max='1000'\n          step=\"0.1\"          \n          onchange='changeTextValue' />        \n      </div>                    \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTextValue'),
    value: function value(key, _value) {
      this.command('setAttribute', "change svg text property: ".concat(key), defineProperty_default()({}, key, _value), null, true);
    }
  }]);

  return SVGTextProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  SVGTextProperty: SVGTextProperty_SVGTextProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/ExportProperty.js






function ExportProperty_createSuper(Derived) { var hasNativeReflectConstruct = ExportProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ExportProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ExportProperty_ExportProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(ExportProperty, _BaseProperty);

  var _super = ExportProperty_createSuper(ExportProperty);

  function ExportProperty() {
    classCallCheck_default()(this, ExportProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(ExportProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('export.property.title');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshContent') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShowIsNot('project');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'export-property';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class='export-item svg'>\n          <label>SVG</label>\n          <button ref='$svg'>".concat(icon["a" /* default */].archive, " ").concat(this.$i18n('export.property.download'), "</button>\n        </div>\n        <div class='export-item png'>\n          <label>PNG</label>\n          <button ref='$png'>").concat(icon["a" /* default */].archive, " ").concat(this.$i18n('export.property.download'), "</button>\n        </div> \n      ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$svg'),
    value: function value() {
      this.emit('downloadSVG');
    }
  }, {
    key: Object(Event["CLICK"])('$png'),
    value: function value() {
      this.emit('downloadPNG');
    }
  }]);

  return ExportProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  ExportProperty: ExportProperty_ExportProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/LayoutProperty.js







function LayoutProperty_createSuper(Derived) { var hasNativeReflectConstruct = LayoutProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayoutProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var LayoutProperty_LayoutProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(LayoutProperty, _BaseProperty);

  var _super = LayoutProperty_createSuper(LayoutProperty);

  function LayoutProperty() {
    classCallCheck_default()(this, LayoutProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayoutProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('layout.property.title');
    }
  }, {
    key: "getLayoutOptions",
    value: function getLayoutOptions() {
      var _this = this;

      return ['default', 'flex', 'grid'].map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("layout.property.".concat(it)));
      }).join(',');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'layout-property';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class='property-item' ref='$layoutType'></div>\n      "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$layoutType'),
    value: function value() {
      var current = this.$selection.current || {
        layout: 'default'
      };
      return (
        /*html*/
        "\n      <div class='layout-select'>\n        <object refClass=\"SelectIconEditor\" \n          ref='$layout' \n          key='layout' \n          icon=\"true\" \n          value=\"".concat(current.layout, "\"\n          options=\"").concat(this.getLayoutOptions(), "\"  \n          colors=\",green,red\"\n          onchange=\"changeLayoutType\" />\n      </div>\n      <div class='layout-list' ref='$layoutList'>\n        <div data-value='default' class='").concat(current.layout === 'default' ? 'selected' : '', "'></div>\n        <div data-value='flex' class='").concat(current.layout === 'flex' ? 'selected' : '', "'>\n          <object refClass=\"FlexLayoutEditor\" ref='$flex' key='flex-layout' value=\"").concat(current['flex-layout'] || '', "\" onchange='changeLayoutInfo' />\n        </div>\n        <div data-value='grid' class='").concat(current.layout === 'grid' ? 'selected' : '', "'>\n          <object refClass=\"GridLayoutEditor\" ref='$grid' key='grid-layout' value=\"").concat(current['grid-layout'] || '', "\" onchange='changeLayoutInfo' />\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeLayoutInfo'),
    value: function value(key, _value) {
      var _this2 = this;

      this.command('setAttribute', 'change layout info', defineProperty_default()({}, key, _value), null, false, true);
      this.nextTick(function () {
        _this2.emit('refreshAllElementBoundSize');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeLayoutType'),
    value: function value(key, _value2) {
      var _this3 = this;

      this.$selection.reset(defineProperty_default()({}, key, _value2));
      this.command('setAttribute', 'change layout type', defineProperty_default()({}, key, _value2), null, false, true);
      this.refresh();
      this.nextTick(function () {
        _this3.emit('refreshAllElementBoundSize');

        _this3.emit('changeItemLayout');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShow(['rect', 'circle', 'artboard'], true);
    }
  }]);

  return LayoutProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  LayoutProperty: LayoutProperty_LayoutProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/FlexLayoutItemProperty.js






function FlexLayoutItemProperty_createSuper(Derived) { var hasNativeReflectConstruct = FlexLayoutItemProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function FlexLayoutItemProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var FlexLayoutItemProperty_FlexLayoutItemProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(FlexLayoutItemProperty, _BaseProperty);

  var _super = FlexLayoutItemProperty_createSuper(FlexLayoutItemProperty);

  function FlexLayoutItemProperty() {
    classCallCheck_default()(this, FlexLayoutItemProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(FlexLayoutItemProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('flex.layout.item.property.title');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'flex-layout-item-property';
    }
  }, {
    key: "getLayoutOptions",
    value: function getLayoutOptions() {
      var _this = this;

      return ['none', 'auto', 'value'].map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("flex.layout.item.property.".concat(it)));
      }).join(',');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class='property-item' ref='$body'></div>\n      "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {
        'flex-layout-item': 'none'
      };
      var valueType = current['flex-layout-item'] || 'none';
      var arr = [];

      if (['none', 'auto'].includes(valueType) === false) {
        arr = valueType.split(' ');
      }

      if (arr.length > 0) {
        valueType = 'value';
      }

      return (
        /*html*/
        "\n      <div class='layout-select'>\n        <object refClass=\"SelectIconEditor\" \n        ref='$layout' \n        key='layout' \n        icon=\"true\" \n        value=\"".concat(valueType, "\"\n        options=\"").concat(this.getLayoutOptions(), "\"  \n        onchange=\"changeLayoutType\" />\n      </div>\n      <div class='layout-list' ref='$layoutList' data-selected-value='").concat(current.layout, "'>\n        <div data-value='none'></div>\n        <div data-value='auto'></div>\n        <div data-value='value'>\n          <div class='value-item'>\n            <object refClass=\"RangeEditor\"  ref='$grow' label='").concat(this.$i18n('flex.layout.item.property.grow'), "' key=\"flex-grow\" value=\"").concat(arr[0], "\" min='0' max='1' step='0.01' units=\",auto\" onchange='changeFlexItem' />\n          </div>\n          <div class='value-item'>\n            <object refClass=\"RangeEditor\"  ref='$shrink' label='").concat(this.$i18n('flex.layout.item.property.shrink'), "' key=\"flex-shrink\" value=\"").concat(arr[1], "\" min='0' max='1' step='0.01' units=\",auto\" onchange='changeFlexItem' />\n          </div>\n          <div class='value-item'>\n            <object refClass=\"RangeEditor\"  ref='$basis' label='").concat(this.$i18n('flex.layout.item.property.basis'), "' key=\"flex-basis\" value=\"").concat(arr[2], "\" min='0' units=\"px,em,%,auto\" onchange='changeFlexItem' />\n          </div>                    \n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "getFlexItemValue",
    value: function getFlexItemValue(value) {
      return value.unit === 'auto' ? 'auto' : value + "";
    }
  }, {
    key: "getFlexValue",
    value: function getFlexValue() {
      var grow = this.children.$grow.getValue();
      var shrink = this.children.$shrink.getValue();
      var basis = this.children.$basis.getValue();
      grow = this.getFlexItemValue(grow);
      shrink = this.getFlexItemValue(shrink);
      basis = this.getFlexItemValue(basis);
      return Object(func["CSS_TO_STRING"])({
        flex: "".concat(grow, " ").concat(shrink, " ").concat(basis)
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeFlexItem'),
    value: function value(key, _value) {
      var _this2 = this;

      this.command('setAttribute', 'change flex layout', {
        'flex-layout-item': this.getFlexValue()
      });
      this.nextTick(function () {
        _this2.emit('refreshAllElementBoundSize');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeLayoutType'),
    value: function value(key, _value2) {
      var _this3 = this;

      var valueType = this.children.$layout.getValue();
      var _value2 = valueType;

      if (valueType === 'value') {
        _value2 = this.getFlexValue();
      }

      this.command('setAttribute', 'change flex layout', {
        'flex-layout-item': _value2
      }); // 타입 변화에 따른 하위 아이템들의 설정을 바꿔야 한다. 

      this.refs.$layoutList.attr('data-selected-value', valueType);
      this.nextTick(function () {
        _this3.emit('refreshAllElementBoundSize');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      var _this4 = this;

      this.refreshShow(function () {
        var current = _this4.$selection.current;
        return current && current.isInFlex();
      });
    }
  }]);

  return FlexLayoutItemProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  FlexLayoutItemProperty: FlexLayoutItemProperty_FlexLayoutItemProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/GridLayoutItemProperty.js






function GridLayoutItemProperty_createSuper(Derived) { var hasNativeReflectConstruct = GridLayoutItemProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridLayoutItemProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var GridLayoutItemProperty_GridLayoutItemProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(GridLayoutItemProperty, _BaseProperty);

  var _super = GridLayoutItemProperty_createSuper(GridLayoutItemProperty);

  function GridLayoutItemProperty() {
    classCallCheck_default()(this, GridLayoutItemProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridLayoutItemProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('grid.layout.item.property.title');
    }
  }, {
    key: "getLayoutOptions",
    value: function getLayoutOptions() {
      var _this = this;

      return ['none', 'value'].map(function (it) {
        return "".concat(it, ":").concat(_this.$i18n("grid.layout.item.property.".concat(it)));
      }).join(',');
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'grid-layout-item-property';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n        <div class='property-item' ref='$body'></div>\n      "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {
        'grid-layout-item': 'none'
      };
      var valueType = current['grid-layout-item'] || 'none';
      var obj = {};

      if (['none'].includes(valueType) === false) {
        obj = Object(func["STRING_TO_CSS"])(current['grid-layout-item']);
      }

      if (Object.keys(obj).length > 0) {
        valueType = 'value';
      }

      return (
        /*html*/
        "\n      <div class='layout-select'>\n        <object refClass=\"SelectIconEditor\" \n        ref='$layout' \n        key='layout' \n        icon=\"true\" \n        value=\"".concat(valueType, "\"\n        options=\"").concat(this.getLayoutOptions(), "\"  \n        onchange=\"changeLayoutType\" />\n      </div>\n      <div class='layout-list' ref='$layoutList' data-selected-value='").concat(valueType, "'>\n        <div data-value='none'></div>\n        <div data-value='value'>\n          <div class='value-item'>\n            <label></label>\n            <div>").concat(this.$i18n('grid.layout.item.property.start'), "</div>\n            <div>").concat(this.$i18n('grid.layout.item.property.end'), "</div>\n          </div>\n          <div class='value-item'>\n            <label>").concat(this.$i18n('grid.layout.item.property.column'), "</label>\n            <div>\n              <object refClass=\"NumberInputEditor\"  ref='$columnStart' key=\"grid-column-start\" value=\"").concat(obj['grid-column-start'] || '0', "\" min='0' onchange='changeGridItem' />\n            </div>\n            <div>\n              <object refClass=\"NumberInputEditor\"  ref='$columnEnd' key=\"grid-column-end\" value=\"").concat(obj['grid-column-end'] || '0', "\" min='0' onchange='changeGridItem' />\n            </div>            \n          </div>\n          <div class='value-item'>\n            <label>").concat(this.$i18n('grid.layout.item.property.row'), "</label>\n            <div>\n              <object refClass=\"NumberInputEditor\"  ref='$rowStart' key=\"grid-row-start\" value=\"").concat(obj['grid-row-start'] || '0', "\" min='0' onchange='changeGridItem' />\n            </div>\n            <div>\n              <object refClass=\"NumberInputEditor\"  ref='$rowEnd' key=\"grid-row-end\" value=\"").concat(obj['grid-row-end'] || '0', "\" min='0' onchange='changeGridItem' />\n            </div>            \n          </div>          \n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: "getGridValue",
    value: function getGridValue() {
      var obj = {
        'grid-column-start': this.children.$columnStart.getValue(),
        'grid-column-end': this.children.$columnEnd.getValue(),
        'grid-row-start': this.children.$rowStart.getValue(),
        'grid-row-end': this.children.$rowEnd.getValue()
      };
      return Object(func["CSS_TO_STRING"])(obj);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeGridItem'),
    value: function value(key, _value) {
      var _this2 = this;

      this.command('setAttribute', 'change grid layout item', {
        'grid-layout-item': this.getGridValue()
      });
      this.nextTick(function () {
        _this2.emit('refreshAllElementBoundSize');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeLayoutType'),
    value: function value(key, _value2) {
      var _this3 = this;

      var valueType = this.children.$layout.getValue();
      var _value2 = valueType;

      if (valueType === 'value') {
        _value2 = this.getGridValue();
      }

      this.command('setAttribute', 'change grid layout item', {
        'grid-layout-item': _value2
      }); // 타입 변화에 따른 하위 아이템들의 설정을 바꿔야 한다. 

      this.refs.$layoutList.attr('data-selected-value', valueType);
      this.nextTick(function () {
        _this3.emit('refreshAllElementBoundSize');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      var _this4 = this;

      this.refreshShow(function () {
        var current = _this4.$selection.current;
        return current && current.isInGrid();
      });
    }
  }]);

  return GridLayoutItemProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  GridLayoutItemProperty: GridLayoutItemProperty_GridLayoutItemProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/PatternProperty.js







function PatternProperty_createSuper(Derived) { var hasNativeReflectConstruct = PatternProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PatternProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PatternProperty_PatternProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PatternProperty, _BaseProperty);

  var _super = PatternProperty_createSuper(PatternProperty);

  function PatternProperty() {
    classCallCheck_default()(this, PatternProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PatternProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('pattern.property.title');
    }
  }, {
    key: "hasKeyframe",
    value: function hasKeyframe() {
      return true;
    }
  }, {
    key: "getKeyframeProperty",
    value: function getKeyframeProperty() {
      return 'pattern';
    }
  }, {
    key: "getTitleClassName",
    value: function getTitleClassName() {
      return 'pattern';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return "<div class='full pattern-property' ref='$body'></div>";
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <select ref=\"$patternSelect\">      \n      </select>\n      <button type=\"button\" ref=\"$add\" title=\"add Pattern\">".concat(icon["a" /* default */].add, "</button>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$add"),
    value: function value() {
      var patternType = this.refs.$patternSelect.value;
      this.children.$patternEditor.trigger('add', patternType);
    }
  }, {
    key: Object(Event["LOAD"])('$patternSelect'),
    value: function value() {
      var _this = this;

      var list = Resource["h" /* pattern_list */].map(function (it) {
        return {
          title: _this.$i18n("pattern.property.".concat(it)),
          value: it
        };
      });

      var totalList = toConsumableArray_default()(list);

      return totalList.map(function (it) {
        var title = it.title,
            value = it.value;
        return "<option value='".concat(value, "'>").concat(title, "</option>");
      });
    }
  }, {
    key: Object(Event["LOAD"])('$body'),
    value: function value() {
      var current = this.$selection.current || {};
      var value = current.pattern;
      return (
        /*html*/
        "<object refClass=\"PatternEditor\" ref='$patternEditor' value='".concat(value, "' hide-label='true' onchange='changePatternEditor' />")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePatternEditor'),
    value: function value(key, pattern) {
      this.command('setAttribute', 'change pattern', {
        pattern: pattern
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      this.refreshShow(['artboard', 'rect', 'circle', 'text', 'cube', 'cylinder']);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSVGArea') + Object(Event["DEBOUNCE"])(1000),
    value: function value() {
      this.load('$patternSelect');
    }
  }]);

  return PatternProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PatternProperty: PatternProperty_PatternProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/VideoProperty.js







function VideoProperty_createSuper(Derived) { var hasNativeReflectConstruct = VideoProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VideoProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




 // import { Length } from "@unit/Length";

var video_dom_property = [// 'audioTracks',
// 'autoplay',
// 'buffered',
// 'controller',
// 'controls',
// 'controlsList',
// 'crossOrigin',
// 'currentSrc',
// 'currentTime',
// 'defaultMuted',
// 'defaultPlaybackRate',
'duration', // 'ended',
// 'error',
// 'initialTime',
// 'loop',
// 'mediaGroup',
// 'muted',
// 'networkState',
// 'onerror',
// 'paused',
// 'playbackRate',
// 'readyState',
// 'seekable',
// 'sinkId',
// 'src',
// 'srcObject',
// 'textTracks',
// 'videoTracks',
'volume'];

var VideoProperty_VideoProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(VideoProperty, _BaseProperty);

  var _super = VideoProperty_createSuper(VideoProperty);

  function VideoProperty() {
    classCallCheck_default()(this, VideoProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(VideoProperty, [{
    key: "getClassName",
    value: function getClassName() {
      return 'item video-property';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('video.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        $video: {
          el: {}
        },
        status: 'play',
        volume: 1
      };
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "<div ref='$body' style='padding-top: 3px;'></div>"
      );
    }
  }, {
    key: "video",
    get: function get() {
      return this.state.$video.el;
    }
  }, {
    key: "volumeStatus",
    get: function get() {
      if (this.state.volume === 0) return 'muted';
      if (this.state.volume > 0.5) return 'up';
      return 'down';
    }
  }, {
    key: "play",
    value: function play() {
      if (this.video) this.video.play();
    }
  }, {
    key: "pause",
    value: function pause() {
      if (this.video) this.video.pause();
    }
  }, {
    key: Object(Event["LOAD"])("$body"),
    value: function value() {
      var current = this.$selection.current || {
        playTime: "0:1:1"
      };
      var currentTime = current.currentTime || 0;
      var duration = (current.playTime || '0:1:1').split(":").pop();
      return (
        /*html*/
        "\n        <div ref='$tools' class='play-control' data-selected-value=\"".concat(this.state.status, "\">\n          <button type=\"button\" data-value=\"play\" >").concat(icon["a" /* default */].play, " ").concat(this.$i18n('video.property.play'), "</button>\n          <button type=\"button\" data-value=\"pause\">").concat(icon["a" /* default */].pause, "  ").concat(this.$i18n('video.property.pause'), "</button>      \n          <div>\n            <object refClass=\"NumberRangeEditor\"  ref='$currentTime' min=\"0\" max=\"").concat(duration, "\" value=\"").concat(currentTime, "\" step=\"0.001\" onchange=\"changeCurrentTime\" />\n          </div>\n        </div>    \n        <div class='property-item animation-property-item has-label'>        \n          <div class='group'>\n            <span class='add-timeline-property' data-property='volume'></span>\n            ").concat(this.$i18n('video.property.volume'), "\n          </div>\n          <div ref='$volume_control' class='volume-control' data-selected-value='").concat(this.volumeStatus, "'>\n            <span data-value='muted'>").concat(icon["a" /* default */].volume_off, "</span>\n            <span data-value='down'>").concat(icon["a" /* default */].volume_down, "</span>\n            <span data-value='up'>").concat(icon["a" /* default */].volume_up, "</span>\n            <input type=\"range\" ref='$volume' min=\"0\" max=\"1\" step=\"0.001\" value=\"").concat(this.state.volume, "\" />\n          </div>          \n        </div>\n        <div class='property-item animation-property-item has-label'>        \n          <div class='group'>\n            <span class='add-timeline-property' data-property='playbackRate'></span>\n            ").concat(this.$i18n('video.property.playbackRate'), "\n          </div>\n          <div>\n            <object refClass=\"NumberRangeEditor\"  ref='$playbackRate' min=\"0.1\" max=\"10\" clamp=\"true\" value=\"").concat(this.state.playbackRate, "\" step=\"0.001\" onchange=\"changePlaybackRate\" />\n          </div>\n        </div>        \n        <div class='property-item animation-property-item full'>\n          <div class='group'>\n            <span class='add-timeline-property' data-property='playTime'></span>\n            ").concat(this.$i18n('video.property.playTime'), "\n          </div>\n          <object refClass=\"MediaProgressEditor\" ref='$progress'  key='playTime' value=\"").concat(current.playTime, "\" onchange=\"changeSelect\" />\n        </div>\n      ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeCurrentTime'),
    value: function value(key, currentTime) {
      this.setState({
        currentTime: currentTime
      }, false); // this.video.currentTime = currentTime;

      this.command('setAttribute', 'change video property', {
        currentTime: currentTime
      }, null, true);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePlaybackRate'),
    value: function value(key, playbackRate) {
      this.setState({
        playbackRate: playbackRate
      }, false); // this.video.playbackRate = playbackRate;

      this.command('setAttribute', 'change video property', {
        playbackRate: playbackRate
      }, null, true);
    }
  }, {
    key: Object(Event["CHANGEINPUT"])('$volume'),
    value: function value(e) {
      var volume = Number(this.refs.$volume.value);
      this.setState({
        volume: volume
      }, false);
      this.bindData('$volume_control');
      this.command('setAttribute', 'change video property', {
        volume: volume
      }, null, true);
    }
  }, {
    key: Object(Event["BIND"])('$volume_control'),
    value: function value() {
      return {
        'data-selected-value': this.volumeStatus
      };
    }
  }, {
    key: Object(Event["BIND"])('$tools'),
    value: function value() {
      return {
        'data-selected-value': this.state.status
      };
    }
  }, {
    key: Object(Event["CLICK"])('$tools button'),
    value: function value(e) {
      var playType = e.$dt.attr('data-value');

      switch (playType) {
        case 'play':
          this.setState({
            status: 'pause'
          }, false);
          this.play();
          break;

        case 'pause':
          this.setState({
            status: 'play'
          }, false);
          this.pause();
          break;
      }

      this.bindData('$tools');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeValue') + Object(Event["DEBOUNCE"])(100),
    value: function value(key, _value) {
      if (!this.state.$video) return;
      this.command('setAttribute', 'change video property', defineProperty_default()({}, key, _value), null, true);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeSelect'),
    value: function value(key, _value2) {
      this.command('setAttribute', 'change video property', defineProperty_default()({}, key, _value2));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateVideoEvent'),
    value: function value(e) {
      if (this.video.paused) {
        this.setState({
          status: 'play',
          currentTime: this.video.currentTime
        }, false);
        this.bindData('$tools');
      }

      this.children.$currentTime.setValue(this.video.currentTime);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      var _this = this;

      var current = this.$selection.current;
      this.refreshShow(['video']);

      if (current && current.is('video')) {
        this.emit('refElement', current.id, function ($el) {
          var $video = $el.$('video');
          _this.state.$video = $video;

          _this.setState({
            volume: current.volume,
            currentTime: current.currentTime,
            playbackRate: current.playbackRate
          }, false);

          _this.video.ontimeupdate = function (e) {
            _this.trigger('updateVideoEvent', e);
          };

          _this.video.onprogress = function (e) {
            _this.trigger('updateVideoEvent', e);
          };

          _this.load('$body');
        });
      }
    }
  }]);

  return VideoProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  VideoProperty: VideoProperty_VideoProperty
});
// EXTERNAL MODULE: ./src/el/editor/preset/patterns/index.js + 7 modules
var patterns = __webpack_require__(108);

// EXTERNAL MODULE: ./src/el/editor/property-parser/Pattern.js + 1 modules
var Pattern = __webpack_require__(50);

// CONCATENATED MODULE: ./src/el/editor/ui/property/PatternAssetsProperty.js







function PatternAssetsProperty_createSuper(Derived) { var hasNativeReflectConstruct = PatternAssetsProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PatternAssetsProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var PatternAssetsProperty_PatternAssetsProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(PatternAssetsProperty, _BaseProperty);

  var _super = PatternAssetsProperty_createSuper(PatternAssetsProperty);

  function PatternAssetsProperty() {
    classCallCheck_default()(this, PatternAssetsProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(PatternAssetsProperty, [{
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('pattern.asset.property.title');
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        mode: 'grid',
        preset: 'check'
      };
    }
  }, {
    key: "getTools",
    value: function getTools() {
      var options = patterns["a" /* default */].map(function (it) {
        return "".concat(it.key, ":").concat(it.title);
      });
      return (
        /*html*/
        "\n      <object refClass=\"SelectEditor\"  key=\"preset\" value=\"".concat(this.state.preset, "\" options=\"").concat(options, "\" onchange=\"changePreset\"  />\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePreset'),
    value: function value(key, _value) {
      this.setState(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'pattern-assets-property';
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.show();
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='property-item pattern-assets'>\n        <div class='pattern-list' ref='$patternList' data-view-mode='".concat(this.state.mode, "'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["DRAGSTART"])('$patternList .pattern-item'),
    value: function value(e) {
      var pattern = e.$dt.attr('data-pattern');
      e.dataTransfer.effectAllowed = "copy";
      e.dataTransfer.setData("text/pattern", pattern);
    }
  }, {
    key: Object(Event["LOAD"])("$patternList"),
    value: function value() {
      var _this = this;

      var preset = patterns["a" /* default */].find(function (it) {
        return it.key === _this.state.preset;
      });

      if (!preset) {
        return '';
      }

      var results = preset.execute().map(function (item, index) {
        var cssText = Object(func["CSS_TO_STRING"])(Pattern["a" /* Pattern */].toCSS(item.pattern));
        return (
          /*html*/
          "\n        <div class='pattern-item' data-index=\"".concat(index, "\" data-pattern=\"").concat(item.pattern, "\">\n          <div class='preview' title=\"").concat(item.title, "\" draggable=\"true\">\n            <div class='pattern-view' style='").concat(cssText, "'></div>\n          </div>\n        </div>\n      ")
        );
      });
      return results;
    }
  }, {
    key: Object(Event["CLICK"])("$patternList .pattern-item"),
    value: function value(e) {
      var pattern = e.$dt.attr('data-pattern'); // view 에 따라 다른 속성을 가진다. 

      if (this.$editor.modeView === 'CanvasView') {
        this.emit('addBackgroundImagePattern', pattern);
      } else {
        this.emit('setPatternAsset', pattern);
      }
    }
  }]);

  return PatternAssetsProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  PatternAssetsProperty: PatternAssetsProperty_PatternAssetsProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/HistoryProperty.js






function HistoryProperty_createSuper(Derived) { var hasNativeReflectConstruct = HistoryProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HistoryProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var HistoryProperty_HistoryProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(HistoryProperty, _BaseProperty);

  var _super = HistoryProperty_createSuper(HistoryProperty);

  function HistoryProperty() {
    classCallCheck_default()(this, HistoryProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(HistoryProperty, [{
    key: "afterRender",
    value: function afterRender() {
      this.show();
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return 'History';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class=\"history-list-view\" ref='$body'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$body') + Event["DOMDIFF"],
    value: function value() {
      var _this = this;

      return this.$editor.history.map(function (it, index) {
        if (it === '-') {
          return (
            /*html*/
            "<div class='divider'>-</div>"
          );
        }

        return (
          /*html*/
          "\n        <div class='history-item'>\n          <span>".concat(index === _this.$editor.history.currentIndex ? icon["a" /* default */].arrowRight : '', "</span>\n          <span>").concat(it.message, "</span>\n        </div>\n      ")
        );
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshHistory'),
    value: function value() {
      this.refresh();
    }
  }]);

  return HistoryProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  HistoryProperty: HistoryProperty_HistoryProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/IFrameProperty.js







function IFrameProperty_createSuper(Derived) { var hasNativeReflectConstruct = IFrameProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function IFrameProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var IFrameProperty_IFrameProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(IFrameProperty, _BaseProperty);

  var _super = IFrameProperty_createSuper(IFrameProperty);

  function IFrameProperty() {
    classCallCheck_default()(this, IFrameProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(IFrameProperty, [{
    key: "getClassName",
    value: function getClassName() {
      return 'item';
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('iframe.property.title');
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div ref='$body' style='padding-top: 3px;'>\n        <object refClass=\"TextEditor\" ref=\"$input\" label=\"URL\" key=\"url\" onchange=\"changeText\" />\n      </div>\n    "
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var current = this.$selection.current;

      if (current) {
        this.children.$input.setValue(current.url);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeText') + Object(Event["DEBOUNCE"])(100),
    value: function value(key, _value) {
      var current = this.$selection.current;

      if (current) {
        current.reset(defineProperty_default()({}, key, _value));
        this.command('setAttribute', 'change iframe url', defineProperty_default()({}, key, _value), current.id);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refreshShow(['iframe']);
    }
  }]);

  return IFrameProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  IFrameProperty: IFrameProperty_IFrameProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/property/index.js


var _IFrameProperty$Histo;






















































/* harmony default export */ var ui_property = (_IFrameProperty$Histo = {
  IFrameProperty: IFrameProperty_IFrameProperty,
  HistoryProperty: HistoryProperty_HistoryProperty,
  PatternAssetsProperty: PatternAssetsProperty_PatternAssetsProperty,
  VideoProperty: VideoProperty_VideoProperty,
  PatternProperty: PatternProperty_PatternProperty,
  GridLayoutItemProperty: GridLayoutItemProperty_GridLayoutItemProperty,
  FlexLayoutItemProperty: FlexLayoutItemProperty_FlexLayoutItemProperty,
  LayoutProperty: LayoutProperty_LayoutProperty,
  ExportProperty: ExportProperty_ExportProperty,
  SVGTextProperty: SVGTextProperty_SVGTextProperty,
  PathDataProperty: PathDataProperty_PathDataProperty,
  ProjectInformationProperty: ProjectInformationProperty_ProjectInformationProperty,
  BorderNewProperty: BorderNewProperty_BorderNewProperty,
  TimelineAnimationProperty: TimelineAnimationProperty_TimelineAnimationProperty,
  ComponentProperty: ComponentProperty_ComponentProperty,
  ImageAssetsProperty: ImageAssetsProperty_ImageAssetsProperty,
  VideoAssetsProperty: VideoAssetsProperty_VideoAssetsProperty,
  MotionProperty: MotionProperty_MotionProperty,
  AlignmentProperty: AlignmentProperty_AlignmentProperty,
  SVGFilterAssetsProperty: SVGFilterAssetsProperty_SVGFilterAssetsProperty,
  TextClipProperty: TextClipProperty_TextClipProperty,
  SVGItemProperty: SVGItemProperty_SVGItemProperty,
  GradientAssetsProperty: GradientAssetsProperty_GradientAssetsProperty,
  TextFillProperty: TextFillProperty_TextFillProperty,
  ImageProperty: ImageProperty_ImageProperty,
  ArtBoardSizeProperty: ArtBoardSizeProperty_ArtBoardSizeProperty,
  LayerTreeProperty: LayerTreeProperty_LayerTreeProperty,
  ProjectProperty: ProjectProperty_ProjectProperty,
  PositionProperty: PositionProperty_PositionProperty,
  SelectorProperty: SelectorProperty_SelectorProperty,
  BackgroundClipProperty: BackgroundClipProperty_BackgroundClipProperty,
  TransformOriginProperty: TransformOriginProperty_TransformOriginProperty,
  PerspectiveProperty: PerspectiveProperty_PerspectiveProperty,
  PerspectiveOriginProperty: PerspectiveOriginProperty_PerspectiveOriginProperty,
  TransitionProperty: TransitionProperty_TransitionProperty,
  ClipPathProperty: ClipPathProperty_ClipPathProperty,
  TransformProperty: TransformProperty_TransformProperty,
  BackdropFilterProperty: BackdropFilterProperty_BackdropFilterProperty,
  CodeViewProperty: CodeViewProperty_CodeViewProperty,
  FilterProperty: FilterProperty_FilterProperty,
  BorderRadiusProperty: BorderRadiusProperty_BorderRadiusProperty,
  BackgroundImageProperty: BackgroundImageProperty_BackgroundImageProperty,
  KeyframeProperty: KeyframeProperty_KeyframeProperty,
  AnimationProperty: AnimationProperty_AnimationProperty,
  BorderImageProperty: BorderImageProperty_BorderImageProperty,
  FontSpacingProperty: FontSpacingProperty_FontSpacingProperty,
  TextProperty: TextProperty_TextProperty,
  TextShadowProperty: TextShadowProperty_TextShadowProperty,
  FontProperty: FontProperty_FontProperty,
  ContentProperty: ContentProperty_ContentProperty,
  BoxModelProperty: BoxModelProperty_BoxModelProperty,
  BoxShadowProperty: BoxShadowProperty_BoxShadowProperty
}, defineProperty_default()(_IFrameProperty$Histo, "BorderRadiusProperty", BorderRadiusProperty_BorderRadiusProperty), defineProperty_default()(_IFrameProperty$Histo, "AppearanceProperty", AppearanceProperty_AppearanceProperty), _IFrameProperty$Histo);
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/index.js + 17 modules
var property_editor = __webpack_require__(66);

// CONCATENATED MODULE: ./src/el/editor/ui/control/AssetItems.js






function AssetItems_createSuper(Derived) { var hasNativeReflectConstruct = AssetItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function AssetItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var AssetItems_AssetItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(AssetItems, _EditorElement);

  var _super = AssetItems_createSuper(AssetItems);

  function AssetItems() {
    classCallCheck_default()(this, AssetItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(AssetItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='asset-items'>\n        ".concat(this.$menuManager.getTargetMenuItems('asset').map(function (it) {
          return (
            /*html*/
            "<object refClass=\"".concat(it.refClass, "\" />")
          );
        }).join('\n'), "\n      </div>\n    ")
      );
    }
  }]);

  return AssetItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  AssetItems: AssetItems_AssetItems
});
// EXTERNAL MODULE: ./src/el/editor/manager/PluginManager.js
var PluginManager = __webpack_require__(107);

// CONCATENATED MODULE: ./src/el/editor/ui/control/ComponentItems.js






function ComponentItems_createSuper(Derived) { var hasNativeReflectConstruct = ComponentItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ComponentItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var ComponentItems_ComponentItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ComponentItems, _EditorElement);

  var _super = ComponentItems_createSuper(ComponentItems);

  function ComponentItems() {
    classCallCheck_default()(this, ComponentItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(ComponentItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='component-items'>\n        <div>\n          <object refClass=\"CustomComponentItems\" />\n        </div>      \n        <div class='group'>\n         <label>".concat(this.$i18n('component.items.custom'), "</label>\n          <div class='list'>            \n            <object refClass=\"AddCube\" title='Cube' />\n            <object refClass=\"AddCylinder\" title='Cylinder' />          \n          </div>          \n        </div>          \n        <div class='group'>\n         <label>").concat(this.$i18n('component.items.plugin'), "</label>\n          <div class='list'>\n            ").concat(this.$menuManager.getTargetMenuItems('sidebar').map(function (it) {
          return (
            /*html*/
            "<object refClass=\"".concat(it.refClass, "\" />")
          );
        }).join('\n'), "\n          </div>          \n        </div>                  \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$el button'),
    value: function value(e) {
      var selected = this.refs.$el.$('.selected');
      if (selected) selected.removeClass('selected');
      e.$dt.addClass('selected');
    }
  }]);

  return ComponentItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ComponentItems: ComponentItems_ComponentItems
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/CustomComponentItems.js








function CustomComponentItems_createSuper(Derived) { var hasNativeReflectConstruct = CustomComponentItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CustomComponentItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var CustomComponentItems_CustomComponentItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(CustomComponentItems, _EditorElement);

  var _super = CustomComponentItems_createSuper(CustomComponentItems);

  function CustomComponentItems() {
    classCallCheck_default()(this, CustomComponentItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(CustomComponentItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='custom-component-items'>\n        <div class='custom-component-items-tools'>\n          <div class='title'><label>Component Assets</label></div>\n          <div class='tools'>\n            <button type=\"button\" ref='$addCustomComponent' data-tooltip=\"Add Custom Component\" data-direction=\"bottom right\">".concat(icon["a" /* default */].add, "</button>\n          </div>\n        </div>\n        <div class='custom-component-list' ref='$list'></div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$list'),
    value: function () {
      var _value = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var data;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.$storageManager.getCustomComponentList();

              case 2:
                data = _context.sent;
                return _context.abrupt("return", data.map(function (it) {
                  return (
                    /*html*/
                    "\n        <div class='custom-component-preview' draggable=\"true\" data-preview-id=\"".concat(it.id, "\">\n          <div class='thumbnail'><img src='").concat(it.preview, "' /></div>\n          <div class='tools'>\n            <div class='title'>").concat(it.component.name || it.component.itemType, "</div>\n            <div class='buttons'>\n              <button type=\"button\" class='remove-custom-component-preview' data-preview-id=\"").concat(it.id, "\">").concat(icon["a" /* default */].remove, "</button>\n            </div>\n          </div>\n        </div>\n      ")
                  );
                }));

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function value() {
        return _value.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["CLICK"])('$list .remove-custom-component-preview'),
    value: function () {
      var _value2 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee2(e) {
        var id;
        return regenerator_default.a.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!confirm(this.$i18n('app.confirm.message.custom-component.items.removeCustomComponent'))) {
                  _context2.next = 5;
                  break;
                }

                id = e.$dt.data('preview-id');
                _context2.next = 4;
                return this.$storageManager.removeCustomComponent(id);

              case 4:
                this.refresh();

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function value(_x) {
        return _value2.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["DRAGSTART"])('$list .custom-component-preview'),
    value: function value(e) {
      var id = e.$dt.data('preview-id');
      e.dataTransfer.effectAllowed = "copy";
      e.dataTransfer.setData("text/custom-component", id);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('afterSaveCustomComponent'),
    value: function () {
      var _value3 = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee3(datauri) {
        return regenerator_default.a.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.$storageManager.saveCustomComponent(datauri);

              case 2:
                this.refresh();

              case 3:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function value(_x2) {
        return _value3.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["CLICK"])('$addCustomComponent'),
    value: function value(e) {
      this.emit('savePNG', 'afterSaveCustomComponent');
    }
  }]);

  return CustomComponentItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  CustomComponentItems: CustomComponentItems_CustomComponentItems
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/Inspector.js






function Inspector_createSuper(Derived) { var hasNativeReflectConstruct = Inspector_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function Inspector_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var Inspector_Inspector = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(Inspector, _EditorElement);

  var _super = Inspector_createSuper(Inspector);

  function Inspector() {
    classCallCheck_default()(this, Inspector);

    return _super.apply(this, arguments);
  }

  createClass_default()(Inspector, [{
    key: "initState",
    value: function initState() {
      return {
        selectedIndex: 1
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"feature-control inspector\">\n        <div>\n          <div class=\"tab number-tab\" ref=\"$tab\">\n            <div class=\"tab-header\" ref=\"$header\">\n              <div class=\"tab-item selected\" data-value=\"1\" title='".concat(this.$i18n('inspector.tab.title.style'), "'>\n                <label class='icon'>").concat(icon["a" /* default */].palette, "</label>\n              </div>\n              <div class=\"tab-item\" data-value=\"2\" title='").concat(this.$i18n('inspector.tab.title.text'), "'>\n                <label class='icon'>").concat(icon["a" /* default */].title, "</label>\n              </div>              \n              <div class=\"tab-item\" data-value=\"3\" title=\"").concat(this.$i18n('inspector.tab.title.transition'), "\">\n                <label>").concat(icon["a" /* default */].flash_on, "</label>\n              </div>\n              <div class=\"tab-item\" data-value=\"5\" title='").concat(this.$i18n('inspector.tab.title.code'), "'>\n                <label class='icon'>").concat(icon["a" /* default */].code, "</label>\n              </div>       \n              <div class=\"tab-item\" data-value=\"6\" title='").concat(this.$i18n('inspector.tab.title.history'), "'>\n                <label class='icon'>").concat(icon["a" /* default */].expand, "</label>\n              </div>                                                   \n            </div>\n            <div class=\"tab-body\" ref=\"$body\">\n\n              <div class=\"tab-content selected scrollbar\" data-value=\"1\">\n                <object refClass=\"AlignmentProperty\" />\n\n                <!-- Default Property --> \n                <object refClass=\"PositionProperty\" />\n                <!--SizeProperty / --> \n                <object refClass=\"AppearanceProperty\" />\n\n                <!-- ArtBoard --> \n                <object refClass=\"ArtBoardSizeProperty\" />                    \n                \n                <!-- SVG Item --> \n                <object refClass=\"SVGItemProperty\" />              \n\n                <!-- Image --> \n                <object refClass=\"ImageProperty\" />\n\n                <!-- Video --> \n                <object refClass=\"VideoProperty\" />\n\n                <!-- IFrame --> \n                <object refClass=\"IFrameProperty\" />                \n\n                <!-- Component -->\n                <object refClass=\"ComponentProperty\" />                \n                \n                <!-- Appearance --> \n\n                <object refClass=\"BackgroundImageProperty\" />                \n                <object refClass=\"PatternProperty\" />\n                <object refClass=\"BorderNewProperty\" />\n                <object refClass=\"BorderRadiusProperty\" />\n\n                <object refClass=\"BoxModelProperty\" />                \n                <object refClass=\"LayoutProperty\" />\n                <object refClass=\"FlexLayoutItemProperty\" />\n                <object refClass=\"GridLayoutItemProperty\" />      \n\n                <!-- effect -->\n                <object refClass=\"BoxShadowProperty\" />\n                <object refClass=\"FilterProperty\" />\n                <object refClass=\"BackdropFilterProperty\" />\n                <object refClass=\"ClipPathProperty\" />       \n                \n                <!-- SVG -->\n                <!-- <PathDataProperty /> -->\n\n                <!-- transform --> \n                <object refClass=\"TransformOriginProperty\" />\n                <object refClass=\"TransformProperty\" />\n                <!-- <PerspectiveProperty /> -->\n                <!-- <PerspectiveOriginProperty /> -->                 \n\n                <!-- tool -->                \n                <object refClass=\"ExportProperty\" />\n\n                <div class='empty'></div>\n              </div>     \n              <div class=\"tab-content scrollbar\" data-value=\"2\">\n\n                <!-- <ContentProperty /> -->    \n                <object refClass=\"SVGTextProperty\" />                        \n                <object refClass=\"FontProperty\" />\n                <object refClass=\"TextProperty\" />\n                <object refClass=\"TextShadowProperty\" />\n                <object refClass=\"TextFillProperty\" />\n                <object refClass=\"FontSpacingProperty\" />\n                <object refClass=\"TextClipProperty\" />  \n                <div class='empty'></div>\n              </div>                   \n              <div class='tab-content scrollbar' data-value='3'>\n                <!--object refClass=\"MotionProperty\" /-->\n                <object refClass=\"TransitionProperty\" />                            \n                <object refClass=\"AnimationProperty\" />\n                <object refClass=\"KeyframeProperty\" />                          \n                <object refClass=\"SelectorProperty\" />\n                <div class='empty'></div>                \n              </div>                        \n              <div class=\"tab-content\" data-value=\"5\">\n                <object refClass=\"CodeViewProperty\" />\n                <div class='empty'></div>                           \n              </div>       \n              \n              <div class=\"tab-content\" data-value=\"6\">\n                <object refClass=\"HistoryProperty\" />\n                <div class='empty'></div>                           \n              </div>                     \n            </div>\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$header .tab-item:not(.empty-item)"),
    value: function value(e) {
      var selectedIndex = +e.$dt.attr('data-value');

      if (this.state.selectedIndex === selectedIndex) {
        return;
      }

      this.$el.$$("[data-value=\"".concat(this.state.selectedIndex, "\"]")).forEach(function (it) {
        return it.removeClass('selected');
      });
      this.$el.$$("[data-value=\"".concat(selectedIndex, "\"]")).forEach(function (it) {
        return it.addClass('selected');
      });
      this.setState({
        selectedIndex: selectedIndex
      }, false);
    }
  }]);

  return Inspector;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  Inspector: Inspector_Inspector
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/ObjectItems.js






function ObjectItems_createSuper(Derived) { var hasNativeReflectConstruct = ObjectItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ObjectItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ObjectItems_ObjectItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ObjectItems, _EditorElement);

  var _super = ObjectItems_createSuper(ObjectItems);

  function ObjectItems() {
    classCallCheck_default()(this, ObjectItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(ObjectItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='object-items'>\n        <div>\n          <object refClass=\"LayerTreeProperty\" />\n        </div>\n      </div>\n    "
      );
    }
  }]);

  return ObjectItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ObjectItems: ObjectItems_ObjectItems
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/LibraryItems.js






function LibraryItems_createSuper(Derived) { var hasNativeReflectConstruct = LibraryItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LibraryItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var LibraryItems_LibraryItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LibraryItems, _EditorElement);

  var _super = LibraryItems_createSuper(LibraryItems);

  function LibraryItems() {
    classCallCheck_default()(this, LibraryItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(LibraryItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='library-items'>\n        <div>\n          <object label=\"Search\" refClass=\"TextEditor\" key=\"search\" onchange=\"onTextChange\" />\n        </div>\n        ".concat(this.$menuManager.getTargetMenuItems('library').map(function (it) {
          return (
            /*html*/
            "<object refClass=\"".concat(it.refClass, "\" />")
          );
        }).join('\n'), "\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('onTextChange') + Object(Event["DEBOUNCE"])(300),
    value: function value(key, _value) {
      this.broadcast('search', _value);
    }
  }]);

  return LibraryItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LibraryItems: LibraryItems_LibraryItems
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/PreviewToolMenu.js






function PreviewToolMenu_createSuper(Derived) { var hasNativeReflectConstruct = PreviewToolMenu_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PreviewToolMenu_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var PreviewToolMenu_PreviewToolMenu = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PreviewToolMenu, _EditorElement);

  var _super = PreviewToolMenu_createSuper(PreviewToolMenu);

  function PreviewToolMenu() {
    classCallCheck_default()(this, PreviewToolMenu);

    return _super.apply(this, arguments);
  }

  createClass_default()(PreviewToolMenu, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='preview-tool-menu'>\n        <div class='items'>\n          <object refClass=\"Download\" />\n          <object refClass=\"Save\" />\n          <object refClass=\"Manual\" />          \n        </div>                \n      </div>\n    "
      );
    }
  }]);

  return PreviewToolMenu;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PreviewToolMenu: PreviewToolMenu_PreviewToolMenu
});
// EXTERNAL MODULE: ./src/el/editor/shortcuts/index.js + 46 modules
var shortcuts = __webpack_require__(86);

// EXTERNAL MODULE: ./src/el/base/functions/detect.js
var detect = __webpack_require__(88);

// CONCATENATED MODULE: ./src/el/editor/ui/control/ShortCutItems.js






function ShortCutItems_createSuper(Derived) { var hasNativeReflectConstruct = ShortCutItems_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ShortCutItems_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var keyUnitCode = {
  'option': '⌥',
  'cmd': '⌘',
  'shift': '⇧',
  'alt': '⎇',
  'ctrl': '⌃',
  'enter': '⏎',
  'escape': '⎋',
  'arrowdown': '↓',
  'arrowup': '↑',
  'arrowleft': '←',
  'arrowright': '→',
  'backspace': 'Delete',
  'minus': '-',
  'equal': '+'
};

function convertKeyString(key) {
  return key.toLowerCase().split('+').map(function (it) {
    return keyUnitCode[it] || it;
  }).join(' + ');
}

var ShortCutItems_ShortCutItems = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ShortCutItems, _EditorElement);

  var _super = ShortCutItems_createSuper(ShortCutItems);

  function ShortCutItems() {
    classCallCheck_default()(this, ShortCutItems);

    return _super.apply(this, arguments);
  }

  createClass_default()(ShortCutItems, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='shortcut-items'></div>\n    "
      );
    }
  }, {
    key: Object(Event["LOAD"])('$el'),
    value: function value() {
      var name = Object(detect["a" /* os */])();
      return shortcuts["a" /* default */].map(function (it) {
        return (
          /*html*/
          "\n        <div class='shortcut-item'>\n          <div class='command'>\n            <label>".concat(it.description, "</label>\n            <span><kbd>").concat(convertKeyString(it[name] || it.key), "</kbd></span>\n          </div>\n          <div class='when'>").concat(it.when, "</div>\n        </div>\n      ")
        );
      });
    }
  }]);

  return ShortCutItems;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ShortCutItems: ShortCutItems_ShortCutItems
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/LayerTab.js






function LayerTab_createSuper(Derived) { var hasNativeReflectConstruct = LayerTab_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayerTab_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













var LayerTab_LayerTab = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LayerTab, _EditorElement);

  var _super = LayerTab_createSuper(LayerTab);

  function LayerTab() {
    classCallCheck_default()(this, LayerTab);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayerTab, [{
    key: "initState",
    value: function initState() {
      return {
        selectedIndex: 2
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='layer-tab'>\n        <div class=\"tab number-tab side-tab side-tab-left\" data-selected-value=\"2\" ref=\"$tab\">\n          <div class=\"tab-header\" ref=\"$header\">   \n            <div class=\"tab-item selected\" data-value=\"2\" data-direction=\"right\" data-tooltip=\"".concat(this.$i18n('app.tab.title.layers'), "\">\n              <label>").concat(icon["a" /* default */].layers, "</label>\n            </div>            \n            <div class='tab-item' data-value='3' data-direction=\"right\"  data-tooltip=\"").concat(this.$i18n('app.tab.title.libraries'), "\">\n              <label>").concat(icon["a" /* default */].auto_awesome, "</label>\n            </div>                     \n            <div class='tab-item' data-value='5' data-direction=\"right\"  data-tooltip=\"").concat(this.$i18n('app.tab.title.assets'), "\">\n              <label>").concat(icon["a" /* default */].apps, "</label>\n            </div>   \n            <div class='tab-item' data-value='6' data-direction=\"right\"  data-tooltip=\"").concat(this.$i18n('app.tab.title.artboards'), "\">\n              <label>").concat(icon["a" /* default */].artboard, "</label>\n            </div>            \n            <div class='tab-item' data-value='4' data-direction=\"right\"  data-tooltip=\"").concat(this.$i18n('app.tab.title.components'), "\">\n              <label>").concat(icon["a" /* default */].plugin, "</label>\n            </div>\n          </div>\n          <div class=\"tab-body\" ref=\"$body\">\n            <div class=\"tab-content selected\" data-value=\"2\">\n              <object refClass=\"ObjectItems\" />\n            </div>\n            <div class='tab-content' data-value='3'>\n              <object refClass=\"LibraryItems\" />\n            </div>            \n            <div class='tab-content' data-value='4'>\n              <object refClass=\"ComponentItems\" />\n            </div>    \n            <div class='tab-content' data-value='5'>\n              <object refClass=\"AssetItems\" />            \n              <div class='assets'>\n                <object refClass=\"ColorAssetsProperty\" />\n                <object refClass=\"GradientAssetsProperty\" />    \n                <object refClass=\"PatternAssetsProperty\" />    \n                <object refClass=\"ImageAssetsProperty\" />      \n                <object refClass=\"VideoAssetsProperty\" />       \n                <object refClass=\"SVGFilterAssetsProperty\" />                \n              </div>\n            </div>\n            <div class='tab-content' data-value='6'>\n              <object refClass=\"ArtboardItems\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$header .tab-item:not(.extra-item)"),
    value: function value(e) {
      var selectedIndex = +e.$dt.attr('data-value');

      if (this.state.selectedIndex === selectedIndex) {
        return;
      }

      this.$el.$$("[data-value=\"".concat(this.state.selectedIndex, "\"]")).forEach(function (it) {
        return it.removeClass('selected');
      });
      this.$el.$$("[data-value=\"".concat(selectedIndex, "\"]")).forEach(function (it) {
        return it.addClass('selected');
      });
      this.setState({
        selectedIndex: selectedIndex
      }, false);
    }
  }]);

  return LayerTab;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LayerTab: LayerTab_LayerTab
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/ObjectList.js






function ObjectList_createSuper(Derived) { var hasNativeReflectConstruct = ObjectList_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ObjectList_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ObjectList_ObjectList = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ObjectList, _EditorElement);

  var _super = ObjectList_createSuper(ObjectList);

  function ObjectList() {
    classCallCheck_default()(this, ObjectList);

    return _super.apply(this, arguments);
  }

  createClass_default()(ObjectList, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"feature-control object-list\">\n        <object refClass=\"LayerTab\" />\n      </div>\n    "
      );
    }
  }]);

  return ObjectList;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ObjectList: ObjectList_ObjectList
});
// EXTERNAL MODULE: ./src/el/base/UIElement.js + 4 modules
var UIElement = __webpack_require__(28);

// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/TimelineObjectList.js







function TimelineObjectList_createSuper(Derived) { var hasNativeReflectConstruct = TimelineObjectList_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineObjectList_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PROPERTY_TITLE = {
  'stroke-dasharray': 'Stroke Dash Array',
  'stroke-dashoffset': 'Stroke Dash Offset',
  'stroke-linejoin': 'Stroke Line Join'
};

var getPropertyTitle = function getPropertyTitle(key) {
  var defaultTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return PROPERTY_TITLE[key] || defaultTitle || key;
};

var TimelineObjectList_TimelineObjectList = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TimelineObjectList, _EditorElement);

  var _super = TimelineObjectList_createSuper(TimelineObjectList);

  function TimelineObjectList() {
    classCallCheck_default()(this, TimelineObjectList);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineObjectList, [{
    key: Object(Event["SUBSCRIBE"])('refreshCanvas', 'refreshSelection') + Object(Event["DEBOUNCE"])(1000),
    value: function value() {
      this.refresh();
    }
  }, {
    key: "makeTimelineObjectRow",
    value: function makeTimelineObjectRow(animation) {
      var _this = this;

      var project = this.$selection.currentProject;
      var obj = project.searchById(animation.id);

      if (!obj) {
        return;
      }

      var selected = this.$timeline.checkLayer(obj.id);
      var layer = project.searchById(obj.id);
      return (
        /*html*/
        "\n        <div class='timeline-object' data-timeline-animation-id=\"".concat(obj.id, "\">\n            <div class='timeline-object-row layer' data-selected='").concat(selected, "' data-layer-id='").concat(obj.id, "' data-property=''>\n                <div class='icon'>").concat(icon["a" /* default */].chevron_right, "</div>\n                <div class='title'> ").concat(obj.name, "</div>\n                <div class='tools'>\n                    <button type=\"button\" class='remove-timeline' data-layer-id='").concat(obj.id, "'>").concat(icon["a" /* default */].remove, "</button>\n                    <button type=\"button\" class='empty'></button>                    \n                </div>\n            </div>\n\n            ").concat(animation.properties.map(function (property) {
          var selected = _this.$timeline.checkProperty(obj.id, property.property);

          return (
            /*html*/
            "\n                <div class='timeline-object-row layer-property' data-selected='".concat(selected, "' data-layer-id='").concat(obj.id, "' data-property='").concat(property.property, "'>\n                  <div class='icon'></div>                    \n                    <div class='title'>").concat(getPropertyTitle(property.property), "</div>\n                    <div class='current-value'>\n                      ").concat(property.property === 'd' ? layer.totalLength : '', "\n                      ").concat(property.property === 'points' ? layer.totalLength : '', "\n                    </div>\n                    <div class='tools'>\n                        <button type=\"button\" class='remove' data-layer-id='").concat(obj.id, "' data-property='").concat(property.property, "'>").concat(icon["a" /* default */].remove, "</button>\n                        <button type=\"button\" class='add' data-layer-id='").concat(obj.id, "' data-property='").concat(property.property, "'></button>\n                    </div>\n                </div>")
          );
        }).join(''), "                                                      \n        </div>\n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='timeline-object-list'></div>\n        "
      );
    }
  }, {
    key: Object(Event["LOAD"])() + Event["DOMDIFF"],
    value: function value() {
      var _this2 = this;

      var project = this.$selection.currentProject;
      if (!project) return '';
      var selectedTimeline = project.getSelectedTimeline();
      if (!selectedTimeline) return '';
      return selectedTimeline.animations.map(function (animation) {
        return _this2.makeTimelineObjectRow(animation);
      });
    }
  }, {
    key: "refreshSelection",
    value: function refreshSelection() {
      var _this3 = this;

      this.$el.$$('[data-selected="true"]').forEach(function (it) {
        it.attr('data-selected', "false");
      });
      this.$timeline.each(function (it) {
        var $el = _this3.$el.$("[data-layer-id=\"".concat(it.layerId, "\"][data-property=\"").concat(it.property, "\"]"));

        $el && $el.attr('data-selected', 'true');
      });
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer .title'),
    value: function value(e) {
      var container = e.$dt.closest('timeline-object');
      container.toggleClass('collapsed');
      var layerId = e.$dt.closest('timeline-object-row').attr('data-layer-id');
      this.$timeline.selectLayer(layerId);
      this.$timeline.toggleLayerContainer(container.attr('data-timeline-animation-id'));
      this.refreshSelection();
      this.emit('toggleTimelineObjectRow', layerId, container.hasClass('collapsed'));
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer .add-property'),
    value: function value(e) {
      var $row = e.$dt.closest('timeline-object-row');
      var property = $row.$('.property-select').val();
      var layerId = e.$dt.attr('data-layer-id');

      if (property) {
        var current = this.$selection.current;
        this.emit('addTimelineProperty', {
          layerId: layerId,
          property: property,
          value: current[property]
        });
      }
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer .remove-timeline'),
    value: function value(e) {
      var layerId = e.$dt.attr('data-layer-id');

      if (layerId) {
        this.emit('removeTimeline', layerId);
      }
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer-property .add'),
    value: function value(e) {
      var layerId = e.$dt.attr('data-layer-id');
      var property = e.$dt.attr('data-property');

      if (property) {
        this.emit('copyTimelineProperty', layerId, property);
      }
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer-property .remove'),
    value: function value(e) {
      var layerId = e.$dt.attr('data-layer-id');
      var property = e.$dt.attr('data-property');

      if (property) {
        this.emit('removeTimelineProperty', layerId, property);
      }
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-object-row.layer-property .title'),
    value: function value(e) {
      var _e$$dt$closest$attrs = e.$dt.closest('timeline-object-row').attrs('data-layer-id', 'data-property'),
          _e$$dt$closest$attrs2 = slicedToArray_default()(_e$$dt$closest$attrs, 2),
          layerId = _e$$dt$closest$attrs2[0],
          property = _e$$dt$closest$attrs2[1];

      this.$timeline.selectProperty(layerId, property);
      this.refreshSelection();
      this.emit('refreshTimeline');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline'),
    value: function value() {
      this.refresh();
    }
  }]);

  return TimelineObjectList;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TimelineObjectList: TimelineObjectList_TimelineObjectList
});
// EXTERNAL MODULE: ./src/el/base/functions/time.js
var functions_time = __webpack_require__(29);

// EXTERNAL MODULE: ./src/el/editor/parser/PathParser.js
var PathParser = __webpack_require__(32);

// EXTERNAL MODULE: ./src/el/editor/interpolate/interpolate-functions/offset-path/makeInterpolateOffset.js + 3 modules
var makeInterpolateOffset = __webpack_require__(139);

// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/TimelineKeyframeList.js








function TimelineKeyframeList_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TimelineKeyframeList_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TimelineKeyframeList_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TimelineKeyframeList_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TimelineKeyframeList_createSuper(Derived) { var hasNativeReflectConstruct = TimelineKeyframeList_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineKeyframeList_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var PADDING = 20;

var TimelineKeyframeList_TimelineKeyframeList = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TimelineKeyframeList, _EditorElement);

  var _super = TimelineKeyframeList_createSuper(TimelineKeyframeList);

  function TimelineKeyframeList() {
    classCallCheck_default()(this, TimelineKeyframeList);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineKeyframeList, [{
    key: "config",
    value: function config(key) {
      return this.parent.state[key];
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        rect: null
      };
    }
  }, {
    key: "calculateTimeToPosition",
    value: function calculateTimeToPosition(offsetTime, startTime, endTime) {
      var rate = (offsetTime - startTime) / (endTime - startTime);
      return unit_Length["a" /* Length */].px(this.rect.totalWidth * rate + PADDING / 2);
    }
  }, {
    key: "makeSubOffset",
    value: function makeSubOffset(property, value) {
      var subOffset = [];

      if (property === 'offset-path') {
        var _value$split$map = value.split(',').map(function (it) {
          return it.trim();
        }),
            _value$split$map2 = slicedToArray_default()(_value$split$map, 1),
            id = _value$split$map2[0];

        var pathLayer = this.$selection.currentProject.searchById(id);

        if (pathLayer) {
          value = pathLayer.d;
        }
      } else {
        value = null;
      }

      if (value) {
        var parser = new PathParser["a" /* default */](value);

        var _makeInterpolateOffse = Object(makeInterpolateOffset["a" /* default */])(parser.segments),
            totalLength = _makeInterpolateOffse.totalLength,
            interpolateList = _makeInterpolateOffse.interpolateList;

        var prevLength = 0;
        subOffset = interpolateList.map(function (it) {
          var obj = {
            totalLength: totalLength,
            length: it.length + prevLength
          };
          prevLength += it.length;
          return obj;
        });
        subOffset.pop(); // delete last length
      }

      return subOffset;
    }
  }, {
    key: "makeKeyframe",
    value: function makeKeyframe(layerId, timeline, property) {
      var _this = this;

      var list = property.keyframes.filter(function (offset) {
        return timeline.displayStartTime <= offset.time && offset.time <= timeline.displayEndTime;
      }).map(function (offset, index) {
        var left = _this.calculateTimeToPosition(offset.time, timeline.displayStartTime, timeline.displayEndTime);

        var subOffset = _this.makeSubOffset(property.property, offset.value);

        return TimelineKeyframeList_objectSpread(TimelineKeyframeList_objectSpread({
          left: left
        }, offset), {}, {
          subOffset: subOffset,
          index: index
        });
      });
      return (
        /*html*/
        "\n        <div class='keyframe-back' \n            data-layer-id=\"".concat(layerId, "\"\n            data-property=\"").concat(property.property, "\"\n        >\n\n            ").concat(list.map(function (it, index) {
          var next = list[index + 1];
          if (!next) return '';
          var start = unit_Length["a" /* Length */].px(it.left.value);
          var width = unit_Length["a" /* Length */].px(next.left.value - it.left.value);

          var selected = _this.$timeline.checked(it.id) && _this.$timeline.checked(next.id);

          return (
            /*html*/
            "\n                    <div \n                        data-selected=\"".concat(selected, "\"\n                        class=\"offset-line\"\n                        style='left: ").concat(start, "; width: ").concat(width, "'} ></div>\n\n                    ").concat(it.subOffset.map(function (subOffset, subOffsetIndex) {
              var subOffsetLeft = unit_Length["a" /* Length */].px(it.left.value + subOffset.length / subOffset.totalLength * width.value);
              return (
                /*html*/
                "\n                        <div \n                            class='".concat(Object(func["OBJECT_TO_CLASS"])({
                  'sub-offset': true
                }), "'    \n                            style='left: ").concat(subOffsetLeft, "'\n                            data-offset-id=\"").concat(it.id, "\"\n                            data-layer-id=\"").concat(layerId, "\"\n                            data-property=\"").concat(property.property, "\"\n                            data-suboffset-index=\"").concat(subOffsetIndex, "\"\n                        ></div>\n        \n                        ")
              );
            }).join(''), "\n                ")
          );
        }).join(''), "\n        </div>\n        <div class='keyframe'>\n\n            ").concat(list.map(function (it) {
          var selected = _this.$timeline.checked(it.id);

          return (
            /*html*/
            "<div class='offset' style='left: ".concat(it.left, "'\n                    data-selected=\"").concat(selected, "\"\n                    data-offset-id=\"").concat(it.id, "\"\n                    data-layer-id=\"").concat(layerId, "\"\n                    data-property=\"").concat(property.property, "\"\n                    data-offset-index=\"").concat(it.index, "\"\n                ></div>\n\n                ")
          );
        }).join(''), "\n        </div>")
      );
    }
  }, {
    key: "makeTimelineKeyframeRow",
    value: function makeTimelineKeyframeRow(timeline, animation) {
      var _this2 = this;

      var obj = this.$selection.currentProject.searchById(animation.id);

      if (!obj) {
        return;
      }

      var key = {};
      animation.properties.map(function (property) {
        return property.keyframes.map(function (it) {
          return it.time;
        });
      }).forEach(function (it) {
        it.forEach(function (a) {
          return key[a] = true;
        });
      });
      var times = Object.keys(key).map(function (it) {
        return +it;
      });
      return (
        /*html*/
        "\n        <div class='timeline-keyframe ".concat(Object(func["OBJECT_TO_CLASS"])({
          collapsed: animation.collapsed
        }), "' data-timeline-layer-id=\"").concat(obj.id, "\">\n            <div \n                class='timeline-keyframe-row layer' \n                data-row-index=\"").concat(this.state.rowIndex++, "\"\n                data-layer-id=\"").concat(obj.id, "\"\n            >\n                <div class='keyframe-shadow'>\n                ").concat(times.map(function (time) {
          var left = _this2.calculateTimeToPosition(time, timeline.displayStartTime, timeline.displayEndTime);

          return (
            /*html*/
            "<div class='offset' style='left: ".concat(left, "'></div>")
          );
        }).join(''), "\n                </div>\n            </div>\n\n            ").concat(animation.properties.map(function (property) {
          return (
            /*html*/
            "\n                <div \n                    class='timeline-keyframe-row layer-property'\n                    data-row-index=\"".concat(_this2.state.rowIndex++, "\"\n                    data-property=\"").concat(property.property, "\"\n                    data-layer-id=\"").concat(obj.id, "\"\n                >\n                    ").concat(property.keyframes.length ? _this2.makeKeyframe(obj.id, timeline, property) : '', "\n                </div>")
          );
        }).join(''), "                                                      \n        </div>\n        ")
      );
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='timeline-keyframe-container' tabIndex=\"-1\">\n                <div ref='$keyframeList' class='timeline-keyframe-list'></div>\n                <div class='drag-area' ref='$dragArea'></div>\n            </div>\n        "
      );
    }
  }, {
    key: "hasDragPlace",
    value: function hasDragPlace(e) {
      var dom = Dom["a" /* default */].create(e.target);
      return dom.hasClass('offset') === false && dom.hasClass('offset-line') === false;
    }
  }, {
    key: "getRowIndex",
    value: function getRowIndex(index) {
      if (Object(func["isUndefined"])(index)) {
        index = this.state.rowIndex;
      } else {
        index = +index;
      }

      return index;
    }
  }, {
    key: Object(Event["KEYUP"])('$el') + Object(Event["KEY"])('Backspace'),
    value: function value(e) {
      this.emit('deleteTimelineKeyframe');
    }
  }, {
    key: "isNotMoved",
    value: function isNotMoved(dx, dy) {
      return dx === 0 && dy === 0;
    }
  }, {
    key: Object(Event["POINTERSTART"])('$el') + Object(Event["IF"])('hasDragPlace') + Object(Event["MOVE"])('moveDragArea') + Object(Event["END"])('moveEndDragArea'),
    value: function value(e) {
      this.dragXY = this.getRealPosition(e);
      this.startRowIndex = this.getRowIndex(Dom["a" /* default */].create(e.target).attr('data-row-index'));
      this.left = null;
      this.width = null;
    }
  }, {
    key: "moveDragArea",
    value: function moveDragArea(dx, dy) {
      if (this.isNotMoved(dx, dy)) return;
      var left = dx < 0 ? unit_Length["a" /* Length */].px(this.dragXY.x + dx) : unit_Length["a" /* Length */].px(this.dragXY.x);
      var top = dy < 0 ? unit_Length["a" /* Length */].px(this.dragXY.y + dy) : unit_Length["a" /* Length */].px(this.dragXY.y);
      var width = unit_Length["a" /* Length */].px(Math.abs(dx));
      var height = unit_Length["a" /* Length */].px(Math.abs(dy));
      this.refs.$dragArea.css({
        left: left,
        top: top,
        width: width,
        height: height
      });
      this.left = left;
      this.width = width;
    }
  }, {
    key: "getLayerList",
    value: function getLayerList() {
      var rowIndex = this.getRowIndex(Dom["a" /* default */].create(this.$config.get('bodyEvent').target).attr('data-row-index'));
      var startIndex = Math.min(rowIndex, this.startRowIndex);
      var endIndex = Math.max(rowIndex, this.startRowIndex);
      var arr = [];

      for (var i = startIndex; i <= endIndex; i++) {
        arr.push("[data-row-index=\"".concat(i, "\"]"));
      }

      var list = this.refs.$keyframeList.$$(arr.join(',')).map(function (it) {
        var _it$attrs = it.attrs('data-layer-id', 'data-property'),
            _it$attrs2 = slicedToArray_default()(_it$attrs, 2),
            layerId = _it$attrs2[0],
            property = _it$attrs2[1];

        return {
          layerId: layerId,
          property: property
        };
      });
      return list;
    }
  }, {
    key: "getTime",
    value: function getTime(start, end, rate) {
      return start + (end - start) * rate;
    }
  }, {
    key: "moveEndDragArea",
    value: function moveEndDragArea(dx, dy) {
      if (this.isNotMoved(dx, dy)) return;

      if (!this.left) {
        if (this.doubleClicked) {
          this.doubleClicked = false;
        } else {
          this.$timeline.empty();
          this.refresh();
        }

        return;
      }

      this.refs.$dragArea.css({
        left: null,
        top: null,
        width: null,
        height: null
      });
      var width = this.$el.width();
      var startTime = this.getTimeRateByPosition(this.left.value / width);
      var endTime = this.getTimeRateByPosition((this.left.value + this.width.value) / width);
      this.$timeline.selectBySearch(this.getLayerList(), startTime, endTime);
      this.refresh();
      this.startRowIndex = null;
    }
  }, {
    key: Object(Event["LOAD"])('$keyframeList') + Event["DOMDIFF"],
    value: function value() {
      var _this3 = this;

      var project = this.$selection.currentProject;
      if (!project) return '';
      var selectedTimeline = project.getSelectedTimeline();
      if (!selectedTimeline) return '';

      if (!this.state.rect) {
        this.state.rect = this.$el.rect();
      }

      var width = this.state.rect.width;
      var totalWidth = width - PADDING;
      var startX = PADDING / 2;
      this.rect = {
        totalWidth: totalWidth,
        startX: startX
      };
      this.state.rowIndex = 0;
      return selectedTimeline.animations.map(function (animation) {
        return _this3.makeTimelineKeyframeRow(selectedTimeline, animation);
      });
    }
  }, {
    key: Object(Event["CLICK"])('$el .timeline-keyframe-row.layer .title'),
    value: function value(e) {
      e.$dt.closest('timeline-keyframe').toggleClass('collapsed');
    }
  }, {
    key: "currentTimeline",
    get: function get() {
      var project = this.$selection.currentProject;

      if (project) {
        return project.getSelectedTimeline();
      }
    }
  }, {
    key: "hasCurrentTimeline",
    value: function hasCurrentTimeline() {
      return !!this.currentTimeline;
    }
  }, {
    key: "getRealPosition",
    value: function getRealPosition(e) {
      var rect = this.$el.rect();
      var pos = {
        x: e.xy.x - rect.left,
        width: rect.width,
        y: e.xy.y - rect.top,
        height: rect.height
      };
      var min = 10;
      var max = pos.width - 10;

      if (pos.x < min) {
        pos.x = min;
      }

      if (pos.x > max) {
        pos.x = max;
      }

      pos.rate = (pos.x - min) / (max - min);
      return pos;
    }
  }, {
    key: "getTimeRateByPosition",
    value: function getTimeRateByPosition(rate) {
      var selectedTimeline = this.currentTimeline;

      if (selectedTimeline) {
        var displayStartTime = selectedTimeline.displayStartTime,
            displayEndTime = selectedTimeline.displayEndTime;
        return this.getTime(displayStartTime, displayEndTime, rate);
      }

      return 0;
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$el .layer-property'),
    value: function value(e) {
      var _e$$dt$attrs = e.$dt.attrs('data-layer-id', 'data-property'),
          _e$$dt$attrs2 = slicedToArray_default()(_e$$dt$attrs, 2),
          layerId = _e$$dt$attrs2[0],
          property = _e$$dt$attrs2[1];

      var time = this.getTimeRateByPosition(this.getRealPosition(e).rate);
      this.emit('addTimelineKeyframe', {
        layerId: layerId,
        property: property,
        time: time
      });
      this.doubleClicked = true;
      this.refresh();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$el .layer-property .offset') + Object(Event["IF"])('hasCurrentTimeline') + Object(Event["MOVE"])('moveOffset') + Object(Event["END"])('moveEndOffset'),
    value: function value(e) {
      var _this4 = this;

      this.$offset = e.$dt;
      var id = this.$offset.attr('data-offset-id');
      var property = this.$offset.attr('data-property');
      var layerId = this.$offset.attr('data-layer-id');
      this.$keyframeBack = this.$offset.closest('timeline-keyframe-row').$('.keyframe-back');

      var _this$$el$rect = this.$el.rect(),
          width = _this$$el$rect.width;

      var totalWidth = width - PADDING;
      var startX = PADDING / 2;
      this.rect = {
        totalWidth: totalWidth,
        startX: startX
      };
      var project = this.$selection.currentProject;

      if (project) {
        this.offset = project.getTimelineKeyframeById(layerId, property, id);
        this.layerId = layerId;
        this.property = property;
        this.cachedOffsetTime = this.offset.time;
      }

      this.timeline = this.currentTimeline;

      if (this.$timeline.checked(id)) {// NOOP , selection 변한 없음.
      } else {
        this.$timeline.select(this.offset);
      }

      this.cachedOffsetList = {};
      this.$timeline.cachedList().forEach(function (it) {
        _this4.cachedOffsetList[it.id] = it.time;
      });
      this.emit('refreshOffsetValue', this.offset);
    }
  }, {
    key: "moveOffset",
    value: function moveOffset(dx, dy) {
      var _this5 = this;

      if (this.isNotMoved(dx, dy)) return;
      var _this$timeline = this.timeline,
          displayStartTime = _this$timeline.displayStartTime,
          displayEndTime = _this$timeline.displayEndTime,
          fps = _this$timeline.fps;
      var sign = dx < 0 ? -1 : 1;
      var dxRate = Math.abs(dx) / this.rect.totalWidth;
      var dxTime = dxRate * (displayEndTime - displayStartTime);
      this.$timeline.each(function (item) {
        var newOffsetTime = _this5.cachedOffsetList[item.id] + dxTime * sign;
        newOffsetTime = Math.max(newOffsetTime, displayStartTime);
        newOffsetTime = Math.min(newOffsetTime, displayEndTime);
        var code = Object(functions_time["d" /* timecode */])(fps, newOffsetTime);
        newOffsetTime = Object(functions_time["c" /* second */])(fps, code);
        item.time = newOffsetTime;
      });
      this.refresh();
      this.emit('refreshOffsetValue', this.offset);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('toggleTimelineObjectRow'),
    value: function value(id, isToggle) {
      this.$el.$(".timeline-keyframe[data-timeline-layer-id=\"".concat(id, "\"]")).toggleClass('collapsed', isToggle);
    }
  }, {
    key: "moveEndOffset",
    value: function moveEndOffset(dx, dy) {
      if (this.isNotMoved(dx, dy)) {
        this.refresh();
        this.emit('refreshOffsetValue', this.offset);
        return;
      }

      var project = this.$selection.currentProject;

      if (project) {
        this.$timeline.each(function (item) {
          project.sortTimelineKeyframe(item.layerId, item.property);
        });
        this.refresh();
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addTimeline', 'moveTimeline') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline', 'toggleFooterEnd'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }]);

  return TimelineKeyframeList;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TimelineKeyframeList: TimelineKeyframeList_TimelineKeyframeList
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/KeyframeTimeControl.js






function KeyframeTimeControl_createSuper(Derived) { var hasNativeReflectConstruct = KeyframeTimeControl_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyframeTimeControl_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var KeyframeTimeControl_KeyframeTimeControl = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(KeyframeTimeControl, _EditorElement);

  var _super = KeyframeTimeControl_createSuper(KeyframeTimeControl);

  function KeyframeTimeControl() {
    classCallCheck_default()(this, KeyframeTimeControl);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyframeTimeControl, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='keyframe-time-control'>\n            <div class='time-manager'>\n                <button type=\"button\" ref='$timer'>".concat(icon["a" /* default */].timer, "</button>\n                <label>\n                    <input type=\"text\" ref='$currentTime' />\n                </label>\n                <label>FPS <input type=\"number\" ref='$fps' min=\"0\" max=\"999\" /></label>\n                <label>\n                    <input type=\"text\" ref='$duration' />\n                </label>\n            </div>\n        </div>")
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refreshTimeInfo();
    }
  }, {
    key: "currentTimeline",
    get: function get() {
      var currentProject = this.$selection.currentProject;

      if (currentProject) {
        return currentProject.getSelectedTimeline();
      }

      return null;
    }
  }, {
    key: "hasCurrentTimeline",
    value: function hasCurrentTimeline() {
      return !!this.currentTimeline;
    }
  }, {
    key: "refreshTimeInfo",
    value: function refreshTimeInfo() {
      var timeline = this.currentTimeline;

      if (timeline) {
        this.refs.$currentTime.val(timeline.currentTimecode);
        this.refs.$duration.val(timeline.totalTimecode);
        this.refs.$fps.val(timeline.fps);
      }
    }
  }, {
    key: "refreshCurrentTime",
    value: function refreshCurrentTime() {
      var timeline = this.currentTimeline;

      if (timeline) {
        this.refs.$currentTime.val(timeline.currentTimecode);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('playTimeline'),
    value: function value() {
      this.refreshCurrentTime();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('moveTimeline', 'refreshSelection') + Object(Event["THROTTLE"])(10),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["KEYUP"])('$fps') + Event["ENTER"],
    value: function value(e) {
      var fps = +this.refs.$fps.val();
      var project = this.$selection.currentProject;

      if (project) {
        project.setFps(fps);
        this.emit('moveTimeline');
      }
    }
  }, {
    key: "checkNumberOrTimecode",
    value: function checkNumberOrTimecode(e) {
      var value = e.target.value.trim();

      if (+value + '' === value) {
        return true;
      } else if (value.match(/^[0-9:]+$/)) {
        return true;
      }

      return false;
    }
  }, {
    key: "checkKey",
    value: function checkKey(e) {
      if (e.key.match(/^[0-9:]+$/)) {
        return true;
      } else if (e.code === 'Backspace' || e.code === 'ArrowRight' || e.code === 'ArrowLeft') {
        return true;
      }

      return false;
    }
  }, {
    key: Object(Event["CLICK"])('$timer'),
    value: function value() {
      var project = this.$selection.currentProject;

      if (project) {
        project.seek(this.refs.$currentTime.value, function (it) {
          return true;
        });
        this.emit('playTimeline');
      }
    }
  }, {
    key: Object(Event["KEYDOWN"])('$currentTime'),
    value: function value(e) {
      if (!this.checkKey(e)) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }
  }, {
    key: Object(Event["KEYUP"])('$currentTime') + Event["ENTER"] + Object(Event["IF"])('checkNumberOrTimecode') + Object(Event["IF"])('hasCurrentTimeline') + Event["PREVENT"],
    value: function value(e) {
      var frame = this.refs.$currentTime.value;
      var project = this.$selection.currentProject;

      if (project) {
        project.setTimelineCurrentTime(frame);
      }

      this.refresh();
      this.emit('moveTimeline');
    }
  }, {
    key: Object(Event["KEYDOWN"])('$duration'),
    value: function value(e) {
      if (!this.checkKey(e)) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }
  }, {
    key: Object(Event["KEYUP"])('$duration') + Event["ENTER"] + Object(Event["IF"])('checkNumberOrTimecode') + Object(Event["IF"])('hasCurrentTimeline') + Event["PREVENT"],
    value: function value(e) {
      var frame = this.refs.$duration.value;
      var project = this.$selection.currentProject;

      if (project) {
        project.setTimelineTotalTime(frame);
      }

      this.refresh();
      this.emit('moveTimeline');
    }
  }]);

  return KeyframeTimeControl;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  KeyframeTimeControl: KeyframeTimeControl_KeyframeTimeControl
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/TimelineTopToolbar.js






function TimelineTopToolbar_createSuper(Derived) { var hasNativeReflectConstruct = TimelineTopToolbar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineTopToolbar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var TimelineTopToolbar_TimelineTopToolbar = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TimelineTopToolbar, _EditorElement);

  var _super = TimelineTopToolbar_createSuper(TimelineTopToolbar);

  function TimelineTopToolbar() {
    classCallCheck_default()(this, TimelineTopToolbar);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineTopToolbar, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='timeline-top-toolbar'>\n                <object refClass=\"KeyframeTimeControl\" />\n            </div>\n        "
      );
    }
  }]);

  return TimelineTopToolbar;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TimelineTopToolbar: TimelineTopToolbar_TimelineTopToolbar
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/KeyframeTimeView.js







function KeyframeTimeView_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function KeyframeTimeView_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { KeyframeTimeView_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { KeyframeTimeView_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function KeyframeTimeView_createSuper(Derived) { var hasNativeReflectConstruct = KeyframeTimeView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyframeTimeView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var KeyframeTimeView_PADDING = 20;

var KeyframeTimeView_KeyframeTimeView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(KeyframeTimeView, _EditorElement);

  var _super = KeyframeTimeView_createSuper(KeyframeTimeView);

  function KeyframeTimeView() {
    classCallCheck_default()(this, KeyframeTimeView);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyframeTimeView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='keyframe-time-view'>\n            <div class='time-duration'>\n                <div class='duration-handle-left'></div>\n                <div class='duration-handle-right'></div>\n                <div class='duration-slider' ref='$slider'>\n                    <div class='gauge' ref='$gauge'></div>\n                    <div class='start' ref='$start'></div>\n                    <div class='end' ref='$end'></div>\n                </div>\n            </div>\n            <canvas ref=\"$canvas\"></canvas>\n        </div>"
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refreshTimeDisplay();
      this.refreshCanvas();
    }
  }, {
    key: "currentTimeline",
    get: function get() {
      var currentProject = this.$selection.currentProject;

      if (currentProject) {
        return currentProject.getSelectedTimeline();
      }

      return null;
    }
  }, {
    key: "hasCurrentTimeline",
    value: function hasCurrentTimeline() {
      return !!this.currentTimeline;
    }
  }, {
    key: "refreshTimeDisplay",
    value: function refreshTimeDisplay() {
      var timeline = this.currentTimeline;

      if (timeline) {
        var start = unit_Length["a" /* Length */].percent(timeline.displayStartTime / timeline.totalTime * 100);
        var end = unit_Length["a" /* Length */].percent(timeline.displayEndTime / timeline.totalTime * 100);
        this.refs.$start.css('left', start);
        this.refs.$end.css('left', end);
        this.refs.$gauge.css({
          'left': start,
          'width': unit_Length["a" /* Length */].percent(end.value - start.value)
        });
      }
    }
  }, {
    key: Object(Event["POINTERSTART"])('$start') + Object(Event["IF"])('hasCurrentTimeline') + Object(Event["MOVE"])('moveStartButton'),
    value: function value(e) {
      this.sliderRect = this.refs.$slider.rect();
      this.endX = unit_Length["a" /* Length */].parse(this.refs.$end.css('left')).toPx(this.sliderRect.width);
    }
  }, {
    key: "moveStartButton",
    value: function moveStartButton() {
      var currentX = this.$config.get('pos').x - this.sliderRect.x;
      var minX = 0;
      var maxX = this.endX;
      currentX = Math.max(currentX, minX);
      currentX = Math.min(currentX, maxX);
      var displayTimeRate = currentX / this.sliderRect.width;
      this.$selection.currentProject.setDisplayStartTimeRate(displayTimeRate);
      this.refreshTimeDisplay();
      this.refreshCanvas();
      this.emit('moveTimeline');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$end') + Object(Event["IF"])('hasCurrentTimeline') + Object(Event["MOVE"])('moveEndButton'),
    value: function value(e) {
      this.sliderRect = this.refs.$slider.rect();
      this.startX = unit_Length["a" /* Length */].parse(this.refs.$start.css('left')).toPx(this.sliderRect.width);
    }
  }, {
    key: "moveEndButton",
    value: function moveEndButton() {
      var currentX = this.$config.get('pos').x - this.sliderRect.x;
      var minX = this.startX;
      var maxX = this.sliderRect.width;
      currentX = Math.max(currentX, minX);
      currentX = Math.min(currentX, maxX);
      var displayTimeRate = currentX / this.sliderRect.width;
      this.$selection.currentProject.setDisplayEndTimeRate(displayTimeRate);
      this.refreshTimeDisplay();
      this.refreshCanvas();
      this.emit('moveTimeline');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$gauge') + Object(Event["IF"])('hasCurrentTimeline') + Object(Event["MOVE"])('moveGaugeButton'),
    value: function value(e) {
      this.sliderRect = this.refs.$slider.rect();
      var _this$currentTimeline = this.currentTimeline,
          displayStartTime = _this$currentTimeline.displayStartTime,
          displayEndTime = _this$currentTimeline.displayEndTime;
      this.timelineStartTime = displayStartTime;
      this.timelineEndTime = displayEndTime;
    }
  }, {
    key: "moveGaugeButton",
    value: function moveGaugeButton(dx, dy) {
      var dxRate = dx / this.sliderRect.width;
      this.$selection.currentProject.setDisplayTimeDxRate(dxRate, this.timelineStartTime, this.timelineEndTime);
      this.refreshTimeDisplay();
      this.refreshCanvas();
      this.emit('moveTimeline');
    }
  }, {
    key: "config",
    value: function config(key) {
      return this.parent.state[key];
    }
  }, {
    key: "setConfig",
    value: function setConfig(key, value) {
      this.parent.setState(defineProperty_default()({}, key, value), false);
    }
  }, {
    key: "refreshCanvas",
    value: function refreshCanvas() {
      var timeline_grid_font_color = this.$theme('timeline_grid_font_color');
      var timeline_timeview_bottom_color = this.$theme('timeline_timeview_bottom_color');
      var timeline_line_color = this.$theme('timeline_line_color');
      var timeline = this.currentTimeline;

      if (timeline) {
        var originalRect = this.$el.rect();
        var width = originalRect.width,
            height = originalRect.height;
        var displayStartTime = timeline.displayStartTime,
            displayEndTime = timeline.displayEndTime,
            fps = timeline.fps,
            currentTime = timeline.currentTime;
        var startFrame = Math.floor(displayStartTime * fps);
        var endFrame = Math.floor(displayEndTime * fps);
        var width = originalRect.width;
        var totalFrame = endFrame - startFrame;
        var splitFrame = 5;

        if (totalFrame < 100) {
          splitFrame = 10;
        } else if (totalFrame < 1000) {
          splitFrame = 100;
        } else if (totalFrame < 10000) {
          splitFrame = 1000;
        } else if (totalFrame < 100000) {
          splitFrame = 10000;
        }

        if (startFrame % splitFrame !== 0) {
          startFrame = startFrame + (splitFrame - startFrame % splitFrame);
        }

        var textOption = {
          textAlign: 'center',
          textBaseline: 'middle',
          font: '10px sans-serif'
        };
        this.refs.$canvas.resize({
          width: width,
          height: 24
        });
        this.refs.$canvas.update(function () {
          var rect = this.rect();
          var realWidth = width - KeyframeTimeView_PADDING;
          this.drawOption(KeyframeTimeView_objectSpread({
            strokeStyle: 'rgba(204, 204, 204, 0.3)',
            lineWidth: 0.5
          }, textOption));
          var restX = 10;
          var y = 7;

          for (; startFrame < endFrame; startFrame += splitFrame) {
            var startX = (Object(functions_time["c" /* second */])(fps, startFrame) - displayStartTime) / (displayEndTime - displayStartTime) * realWidth;
            this.drawOption({
              fillStyle: timeline_grid_font_color
            });
            this.drawText(startX + restX, y, Object(functions_time["a" /* framesToTimecode */])(fps, startFrame).replace(/00\:/g, '') + 'f');
          }

          this.drawOption({
            strokeStyle: timeline_timeview_bottom_color,
            lineWidth: 1
          });
          this.drawLine(0, rect.height - 0.5, rect.width, rect.height);
          var left = (currentTime - displayStartTime) / (displayEndTime - displayStartTime) * realWidth;
          var markTop = 10;
          var markWidth = 4;
          this.drawOption({
            strokeStyle: timeline_line_color,
            fillStyle: timeline_line_color,
            lineWidth: 1
          });
          this.drawPath([left - markWidth + restX, rect.height - markTop], [left + markWidth + restX, rect.height - markTop], [left + markWidth + restX, rect.height - markWidth], [left + restX, rect.height], [left - markWidth + restX, rect.height - markWidth], [left - markWidth + restX, rect.height - markTop]);
        });
      }
    }
  }, {
    key: Object(Event["POINTERSTART"])('$canvas') + Object(Event["IF"])('hasCurrentTimeline') + Object(Event["MOVE"])() + Object(Event["END"])('moveEndCurrentTime'),
    value: function value(e) {
      this.selectedCanvasOffset = this.refs.$canvas.offset();
      this.originalRect = this.$el.rect();
      this.width = this.originalRect.width - KeyframeTimeView_PADDING;
      this.emit('hideSelectionToolView');
      this.$selection.empty();
      this.emit('refreshSelection');
    }
  }, {
    key: "move",
    value: function move() {
      var totalWidth = this.width;
      var minX = 0;
      var maxX = totalWidth;
      var currentX = this.$config.get('pos').x - this.selectedCanvasOffset.left;
      currentX = Math.max(currentX, minX);
      currentX = Math.min(currentX, maxX);
      this.$selection.currentProject.setTimelineCurrentTimeRate(currentX / totalWidth);
      this.refresh();
      this.$selection.currentProject.seek();
      this.emit('moveTimeline');
    }
  }, {
    key: "moveEndCurrentTime",
    value: function moveEndCurrentTime() {
      this.emit('resetSelection');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline', 'playTimeline', 'toggleFooterEnd'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('moveTimeline', 'refreshSelection') + Object(Event["THROTTLE"])(10),
    value: function value() {
      this.refresh();
    }
  }]);

  return KeyframeTimeView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  KeyframeTimeView: KeyframeTimeView_KeyframeTimeView
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/KeyframeTimeGridView.js






function KeyframeTimeGridView_createSuper(Derived) { var hasNativeReflectConstruct = KeyframeTimeGridView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyframeTimeGridView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var KeyframeTimeGridView_KeyframeTimeGridView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(KeyframeTimeGridView, _EditorElement);

  var _super = KeyframeTimeGridView_createSuper(KeyframeTimeGridView);

  function KeyframeTimeGridView() {
    classCallCheck_default()(this, KeyframeTimeGridView);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyframeTimeGridView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='keyframe-time-grid-view'>\n                <canvas ref=\"$canvas\"></canvas>\n            </div>\n        "
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.refreshCanvas();
    }
  }, {
    key: "currentTimeline",
    value: function currentTimeline() {
      var project = this.$selection.currentProject;

      if (project) {
        return project.getSelectedTimeline();
      }
    }
  }, {
    key: "hasCurrentTimeline",
    value: function hasCurrentTimeline() {
      return !!this.currentTimeline();
    }
  }, {
    key: "refreshCanvas",
    value: function refreshCanvas() {
      var strokeStyle = this.$theme('timeline_line_color');
      var timeline = this.currentTimeline();

      if (timeline) {
        var originalRect = this.$el.rect();
        var width = originalRect.width;
        var currentTime = timeline.currentTime,
            displayStartTime = timeline.displayStartTime,
            displayEndTime = timeline.displayEndTime;
        this.refs.$canvas.resize(this.$el.rect());
        this.refs.$canvas.update(function () {
          var rect = this.rect();
          var realWidth = width - 20;
          var restX = 10;
          var left = (currentTime - displayStartTime) / (displayEndTime - displayStartTime) * realWidth;
          this.drawOption({
            strokeStyle: strokeStyle,
            lineWidth: 1
          });
          this.drawLine(left + restX, 0, left + restX, rect.height);
        });
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshTimeline', 'playTimeline', 'toggleFooterEnd'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('moveTimeline', 'refreshSelection') + Object(Event["THROTTLE"])(50),
    value: function value() {
      this.refresh();
    }
  }]);

  return KeyframeTimeGridView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  KeyframeTimeGridView: KeyframeTimeGridView_KeyframeTimeGridView
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CubicBezierEditor.js
var CubicBezierEditor = __webpack_require__(92);

// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/CSSPropertyEditor.js + 1 modules
var CSSPropertyEditor = __webpack_require__(94);

// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/TimelineValueEditor.js







function TimelineValueEditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function TimelineValueEditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { TimelineValueEditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { TimelineValueEditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function TimelineValueEditor_createSuper(Derived) { var hasNativeReflectConstruct = TimelineValueEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineValueEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var TimelineValueEditor_TimelineValueEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TimelineValueEditor, _EditorElement);

  var _super = TimelineValueEditor_createSuper(TimelineValueEditor);

  function TimelineValueEditor() {
    classCallCheck_default()(this, TimelineValueEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineValueEditor, [{
    key: "initState",
    value: function initState() {
      return {
        time: 0,
        timing: 'linear',
        selectedIndex: 1
      };
    }
  }, {
    key: "updateData",
    value: function updateData(opt) {
      this.setState(opt, false);
      this.parent.trigger(this.props.onchange, this.state);
    }
  }, {
    key: "getProperties",
    value: function getProperties() {
      return [{
        key: this.state.property,
        value: Object(func["isUndefined"])(this.state.value) ? '10px' : this.state.value,
        editor: this.state.editor
      }].filter(function (it) {
        return it.key;
      });
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var project = this.$selection.currentProject;
      var code = '00:00:00:00';

      if (project) {
        var timeline = project.getSelectedTimeline();

        if (timeline) {
          code = Object(functions_time["d" /* timecode */])(timeline.fps, this.state.time);
        }
      }

      this.refs.$offsetTime.val(code);
      this.children.$propertyEditor.trigger('showCSSPropertyEditor', this.getProperties());
      this.children.$cubicBezierEditor.trigger('showCubicBezierEditor', this.state.timing);
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n    <div class='timeline-value-editor'>\n        <div class=\"tab number-tab\" ref=\"$tab\">\n            <div class=\"tab-header full\" ref=\"$header\">\n                <div class=\"tab-item selected\" data-value=\"1\">\n                    <label>".concat(this.$i18n('timeline.value.editor.value'), "</label>\n                </div>          \n                <div class=\"tab-item\" data-value=\"2\">\n                    <label>").concat(this.$i18n('timeline.value.editor.timing'), "</label> \n                </div>                            \n            </div>\n            <div class=\"tab-body\" ref=\"$body\">\n                <div class=\"tab-content selected padding-zero\" data-value=\"1\">\n                    ").concat(this.templateForOffset(), "  \n                    ").concat(this.templateForProperty(), "  \n                </div>\n                <div class=\"tab-content\" data-value=\"2\">\n                    ").concat(this.templateForTimingFunction(), "\n                </div>\n            </div>\n        </div>\n    </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])("$header .tab-item"),
    value: function value(e) {
      var selectedIndex = +e.$dt.attr('data-value');

      if (this.state.selectedIndex === selectedIndex) {
        return;
      }

      this.$el.$$("[data-value=\"".concat(this.state.selectedIndex, "\"]")).forEach(function (it) {
        return it.removeClass('selected');
      });
      this.$el.$$("[data-value=\"".concat(selectedIndex, "\"]")).forEach(function (it) {
        return it.addClass('selected');
      });
      this.setState({
        selectedIndex: selectedIndex
      }, false);
      this.refresh();
    }
  }, {
    key: "checkNumberOrTimecode",
    value: function checkNumberOrTimecode(e) {
      var value = e.target.value.trim();

      if (+value + '' === value) {
        return true;
      } else if (value.match(/^[0-9:]+$/)) {
        return true;
      }

      return false;
    }
  }, {
    key: "checkKey",
    value: function checkKey(e) {
      if (e.key.match(/^[0-9:]+$/)) {
        return true;
      } else if (e.code === 'Backspace' || e.code === 'ArrowRight' || e.code === 'ArrowLeft') {
        return true;
      }

      return false;
    }
  }, {
    key: Object(Event["KEYDOWN"])('$offsetTime'),
    value: function value(e) {
      if (!this.checkKey(e)) {
        e.preventDefault();
        e.stopPropagation();
        return false;
      }
    }
  }, {
    key: Object(Event["KEYUP"])('$offsetTime') + Event["ENTER"] + Object(Event["IF"])('checkNumberOrTimecode') + Event["PREVENT"],
    value: function value(e) {
      var frame = this.refs.$offsetTime.value;
      var project = this.$selection.currentProject;

      if (project) {
        var timeline = project.getSelectedTimeline();
        this.updateData({
          time: Object(functions_time["c" /* second */])(timeline.fps, frame)
        });
      }
    }
  }, {
    key: "templateForOffset",
    value: function templateForOffset() {
      return (
        /*html*/
        "\n      <div class='offset-input'>\n        <label>".concat(this.$i18n('timeline.value.editor.time'), "</label>\n        <div class='input-area'>\n          <input type=\"text\" ref='$offsetTime' title=\"").concat(this.$i18n('timeline.value.editor.offset.message'), "\" />\n        </div>\n        <button type=\"button\" ref='$seek' title='Seek timeline'>").concat(icon["a" /* default */].gps_fixed, "</button>\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["CLICK"])('$seek'),
    value: function value() {
      var _this = this;

      var project = this.$selection.currentProject;

      if (project) {
        project.seek(this.refs.$offsetTime.value, function (it) {
          if (it.layer.id === _this.state.layerId && it.property === _this.state.property) {
            return true;
          }

          return false;
        });
        this.emit('playTimeline');
      }
    }
  }, {
    key: "templateForProperty",
    value: function templateForProperty() {
      return (
        /*html*/
        "\n      <object refClass=\"CSSPropertyEditor\" ref='$propertyEditor' hide-title='true' onchange='changePropertyEditor' />\n    "
      );
    }
  }, {
    key: "templateForTimingFunction",
    value: function templateForTimingFunction() {
      return (
        /*html*/
        "\n    <div class='timing-function'>\n      <object refClass=\"CubicBezierEditor\" ref='$cubicBezierEditor' key=\"timing\" value=\"".concat(this.state.timingFunction || 'linear', "\" onChange='changeCubicBezier' />\n    </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshPropertyValue'),
    value: function value() {
      var project = this.$selection.currentProject;

      if (project) {
        var selectedLayer = project.searchById(this.state.layerId);

        if (selectedLayer) {
          var value = selectedLayer[this.state.property] + '';
          this.trigger('refreshOffsetValue', {
            value: value
          });
          this.updateData({
            value: value
          });
        }
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshOffsetValue'),
    value: function value(offset) {
      this.setState(TimelineValueEditor_objectSpread({}, offset), false);
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeCubicBezier'),
    value: function value(key, _value) {
      this.updateData(defineProperty_default()({}, key, _value + ''));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePropertyEditor'),
    value: function value(obj) {
      if (obj.length) {
        var it = obj[0];
        this.updateData({
          value: it.value + ''
        });
      }
    }
  }]);

  return TimelineValueEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TimelineValueEditor: TimelineValueEditor_TimelineValueEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/timeline/TimelinePlayControl.js






function TimelinePlayControl_createSuper(Derived) { var hasNativeReflectConstruct = TimelinePlayControl_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelinePlayControl_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var TimelinePlayControl_TimelinePlayControl = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(TimelinePlayControl, _EditorElement);

  var _super = TimelinePlayControl_createSuper(TimelinePlayControl);

  function TimelinePlayControl() {
    classCallCheck_default()(this, TimelinePlayControl);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelinePlayControl, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='timeline-play-control' >\n                <div class='row'>\n                    <div class='play-buttons' ref='$playButtons' data-status='".concat(this.state.status, "'>\n                        <button type=\"button\" data-value='play' class='play' title='").concat(this.$i18n('timeline.play.control.play'), "'>").concat(icon["a" /* default */].play, "</button>\n                        <button type=\"button\" data-value='pause' class='pause' title='").concat(this.$i18n('timeline.play.control.pause'), "'>").concat(icon["a" /* default */].pause, "</button>                \n                        <button type=\"button\" data-value='first' class='first' title='").concat(this.$i18n('timeline.play.control.first'), "'>").concat(icon["a" /* default */].skip_prev, "</button>\n                        <button type=\"button\" data-value='prev' class='prev' title='").concat(this.$i18n('timeline.play.control.prev'), "'>").concat(icon["a" /* default */].fast_rewind, "</button>                    \n                        <button type=\"button\" data-value='next' class='next' title='").concat(this.$i18n('timeline.play.control.next'), "'>").concat(icon["a" /* default */].fast_forward, "</button>\n                        <button type=\"button\" data-value='last' class='last' title='").concat(this.$i18n('timeline.play.control.last'), "'>").concat(icon["a" /* default */].skip_next, "</button>\n                    </div>\n                </div>\n                <div class='row'>            \n                    <label title='Speed'>").concat(this.$i18n('timeline.play.control.speed'), "</label>\n                    <div class='input speed-number' >\n                        <input type='number' min=\"0.1\" max=\"10\" step=\"0.1\" ref='$speed' value='").concat(this.state.speed, "' />\n                    </div>\n                </div>                \n                <div class='row'>            \n                    <label><span ref='$repeatStatus'>").concat(this.$i18n('timeline.play.control.repeat'), "</span></label>\n                    <div class='input' >\n                        <input type='number' min=\"0\" max=\"100\" step=\"1\" ref='$iteration' value='").concat(this.state.iterationCount, "' />\n                    </div> \n                </div>\n                <div class='row'>\n                    <label> ").concat(this.$i18n('timeline.play.control.direction'), "</label>\n                    <div class='direction-buttons' ref='$direction' data-selected-direction='").concat(this.state.direction, "'>\n                        <button type=\"button\" data-value='normal' title='").concat(this.$i18n('timeline.play.control.normal'), "'>").concat(icon["a" /* default */].arrowRight, "</button>\n                        <button type=\"button\" data-value='alternate' title='").concat(this.$i18n('timeline.play.control.alternate'), "'>").concat(icon["a" /* default */].alternate, "</button>\n                        <button type=\"button\" data-value='reverse' title='").concat(this.$i18n('timeline.play.control.reverse'), "' style='transform: rotateY(180deg)'>").concat(icon["a" /* default */].arrowRight, "</button>\n                        <button type=\"button\" data-value='alternate-reverse' title='").concat(this.$i18n('timeline.play.control.alternate.reverse'), "' style='transform: rotateY(180deg)'>").concat(icon["a" /* default */].alternate_reverse, "</button>\n                    </div>\n                </div>                                \n            </div>\n        ")
      );
    }
  }, {
    key: "initState",
    value: function initState() {
      var speed = 1;
      var iterationCount = 1;
      var direction = 'normal';
      var timeline = this.getSelectedTimeline();

      if (timeline) {
        var speed = timeline.speed,
            iterationCount = timeline.iterationCount,
            direction = timeline.direction;
      }

      return {
        status: 'pause',
        speed: speed,
        iterationCount: iterationCount,
        direction: direction
      };
    }
  }, {
    key: "getSelectedTimeline",
    value: function getSelectedTimeline() {
      var project = this.$selection.currentProject;

      if (project) {
        return project.getSelectedTimeline();
      }
    }
  }, {
    key: "updateData",
    value: function updateData(obj) {
      this.setState(obj, false);
      var project = this.$selection.currentProject;

      if (project) {
        project.setTimelineInfo(obj);
      }
    }
  }, {
    key: Object(Event["CLICK"])('$playButtons button'),
    value: function value(e) {
      var status = e.$dt.attr('data-value');
      this.setState({
        status: status
      });

      if (status === 'play') {
        this.play();
      } else if (status === 'pause') {
        this.pause();
      } else if (status === 'first') {
        this.first();
      } else if (status === 'prev') {
        this.prev();
      } else if (status === 'next') {
        this.next();
      } else if (status === 'last') {
        this.last();
      }
    }
  }, {
    key: "first",
    value: function first() {
      this.emit('firstTimelineItem');
      this.$editor.changeMode('SELECTION');
      this.emit('afterChangeMode');
    }
  }, {
    key: "prev",
    value: function prev() {
      this.emit('prevTimelineItem');
      this.$editor.changeMode('SELECTION');
      this.emit('afterChangeMode');
    }
  }, {
    key: "next",
    value: function next() {
      this.emit('nextTimelineItem');
      this.$editor.changeMode('SELECTION');
      this.emit('afterChangeMode');
    }
  }, {
    key: "last",
    value: function last() {
      this.emit('lastTimelineItem');
      this.$editor.changeMode('SELECTION');
      this.emit('afterChangeMode');
    }
  }, {
    key: "play",
    value: function play() {
      this.emit('playTimelineItem', this.state.speed, this.state.iterationCount, this.state.direction);
    }
  }, {
    key: "pause",
    value: function pause() {
      this.emit('pauseTimelineItem');
      this.$editor.changeMode('SELECTION');
      this.emit('afterChangeMode');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('stopTimeline'),
    value: function value() {
      this.updateData({
        status: 'pause'
      });
    }
  }, {
    key: Object(Event["CLICK"])('$direction button'),
    value: function value(e) {
      this.updateData({
        direction: e.$dt.attr('data-value')
      });
      this.refresh();
    }
  }, {
    key: Object(Event["CLICK"])('$repeatStatus'),
    value: function value(e) {
      var count = this.refs.$iteration.value;
      var iterationCount = 0;

      if (count === 0) {
        iterationCount = 1;
      }

      this.updateData({
        iterationCount: iterationCount
      });
      this.refs.$iteration.val(iterationCount);
      this.bindData('$repeatStatus');
    }
  }, {
    key: Object(Event["INPUT"])('$iteration'),
    value: function value(e) {
      this.updateData({
        iterationCount: +this.refs.$iteration.value
      });
      this.bindData('$repeatStatus');
    }
  }, {
    key: Object(Event["INPUT"])('$speed'),
    value: function value(e) {
      this.updateData({
        speed: +this.refs.$speed.value
      });
    }
  }, {
    key: Object(Event["BIND"])('$repeatStatus'),
    value: function value() {
      return {
        text: this.state.iterationCount === 0 ? this.$i18n('timeline.play.control.infinite') : this.$i18n('timeline.play.control.repeat')
      };
    }
  }, {
    key: Object(Event["BIND"])('$playButtons'),
    value: function value() {
      return {
        'data-status': this.state.status
      };
    }
  }, {
    key: Object(Event["BIND"])('$direction'),
    value: function value() {
      return {
        'data-selected-direction': this.state.direction
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('selectTimeline'),
    value: function value() {
      this.refresh();
    }
  }]);

  return TimelinePlayControl;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  TimelinePlayControl: TimelinePlayControl_TimelinePlayControl
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/TimelineProperty.js






function TimelineProperty_createSuper(Derived) { var hasNativeReflectConstruct = TimelineProperty_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function TimelineProperty_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













var TimelineProperty_TimelineProperty = /*#__PURE__*/function (_BaseProperty) {
  inherits_default()(TimelineProperty, _BaseProperty);

  var _super = TimelineProperty_createSuper(TimelineProperty);

  function TimelineProperty() {
    classCallCheck_default()(this, TimelineProperty);

    return _super.apply(this, arguments);
  }

  createClass_default()(TimelineProperty, [{
    key: "isFirstShow",
    value: function isFirstShow() {
      return false;
    }
  }, {
    key: "getTitle",
    value: function getTitle() {
      return this.$i18n('timeline.property.title');
    }
  }, {
    key: "getTools",
    value: function getTools() {
      return (
        /*html*/
        "\n      <object refClass=\"TimelinePlayControl\" />\n      \n    "
      );
    }
  }, {
    key: "getClassName",
    value: function getClassName() {
      return 'timeline full managed-tool';
    }
  }, {
    key: "getBody",
    value: function getBody() {
      return (
        /*html*/
        "\n      <div class='timeline-animation-area'>\n        <object refClass=\"TimelineAnimationProperty\" />\n      </div>\n      <div class='timeline-area'>\n        <div class='timeline-header'>\n          <div class='timeline-object-toolbar'>\n            <object refClass=\"TimelineTopToolbar\" />\n          </div>\n          <div class='timeline-keyframe-toolbar' ref='$keyframeToolBar'>\n            <object refClass=\"KeyframeTimeView\" ref='$keyframeTimeView' /> \n          </div>\n        </div>\n        <div class='timeline-body'>\n          <div class='timeline-object-area' ref='$area'>\n            <object refClass=\"TimelineObjectList\" />\n          </div>\n          <div class='timeline-keyframe-area' ref='$keyframeArea'>\n            <object refClass=\"TimelineKeyframeList\" ref='$keyframeList' />          \n          </div>\n          <object refClass=\"KeyframeTimeGridView\" ref='$keyframeTimeGridView' />            \n        </div>\n      </div>\n      <div class='timeline-value-area'>\n        <object refClass=\"TimelineValueEditor\" ref='$valueEditor' onchange='changeKeyframeValue' />\n      </div>\n    "
      );
    }
  }, {
    key: Object(Event["SCROLL"])('$keyframeArea'),
    value: function value(e) {
      this.refs.$area.setScrollTop(this.refs.$keyframeArea.scrollTop());
    }
  }, {
    key: Object(Event["SCROLL"])('$area'),
    value: function value(e) {
      this.refs.$keyframeArea.setScrollTop(this.refs.$area.scrollTop());
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshValueEditor') + Object(Event["DEBOUNCE"])(100),
    value: function value() {
      this.children.$valueEditor.refresh();
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.trigger('refreshValueEditor');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeKeyframeValue'),
    value: function value(obj) {
      this.emit('setTimelineOffset', obj);
    }
  }, {
    key: Object(Event["DRAGOVER"])('$area') + Event["PREVENT"],
    value: function value(e) {}
  }, {
    key: Object(Event["DROP"])('$area') + Event["PREVENT"],
    value: function value(e) {
      this.emit('addTimelineItem', e.dataTransfer.getData('layer/id'));
    }
  }, {
    key: "onToggleShow",
    value: function onToggleShow() {
      this.emit('toggleFooter', this.isPropertyShow());
      this.emit('timeline.view', this.isPropertyShow());
    }
  }]);

  return TimelineProperty;
}(BaseProperty["a" /* default */]);


Object(registElement["a" /* registElement */])({
  TimelineProperty: TimelineProperty_TimelineProperty
});
// CONCATENATED MODULE: ./src/el/editor/ui/control/index.js











/* harmony default export */ var control = ({
  AssetItems: AssetItems_AssetItems,
  CustomComponentItems: CustomComponentItems_CustomComponentItems,
  ArtboardItems: ArtboardItems_ArtboardItems,
  ComponentItems: ComponentItems_ComponentItems,
  Inspector: Inspector_Inspector,
  LayerTab: LayerTab_LayerTab,
  LibraryItems: LibraryItems_LibraryItems,
  ObjectItems: ObjectItems_ObjectItems,
  ObjectList: ObjectList_ObjectList,
  ShortCutItems: ShortCutItems_ShortCutItems,
  TimelineProperty: TimelineProperty_TimelineProperty
});
// EXTERNAL MODULE: ./node_modules/gl-matrix/esm/index.js + 7 modules
var esm = __webpack_require__(12);

// EXTERNAL MODULE: ./src/el/editor/property-parser/TransformOrigin.js + 1 modules
var TransformOrigin = __webpack_require__(58);

// EXTERNAL MODULE: ./src/el/base/functions/collision.js
var collision = __webpack_require__(31);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/SelectionToolView.js








function SelectionToolView_createSuper(Derived) { var hasNativeReflectConstruct = SelectionToolView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SelectionToolView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var directionType = {
  1: 'to top left',
  2: 'to top right',
  3: 'to bottom right',
  4: 'to bottom left',
  11: 'to top',
  12: 'to right',
  13: 'to bottom',
  14: 'to left'
};

var SelectionToolView_SelectionToolEvent = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SelectionToolEvent, _EditorElement);

  var _super = SelectionToolView_createSuper(SelectionToolEvent);

  function SelectionToolEvent() {
    classCallCheck_default()(this, SelectionToolEvent);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectionToolEvent, [{
    key: Object(Event["SUBSCRIBE"])('hideSubEditor'),
    value: function value(e) {
      this.toggleEditingPath(false);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('openPathEditor'),
    value: function value() {
      var current = this.$selection.current;

      if (current && current.isSVG() && current.d) {
        this.toggleEditingPath(true); // box 모드 
        // box - x, y, width, height 고정된 상태로  path 정보만 변경 

        this.emit('showPathEditor', 'modify', {
          box: 'canvas',
          current: current,
          d: current.accumulatedPath().d
        });
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('finishPathEdit'),
    value: function value() {
      this.toggleEditingPath(false);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionTool'),
    value: function value() {
      this.initSelectionTool();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      if (this.$selection.isOne) {
        this.initSelectionTool();
      }
    }
  }]);

  return SelectionToolEvent;
}(EditorElement["a" /* EditorElement */]);
/**
 * 원보 아이템의 크기를 가지고 scale 이랑 조합해서 world 의 크기를 구하는게 기본 컨셉 
 */


var SelectionToolView_SelectionToolView = /*#__PURE__*/function (_SelectionToolEvent) {
  inherits_default()(SelectionToolView, _SelectionToolEvent);

  var _super2 = SelectionToolView_createSuper(SelectionToolView);

  function SelectionToolView() {
    classCallCheck_default()(this, SelectionToolView);

    return _super2.apply(this, arguments);
  }

  createClass_default()(SelectionToolView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='selection-view one-selection-view' ref='$selectionView' style='display:none' >\n                <div class='pointer-rect' ref='$pointerRect'></div>\n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('keymap.keydown'),
    value: function value(e) {
      if (e.shiftKey) {
        this.$el.attr('data-has-shift', 'true');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('keymap.keyup'),
    value: function value(e) {
      this.$el.attr('data-has-shift', '');
    }
  }, {
    key: "toggleEditingPath",
    value: function toggleEditingPath(isEditingPath) {
      this.$el.toggleClass('editing-path', isEditingPath);
    }
  }, {
    key: "checkEditMode",
    value: function checkEditMode() {
      return this.$editor.isSelectionMode();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$pointerRect .rotate-pointer') + Event["PREVENT"] + Object(Event["MOVE"])('rotateVertext') + Object(Event["END"])('rotateEndVertext'),
    value: function value(e) {
      this.state.moveType = 'rotate';
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      this.$selection.doCache();
      this.$selection.reselect();
      this.verties = Object(func["clone"])(this.$selection.verties);
      this.$snapManager.clear();
      this.rotateTargetNumber = +e.$dt.attr('data-number');
      this.refreshRotatePointerIcon();
      this.state.dragging = true;
      this.state.isRotate = true;
    }
  }, {
    key: "rotateVertext",
    value: function rotateVertext() {
      var _this = this;

      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var distVector = esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint);
      var targetRotatePointer = this.rotateTargetNumber === 4 ? Object(collision["a" /* getRotatePointer */])(this.verties, 34) : this.verties[this.rotateTargetNumber];
      var distAngle = Math.floor(Object(math["calculateAngleForVec3"])(targetRotatePointer, this.verties[4], distVector));
      this.$selection.cachedItemVerties.forEach(function (item) {
        var instance = _this.$selection.get(item.id);

        if (instance) {
          var newTransform = Transform["a" /* Transform */].addTransform(item.transform, "rotateZ(".concat(unit_Length["a" /* Length */].deg(distAngle).round(1000), ")"));

          if (_this.$config.get('bodyEvent').shiftKey) {
            var newRotateX = Transform["a" /* Transform */].get(newTransform, 'rotateZ');

            if (newRotateX[0]) {
              var angle = newRotateX[0].value - newRotateX[0].value % _this.$config.get('fixedAngle');

              newTransform = Transform["a" /* Transform */].rotateZ(newTransform, unit_Length["a" /* Length */].deg(angle));
            }
          }

          instance.reset({
            transform: newTransform
          });
        }
      });
      this.state.dragging = true;
      this.renderPointers();
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
    }
  }, {
    key: "rotateEndVertext",
    value: function rotateEndVertext() {
      var _this2 = this;

      this.state.dragging = false;
      this.state.isRotate = false;
      this.emit('recoverCursor'); // 마지막 변경 시점 업데이트 

      this.verties = null;
      this.nextTick(function () {
        _this2.command('setAttributeForMulti', 'move selection pointer', _this2.$selection.cloneValue('x', 'y', 'width', 'height'));
      });
    }
  }, {
    key: "refreshRotatePointerIcon",
    value: function refreshRotatePointerIcon(e) {
      this.emit('refreshCursor', 'rotate');
    }
  }, {
    key: "refreshPointerIcon",
    value: function refreshPointerIcon(e) {
      var dataPointer = e.$dt.data('pointer');

      if (dataPointer) {
        var pointer = dataPointer.split(',').map(function (it) {
          return Number(it);
        });
        var diff = esm["d" /* vec3 */].subtract([], pointer, this.state.renderPointerList[0][4]);
        var angle = Object(math["calculateAngle360"])(diff[0], diff[1]);
        var iconAngle = Math.floor(angle) - 130;
        this.emit('refreshCursor', 'open_in_full', "rotate(".concat(iconAngle, " 12 12)"));
      } else {
        this.emit('recoverCursor');
      }
    }
  }, {
    key: "checkPointerIsNotMoved",
    value: function checkPointerIsNotMoved(e) {
      return Boolean(this.state.dragging) === false;
    }
  }, {
    key: Object(Event["POINTEROVER"])('$pointerRect .rotate-pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.refreshRotatePointerIcon(e);
    }
  }, {
    key: Object(Event["POINTEROVER"])('$pointerRect .pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.refreshPointerIcon(e);
    }
  }, {
    key: Object(Event["POINTEROUT"])('$pointerRect .pointer,.rotate-pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.emit('recoverCursor');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$pointerRect .pointer') + Event["PREVENT"] + Object(Event["MOVE"])('moveVertext') + Object(Event["END"])('moveEndVertext'),
    value: function value(e) {
      this.refreshPointerIcon(e);
      this.state.dragging = true;
      var num = +e.$dt.attr('data-number');
      var direction = directionType["".concat(num)];
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      this.state.moveType = direction;
      this.state.moveTarget = num;
      this.$selection.doCache();
      this.$selection.reselect();
      this.$snapManager.clear();
      this.verties = this.$selection.verties;
    }
  }, {
    key: "calculateNewOffsetMatrixInverse",
    value: function calculateNewOffsetMatrixInverse(vertextOffset, width, height, origin, itemMatrix) {
      var center = esm["d" /* vec3 */].subtract([], TransformOrigin["a" /* TransformOrigin */].scale(origin, width, height), vertextOffset);
      return Object(math["calculateMatrixInverse"])(esm["a" /* mat4 */].fromTranslation([], vertextOffset), esm["a" /* mat4 */].fromTranslation([], center), itemMatrix, esm["a" /* mat4 */].fromTranslation([], esm["d" /* vec3 */].negate([], center)));
    }
  }, {
    key: "calculateDistance",
    value: function calculateDistance(vertext, distVector, reverseMatrix) {
      // 1. 움직이는 vertext 를 구한다. 
      var currentVertext = esm["d" /* vec3 */].clone(vertext); // 2. dx, dy 만큼 옮긴 vertext 를 구한다.        
      // - dx, dy 를 계산하기 전에 먼저 snap 을 실행한 다음 최종 dx, dy 를 구한다      

      var snap = this.$snapManager.check([esm["d" /* vec3 */].add([], currentVertext, distVector)]);
      var nextVertext = esm["d" /* vec3 */].add([], currentVertext, esm["d" /* vec3 */].add([], distVector, snap)); // 3. invert matrix 를 실행해서  기본 좌표로 복귀한다.             

      var currentResult = esm["d" /* vec3 */].transformMat4([], currentVertext, reverseMatrix);
      var nextResult = esm["d" /* vec3 */].transformMat4([], nextVertext, reverseMatrix); // 4. 복귀한 좌표에서 차이점을 구한다. 

      var realDist = esm["d" /* vec3 */].floor([], esm["d" /* vec3 */].add([], nextResult, esm["d" /* vec3 */].negate([], currentResult)));
      return realDist;
    }
  }, {
    key: "calculateRealDist",
    value: function calculateRealDist(item, vertextIndex, distVector) {
      return this.calculateDistance(item.verties[vertextIndex], // top center 
      distVector, item.accumulatedMatrixInverse);
    }
  }, {
    key: "moveItem",
    value: function moveItem(instance, lastStartVertext, newWidth, newHeight) {
      if (instance) {
        instance.reset({
          x: unit_Length["a" /* Length */].px(lastStartVertext[0] + (newWidth < 0 ? newWidth : 0)),
          y: unit_Length["a" /* Length */].px(lastStartVertext[1] + (newHeight < 0 ? newHeight : 0)),
          width: unit_Length["a" /* Length */].px(Math.abs(newWidth)),
          height: unit_Length["a" /* Length */].px(Math.abs(newHeight))
        });
        instance.recover();
      }
    }
  }, {
    key: "moveDirectionVertext",
    value: function moveDirectionVertext(item, newWidth, newHeight, direction, directionNewVector) {
      // 마지막 offset x, y 를 구해보자. 
      var view = Object(math["calculateMatrix"])(item.directionMatrix[direction], this.calculateNewOffsetMatrixInverse(directionNewVector, newWidth, newHeight, item.originalTransformOrigin, item.itemMatrix));
      var lastStartVertext = esm["a" /* mat4 */].getTranslation([], view);
      this.moveItem(this.$selection.get(item.id), lastStartVertext, newWidth, newHeight);
    }
  }, {
    key: "moveBottomRightVertext",
    value: function moveBottomRightVertext(distVector) {
      var _this3 = this;

      var verties = this.verties;

      if (verties) {
        this.$selection.cachedItemVerties.forEach(function (item) {
          var _this3$calculateRealD = _this3.calculateRealDist(item, 2, distVector),
              _this3$calculateRealD2 = slicedToArray_default()(_this3$calculateRealD, 2),
              realDx = _this3$calculateRealD2[0],
              realDy = _this3$calculateRealD2[1];

          if (_this3.$config.get('bodyEvent').shiftKey) {
            realDy = realDx * item.height / item.width;
          } // 변형되는 넓이 높이 구하기 


          var newWidth = item.width + realDx;
          var newHeight = item.height + realDy;

          _this3.moveDirectionVertext(item, newWidth, newHeight, 'to top left', [0, 0, 0]);
        });
      }
    }
  }, {
    key: "moveTopRightVertext",
    value: function moveTopRightVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi = this.calculateRealDist(item, 1, distVector),
            _this$calculateRealDi2 = slicedToArray_default()(_this$calculateRealDi, 2),
            realDx = _this$calculateRealDi2[0],
            realDy = _this$calculateRealDi2[1];

        if (this.$config.get('bodyEvent').shiftKey) {
          realDy = -(realDx * item.height / item.width);
        } // 변형되는 넓이 높이 구하기 


        var newWidth = item.width + realDx;
        var newHeight = item.height - realDy;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to bottom left', [0, newHeight, 0]);
      }
    }
  }, {
    key: "moveTopLeftVertext",
    value: function moveTopLeftVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi3 = this.calculateRealDist(item, 0, distVector),
            _this$calculateRealDi4 = slicedToArray_default()(_this$calculateRealDi3, 2),
            realDx = _this$calculateRealDi4[0],
            realDy = _this$calculateRealDi4[1];

        if (this.$config.get('bodyEvent').shiftKey) {
          realDy = realDx * item.height / item.width;
        } // 변형되는 넓이 높이 구하기 


        var newWidth = item.width - realDx;
        var newHeight = item.height - realDy;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to bottom right', [newWidth, newHeight, 0]);
      }
    }
  }, {
    key: "moveTopVertext",
    value: function moveTopVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi5 = this.calculateRealDist(item, 0, distVector),
            _this$calculateRealDi6 = slicedToArray_default()(_this$calculateRealDi5, 2),
            realDx = _this$calculateRealDi6[0],
            realDy = _this$calculateRealDi6[1]; // 변형되는 넓이 높이 구하기 


        var newWidth = item.width;
        var newHeight = item.height - realDy;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to bottom', [newWidth / 2, newHeight, 0]);
      }
    }
  }, {
    key: "moveBottomVertext",
    value: function moveBottomVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi7 = this.calculateRealDist(item, 3, distVector),
            _this$calculateRealDi8 = slicedToArray_default()(_this$calculateRealDi7, 2),
            realDx = _this$calculateRealDi8[0],
            realDy = _this$calculateRealDi8[1]; // 변형되는 넓이 높이 구하기 


        var newWidth = item.width;
        var newHeight = item.height + realDy;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to top', [newWidth / 2, 0, 0]);
      }
    }
  }, {
    key: "moveRightVertext",
    value: function moveRightVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi9 = this.calculateRealDist(item, 1, distVector),
            _this$calculateRealDi10 = slicedToArray_default()(_this$calculateRealDi9, 2),
            realDx = _this$calculateRealDi10[0],
            realDy = _this$calculateRealDi10[1]; // 변형되는 넓이 높이 구하기 


        var newWidth = item.width + realDx;
        var newHeight = item.height;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to left', [0, newHeight / 2, 0]);
      }
    }
  }, {
    key: "moveLeftVertext",
    value: function moveLeftVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi11 = this.calculateRealDist(item, 0, distVector),
            _this$calculateRealDi12 = slicedToArray_default()(_this$calculateRealDi11, 2),
            realDx = _this$calculateRealDi12[0],
            realDy = _this$calculateRealDi12[1]; // 변형되는 넓이 높이 구하기 


        var newWidth = item.width - realDx;
        var newHeight = item.height;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to right', [newWidth, newHeight / 2, 0]);
      }
    }
  }, {
    key: "moveBottomLeftVertext",
    value: function moveBottomLeftVertext(distVector) {
      var item = this.$selection.cachedItemVerties[0];

      if (item) {
        var _this$calculateRealDi13 = this.calculateRealDist(item, 3, distVector),
            _this$calculateRealDi14 = slicedToArray_default()(_this$calculateRealDi13, 2),
            realDx = _this$calculateRealDi14[0],
            realDy = _this$calculateRealDi14[1];

        if (this.$config.get('bodyEvent').shiftKey) {
          realDy = -(realDx * item.height / item.width);
        } // 변형되는 넓이 높이 구하기 


        var newWidth = item.width - realDx;
        var newHeight = item.height + realDy;
        this.moveDirectionVertext(item, newWidth, newHeight, 'to top right', [newWidth, 0, 0]);
      }
    }
  }, {
    key: "moveVertext",
    value: function moveVertext() {
      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var distVector = esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint);

      if (this.state.moveType === 'to top left') {
        // 1
        this.moveTopLeftVertext(distVector);
      } else if (this.state.moveType === 'to top') {
        // 11
        this.moveTopVertext(distVector);
      } else if (this.state.moveType === 'to right') {
        // 12
        this.moveRightVertext(distVector);
      } else if (this.state.moveType === 'to bottom') {
        // 13
        this.moveBottomVertext(distVector);
      } else if (this.state.moveType === 'to left') {
        // 14
        this.moveLeftVertext(distVector);
      } else if (this.state.moveType === 'to top right') {
        // 2
        this.moveTopRightVertext(distVector);
      } else if (this.state.moveType === 'to bottom right') {
        // 3
        this.moveBottomRightVertext(distVector);
      } else if (this.state.moveType === 'to bottom left') {
        // 4 
        this.moveBottomLeftVertext(distVector);
      }

      this.state.dragging = true;
      this.renderPointers();
      this.refreshSmartGuides();
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
    }
  }, {
    key: "moveEndVertext",
    value: function moveEndVertext() {
      var _this4 = this;

      this.state.dragging = false;
      this.emit('recoverCursor');
      this.emit('refresh');
      this.$selection.reselect();
      this.nextTick(function () {
        _this4.command('setAttributeForMulti', 'move selection pointer', _this4.$selection.cloneValue('x', 'y', 'width', 'height'));
      });
    }
  }, {
    key: "moveTo",
    value: function moveTo(distVector) {
      var _this5 = this;

      this.$selection.cachedItemVerties.forEach(function (it) {
        // 절대 좌표를 snap 기준으로 움직이고 
        var snap = _this5.$snapManager.check(it.verties.map(function (v) {
          return esm["d" /* vec3 */].add([], v, distVector);
        })); // snap 거리만큼 조정해서 실제로 움직인 좌표로 만들고 


        var localDist = esm["d" /* vec3 */].add([], distVector, snap); // newVerties 에 실제 움직인 좌표로 넣고 

        var newVerties = it.verties.map(function (v) {
          return esm["d" /* vec3 */].add([], v, localDist);
        }); // 첫번째 좌표 it.rectVerties[0] 과 
        // 마지막 좌표 newVerties[0] 를 
        // parentMatrixInverse 기준으로 다시 원복하고 거리를 잰다 
        // 그게 실제적인 distance 이다. 

        var newDist = esm["d" /* vec3 */].subtract([], esm["d" /* vec3 */].transformMat4([], newVerties[0], it.parentMatrixInverse), esm["d" /* vec3 */].transformMat4([], it.verties[0], it.parentMatrixInverse));

        var instance = _this5.$selection.get(it.id);

        if (instance) {
          instance.reset({
            x: unit_Length["a" /* Length */].px(it.x + newDist[0]),
            // 1px 단위로 위치 설정 
            y: unit_Length["a" /* Length */].px(it.y + newDist[1])
          });
        }
      });
      this.refreshSmartGuides();
    }
  }, {
    key: "refreshSmartGuides",
    value: function refreshSmartGuides() {
      // 가이드 라인 수정하기 
      if (this.$selection.current) {
        var guides = this.$snapManager.findGuide(this.$selection.current.guideVerties());
        this.emit('refreshGuideLine', guides);
      }
    }
  }, {
    key: "getSelectedElements",
    value: function getSelectedElements() {
      var _this6 = this;

      var elements = this.$selection.ids.map(function (id) {
        return _this6.parent.state.cachedCurrentElement[id];
      });
      return elements;
    }
  }, {
    key: "initSelectionTool",
    value: function initSelectionTool() {
      if (this.$editor.isSelectionMode() && this.$el.isHide() && this.$selection.isOne) {
        this.$el.show();
      } else {
        if (this.$el.isShow() && this.$selection.isOne === false) this.$el.hide();
      }

      this.makeSelectionTool();
    }
  }, {
    key: "makeSelectionTool",
    value: function makeSelectionTool() {
      this.renderPointers();
    }
    /**
     * 선택영역 컴포넌트 그리기 
     */

  }, {
    key: "renderPointers",
    value: function renderPointers() {
      if (this.refs.$pointerRect.isHide()) {
        if (this.$selection.isEmpty) {// NOOP , 
          // 숨겨진 상태에서 선택도 아니면 모두 보여주지 않음 
        } else {
          this.refs.$pointerRect.show();
          var verties = this.$selection.verties;
          var selectionVerties = this.$selection.selectionVerties;
          var parentVector = esm["a" /* mat4 */].getTranslation([], this.$selection.cachedItemVerties[0].parentMatrix);
          this.state.renderPointerList = [this.$viewport.applyVerties(verties), this.$viewport.applyVerties(selectionVerties), this.$viewport.applyVerties([parentVector])];
          var pointers = this.createRenderPointers.apply(this, toConsumableArray_default()(this.state.renderPointerList));

          if (pointers) {
            var line = pointers.line,
                point = pointers.point,
                size = pointers.size;
            this.refs.$pointerRect.updateDiff(line + point + size);
          }
        }
      } else {
        if (this.$selection.isEmpty) {
          this.refs.$pointerRect.hide(); // NOOP , 
          // 숨겨진 상태에서 선택도 아니면 모두 보여주지 않음                 
        } else {
          var _verties = this.$selection.verties;
          var _selectionVerties = this.$selection.selectionVerties;

          var _parentVector = esm["a" /* mat4 */].getTranslation([], this.$selection.cachedItemVerties[0].parentMatrix);

          this.state.renderPointerList = [this.$viewport.applyVerties(_verties), this.$viewport.applyVerties(_selectionVerties), this.$viewport.applyVerties([_parentVector])];

          var _pointers = this.createRenderPointers.apply(this, toConsumableArray_default()(this.state.renderPointerList));

          if (_pointers) {
            var _line = _pointers.line,
                _point = _pointers.point,
                _size = _pointers.size;
            this.refs.$pointerRect.updateDiff(_line + _point + _size);
          }
        }
      }
    }
  }, {
    key: "createPointer",
    value: function createPointer(pointer, number, rotate) {
      return (
        /*html*/
        "\n        <div class='pointer' data-number=\"".concat(number, "\" data-pointer=\"").concat(pointer, "\" style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px) rotateZ(").concat(rotate || '0deg', ")\" ></div>\n        ")
      );
    }
  }, {
    key: "createRotatePointer",
    value: function createRotatePointer(pointer, number, direction) {
      if (pointer.length === 0) return '';

      if (number < 4) {
        return (
          /*html*/
          "\n            <div class='rotate-pointer no-fill' data-number=\"".concat(number, "\" style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px) scale(1.8);\" ></div>\n            ")
        );
      }

      return (
        /*html*/
        "\n        <div class='rotate-pointer' data-number=\"".concat(number, "\" style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px)\" ></div>\n        ")
      );
    }
  }, {
    key: "createPointerRect",
    value: function createPointerRect(pointers, rotatePointer, parentVector) {
      if (pointers.length === 0) return '';
      var current = this.$selection.current;
      var isArtBoard = current && current.is('artboard');
      var line = '';

      if (!isArtBoard) {
        var centerPointer = esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5);
        line += "\n                M ".concat(centerPointer[0], ",").concat(centerPointer[1], " \n                L ").concat(rotatePointer[0], ",").concat(rotatePointer[1], " \n            ");
      } // if (parentVector) {
      //     line += `
      //         M ${parentVector[0]},${parentVector[1]} 
      //         L ${pointers[0][0]},${pointers[0][1]} 
      //     `
      // }


      return (
        /*html*/
        "\n        <svg class='line' overflow=\"visible\">\n            <path \n                d=\"\n                    M ".concat(pointers[0][0], ", ").concat(pointers[0][1], " \n                    L ").concat(pointers[1][0], ", ").concat(pointers[1][1], " \n                    L ").concat(pointers[2][0], ", ").concat(pointers[2][1], " \n                    L ").concat(pointers[3][0], ", ").concat(pointers[3][1], " \n                    L ").concat(pointers[0][0], ", ").concat(pointers[0][1], "\n                    ").concat(line, "\n                    Z\n                \" />\n        </svg>")
      );
    }
  }, {
    key: "createSize",
    value: function createSize(pointers) {
      var top = esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5);
      var right = esm["d" /* vec3 */].lerp([], pointers[1], pointers[2], 0.5);
      var bottom = esm["d" /* vec3 */].lerp([], pointers[2], pointers[3], 0.5);
      var left = esm["d" /* vec3 */].lerp([], pointers[3], pointers[0], 0.5);
      var list = [{
        start: top,
        end: bottom
      }, {
        start: right,
        end: left
      }, {
        start: bottom,
        end: top
      }, {
        start: left,
        end: right
      }].map(function (it, index) {
        return {
          index: index,
          data: it
        };
      });
      list.sort(function (a, b) {
        return a.data.start[1] > b.data.start[1] ? -1 : 1;
      });
      var item = list[0];
      var newPointer = esm["d" /* vec3 */].lerp([], item.data.end, item.data.start, 1 + 16 / esm["d" /* vec3 */].dist(item.data.start, item.data.end));
      var width = this.$selection.current.width.value;
      var height = this.$selection.current.height.value;
      var diff = esm["d" /* vec3 */].subtract([], item.data.start, item.data.end);
      var angle = Object(math["calculateAngle360"])(diff[0], diff[1]) + 90;
      var text = "".concat(Object(math["round"])(width, 100), " x ").concat(Object(math["round"])(height, 100));

      if (this.state.isRotate) {
        var rotateZ = Transform["a" /* Transform */].get(this.$selection.current.transform, 'rotateZ');

        if (rotateZ) {
          text = "".concat(Object(math["round"])(rotateZ[0].value, 1000), "\xB0");
        }
      }

      return (
        /*html*/
        "\n            <div \n                data-layout=\"".concat(this.$selection.current.layout, "\"\n                class='size-pointer' \n                style=\"transform: translate3d( calc(").concat(newPointer[0], "px - 50%), calc(").concat(newPointer[1], "px - 50%), 0px) rotateZ(").concat(angle, "deg)\" >\n               ").concat(text, "\n            </div>\n        ")
      );
    }
  }, {
    key: "createRenderPointers",
    value: function createRenderPointers(pointers, selectionPointers, parentVector) {
      var current = this.$selection.current;

      if (current && current.is("text")) {
        if (current.width.value === 0 && current.height.value === 0) {
          return;
        }
      }

      var isArtBoard = current && current.is('artboard');
      var diff = esm["d" /* vec3 */].subtract([], esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5), esm["d" /* vec3 */].lerp([], pointers[0], pointers[2], 0.5)); //TODO: 여기서는 법선벡터를 구하게 되면 식이 훨씬 간단해진다. 

      var rotate = unit_Length["a" /* Length */].deg(Object(math["calculateAngle360"])(diff[0], diff[1]) + 90).round(1000);
      var rotatePointer = Object(collision["a" /* getRotatePointer */])(pointers, 34);
      var dist = esm["d" /* vec3 */].dist(pointers[0], pointers[2]);
      return {
        line: this.createPointerRect(pointers, rotatePointer, parentVector[0]),
        size: this.createSize(pointers),
        point: [// 4 모서리에서도 rotate 가 가능하도록 맞춤 
        // isArtBoard ? undefined : this.createRotatePointer (selectionPointers[0], 0),
        // isArtBoard ? undefined : this.createRotatePointer (selectionPointers[1], 1),
        // isArtBoard ? undefined : this.createRotatePointer (selectionPointers[2], 2),
        // isArtBoard ? undefined : this.createRotatePointer (selectionPointers[3], 3),
        isArtBoard ? undefined : this.createRotatePointer(rotatePointer, 4, 'center center'), this.createPointer(pointers[0], 1, rotate), this.createPointer(pointers[1], 2, rotate), this.createPointer(pointers[2], 3, rotate), this.createPointer(pointers[3], 4, rotate), this.createPointer(pointers[4], 5, rotate), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5), 11, rotate), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[1], pointers[2], 0.5), 12, rotate), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[2], pointers[3], 0.5), 13, rotate), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[3], pointers[0], 0.5), 14, rotate)].join('')
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionStyleView'),
    value: function value() {
      if (this.$selection.isOne) {
        this.renderPointers();
      }
    }
  }]);

  return SelectionToolView;
}(SelectionToolView_SelectionToolEvent);


Object(registElement["a" /* registElement */])({
  SelectionToolView: SelectionToolView_SelectionToolView
});
// EXTERNAL MODULE: ./src/el/editor/items/ArtBoard.js
var ArtBoard = __webpack_require__(138);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/GroupSelectionToolView.js








function GroupSelectionToolView_createSuper(Derived) { var hasNativeReflectConstruct = GroupSelectionToolView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GroupSelectionToolView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var GroupSelectionToolView_directionType = {
  1: 'to top left',
  2: 'to top right',
  3: 'to bottom right',
  4: 'to bottom left',
  11: 'to top',
  12: 'to right',
  13: 'to bottom',
  14: 'to left'
};

var GroupSelectionToolView_SelectionToolEvent = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SelectionToolEvent, _EditorElement);

  var _super = GroupSelectionToolView_createSuper(SelectionToolEvent);

  function SelectionToolEvent() {
    classCallCheck_default()(this, SelectionToolEvent);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectionToolEvent, [{
    key: Object(Event["SUBSCRIBE"])('hideSelectionToolView'),
    value: function value() {}
  }, {
    key: Object(Event["SUBSCRIBE"])('hideSubEditor'),
    value: function value(e) {
      this.toggleEditingPath(false);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('finishPathEdit'),
    value: function value() {
      this.toggleEditingPath(false);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionTool'),
    value: function value() {
      var isInitializeMatrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      this.initSelectionTool(isInitializeMatrix);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      var isInitializeMatrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

      if (this.$selection.isMany) {
        this.initSelectionTool(isInitializeMatrix);
      }
    }
  }]);

  return SelectionToolEvent;
}(EditorElement["a" /* EditorElement */]);
/**
 * 원보 아이템의 크기를 가지고 scale 이랑 조합해서 world 의 크기를 구하는게 기본 컨셉 
 */


var GroupSelectionToolView_GroupSelectionToolView = /*#__PURE__*/function (_SelectionToolEvent) {
  inherits_default()(GroupSelectionToolView, _SelectionToolEvent);

  var _super2 = GroupSelectionToolView_createSuper(GroupSelectionToolView);

  function GroupSelectionToolView() {
    classCallCheck_default()(this, GroupSelectionToolView);

    return _super2.apply(this, arguments);
  }

  createClass_default()(GroupSelectionToolView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='selection-view group-selection-view' ref='$selectionView'  style='display:none' >\n                <div class='pointer-rect' ref='$pointerRect'></div>        \n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('keymap.keydown'),
    value: function value(e) {
      if (e.shiftKey) {
        this.$el.attr('data-has-shift', 'true');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('keymap.keyup'),
    value: function value(e) {
      this.$el.attr('data-has-shift', '');
    }
  }, {
    key: "toggleEditingPath",
    value: function toggleEditingPath(isEditingPath) {
      this.refs.$selectionView.toggleClass('editing-path', isEditingPath);
    }
  }, {
    key: "checkEditMode",
    value: function checkEditMode() {
      return this.$editor.isSelectionMode();
    }
  }, {
    key: Object(Event["POINTERSTART"])('$pointerRect .rotate-pointer') + Object(Event["MOVE"])('rotateVertext') + Object(Event["END"])('rotateEndVertext'),
    value: function value(e) {
      this.state.moveType = 'rotate';
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY); // cache matrix 

      this.$selection.reselect();
      this.verties = this.groupItem.verties();
      this.rotateTargetNumber = +e.$dt.attr('data-number');
      this.refreshRotatePointerIcon();
      this.state.dragging = true;
      this.state.isRotate = true;
    }
  }, {
    key: "rotateVertext",
    value: function rotateVertext() {
      var _this = this;

      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var distVector = esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint);
      var targetRotatePointer = this.rotateTargetNumber === 4 ? Object(collision["a" /* getRotatePointer */])(this.verties, 34) : this.verties[this.rotateTargetNumber];
      var distAngle = Math.floor(Object(math["calculateAngleForVec3"])(targetRotatePointer, this.verties[4], distVector));

      if (this.$config.get('bodyEvent').shiftKey) {
        distAngle = distAngle - distAngle % this.$config.get('fixedAngle');
      } // 실제 움직인 angle 


      this.localAngle = this.angle + distAngle;
      this.groupItem.reset({
        transform: Transform["a" /* Transform */].rotateZ(this.groupItem.transform, unit_Length["a" /* Length */].deg(this.localAngle))
      });
      var selectionMatrix = Object(math["calculateRotationOriginMat4"])(distAngle, this.verties[4]); // angle 을 움직였으니 어떻게 움직이지 ?  

      this.$selection.cachedItemVerties.forEach(function (item) {
        var newVerties = Object(math["vertiesMap"])(item.verties, esm["a" /* mat4 */].multiply([], item.parentMatrixInverse, selectionMatrix)); // 아이템을 먼저 그룹으로 회전을 하고 

        var rotatePointer = Object(collision["a" /* getRotatePointer */])(newVerties, 34);
        var lastAngle = Object(math["calculateAngle"])(rotatePointer[0] - newVerties[4][0], rotatePointer[1] - newVerties[4][1]) - 270;
        var newTranslate = esm["d" /* vec3 */].transformMat4([], newVerties[0], Object(math["calculateRotationOriginMat4"])(-lastAngle, newVerties[4]));

        var instance = _this.$selection.get(item.id);

        if (instance) {
          instance.reset({
            x: unit_Length["a" /* Length */].px(newTranslate[0]),
            y: unit_Length["a" /* Length */].px(newTranslate[1]),
            transform: Transform["a" /* Transform */].rotateZ(item.transform, unit_Length["a" /* Length */].deg(lastAngle))
          });
        }
      });
      this.state.dragging = true;
      this.renderPointers();
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
    }
  }, {
    key: "rotateEndVertext",
    value: function rotateEndVertext() {
      var _this2 = this;

      this.state.dragging = false;
      this.state.isRotate = false;
      this.emit('recoverCursor'); // 개별 verties 의 캐쉬를 다시 한다. 

      this.$selection.reselect();
      this.initMatrix(true);
      this.renderPointers();
      this.nextTick(function () {
        _this2.command('setAttributeForMulti', 'rotate selection pointer', _this2.$selection.cloneValue('x', 'y', 'width', 'height', 'transform'));
      });
    }
  }, {
    key: "refreshRotatePointerIcon",
    value: function refreshRotatePointerIcon(e) {
      this.emit('refreshCursor', 'rotate');
    }
  }, {
    key: "refreshPointerIcon",
    value: function refreshPointerIcon(e) {
      var dataPointer = e.$dt.data('pointer');

      if (dataPointer) {
        var pointer = dataPointer.split(',').map(function (it) {
          return Number(it);
        });
        var diff = esm["d" /* vec3 */].subtract([], pointer, this.state.renderPointerList[0][4]);
        var angle = Object(math["calculateAngle360"])(diff[0], diff[1]);
        var iconAngle = Math.floor(angle) - 135;
        this.emit('refreshCursor', 'open_in_full', "rotate(".concat(iconAngle, " 12 12)"));
      } else {
        this.emit('recoverCursor');
      }
    }
  }, {
    key: "checkPointerIsNotMoved",
    value: function checkPointerIsNotMoved(e) {
      return Boolean(this.state.dragging) === false;
    }
  }, {
    key: Object(Event["POINTEROVER"])('$pointerRect .rotate-pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.refreshRotatePointerIcon(e);
    }
  }, {
    key: Object(Event["POINTEROVER"])('$pointerRect .pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.refreshPointerIcon(e);
    }
  }, {
    key: Object(Event["POINTEROUT"])('$pointerRect .pointer,.rotate-pointer') + Object(Event["IF"])('checkPointerIsNotMoved') + Event["PREVENT"],
    value: function value(e) {
      this.emit('recoverCursor');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$pointerRect .pointer') + Event["PREVENT"] + Object(Event["MOVE"])('moveVertext') + Object(Event["END"])('moveEndVertext'),
    value: function value(e) {
      this.refreshPointerIcon(e);
      this.state.dragging = true;
      var num = +e.$dt.attr('data-number');
      this.state.moveType = GroupSelectionToolView_directionType["".concat(num)];
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY); // cache matrix 

      this.$selection.doCache();
      this.$selection.reselect();
      this.cachedGroupItem = this.groupItem.matrix;
    }
  }, {
    key: "calculateNewOffsetMatrixInverse",
    value: function calculateNewOffsetMatrixInverse(vertextOffset, width, height, origin, itemMatrix) {
      var center = esm["d" /* vec3 */].add([], TransformOrigin["a" /* TransformOrigin */].scale(origin, width, height), esm["d" /* vec3 */].negate([], vertextOffset));
      return Object(math["calculateMatrixInverse"])(esm["a" /* mat4 */].fromTranslation([], vertextOffset), esm["a" /* mat4 */].fromTranslation([], center), itemMatrix, esm["a" /* mat4 */].fromTranslation([], esm["d" /* vec3 */].negate([], center)));
    }
  }, {
    key: "calculateDistance",
    value: function calculateDistance(vertext, distVector, reverseMatrix) {
      // 1. 움직이는 vertext 를 구한다. 
      var currentVertext = esm["d" /* vec3 */].clone(vertext); // 2. dx, dy 만큼 옮긴 vertext 를 구한다.        
      // - dx, dy 를 계산하기 전에 먼저 snap 을 실행한 다음 최종 dx, dy 를 구한다      

      var snap = this.$snapManager.check([esm["d" /* vec3 */].add([], currentVertext, distVector)]);
      var nextVertext = esm["d" /* vec3 */].add([], currentVertext, esm["d" /* vec3 */].add([], distVector, snap)); // 3. invert matrix 를 실행해서  기본 좌표로 복귀한다.             

      var currentResult = esm["d" /* vec3 */].transformMat4([], currentVertext, reverseMatrix);
      var nextResult = esm["d" /* vec3 */].transformMat4([], nextVertext, reverseMatrix); // 4. 복귀한 좌표에서 차이점을 구한다. 

      var realDist = esm["d" /* vec3 */].floor([], esm["d" /* vec3 */].add([], nextResult, esm["d" /* vec3 */].negate([], currentResult)));
      return realDist;
    }
  }, {
    key: "calculateRealDist",
    value: function calculateRealDist(item, vertextIndex, distVector) {
      return this.calculateDistance(item.verties[vertextIndex], // top center 
      distVector, item.accumulatedMatrixInverse);
    }
  }, {
    key: "moveGroupItem",
    value: function moveGroupItem(lastStartVertext, newWidth, newHeight) {
      this.groupItem.reset({
        x: unit_Length["a" /* Length */].px(lastStartVertext[0] + (newWidth < 0 ? newWidth : 0)).round(1000),
        y: unit_Length["a" /* Length */].px(lastStartVertext[1] + (newHeight < 0 ? newHeight : 0)).round(1000),
        width: unit_Length["a" /* Length */].px(Math.abs(newWidth)).round(1000),
        height: unit_Length["a" /* Length */].px(Math.abs(newHeight)).round(1000)
      });
    }
  }, {
    key: "moveItemForGroup",
    value: function moveItemForGroup(it, newVerties) {
      var realDx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var realDy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var transformViewInverse = Object(math["calculateMatrixInverse"])(esm["a" /* mat4 */].fromTranslation([], newVerties[4]), it.itemMatrix, esm["a" /* mat4 */].fromTranslation([], esm["d" /* vec3 */].negate([], newVerties[4])));

      var _vec3$transformMat = esm["d" /* vec3 */].transformMat4([], newVerties[0], transformViewInverse),
          _vec3$transformMat2 = slicedToArray_default()(_vec3$transformMat, 2),
          newX = _vec3$transformMat2[0],
          newY = _vec3$transformMat2[1];

      var newWidth = esm["d" /* vec3 */].distance(newVerties[0], newVerties[1]);
      var newHeight = esm["d" /* vec3 */].distance(newVerties[0], newVerties[3]);
      var instance = this.$selection.get(it.id);

      if (instance) {
        instance.reset({
          x: unit_Length["a" /* Length */].px(newX + realDx),
          y: unit_Length["a" /* Length */].px(newY + realDy),
          width: unit_Length["a" /* Length */].px(newWidth),
          height: unit_Length["a" /* Length */].px(newHeight)
        });
        instance.recover();
      }
    }
  }, {
    key: "recoverItemForGroup",
    value: function recoverItemForGroup(groupItem, scaleX, scaleY) {
      var _this3 = this;

      var realDx = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var realDy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
      var accumulatedMatrix = groupItem.accumulatedMatrix;
      var accumulatedMatrixInverse = groupItem.accumulatedMatrixInverse;
      this.$selection.cachedItemVerties.forEach(function (it) {
        var localView = Object(math["calculateMatrix"])(it.parentMatrixInverse, // 5. 해당 객체의 parent 를 기준으로 좌표를 만들면 된다. 
        accumulatedMatrix, // 4. 원래의 좌표로 다시 만들고 
        esm["a" /* mat4 */].fromTranslation([], [realDx, realDy, 0]), // 3. dx, dy 가 - 일 경우 실제로 움직이고
        esm["a" /* mat4 */].fromScaling([], [scaleX, scaleY, 1]), // 2. scale 을 먼저 실행한다음 
        accumulatedMatrixInverse // 1. 기본 좌표로 돌리고 
        );
        var newVerties = Object(math["vertiesMap"])(it.verties, localView);

        _this3.moveItemForGroup(it, newVerties);
      });
    }
  }, {
    key: "moveBottomRightVertext",
    value: function moveBottomRightVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi = this.calculateRealDist(groupItem, 2, distVector),
          _this$calculateRealDi2 = slicedToArray_default()(_this$calculateRealDi, 2),
          realDx = _this$calculateRealDi2[0],
          realDy = _this$calculateRealDi2[1];

      if (this.$config.get('bodyEvent').shiftKey) {
        realDy = realDx * groupItem.height / groupItem.width;
      } // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width + realDx;
      var newHeight = groupItem.height + realDy;
      this.moveDirectionVertext(groupItem, 0, 0, newWidth, newHeight, 'to top left', [0, 0, 0]);
    }
  }, {
    key: "moveTopRightVertext",
    value: function moveTopRightVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi3 = this.calculateRealDist(groupItem, 1, distVector),
          _this$calculateRealDi4 = slicedToArray_default()(_this$calculateRealDi3, 2),
          realDx = _this$calculateRealDi4[0],
          realDy = _this$calculateRealDi4[1];

      if (this.$config.get('bodyEvent').shiftKey) {
        realDy = -(realDx * groupItem.height / groupItem.width);
      } // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width + realDx;
      var newHeight = groupItem.height - realDy;
      this.moveDirectionVertext(groupItem, 0, realDy, newWidth, newHeight, 'to bottom left', [0, newHeight, 0]);
    }
  }, {
    key: "moveDirectionVertext",
    value: function moveDirectionVertext(groupItem, realDx, realDy, newWidth, newHeight, direction, directionNewVector) {
      var scaleX = newWidth / groupItem.width;
      var scaleY = newHeight / groupItem.height;

      if (scaleX >= 0 && scaleY >= 0) {
        // 마지막 offset x, y 를 구해보자. 
        var view = Object(math["calculateMatrix"])(groupItem.directionMatrix[direction], this.calculateNewOffsetMatrixInverse(directionNewVector, newWidth, newHeight, groupItem.originalTransformOrigin, groupItem.itemMatrix));
        var lastStartVertext = esm["a" /* mat4 */].getTranslation([], view);
        this.moveGroupItem(lastStartVertext, newWidth, newHeight);
        this.recoverItemForGroup(groupItem, scaleX, scaleY, realDx, realDy);
      }
    }
  }, {
    key: "moveTopVertext",
    value: function moveTopVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi5 = this.calculateRealDist(groupItem, 0, distVector),
          _this$calculateRealDi6 = slicedToArray_default()(_this$calculateRealDi5, 2),
          realDx = _this$calculateRealDi6[0],
          realDy = _this$calculateRealDi6[1]; // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width;
      var newHeight = groupItem.height - realDy;
      this.moveDirectionVertext(groupItem, 0, realDy, newWidth, newHeight, 'to bottom', [newWidth / 2, newHeight, 0]);
    }
  }, {
    key: "moveBottomVertext",
    value: function moveBottomVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi7 = this.calculateRealDist(groupItem, 2, distVector),
          _this$calculateRealDi8 = slicedToArray_default()(_this$calculateRealDi7, 2),
          realDx = _this$calculateRealDi8[0],
          realDy = _this$calculateRealDi8[1]; // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width;
      var newHeight = groupItem.height + realDy;
      this.moveDirectionVertext(groupItem, 0, 0, newWidth, newHeight, 'to top', [newWidth / 2, 0, 0]);
    }
  }, {
    key: "moveTopLeftVertext",
    value: function moveTopLeftVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi9 = this.calculateRealDist(groupItem, 0, distVector),
          _this$calculateRealDi10 = slicedToArray_default()(_this$calculateRealDi9, 2),
          realDx = _this$calculateRealDi10[0],
          realDy = _this$calculateRealDi10[1];

      if (this.$config.get('bodyEvent').shiftKey) {
        realDy = realDx * groupItem.height / groupItem.width;
      } // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width - realDx;
      var newHeight = groupItem.height - realDy;
      this.moveDirectionVertext(groupItem, realDx, realDy, newWidth, newHeight, 'to bottom right', [newWidth, newHeight, 0]);
    }
  }, {
    key: "moveLeftVertext",
    value: function moveLeftVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi11 = this.calculateRealDist(groupItem, 0, distVector),
          _this$calculateRealDi12 = slicedToArray_default()(_this$calculateRealDi11, 2),
          realDx = _this$calculateRealDi12[0],
          realDy = _this$calculateRealDi12[1]; // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width - realDx;
      var newHeight = groupItem.height;
      this.moveDirectionVertext(groupItem, realDx, 0, newWidth, newHeight, 'to right', [newWidth, newHeight / 2, 0]);
    }
  }, {
    key: "moveRightVertext",
    value: function moveRightVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi13 = this.calculateRealDist(groupItem, 2, distVector),
          _this$calculateRealDi14 = slicedToArray_default()(_this$calculateRealDi13, 2),
          realDx = _this$calculateRealDi14[0],
          realDy = _this$calculateRealDi14[1]; // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width + realDx;
      var newHeight = groupItem.height;
      this.moveDirectionVertext(groupItem, 0, 0, newWidth, newHeight, 'to left', [0, newHeight / 2, 0]);
    }
  }, {
    key: "moveBottomLeftVertext",
    value: function moveBottomLeftVertext(distVector) {
      var groupItem = this.cachedGroupItem;

      var _this$calculateRealDi15 = this.calculateRealDist(groupItem, 3, distVector),
          _this$calculateRealDi16 = slicedToArray_default()(_this$calculateRealDi15, 2),
          realDx = _this$calculateRealDi16[0],
          realDy = _this$calculateRealDi16[1];

      if (this.$config.get('bodyEvent').shiftKey) {
        realDy = -(realDx * groupItem.height / groupItem.width);
      } // 변형되는 넓이 높이 구하기 


      var newWidth = groupItem.width - realDx;
      var newHeight = groupItem.height + realDy;
      this.moveDirectionVertext(groupItem, realDx, 0, newWidth, newHeight, 'to top right', [newWidth, 0, 0]);
    }
  }, {
    key: "moveVertext",
    value: function moveVertext() {
      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var distVector = esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint);

      if (this.state.moveType === 'to bottom right') {
        // 2
        this.moveBottomRightVertext(distVector);
      } else if (this.state.moveType === 'to top right') {
        this.moveTopRightVertext(distVector);
      } else if (this.state.moveType === 'to top left') {
        this.moveTopLeftVertext(distVector);
      } else if (this.state.moveType === 'to bottom left') {
        this.moveBottomLeftVertext(distVector);
      } else if (this.state.moveType === 'to top') {
        this.moveTopVertext(distVector);
      } else if (this.state.moveType === 'to left') {
        this.moveLeftVertext(distVector);
      } else if (this.state.moveType === 'to right') {
        this.moveRightVertext(distVector);
      } else if (this.state.moveType === 'to bottom') {
        this.moveBottomVertext(distVector);
      }

      this.state.dragging = true;
      this.renderPointers();
      this.refreshSmartGuides();
      this.emit('refreshSelectionStyleView');
      this.emit('refreshRect');
    }
  }, {
    key: "moveEndVertext",
    value: function moveEndVertext(dx, dy) {
      var _this4 = this;

      this.state.dragging = false;
      this.emit('recoverCursor');
      this.$selection.reselect();
      this.emit('refreshSelectionStyleView');
      this.nextTick(function () {
        _this4.command('setAttributeForMulti', 'move selection pointer', _this4.$selection.cloneValue('x', 'y', 'width', 'height', 'transform'));
      });
    }
  }, {
    key: "moveTo",
    value: function moveTo(newDist) {
      var _this5 = this;

      //////  snap 체크 하기 
      var snap = this.$snapManager.check(this.cachedGroupItem.rectVerties.map(function (v) {
        return esm["d" /* vec3 */].add([], v, newDist);
      }), 3);
      var localDist = esm["d" /* vec3 */].add([], snap, newDist);
      this.groupItem.reset({
        x: unit_Length["a" /* Length */].px(this.cachedGroupItem.x + localDist[0]),
        y: unit_Length["a" /* Length */].px(this.cachedGroupItem.y + localDist[1])
      });
      this.$selection.cachedItemVerties.forEach(function (it) {
        var instance = _this5.$selection.get(it.id);

        if (instance) {
          instance.reset({
            x: unit_Length["a" /* Length */].px(it.x + localDist[0]).round(1000),
            // 1px 단위로 위치 설정 
            y: unit_Length["a" /* Length */].px(it.y + localDist[1]).round(1000)
          });
        }
      });
      this.refreshSmartGuides();
    }
  }, {
    key: "refreshSmartGuides",
    value: function refreshSmartGuides() {
      // 가이드 라인 수정하기 
      var guides = this.$snapManager.findGuide(this.groupItem.guideVerties());
      this.emit('refreshGuideLine', guides);
    }
  }, {
    key: "getSelectedElements",
    value: function getSelectedElements() {
      var _this6 = this;

      var elements = this.$selection.ids.map(function (id) {
        return _this6.parent.state.cachedCurrentElement[id];
      });
      return elements;
    }
  }, {
    key: "initSelectionTool",
    value: function initSelectionTool() {
      var isInitializeMatrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (this.$editor.isSelectionMode() && this.$el.isHide() && this.$selection.isMany) {
        this.$el.show();
      } else {
        if (this.$el.isShow() && this.$selection.isMany === false) this.$el.hide();
      }

      this.initMatrix(isInitializeMatrix);
      this.makeSelectionTool();
    }
  }, {
    key: "item",
    get: function get() {
      var verties = this.verties || Object(collision["e" /* rectToVerties */])(0, 0, 0, 0);

      if (!this.state.newArtBoard) {
        this.state.newArtBoard = new ArtBoard["a" /* ArtBoard */]();
      }

      this.state.newArtBoard.reset({
        parent: this.$selection.currentProject,
        x: unit_Length["a" /* Length */].px(verties[0][0]),
        y: unit_Length["a" /* Length */].px(verties[0][1]),
        width: unit_Length["a" /* Length */].px(esm["d" /* vec3 */].dist(verties[0], verties[1])),
        height: unit_Length["a" /* Length */].px(esm["d" /* vec3 */].dist(verties[0], verties[3])),
        transform: '' // 새로운 그룹을 지정할 때는 transform 은 항상 초기화 된다. 

      });
      return this.state.newArtBoard;
    }
  }, {
    key: "initMatrix",
    value: function initMatrix() {
      var isInitializeMatrix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (isInitializeMatrix && this.$selection.isMany) {
        // matrix 초기화 
        this.verties = Object(func["clone"])(this.$selection.verties);
        this.angle = 0;
        this.localAngle = this.angle;
        this.groupItem = this.item;
        this.cachedGroupItem = this.item.matrix;
      } else {// 초기화 옵션이 없으면 아무것도 변경하지 않는다. 
        // matrix 초기화 
        // this.verties = clone(this.$selection.verties);
        // this.angle = 0;
        // this.localAngle = this.angle;
        // this.groupItem = this.item;     
        // this.cachedGroupItem = this.item.matrix;     
      }
    }
  }, {
    key: "makeSelectionTool",
    value: function makeSelectionTool() {
      this.renderPointers();
    }
    /**
     * 선택영역 컴포넌트 그리기 
     */

  }, {
    key: "renderPointers",
    value: function renderPointers() {
      if (!this.groupItem) return;
      var verties = this.groupItem.verties();
      var selectionVerties = this.groupItem.selectionVerties();
      this.state.renderPointerList = [this.$viewport.applyVerties(verties), this.$viewport.applyVerties(selectionVerties)];

      var _this$createRenderPoi = this.createRenderPointers.apply(this, toConsumableArray_default()(this.state.renderPointerList)),
          line = _this$createRenderPoi.line,
          point = _this$createRenderPoi.point,
          size = _this$createRenderPoi.size;

      this.refs.$pointerRect.updateDiff(line + point + size);
    }
  }, {
    key: "createPointer",
    value: function createPointer(pointer, number, rotate) {
      return (
        /*html*/
        "\n        <div    \n            class='pointer' \n            data-number=\"".concat(number, "\" \n            data-pointer=\"").concat(pointer, "\" \n            style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px) rotateZ(").concat(rotate || '0deg', ")\" \n        ></div>\n        ")
      );
    }
  }, {
    key: "createRotatePointer",
    value: function createRotatePointer(pointer, number) {
      var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'center center';
      if (pointer.length === 0) return '';

      if (number < 4) {
        return (
          /*html*/
          "\n            <div class='rotate-pointer no-fill' data-number=\"".concat(number, "\" style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px) scale(1.8);\" ></div>\n            ")
        );
      }

      return (
        /*html*/
        "\n        <div class='rotate-pointer' data-number=\"".concat(number, "\" style=\"transform: translate3d( calc(").concat(pointer[0], "px - 50%), calc(").concat(pointer[1], "px - 50%), 0px)\" ></div>\n        ")
      );
    }
  }, {
    key: "createPointerRect",
    value: function createPointerRect(pointers, rotatePointer) {
      if (pointers.length === 0) return '';
      var centerPointer = esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5);
      var line = "\n            M ".concat(centerPointer[0], ",").concat(centerPointer[1], " \n            L ").concat(rotatePointer[0], ", ").concat(rotatePointer[1], " \n        ");
      return (
        /*html*/
        "\n        <svg class='line' overflow=\"visible\">\n            <path \n                d=\"\n                    M ".concat(pointers[0][0], ", ").concat(pointers[0][1], " \n                    L ").concat(pointers[1][0], ", ").concat(pointers[1][1], " \n                    L ").concat(pointers[2][0], ", ").concat(pointers[2][1], " \n                    L ").concat(pointers[3][0], ", ").concat(pointers[3][1], " \n                    L ").concat(pointers[0][0], ", ").concat(pointers[0][1], "\n                    ").concat(line, "\n                    Z\n                \" />\n        </svg>")
      );
    }
  }, {
    key: "createSize",
    value: function createSize(pointers) {
      var top = esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5);
      var right = esm["d" /* vec3 */].lerp([], pointers[1], pointers[2], 0.5);
      var bottom = esm["d" /* vec3 */].lerp([], pointers[2], pointers[3], 0.5);
      var left = esm["d" /* vec3 */].lerp([], pointers[3], pointers[0], 0.5);
      var list = [{
        start: top,
        end: bottom
      }, {
        start: right,
        end: left
      }, {
        start: bottom,
        end: top
      }, {
        start: left,
        end: right
      }].map(function (it, index) {
        return {
          index: index,
          data: it
        };
      });
      list.sort(function (a, b) {
        return a.data.start[1] > b.data.start[1] ? -1 : 1;
      });
      var item = list[0];
      var newPointer = esm["d" /* vec3 */].lerp([], item.data.end, item.data.start, 1 + 16 / esm["d" /* vec3 */].dist(item.data.start, item.data.end));
      var width = this.groupItem.width.value;
      var height = this.groupItem.height.value;
      var diff = esm["d" /* vec3 */].subtract([], item.data.start, item.data.end);
      var angle = Object(math["calculateAngle360"])(diff[0], diff[1]) + 90;
      var text = "".concat(Object(math["round"])(width, 100), " x ").concat(Object(math["round"])(height, 100));

      if (this.state.isRotate) {
        var rotateZ = Transform["a" /* Transform */].get(this.groupItem.transform, 'rotateZ');

        if (rotateZ) {
          text = "".concat(rotateZ[0].value, "\xB0");
        }
      }

      return (
        /*html*/
        "\n            <div \n                class='size-pointer' \n                style=\"transform: translate3d( calc(".concat(newPointer[0], "px - 50%), calc(").concat(newPointer[1], "px - 50%), 0px) rotateZ(").concat(angle, "deg)\" >\n               ").concat(text, "\n            </div>\n        ")
      );
    }
  }, {
    key: "createRenderPointers",
    value: function createRenderPointers(pointers, selectionPointers) {
      var diff = esm["d" /* vec3 */].subtract([], esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5), esm["d" /* vec3 */].lerp([], pointers[0], pointers[2], 0.5)); //TODO: 여기서는 법선벡터를 구하게 되면 식이 훨씬 간단해진다. 

      var rotate = unit_Length["a" /* Length */].deg(Object(math["calculateAngle360"])(diff[0], diff[1]) - 90).round(1000);
      var rotatePointer = Object(collision["a" /* getRotatePointer */])(pointers, 30);
      var dist = esm["d" /* vec3 */].dist(pointers[0], pointers[2]);
      return {
        line: this.createPointerRect(pointers, rotatePointer),
        size: this.createSize(pointers),
        point: [// 4모서리에서도 rotate 할 수 있도록 맞춤 
        // this.createRotatePointer (selectionPointers[0], 0, 'bottom right'),
        // this.createRotatePointer (selectionPointers[1], 1, 'bottom left'),
        // this.createRotatePointer (selectionPointers[2], 2, 'top left'),
        // this.createRotatePointer (selectionPointers[3], 3, 'top right'),
        this.createRotatePointer(rotatePointer, 4, 'center center'), this.createPointer(pointers[0], 1, rotate), this.createPointer(pointers[1], 2, rotate), this.createPointer(pointers[2], 3, rotate), this.createPointer(pointers[3], 4, rotate), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[0], pointers[1], 0.5), 11), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[1], pointers[2], 0.5), 12), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[2], pointers[3], 0.5), 13), dist < 20 ? undefined : this.createPointer(esm["d" /* vec3 */].lerp([], pointers[3], pointers[0], 0.5), 14)].join('')
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionStyleView'),
    value: function value() {
      if (this.$selection.isMany) {
        this.renderPointers();
      }
    }
  }]);

  return GroupSelectionToolView;
}(GroupSelectionToolView_SelectionToolEvent);


Object(registElement["a" /* registElement */])({
  GroupSelectionToolView: GroupSelectionToolView_GroupSelectionToolView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/GuideLineView.js








function GuideLineView_createSuper(Derived) { var hasNativeReflectConstruct = GuideLineView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GuideLineView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var GuideLineView_line = function line(source, target) {
  var className = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'base-line';
  return (
    /*html*/
    "<line x1=\"".concat(source[0], "\" y1=\"").concat(source[1], "\" x2=\"").concat(target[0], "\" y2=\"").concat(target[1], "\" class='").concat(className, "' />")
  );
};

var hLine = function hLine(target) {
  return GuideLineView_line([target[0], 0, 0], [target[0], 10000, 0]);
};

var vLine = function vLine(target) {
  return GuideLineView_line([0, target[1], 0], [10000, target[1], 0]);
};

var GuideLineView_point = function point(target) {
  var dist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
  return (
    /*html*/
    "\n        <path \n            stroke=\"red\"\n            stroke-width=\"1\"\n            d=\"\n                M ".concat(target[0] - dist, " ").concat(target[1] - dist, "\n                L ").concat(target[0] + dist, " ").concat(target[1] + dist, "\n                M ").concat(target[0] - dist, " ").concat(target[1] + dist, "\n                L ").concat(target[0] + dist, " ").concat(target[1] - dist, "\n            \" \n        />\n    ")
  );
};
/**
 * 객체와의 거리의 가이드 라인을 그려주는 컴포넌트
 */


var GuideLineView_GuideLineView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GuideLineView, _EditorElement);

  var _super = GuideLineView_createSuper(GuideLineView);

  function GuideLineView() {
    classCallCheck_default()(this, GuideLineView);

    return _super.apply(this, arguments);
  }

  createClass_default()(GuideLineView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<svg class='guide-line-view' width=\"100%\" height=\"100%\" ></svg>"
      );
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        list: []
      };
    }
  }, {
    key: Object(Event["BIND"])('$el'),
    value: function value() {
      return {
        html: this.createGuideLine(this.state.list)
      };
    }
  }, {
    key: "createGuideLine",
    value: function createGuideLine(list) {
      var images = [];

      for (var i = 0, len = list.length; i < len; i++) {
        var _list$i = slicedToArray_default()(list[i], 3),
            source = _list$i[0],
            target = _list$i[1],
            axis = _list$i[2]; // 시작점 기준으로 맞출때가 필요하면 localSourceVertext 를 활용하자. 아직은 없음. 


        var localSourceVertext = this.$viewport.applyVerties([source])[0];
        var localTargetVertext = this.$viewport.applyVerties([target])[0];

        if (axis === 'x') {
          images.push(hLine(localTargetVertext));
          images.push(GuideLineView_point([localTargetVertext[0], localSourceVertext[1], localSourceVertext[2]]));
        }

        if (axis === 'y') {
          images.push(vLine(localTargetVertext));
          images.push(GuideLineView_point([localSourceVertext[0], localTargetVertext[1], localSourceVertext[2]]));
        } // images.push(point(localSourceVertext))


        images.push(GuideLineView_point(localTargetVertext));
      }

      return toConsumableArray_default()(new Set(images)).join('');
    }
  }, {
    key: "removeGuideLine",
    value: function removeGuideLine() {
      this.setState({
        list: []
      });
    }
  }, {
    key: "setGuideLine",
    value: function setGuideLine(list) {
      this.setState({
        list: list
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('removeGuideLine', 'refreshSelection'),
    value: function value() {
      this.removeGuideLine();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshGuideLine'),
    value: function value(list) {
      this.setGuideLine(list);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.refresh();
    }
  }]);

  return GuideLineView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GuideLineView: GuideLineView_GuideLineView
});
// CONCATENATED MODULE: ./src/el/editor/parser/SegmentManager.js




function SegmentManager_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function SegmentManager_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { SegmentManager_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { SegmentManager_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var SegmentManager_SegmentManager = /*#__PURE__*/function () {
  function SegmentManager() {
    classCallCheck_default()(this, SegmentManager);

    this.segmentList = [];
  }

  createClass_default()(SegmentManager, [{
    key: "reset",
    value: function reset() {
      this.segmentList = [];
      return this;
    }
  }, {
    key: "addLine",
    value: function addLine(a, b) {
      this.segmentList.push({
        line: true,
        x1: a.x,
        y1: a.y,
        x2: b.x,
        y2: b.y
      });
      return this;
    }
  }, {
    key: "addGuideLine",
    value: function addGuideLine(a, b) {
      this.segmentList.push({
        line: true,
        guide: true,
        x1: a.x,
        y1: a.y,
        x2: b.x,
        y2: b.y
      });
      return this;
    }
  }, {
    key: "addDistanceLine",
    value: function addDistanceLine(a, b) {
      this.segmentList.push({
        line: true,
        distance: true,
        x1: a.x,
        y1: a.y,
        x2: b.x,
        y2: b.y
      });
      return this;
    }
  }, {
    key: "addDistanceAngle",
    value: function addDistanceAngle(center, rx, ry, degree, last, line) {
      this.segmentList.push({
        angle: true,
        rx: rx,
        ry: ry,
        line: line,
        degree: degree,
        center: center,
        last: last
      });
      return this;
    }
  }, {
    key: "addPoint",
    value: function addPoint(obj, point, index, segment) {
      var selected = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      this.segmentList.push(SegmentManager_objectSpread(SegmentManager_objectSpread({}, obj), {}, {
        cx: point.x,
        cy: point.y,
        selected: selected,
        index: index,
        segment: segment,
        isFirst: point.isFirst,
        isLast: point.isLast,
        isSecond: point.isSecond
      }));
      return this;
    }
  }, {
    key: "addStartPoint",
    value: function addStartPoint(obj, point) {
      this.segmentList.push(SegmentManager_objectSpread(SegmentManager_objectSpread({}, obj), {}, {
        cx: point.x,
        cy: point.y,
        start: true
      }));
      return this;
    }
  }, {
    key: "addCurvePoint",
    value: function addCurvePoint(point, index, segment) {
      var selected = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      this.segmentList.push({
        curve: true,
        cx: point.x,
        cy: point.y,
        index: index,
        selected: selected,
        segment: segment,
        isFirst: point.isFirst,
        isLast: point.isLast,
        isSecond: point.isSecond
      });
      return this;
    }
  }, {
    key: "addText",
    value: function addText(point, text) {
      this.segmentList.push({
        type: 'text',
        cx: point.x,
        cy: point.y,
        text: text + ""
      });
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      this.segmentList.sort(function (a, b) {
        if (a.line && !b.line) {
          return -1;
        } else if (!a.line && b.line) {
          return 1;
        }

        return 0;
      });
      return this.segmentList.map(function (it) {
        if (it.angle) {
          return (
            /*html*/
            "\n                <path stroke-width='1' \n                    data-distance='true'\n                    fill=\"rgba(0,0,0,0.5)\"\n                    d=\"M ".concat(it.center.x, ",").concat(it.center.y, " A ").concat(it.rx, " ").concat(it.ry, ",").concat(it.degree, ",0,0,").concat(it.last.x, " ").concat(it.last.y, " L").concat(it.line.x, " ").concat(it.line.y, " Z\"\n                />")
          );
        } else if (it.line) {
          return (
            /*html*/
            "\n                <line stroke-width='1' \n                    data-segment=\"true\"\n                    data-is-last=\"".concat(it.isLast, "\"                \n                    data-guide='").concat(it.guide, "'\n                    data-distance='").concat(it.distance, "'\n                    x1='").concat(it.x1, "' x2='").concat(it.x2, "' y1='").concat(it.y1, "' y2='").concat(it.y2, "' \n                />")
          );
        } else if (it.text) {
          return (
            /*html*/
            "\n                <text x=\"".concat(it.cx, "\" y=\"").concat(it.cy, "\" dx=\"5\" dy=\"-5\" text-anchor=\"start\">").concat(it.text, "</text>\n                ")
          );
        } else if (it.curve) {
          return (
            /*html*/
            "\n                <circle \n                    cx='".concat(it.cx, "' \n                    cy='").concat(it.cy, "' \n                    r='4'                     \n                    class='curve' \n                    data-selected='").concat(it.selected, "'                    \n                    data-is-last=\"").concat(it.isLast, "\"                \n                    data-is-first=\"").concat(it.isFirst, "\"      \n                    data-is-second=\"").concat(it.isSecond, "\"                                  \n                    title=\"").concat(it.segment, " curve\"                \n                    data-index='").concat(it.index, "' \n                    data-segment-point='").concat(it.segment, "' \n                    data-segment=\"true\" \n                />")
          );
        } else if (it.start) {
          return (
            /*html*/
            "\n                <circle \n                    cx='".concat(it.cx, "' \n                    cy='").concat(it.cy, "' \n                    r='4'                    \n                    class='segment'\n                    data-selected='").concat(it.selected, "'\n                    title=\"Center\"\n                    data-start=\"true\" \n                />")
          );
        } else {
          return (
            /*html*/
            "\n                <circle \n                    cx='".concat(it.cx, "' \n                    cy='").concat(it.cy, "' \n                    r='4'                    \n                    class='segment'\n                    data-selected='").concat(it.selected, "'\n                    title=\"").concat(it.segment, "\"\n                    data-is-last=\"").concat(it.isLast, "\"\n                    data-is-first=\"").concat(it.isFirst, "\"\n                    data-is-second=\"").concat(it.isSecond, "\"\n                    data-index='").concat(it.index, "' \n                    data-segment-point='").concat(it.segment, "' \n                    data-segment=\"true\" \n                />")
          );
        }
      }).join('');
    }
  }]);

  return SegmentManager;
}();


// EXTERNAL MODULE: ./src/el/editor/parser/Point.js
var Point = __webpack_require__(25);

// EXTERNAL MODULE: ./src/el/editor/parser/PathStringManager.js
var PathStringManager = __webpack_require__(45);

// CONCATENATED MODULE: ./src/el/editor/parser/PathGenerator.js






function PathGenerator_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function PathGenerator_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PathGenerator_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PathGenerator_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }







var SEGMENT_DIRECTION = ['startPoint', 'endPoint', 'reversePoint'];

function calculateSnapPoint(points, sourceKey, target, distanceValue, dist) {
  var checkedPointList = points.filter(function (p) {
    if (!p) return false;
    return Math.abs(p[sourceKey] - target) <= dist;
  }).map(function (p) {
    return {
      dist: Math.abs(p[sourceKey] - target),
      point: p
    };
  }); // 점과의 거래가 작은게 우선순위가 높다 

  checkedPointList.sort(function (a, b) {
    return a.dist < b.dist ? -1 : 1;
  });
  var point = null;

  if (checkedPointList.length) {
    point = checkedPointList[0].point;
    distanceValue += point[sourceKey] - target;
  }

  return {
    point: point,
    distanceValue: distanceValue
  };
}

function calculateMovePointSnap(points, moveXY) {
  var dist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var snapPointX = calculatePointDist(points, 'x', moveXY.x, dist);
  var snapPointY = calculatePointDist(points, 'y', moveXY.y, dist);

  var snapEndPoint = PathGenerator_objectSpread({}, moveXY);

  if (snapPointX) {
    snapEndPoint.x = snapPointX.x;
  }

  if (snapPointY) {
    snapEndPoint.y = snapPointY.y;
  }

  var snapPointList = [];

  if (snapPointX) {
    snapPointList.push({
      startPoint: snapPointX,
      endPoint: snapEndPoint
    });
  }

  if (snapPointY) {
    snapPointList.push({
      startPoint: snapPointY,
      endPoint: snapEndPoint
    });
  }

  return {
    snapPointList: snapPointList,
    moveXY: snapEndPoint
  };
}

function calculatePointDist(points, sourceKey, target, dist) {
  var checkedPointList = [];
  var arr = SEGMENT_DIRECTION;
  points.filter(function (p) {
    return p;
  }).forEach(function (p) {
    arr.filter(function (key) {
      return p[key];
    }).forEach(function (key) {
      var point = p[key];
      var tempDist = Math.abs(point[sourceKey] - target);

      if (tempDist <= dist) {
        checkedPointList.push({
          dist: tempDist,
          point: point
        });
      }
    });
  });
  checkedPointList.sort(function (a, b) {
    return a.dist > b.dist ? 1 : -1;
  });
  return checkedPointList.length ? checkedPointList[0].point : null;
}

function _toPath(points, minX, minY) {
  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var d = [];

  for (var index = 0, len = points.length; index < len; index++) {
    var currentIndex = index;
    var current = points[currentIndex];
    if (!current) continue;

    if (current.command === 'M') {
      d.push({
        command: 'M',
        values: [current.startPoint]
      });
    } else {
      var prevPoint = Point["a" /* default */].getPrevPoint(points, index);

      if (current.curve === false) {
        // 1번이 점이면 
        // 꼭지점
        if (prevPoint.curve === false) {
          d.push({
            command: 'L',
            values: [current.startPoint]
          });
        } else {
          // 이전이 drag이고  지금이 점일 때  한쪽만 segment 가 있으므로 2차 Curve                         
          d.push({
            command: 'Q',
            values: [prevPoint.endPoint, current.startPoint]
          });
        }
      } else {
        // 이전은 점이고 현재가 드래그 일 때 , 한쪽만 segment 가 있으므로 2차 Curve 
        if (prevPoint.curve === false) {
          if (Point["a" /* default */].isEqual(current.reversePoint, current.startPoint)) {
            d.push({
              command: 'L',
              values: [current.startPoint]
            });
          } else {
            d.push({
              command: 'Q',
              values: [current.reversePoint, current.startPoint]
            });
          }
        } else {
          d.push({
            command: 'C',
            values: [prevPoint.endPoint, current.reversePoint, current.startPoint]
          });
        }
      }
    }

    if (current.close) {
      d.push({
        command: 'Z'
      });
    }
  }

  var dString = d.map(function (segment) {
    return calculateRelativePosition(minX, minY, segment, scale);
  }).join(' ');
  return {
    d: dString
  };
}

function calculateRelativePosition(minX, minY, segment) {
  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var command = segment.command,
      values = segment.values;

  switch (command) {
    case 'Z':
      return 'Z';

    default:
      var str = values.map(function (v) {
        var tx = v.x - minX === 0 ? 0 : (v.x - minX) / scale;
        var ty = v.y - minY === 0 ? 0 : (v.y - minY) / scale;
        return "".concat(tx, " ").concat(ty);
      }).join(' ');
      return "".concat(command, " ").concat(str);
  }
}

function checkInArea(area, point) {
  if (area.x2.value < point.x) {
    return false;
  }

  if (area.y2.value < point.y) {
    return false;
  }

  if (area.x.value > point.x) {
    return false;
  }

  if (area.y.value > point.y) {
    return false;
  }

  return true;
}

var PathGenerator_PathGenerator = /*#__PURE__*/function () {
  function PathGenerator(pathEditor) {
    classCallCheck_default()(this, PathGenerator);

    this.pathEditor = pathEditor;
    this.pathStringManager = new PathStringManager["a" /* default */]();
    this.guideLineManager = new PathStringManager["a" /* default */]();
    this.segmentManager = new SegmentManager_SegmentManager();
    this.initialize();
    this.initializeSelect();
  }

  createClass_default()(PathGenerator, [{
    key: "initialize",
    value: function initialize() {
      this.splitLines = [];
      this.guideLineManager.reset();
      this.segmentManager.reset();
      this.pathStringManager.reset();
    }
  }, {
    key: "initializeSelect",
    value: function initializeSelect() {
      this.selectedPointKeys = {};
      this.selectedPointList = [];
    }
  }, {
    key: "state",
    get: function get() {
      return this.pathEditor.state;
    }
  }, {
    key: "clonePoints",
    get: function get() {
      return toConsumableArray_default()(this.state.points);
    }
  }, {
    key: "selectInBox",
    value: function selectInBox(box) {
      var list = [];
      var target = ['startPoint', 'endPoint', 'reversePoint'];
      this.state.points.forEach(function (point, index) {
        target.forEach(function (key) {
          var p = point[key];

          if (checkInArea(box, p)) {
            list.push({
              x: p.x,
              y: p.y,
              key: key,
              index: index
            });
          }
        });
      });
      this.select.apply(this, list);
    }
  }, {
    key: "select",
    value: function select() {
      var _this = this;

      this.selectedPointKeys = {};

      for (var _len = arguments.length, list = new Array(_len), _key = 0; _key < _len; _key++) {
        list[_key] = arguments[_key];
      }

      this.selectedPointList = list;
      list.forEach(function (it) {
        var key = "".concat(it.key, "_").concat(it.index);
        _this.selectedPointKeys[key] = true;
      });
    }
  }, {
    key: "selectKeyIndex",
    value: function selectKeyIndex(key, index) {
      if (this.state.points[index]) {
        var point = this.state.points[index][key];

        if (point && !this.isSelectedSegment(key, index)) {
          this.select({
            x: point.x,
            y: point.y,
            key: key,
            index: index
          });
        }
      }
    }
  }, {
    key: "reselect",
    value: function reselect() {
      var _this2 = this;

      this.selectedPointList.forEach(function (it) {
        var point = _this2.state.points[it.index][it.key];
        it.x = point.x;
        it.y = point.y;
      });
    }
  }, {
    key: "isSelectedSegment",
    value: function isSelectedSegment(segment, index) {
      var key = "".concat(segment, "_").concat(index);
      return this.selectedPointKeys[key];
    }
  }, {
    key: "commitTransformMatrix",
    value: function commitTransformMatrix(point, transformMatrix) {
      var result = esm["d" /* vec3 */].transformMat4([], [point.x, point.y, 0], transformMatrix);
      return {
        x: result[0],
        y: result[1]
      };
    }
  }, {
    key: "transformMat4",
    value: function transformMat4(transformMatrix) {
      var _this3 = this;

      this.transformPoints.forEach(function (p, index) {
        var realPoint = _this3.state.points[index];
        Object.assign(realPoint.startPoint, _this3.commitTransformMatrix(p.startPoint, transformMatrix));
        Object.assign(realPoint.endPoint, _this3.commitTransformMatrix(p.endPoint, transformMatrix));
        Object.assign(realPoint.reversePoint, _this3.commitTransformMatrix(p.reversePoint, transformMatrix));
      });
    }
  }, {
    key: "transform",
    value: function transform(type) {
      var dx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var dy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var _this$transformRect = this.transformRect,
          x = _this$transformRect.x,
          y = _this$transformRect.y,
          width = _this$transformRect.width,
          height = _this$transformRect.height;
      var view = esm["a" /* mat4 */].create();
      esm["a" /* mat4 */].translate(view, view, [x, y, 0]); // 4. 다시 원래 위치로 옮긴다. 

      switch (type) {
        case 'flipX':
          // 내부 패스 변환 구현을 해야함 ,  순서를 안 맞추면 전혀 엉뚱한 결과값이 나오니 순서를 잘 맞춰줘요 
          esm["a" /* mat4 */].scale(view, view, [-1, 1, 1]); // 3. x 축 반전 시키고 

          esm["a" /* mat4 */].translate(view, view, [-width, 0, 0]); // 2. width 만큼 옮기고        

          break;

        case 'flipY':
          esm["a" /* mat4 */].scale(view, view, [1, -1, 1]); // 3. y 축 반전 시키고 

          esm["a" /* mat4 */].translate(view, view, [0, -height, 0]); // 2. height 만큼 옮기고        

          break;

        case 'flip':
          esm["a" /* mat4 */].scale(view, view, [-1, -1, 1]); // 3. x, y 축 반전 시키고 

          esm["a" /* mat4 */].translate(view, view, [-width, -height, 0]); // 2. width, height 만큼 옮기고        

          break;
      }

      esm["a" /* mat4 */].translate(view, view, [-x, -y, 0]); // 1. 원점으로 맞추고 

      this.transformMat4(view);
    }
  }, {
    key: "initTransform",
    value: function initTransform(rect) {
      this.transformRect = Object(func["clone"])(rect);
      this.transformPoints = this.clonePoints.map(function (p) {
        return {
          startPoint: Object(func["clone"])(p.startPoint),
          endPoint: Object(func["clone"])(p.endPoint),
          reversePoint: Object(func["clone"])(p.reversePoint)
        };
      });
    }
  }, {
    key: "setConnectedPoint",
    value: function setConnectedPoint(dx, dy) {
      var state = this.state;
      var x = state.dragXY.x + dx; // / editor.scale;

      var y = state.dragXY.y + dy; //  / editor.scale;

      var endPoint = {
        x: x,
        y: y
      };
      var reversePoint = {
        x: x,
        y: y
      };

      if (state.dragPoints) {
        state.reversePoint = Point["a" /* default */].getReversePoint(state.startPoint, endPoint);
      }

      var point = {
        startPoint: state.startPoint,
        endPoint: endPoint,
        curve: !!state.dragPoints,
        reversePoint: reversePoint,
        connected: true,
        close: true
      };
      state.points.push(point);
    }
  }, {
    key: "setLastPoint",
    value: function setLastPoint(startPoint) {
      var state = this.state;
      var endPoint = Object(func["clone"])(startPoint);
      var reversePoint = Object(func["clone"])(startPoint);
      var point = {
        startPoint: startPoint,
        endPoint: endPoint,
        curve: false,
        reversePoint: reversePoint,
        connected: false,
        close: false
      };
      state.points.push(point);
    }
    /**
     * 패스의 segment 를 드래그 하기 전에 snap 이 될 좌표를 캐쉬한다. 
     * 
     * @param {number} index 
     * @param {string} segmentKey 
     * @param {vec3[]} verties 
     */

  }, {
    key: "setCachePoint",
    value: function setCachePoint(index, segmentKey) {
      var verties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      var state = this.state;
      var points = state.points;
      this.snapPointList = []; // 객체 처음 움직일 때 snap line 은 초기화 

      state.selectedIndex = index;
      state.connectedPoint = Point["a" /* default */].getPrevPoint(points, index);

      if (state.connectedPoint && !state.connectedPoint.connected) {
        state.connectedPoint = null;
      }

      state.segment = Point["a" /* default */].getIndexPoint(points, index); // 연결된 포인트인 경우 , 처음 지점 포인트를 가지고 온다. 

      if (state.segment.connected) {
        state.connectedPoint = Point["a" /* default */].getNextPoint(points, index);
      }

      var isFirstSegment = Point["a" /* default */].isFirst(state.segment);

      if (isFirstSegment) {
        var lastPoint = Point["a" /* default */].getLastPoint(points, index);

        if (lastPoint.connected) {
          state.connectedPoint = lastPoint;
        }
      }

      state.segmentKey = segmentKey;
      state.isCurveSegment = state.segment.curve && state.segmentKey != 'startPoint';
      state.originalSegment = Object(func["clone"])(state.segment);

      if (state.connectedPoint) {
        state.originalConnectedPoint = Object(func["clone"])(state.connectedPoint);
      }

      state.cachedPoints = [];
      points.filter(function (p) {
        return p && p != state.segment;
      }).forEach(function (p) {
        state.cachedPoints.push(p.startPoint, p.reversePoint, p.endPoint);
      });
      state.cachedPoints.push.apply(state.cachedPoints, verties.map(function (it) {
        var _it = slicedToArray_default()(it, 3),
            x = _it[0],
            y = _it[1],
            z = _it[2];

        return {
          x: x,
          y: y,
          z: z
        };
      }));
    }
  }, {
    key: "moveSegment",
    value: function moveSegment(segmentKey, dx, dy) {
      var state = this.state;
      var originPoint = state.originalSegment[segmentKey];
      var targetPoint = state.segment[segmentKey];

      if (originPoint) {
        targetPoint.x = originPoint.x + dx;
        targetPoint.y = originPoint.y + dy;
      }
    }
  }, {
    key: "calculateToCurve",
    value: function calculateToCurve(point, nextPoint, prevPoint) {
      var centerX = (nextPoint.startPoint.x + prevPoint.startPoint.x) / 2;
      var centerY = (nextPoint.startPoint.y + prevPoint.startPoint.y) / 2;
      var dx = (nextPoint.startPoint.x - centerX) / 2;
      var dy = (nextPoint.startPoint.y - centerY) / 2;
      point.endPoint = {
        x: point.startPoint.x + dx,
        y: point.startPoint.y + dy
      };
      point.reversePoint = {
        x: point.startPoint.x - dx,
        y: point.startPoint.y - dy
      };
      return {
        dx: dx,
        dy: dy
      };
    }
  }, {
    key: "convertToCurve",
    value: function convertToCurve(index) {
      var points = this.state.points;
      var point = points[index];

      if (point.curve) {
        // curve 가 직선으로 
        point.curve = false;
        point.reversePoint = Object(func["clone"])(point.startPoint);
        point.endPoint = Object(func["clone"])(point.startPoint);

        if (point.command === 'M') {
          var lastPoint = Point["a" /* default */].getPrevPoint(points, point.index);

          if (lastPoint.connected) {
            lastPoint.curve = false;
            lastPoint.reversePoint = Object(func["clone"])(lastPoint.startPoint);
            lastPoint.endPoint = Object(func["clone"])(lastPoint.startPoint);
          }
        } else {
          var nextPoint = Point["a" /* default */].getNextPoint(points, index);

          if (nextPoint && nextPoint.command === 'M') {
            // 다음이 처음일 때 
            var firstPoint = nextPoint;
            firstPoint.curve = false;
            firstPoint.reversePoint = Object(func["clone"])(firstPoint.startPoint);
            firstPoint.endPoint = Object(func["clone"])(firstPoint.startPoint);
          }
        }
      } else {
        point.curve = true;
        var prevPoint = Point["a" /* default */].getPrevPoint(points, index);
        var nextPoint = Point["a" /* default */].getNextPoint(points, index);

        if (nextPoint && nextPoint.index < index && nextPoint.command === 'M') {
          // 현재 포인트가 마지막 일 때 connected 상태를 보고 
          // firstPoint 랑 맞춘다. 
          var firstPoint = nextPoint;
          nextPoint = Point["a" /* default */].getNextPoint(points, firstPoint.index);
          this.calculateToCurve(point, nextPoint, prevPoint); // 처음도 같이 변경해주기 

          firstPoint.curve = true;
          firstPoint.endPoint = Object(func["clone"])(point.endPoint);
          firstPoint.reversePoint = Object(func["clone"])(point.reversePoint);
        } else if (nextPoint && nextPoint.index > index && nextPoint.command !== 'M') {
          this.calculateToCurve(point, nextPoint, prevPoint);
        } else if (!nextPoint && prevPoint) {
          // 이전 점만 있고 다음 점이 없다면 
          var centerX = (point.startPoint.x - prevPoint.startPoint.x) / 3;
          var centerY = (point.startPoint.y - prevPoint.startPoint.y) / 3;
          point.endPoint = {
            x: point.startPoint.x + centerX,
            y: point.startPoint.y + centerY
          };
          point.reversePoint = Point["a" /* default */].getReversePoint(point.startPoint, point.endPoint);
        } else if (!prevPoint && nextPoint) {
          var centerX = (point.startPoint.x - nextPoint.startPoint.x) / 3;
          var centerY = (point.startPoint.y - nextPoint.startPoint.y) / 3;
          point.endPoint = {
            x: point.startPoint.x + centerX,
            y: point.startPoint.y + centerY
          };
          point.reverse = Point["a" /* default */].getReversePoint(point.startPoint, point.endPoint);
        }
      }
    }
  }, {
    key: "moveCurveSegment",
    value: function moveCurveSegment(segmentKey, dx, dy) {
      var state = this.state;
      this.moveSegment(segmentKey, dx, dy);
      var targetSegmentKey = segmentKey === 'endPoint' ? 'reversePoint' : 'endPoint';
      state.segment[targetSegmentKey] = Point["a" /* default */].getReversePoint(state.segment.startPoint, state.segment[segmentKey]);
    }
  }, {
    key: "rotateSegmentTarget",
    value: function rotateSegmentTarget(segmentKey, target) {
      var state = this.state;

      if (state.originalSegment && state.segment) {
        var _state$originalSegmen = state.originalSegment.startPoint,
            cx = _state$originalSegmen.x,
            cy = _state$originalSegmen.y;
        var _state$segment$segmen = state.segment[segmentKey],
            rx = _state$segment$segmen.x,
            ry = _state$segment$segmen.y;
        var _state$originalSegmen2 = state.originalSegment[target],
            tx = _state$originalSegmen2.x,
            ty = _state$originalSegmen2.y;

        var _getXYInCircle = Object(math["getXYInCircle"])(Object(math["calculateAngle360"])(rx - cx, ry - cy), Object(math["getDist"])(tx, ty, cx, cy), cx, cy),
            x = _getXYInCircle.x,
            y = _getXYInCircle.y;

        state.segment[target] = {
          x: x,
          y: y
        };
      }
    }
  }, {
    key: "rotateSegment",
    value: function rotateSegment(segmentKey) {
      this.rotateSegmentTarget(segmentKey, segmentKey === 'endPoint' ? 'reversePoint' : 'endPoint');
    }
  }, {
    key: "calculateSnap",
    value: function calculateSnap(segmentKey, dx, dy) {
      var _this4 = this;

      var dist = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      return function (dx, dy) {
        var state = _this4.state;
        var cachedPoints = state.cachedPoints;
        var original = state.originalSegment[segmentKey];

        if (!segmentKey) {
          return {
            dx: dx,
            dy: dy,
            snapPointList: []
          };
        }

        var realX = original.x + dx;
        var realY = original.y + dy;

        var _calculateSnapPoint = calculateSnapPoint(cachedPoints, 'x', realX, dx, dist),
            snapPointX = _calculateSnapPoint.point,
            dx = _calculateSnapPoint.distanceValue;

        var _calculateSnapPoint2 = calculateSnapPoint(cachedPoints, 'y', realY, dy, dist),
            snapPointY = _calculateSnapPoint2.point,
            dy = _calculateSnapPoint2.distanceValue;

        var snapEndPoint = {
          x: original.x + dx,
          y: original.y + dy
        };
        var snapPointList = [];

        if (snapPointX) {
          snapPointList.push({
            startPoint: snapPointX,
            endPoint: snapEndPoint
          });
        }

        if (snapPointY) {
          snapPointList.push({
            startPoint: snapPointY,
            endPoint: snapEndPoint
          });
        }

        return {
          dx: dx,
          dy: dy,
          snapPointList: snapPointList
        };
      }(dx, dy);
    }
  }, {
    key: "copySegment",
    value: function copySegment(from, to) {
      to.startPoint = Object(func["clone"])(from.startPoint);
      to.endPoint = Object(func["clone"])(from.endPoint);
      to.reversePoint = Object(func["clone"])(from.reversePoint);
    }
  }, {
    key: "selectedLength",
    get: function get() {
      return this.selectedPointList.length;
    }
  }, {
    key: "moveSelectedSegment",
    value: function moveSelectedSegment(dx, dy) {
      var _this5 = this;

      // 선택된 포인터를 옮길 때 
      // curve 에 연결된 endPoint와 reversePoint 를 같이 책임 질 것인가? 
      this.selectedPointList.forEach(function (it) {
        var target = _this5.state.points[it.index][it.key];
        target.x = it.x + dx;
        target.y = it.y + dy;
      });
    }
  }, {
    key: "removeSelectedSegment",
    value: function removeSelectedSegment() {
      var _this6 = this;

      // 선택된 포인터를 옮길 때 
      // curve 에 연결된 endPoint와 reversePoint 를 같이 책임 질 것인가? 
      this.selectedPointList.forEach(function (it) {
        var target = _this6.state.points[it.index][it.key];
        target.removed = true;
      });
      var pointGroup = Point["a" /* default */].splitPoints(this.state.points); // console.log(pointGroup)

      var newPoints = Point["a" /* default */].recoverPoints(pointGroup.map(function (points) {
        return points.filter(function (p) {
          return !p.startPoint.removed;
        }).map(function (p) {
          if (p.endPoint.removed) {
            p.endPoint = Object(func["clone"])(p.startPoint);
          }

          if (p.reversePoint.removed) {
            p.reversePoint = Object(func["clone"])(p.startPoint);
          }

          if (Point["a" /* default */].isEqual(p.endPoint, p.startPoint, p.reversePoint)) {
            p.command = 'L';
            p.curve = false;
          }

          return p;
        });
      })); // console.log(Point.splitPoints(newPoints));

      this.state.points = newPoints; // 

      this.select();
    }
  }, {
    key: "move",
    value: function move(dx, dy, e) {
      var state = this.state;
      var isCurveSegment = state.isCurveSegment,
          segmentKey = state.segmentKey,
          connectedPoint = state.connectedPoint;

      var _this$calculateSnap = this.calculateSnap(segmentKey, dx, dy, 3),
          dx = _this$calculateSnap.dx,
          dy = _this$calculateSnap.dy,
          snapPointList = _this$calculateSnap.snapPointList;

      this.snapPointList = snapPointList || [];

      if (this.selectedPointList.length > 1) {
        // 여러개가 동시에 선택된 상태에서는 
        this.moveSelectedSegment(dx, dy);
      } else if (isCurveSegment) {
        if (e.shiftKey) {
          // 상대편 길이 동일하게 curve 움직이기 
          this.moveSegment(segmentKey, dx, dy);
        } else if (e.altKey) {
          this.moveSegment(segmentKey, dx, dy); // 상대편 rotate 하는데 

          this.rotateSegment(segmentKey);
        } else {
          // Curve 만 움직이기 
          // 해당 segment 먼저 움직이고 
          this.moveSegment(segmentKey, dx, dy);
          var targetSegmentKey = segmentKey === 'endPoint' ? 'reversePoint' : 'endPoint';
          state.segment[targetSegmentKey] = Point["a" /* default */].getReversePoint(state.segment.startPoint, state.segment[segmentKey]);
        }
      } else {
        this.moveSegment('startPoint', dx, dy);
        this.moveSegment('endPoint', dx, dy);
        this.moveSegment('reversePoint', dx, dy);
      }

      connectedPoint && this.copySegment(state.segment, state.connectedPoint);
    }
  }, {
    key: "moveEnd",
    value: function moveEnd(dx, dy) {
      var state = this.state;
      var points = state.points;
      var x = state.dragXY.x + dx; // / editor.scale;

      var y = state.dragXY.y + dy; //  / editor.scale;

      var endPoint = {
        x: x,
        y: y
      };
      var reversePoint = {
        x: x,
        y: y
      };

      if (state.dragPoints) {
        // drag 상태 일 때 
        reversePoint = Point["a" /* default */].getReversePoint(state.startPoint, endPoint);
      }

      points.push({
        command: state.clickCount === 0 ? 'M' : '',
        startPoint: state.startPoint,
        endPoint: endPoint,
        curve: !!state.dragPoints,
        reversePoint: reversePoint
      });
      state.startPoint = null;
      state.dragPoints = false;
      state.moveXY = null;
    }
  }, {
    key: "setPoint",
    value: function setPoint(obj) {
      var p0 = obj.first[0];
      var p1 = obj.second[obj.second.length - 1];
      var allPoints = this.clonePoints;
      var firstItem = Point["a" /* default */].getPoint(allPoints, p0);
      var secondItem = Point["a" /* default */].getPoint(allPoints, p1);
      var newPoints = [PathGenerator_objectSpread(PathGenerator_objectSpread({}, firstItem), {}, {
        endPoint: obj.first[1]
      }), {
        startPoint: obj.first[3],
        reversePoint: obj.first[2],
        curve: true,
        endPoint: obj.second[1]
      }, PathGenerator_objectSpread(PathGenerator_objectSpread({}, secondItem), {}, {
        reversePoint: obj.second[2]
      })];
      var firstIndex = Point["a" /* default */].getIndex(allPoints, p0);
      allPoints.splice.apply(allPoints, [firstIndex, 2].concat(newPoints));
      this.state.points = allPoints;
      return firstIndex + 1;
    }
  }, {
    key: "setPointQuard",
    value: function setPointQuard(obj) {
      var p0 = obj.first[0];
      var p1 = obj.second[obj.second.length - 1];
      var allPoints = this.clonePoints;
      var firstItem = Point["a" /* default */].getPoint(allPoints, p0);
      var secondItem = Point["a" /* default */].getPoint(allPoints, p1); // console.log(firstItem, secondItem);
      // var fx = firstItem.startPoint.x + (firstItem.endPoint.x - firstItem.startPoint.x) / 3 
      // var fy = firstItem.startPoint.y + (firstItem.endPoint.y - firstItem.startPoint.y) / 3 

      if (firstItem.curve && secondItem.curve === false) {
        var newPoints = [PathGenerator_objectSpread(PathGenerator_objectSpread({}, firstItem), {}, {
          endPoint: firstItem.startPoint
        }), {
          startPoint: obj.first[2],
          reversePoint: obj.first[1],
          curve: true,
          endPoint: obj.second[1]
        }];
        var firstIndex = Point["a" /* default */].getIndex(allPoints, p0);
        allPoints.splice.apply(allPoints, [firstIndex, 1].concat(toConsumableArray_default()(newPoints)));
      } else {
        var newPoints = [PathGenerator_objectSpread({}, firstItem), {
          startPoint: obj.first[2],
          reversePoint: obj.first[1],
          curve: true,
          endPoint: obj.second[1]
        }, PathGenerator_objectSpread(PathGenerator_objectSpread({}, secondItem), {}, {
          reversePoint: obj.second[1],
          curve: true
        })];
        var firstIndex = Point["a" /* default */].getIndex(allPoints, p0);
        allPoints.splice.apply(allPoints, [firstIndex, 2].concat(toConsumableArray_default()(newPoints)));
      }

      this.state.points = allPoints;
      return firstIndex + 1;
    }
  }, {
    key: "setPointLine",
    value: function setPointLine(obj) {
      var p0 = obj.first[0];
      var allPoints = this.clonePoints;
      var newPoints = [{
        command: 'L',
        startPoint: obj.first[1],
        curve: false,
        endPoint: obj.first[1],
        reversePoint: obj.first[1]
      }];
      var firstIndex = Point["a" /* default */].getIndex(allPoints, p0);
      allPoints.splice.apply(allPoints, [firstIndex + 1, 0].concat(newPoints));
      this.state.points = allPoints;
      return firstIndex + 1;
    }
  }, {
    key: "toPath",
    value: function toPath() {
      var minX = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var minY = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var scale = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
      return _toPath(this.clonePoints, minX, minY, scale);
    }
  }, {
    key: "makeSVGPath",
    value: function makeSVGPath() {
      this.initialize();
      this.makePointGuide(this.clonePoints);
      this.makeMovePositionGuide();
      return this.toSVGString();
    }
  }, {
    key: "makeTriangleDistancePointGuide",
    value: function makeTriangleDistancePointGuide(first, second) {
      var minX = Math.min(first.startPoint.x, second.startPoint.x);
      var maxX = Math.max(first.startPoint.x, second.startPoint.x);
      var minY = Math.min(first.startPoint.y, second.startPoint.y);
      var maxY = Math.max(first.startPoint.y, second.startPoint.y); // right bottom 

      if (first.startPoint.x < second.startPoint.x && first.startPoint.y < second.startPoint.y) {
        this.segmentManager.addDistanceLine({
          x: minX,
          y: minY
        }, {
          x: maxX,
          y: minY
        }).addDistanceLine({
          x: maxX,
          y: minY
        }, {
          x: maxX,
          y: maxY
        });
        var centerX = minX;
        var centerY = minY;
        var angle = Object(math["calculateAngle360"])(maxX - minX, maxY - minY) - 180;
        var dist = 20;

        var _getXYInCircle2 = Object(math["getXYInCircle"])(0, dist, centerX, centerY),
            x = _getXYInCircle2.x,
            y = _getXYInCircle2.y;

        var _getXYInCircle3 = Object(math["getXYInCircle"])(angle / 2, dist, centerX, centerY),
            tx = _getXYInCircle3.x,
            ty = _getXYInCircle3.y;

        var last = Object(math["getXYInCircle"])(angle, dist, centerX, centerY);
        this.segmentManager.addDistanceAngle(last, dist, dist, angle, {
          x: x,
          y: y
        }, {
          x: x - dist,
          y: y
        }).addText({
          x: tx - 5,
          y: ty + 15
        }, angle);
      } else if (first.startPoint.x < second.startPoint.x && first.startPoint.y > second.startPoint.y) {
        // right top  
        this.segmentManager.addDistanceLine({
          x: minX,
          y: maxY
        }, {
          x: maxX,
          y: maxY
        }).addDistanceLine({
          x: maxX,
          y: minY
        }, {
          x: maxX,
          y: maxY
        });
      } else if (first.startPoint.x > second.startPoint.x && first.startPoint.y > second.startPoint.y) {
        // left top 
        this.segmentManager.addDistanceLine({
          x: minX,
          y: minY
        }, {
          x: minX,
          y: maxY
        }).addDistanceLine({
          x: minX,
          y: maxY
        }, {
          x: maxX,
          y: maxY
        });
      } else if (first.startPoint.x > second.startPoint.x && first.startPoint.y < second.startPoint.y) {
        // left bottom 
        this.segmentManager.addDistanceLine({
          x: minX,
          y: maxY
        }, {
          x: maxX,
          y: maxY
        }).addDistanceLine({
          x: maxX,
          y: minY
        }, {
          x: maxX,
          y: maxY
        });
      }
    }
  }, {
    key: "makeDistancePointGuide",
    value: function makeDistancePointGuide(prevPoint, current, nextPoint, index) {
      if (current.selected) {
        if (prevPoint) {
          this.makeTriangleDistancePointGuide(prevPoint, current);
        }

        if (nextPoint) {
          this.makeTriangleDistancePointGuide(current, nextPoint);
        }
      }
    }
  }, {
    key: "makeStartPointGuide",
    value: function makeStartPointGuide(prevPoint, current, nextPoint, index) {
      current.startPoint.isFirst = true;
      this.pathStringManager.M(current.startPoint);

      if (current.curve === false) {
        this.segmentManager.addPoint({}, current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

        if (!current.startPoint.isLast) {
          this.segmentManager.addText(current.startPoint, index + 1);
        }
      } else {
        this.segmentManager.addPoint({}, current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index)).addGuideLine(current.startPoint, current.endPoint);

        if (Point["a" /* default */].isEqual(current.startPoint, current.endPoint) === false) {
          this.segmentManager.addCurvePoint(current.endPoint, index, 'endPoint', this.isSelectedSegment('endPoint', index));
        }
      }
    }
  }, {
    key: "makeMiddlePointGuideSegment",
    value: function makeMiddlePointGuideSegment(prevPoint, current, nextPoint, index) {
      var mng = this.segmentManager;

      if (current.curve === false) {
        // 꼭지점
        if (prevPoint.curve === false) {
          mng.addPoint({}, current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

          if (!current.startPoint.isLast) {
            mng.addText(current.startPoint, index + 1);
          }
        } else {
          mng.addGuideLine(prevPoint.startPoint, prevPoint.endPoint).addCurvePoint(current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

          if (Point["a" /* default */].isEqual(prevPoint.startPoint, prevPoint.endPoint) === false) {
            mng.addCurvePoint(prevPoint.endPoint, prevPoint.index, 'endPoint', this.isSelectedSegment('endPoint', prevPoint.index));
          }

          if (!current.startPoint.isLast) {
            mng.addText(current.startPoint, index + 1);
          }
        }
      } else {
        // 현재가 curve 일 때 
        if (prevPoint.curve === false) {
          if (Point["a" /* default */].isEqual(current.reversePoint, current.startPoint)) {
            mng.addPoint({}, current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

            if (!current.startPoint.isLast) {
              mng.addText(current.startPoint, index + 1);
            }
          } else {
            mng.addGuideLine(current.startPoint, current.reversePoint).addCurvePoint(current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

            if (Point["a" /* default */].isEqual(current.startPoint, current.reversePoint) === false) {
              mng.addCurvePoint(current.reversePoint, index, 'reversePoint', this.isSelectedSegment('reversePoint', index));
            }

            if (!current.startPoint.isLast) {
              mng.addText(current.startPoint, index + 1);
            }
          }
        } else {
          if (current.connected) {
            mng.addGuideLine(prevPoint.startPoint, prevPoint.endPoint).addGuideLine(current.startPoint, current.reversePoint);

            if (Point["a" /* default */].isEqual(prevPoint.startPoint, prevPoint.endPoint) === false) {
              mng.addCurvePoint(prevPoint.endPoint, prevPoint.index, 'endPoint', this.isSelectedSegment('endPoint', prevPoint.index));
            }

            if (Point["a" /* default */].isEqual(current.startPoint, current.reversePoint) === false) {
              mng.addCurvePoint(current.reversePoint, index, 'reversePoint', this.isSelectedSegment('reversePoint', index));
            }
          } else {
            mng.addGuideLine(prevPoint.startPoint, prevPoint.endPoint).addGuideLine(current.startPoint, current.reversePoint).addCurvePoint(current.startPoint, index, 'startPoint', this.isSelectedSegment('startPoint', index));

            if (Point["a" /* default */].isEqual(prevPoint.startPoint, prevPoint.endPoint) === false) {
              mng.addCurvePoint(prevPoint.endPoint, prevPoint.index, 'endPoint', this.isSelectedSegment('endPoint', prevPoint.index));
            }

            if (Point["a" /* default */].isEqual(current.startPoint, current.reversePoint) === false) {
              mng.addCurvePoint(current.reversePoint, index, 'reversePoint', this.isSelectedSegment('reversePoint', index));
            }

            if (!current.startPoint.isLast) {
              mng.addText(current.startPoint, index + 1);
            }
          }
        }
      }
    }
  }, {
    key: "makeMiddlePointGuideRealPath",
    value: function makeMiddlePointGuideRealPath(prevPoint, current, nextPoint, index) {
      var mng = this.pathStringManager;

      if (current.curve === false) {
        // 꼭지점
        if (prevPoint.curve === false) {
          mng.L(current.startPoint);
        } else {
          mng.Q(prevPoint.endPoint, current.startPoint);
        }
      } else {
        // 현재가 curve 일 때 
        if (prevPoint.curve === false) {
          if (Point["a" /* default */].isEqual(current.reversePoint, current.startPoint)) {
            mng.L(current.startPoint);
          } else {
            mng.Q(current.reversePoint, current.startPoint);
          }
        } else {
          mng.C(prevPoint.endPoint, current.reversePoint, current.startPoint);
        }
      }
    }
  }, {
    key: "makeMiddlePointGuideSplitLine",
    value: function makeMiddlePointGuideSplitLine(prevPoint, current, nextPoint, index) {
      if (current.curve === false) {
        // 꼭지점
        if (prevPoint.curve === false) {
          this.splitLines.push(new PathStringManager["a" /* default */]().M(prevPoint.startPoint).L(current.startPoint).toString('split-path'));
        } else {
          this.splitLines.push(new PathStringManager["a" /* default */]().M(prevPoint.startPoint).Q(prevPoint.endPoint, current.startPoint).toString('split-path'));
        }
      } else {
        // 현재가 curve 일 때 
        if (prevPoint.curve === false) {
          if (Point["a" /* default */].isEqual(current.reversePoint, current.startPoint)) {
            this.splitLines.push(new PathStringManager["a" /* default */]().M(prevPoint.startPoint).L(current.startPoint).toString('split-path'));
          } else {
            this.splitLines.push(new PathStringManager["a" /* default */]().M(prevPoint.startPoint).Q(current.reversePoint, current.startPoint).toString('split-path'));
          }
        } else {
          this.splitLines.push(new PathStringManager["a" /* default */]().M(prevPoint.startPoint).C(prevPoint.endPoint, current.reversePoint, current.startPoint).toString('split-path'));
        }
      }
    }
  }, {
    key: "makePointGuide",
    value: function makePointGuide(points) {
      var selectedIndex = this.state.selectedIndex;

      for (var index = 0, len = points.length; index < len; index++) {
        var currentIndex = index;
        var current = points[currentIndex];
        if (!current) continue;
        var nextPoint = Point["a" /* default */].getNextPoint(points, index);
        var prevPoint = Point["a" /* default */].getPrevPoint(points, index);

        if (prevPoint && prevPoint.command === 'M') {
          if (current.startPoint) {
            current.startPoint.isSecond = true;
          }
        }

        if (current.startPoint) {
          if (nextPoint) {
            current.startPoint.isLast = nextPoint.command === 'M';
          } else {
            current.startPoint.isLast = index === len - 1;
          }
        }

        current.selected = selectedIndex === index; // 각도를 표시 해준다. 
        // 쓸 곳이 없다. 
        // this.makeDistancePointGuide(prevPoint, current, nextPoint, index);

        if (current.command === 'M') {
          this.makeStartPointGuide(prevPoint, current, nextPoint, index);
        } else {
          this.makeMiddlePointGuideRealPath(prevPoint, current, nextPoint, index);
          this.makeMiddlePointGuideSplitLine(prevPoint, current, nextPoint, index);
          this.makeMiddlePointGuideSegment(prevPoint, current, nextPoint, index);
        }

        if (current.close) {
          this.pathStringManager.Z();
        }
      }
    }
  }, {
    key: "makeMovePositionGuide",
    value: function makeMovePositionGuide() {
      var state = this.state;
      var points = state.points,
          startPoint = state.startPoint,
          moveXY = state.moveXY,
          dragPoints = state.dragPoints,
          altKey = state.altKey,
          snapPointList = state.snapPointList;

      if (moveXY) {
        /* moveXY 에도 snap 을 적용한다. */
        snapPointList = snapPointList || [];

        var _calculateMovePointSn = calculateMovePointSnap(points, moveXY, 3),
            movePointSnapPointList = _calculateMovePointSn.snapPointList,
            newMoveXY = _calculateMovePointSn.moveXY;

        snapPointList.push.apply(snapPointList, movePointSnapPointList);
        state.moveXY = newMoveXY;
        moveXY = newMoveXY;
        this.snapPointList = snapPointList;
        var prev = points[points.length - 1];

        if (dragPoints) {
          if (!prev) {
            var _Point$getReversePoin = Point["a" /* default */].getReversePoint(startPoint, moveXY),
                x = _Point$getReversePoin.x,
                y = _Point$getReversePoin.y;

            this.guideLineManager.M(moveXY).L(startPoint).L({
              x: x,
              y: y
            });
            this.segmentManager.addCurvePoint(startPoint).addCurvePoint(moveXY).addCurvePoint({
              x: x,
              y: y
            });
          } else if (prev.curve) {
            // 이전 것이 곡선이면 C 로 대응 
            var _Point$getReversePoin2 = Point["a" /* default */].getReversePoint(startPoint, moveXY),
                x = _Point$getReversePoin2.x,
                y = _Point$getReversePoin2.y;

            this.guideLineManager.M(prev.startPoint).C(prev.endPoint, {
              x: x,
              y: y
            }, startPoint);
            this.segmentManager.addGuideLine(prev.startPoint, prev.endPoint).addGuideLine(startPoint, {
              x: x,
              y: y
            }).addGuideLine(startPoint, moveXY).addCurvePoint(prev.endPoint).addCurvePoint({
              x: x,
              y: y
            }).addCurvePoint(moveXY).addPoint(false, startPoint);
          } else if (prev.curve === false) {
            // 이전 것이 점이면 Q 로 대응 
            // 내가 드래그 중이므로  내 좌표랑 start 좌표랑 비교 해서 이전 좌표를 구하기 
            var _Point$getReversePoin3 = Point["a" /* default */].getReversePoint(startPoint, moveXY),
                x = _Point$getReversePoin3.x,
                y = _Point$getReversePoin3.y;

            this.guideLineManager.M(prev.startPoint).Q({
              x: x,
              y: y
            }, startPoint);
            this.segmentManager.addGuideLine(moveXY, {
              x: x,
              y: y
            }).addPoint(false, startPoint).addCurvePoint({
              x: x,
              y: y
            }).addCurvePoint(moveXY);
          }
        } else {
          if (!prev) {} else if (prev.curve) {
            // 이전에 드래그 한 point 가 있을 경우 Q 로 
            this.guideLineManager.M(prev.startPoint).Q(prev.endPoint, moveXY);
            this.segmentManager.addGuideLine(prev.endPoint, prev.startPoint).addCurvePoint(prev.endPoint);
          } else {
            // 이전에 점이고 지금도 점이면  직선 
            if (!prev.close) {
              this.guideLineManager.M(prev.startPoint).L(moveXY);
              this.segmentManager.addPoint(false, prev.startPoint);
            }
          }
        }
      }
    }
  }, {
    key: "makeSnapLines",
    value: function makeSnapLines() {
      var snapLines = []; // snapPoint 를 그려준다. 

      if (this.snapPointList) {
        var snapPath = new PathStringManager["a" /* default */]();
        snapLines = this.snapPointList.map(function (snapPoint) {
          snapPath.reset();
          return snapPath.M(snapPoint.startPoint).L(snapPoint.endPoint).X(snapPoint.startPoint).toString('snap-path');
        });
      }

      return snapLines.join('');
    }
  }, {
    key: "toSVGString",
    value: function toSVGString() {
      return (
        /*html*/
        "\n        <svg width=\"100%\" height=\"100%\" class='svg-editor-canvas'>\n            ".concat(this.guideLineManager.toString('guide', this.state.isPolygon), "\n            ").concat(this.pathStringManager.toString('object', this.state.isPolygon), "\n            ").concat(this.splitLines.join(''), "\n            ").concat(this.makeSnapLines(), "\n            ").concat(this.segmentManager.toString(), "\n        </svg>\n        ")
      );
    }
  }], [{
    key: "generatorPathString",
    value: function generatorPathString(points) {
      var minX = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var minY = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
      return _toPath(points, minX, minY, scale).d;
    }
  }]);

  return PathGenerator;
}();


// EXTERNAL MODULE: ./src/el/editor/items/layers/SVGPathItem.js
var SVGPathItem = __webpack_require__(101);

// EXTERNAL MODULE: ./src/el/base/functions/bezier.js
var bezier = __webpack_require__(24);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/PathEditorView.js










function PathEditorView_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function PathEditorView_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PathEditorView_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PathEditorView_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PathEditorView_createSuper(Derived) { var hasNativeReflectConstruct = PathEditorView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PathEditorView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }













/**
 * convert array[x, y] to object{x, y} 
 * 
 * @param {array} param0 
 */

function xy(_ref) {
  var _ref2 = slicedToArray_default()(_ref, 2),
      x = _ref2[0],
      y = _ref2[1];

  return {
    x: x,
    y: y
  };
}

var PathEditorView_SegmentConvertor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SegmentConvertor, _EditorElement);

  var _super = PathEditorView_createSuper(SegmentConvertor);

  function SegmentConvertor() {
    classCallCheck_default()(this, SegmentConvertor);

    return _super.apply(this, arguments);
  }

  createClass_default()(SegmentConvertor, [{
    key: "convertToCurve",
    value: function convertToCurve(index) {
      this.pathGenerator.convertToCurve(index);
      this.renderPath();
      this.refreshPathLayer();
    }
  }, {
    key: Object(Event["DOUBLECLICK"])('$view [data-segment]'),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.convertToCurve(index);
    }
    /**
     * Touch 용 에디팅을 위한 이벤트 
     * 
     * @param {TouchEvent} e 
     */

  }, {
    key: Object(Event["DOUBLETAB"])('$view [data-segment]') + Event["PREVENT"] + Object(Event["DELAY"])(300),
    value: function value(e) {
      var index = +e.$dt.attr('data-index');
      this.convertToCurve(index);
    }
  }]);

  return SegmentConvertor;
}(EditorElement["a" /* EditorElement */]);

var PathEditorView_PathCutter = /*#__PURE__*/function (_SegmentConvertor) {
  inherits_default()(PathCutter, _SegmentConvertor);

  var _super2 = PathEditorView_createSuper(PathCutter);

  function PathCutter() {
    classCallCheck_default()(this, PathCutter);

    return _super2.apply(this, arguments);
  }

  createClass_default()(PathCutter, [{
    key: "calculatePointOnLine",
    value: function calculatePointOnLine(d, clickPosition) {
      var parser = new PathParser["a" /* default */](d);

      if (parser.segments[1].command === 'C') {
        var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2)), xy(parser.segments[1].values.slice(2, 4)), xy(parser.segments[1].values.slice(4, 6))];
        var curve = bezier["m" /* recoverBezier */].apply(void 0, toConsumableArray_default()(points).concat([200]));
        var t = curve(clickPosition.x, clickPosition.y);
        return Object(bezier["f" /* getBezierPoints */])(points, t).first[3];
      } else if (parser.segments[1].command === 'Q') {
        var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2)), xy(parser.segments[1].values.slice(2, 4))];
        var curve = bezier["o" /* recoverBezierQuard */].apply(void 0, toConsumableArray_default()(points).concat([200]));
        var t = curve(clickPosition.x, clickPosition.y);
        return Object(bezier["h" /* getBezierPointsQuard */])(points, t).first[2];
      } else if (parser.segments[1].command === 'L') {
        var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2))];
        var curve = bezier["n" /* recoverBezierLine */].apply(void 0, toConsumableArray_default()(points).concat([200]));
        var t = curve(clickPosition.x, clickPosition.y);
        return Object(bezier["g" /* getBezierPointsLine */])(points, t).first[1];
      }

      return clickPosition;
    }
  }, {
    key: Object(Event["POINTERSTART"])('$view .split-path') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.initRect();
      var parser = new PathParser["a" /* default */](e.$dt.attr('d'));
      var clickPosition = {
        x: e.xy.x - this.state.rect.x,
        y: e.xy.y - this.state.rect.y
      };
      var selectedSegmentIndex = -1;

      if (this.state.mode === 'path') {
        // this.changeMode('modify');
        this.state.dragXY = {
          x: e.xy.x - this.state.rect.x,
          y: e.xy.y - this.state.rect.y
        };
        this.state.startPoint = this.state.dragXY;
        this.pathGenerator.setLastPoint(this.state.startPoint);
        this.state.isSplitPath = true;
        this.renderPath();

        if (this.state.current) {
          this.refreshPathLayer();
        } else {
          this.addPathLayer();
          this.trigger('initPathEditorView');
        }

        return;
      } else {
        if (parser.segments[1].command === 'C') {
          var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2)), xy(parser.segments[1].values.slice(2, 4)), xy(parser.segments[1].values.slice(4, 6))];
          var curve = bezier["m" /* recoverBezier */].apply(void 0, toConsumableArray_default()(points).concat([200]));
          var t = curve(clickPosition.x, clickPosition.y);
          selectedSegmentIndex = this.pathGenerator.setPoint(Object(bezier["f" /* getBezierPoints */])(points, t));
        } else if (parser.segments[1].command === 'Q') {
          var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2)), xy(parser.segments[1].values.slice(2, 4))];
          var curve = bezier["o" /* recoverBezierQuard */].apply(void 0, toConsumableArray_default()(points).concat([200]));
          var t = curve(clickPosition.x, clickPosition.y);
          selectedSegmentIndex = this.pathGenerator.setPointQuard(Object(bezier["h" /* getBezierPointsQuard */])(points, t));
        } else if (parser.segments[1].command === 'L') {
          var points = [xy(parser.segments[0].values), xy(parser.segments[1].values.slice(0, 2))];
          var curve = bezier["n" /* recoverBezierLine */].apply(void 0, toConsumableArray_default()(points).concat([200]));
          var t = curve(clickPosition.x, clickPosition.y);
          selectedSegmentIndex = this.pathGenerator.setPointLine(Object(bezier["g" /* getBezierPointsLine */])(points, t));
        }

        this.renderPath();
        this.refreshPathLayer(); // segment 모드로 변경 

        this.changeMode('segment-move'); // segment 캐쉬 

        this.pathGenerator.setCachePoint(selectedSegmentIndex, 'startPoint', this.$viewport.applyVerties(this.$snapManager.getSnapPoints())); // segment 선택 하기 

        this.pathGenerator.selectKeyIndex('startPoint', selectedSegmentIndex);
      }
    }
  }]);

  return PathCutter;
}(PathEditorView_SegmentConvertor);

var PathEditorView_PathTransformEditor = /*#__PURE__*/function (_PathCutter) {
  inherits_default()(PathTransformEditor, _PathCutter);

  var _super3 = PathEditorView_createSuper(PathTransformEditor);

  function PathTransformEditor() {
    classCallCheck_default()(this, PathTransformEditor);

    return _super3.apply(this, arguments);
  }

  createClass_default()(PathTransformEditor, [{
    key: Object(Event["SUBSCRIBE"])('changePathTransform'),
    value: function value(transformMoveType) {
      this.resetTransformZone();
      var _this$state$transform = this.state.transformZoneRect,
          width = _this$state$transform.width,
          height = _this$state$transform.height;
      this.pathGenerator.initTransform(this.state.transformZoneRect);

      switch (transformMoveType) {
        case 'flipX':
          this.pathGenerator.transform('flipX', width, 0); // rect 가운데를 기준으로 뒤집기 

          break;

        case 'flipY':
          this.pathGenerator.transform('flipY', 0, height);
          break;

        case 'flip':
          this.pathGenerator.transform('flip', width, height);
      }

      this.renderPath();
      this.refreshPathLayer();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePathUtil'),
    value: function value(utilType) {
      switch (utilType) {
        case 'reverse':
          // 이전 scale 로 복구 한 다음 새로운 path 를 설정한다. 
          var _this$pathGenerator$t = this.pathGenerator.toPath(),
              d = _this$pathGenerator$t.d;

          var pathParser = new PathParser["a" /* default */](d);
          pathParser.reverse();
          pathParser.transformMat4(this.state.cachedMatrixInverse);
          this.refresh({
            d: pathParser.d
          });
          break;
      }
    }
  }]);

  return PathTransformEditor;
}(PathEditorView_PathCutter);

var FIELDS = ['fill', 'fill-opacity', 'stroke', 'stroke-width'];
/**
 * @property {PathGenerator} pathGenerator
 * @property {PathParser} pathParser
 */

var PathEditorView_PathEditorView = /*#__PURE__*/function (_PathTransformEditor) {
  inherits_default()(PathEditorView, _PathTransformEditor);

  var _super4 = PathEditorView_createSuper(PathEditorView);

  function PathEditorView() {
    classCallCheck_default()(this, PathEditorView);

    return _super4.apply(this, arguments);
  }

  createClass_default()(PathEditorView, [{
    key: "initialize",
    value: function initialize() {
      get_default()(getPrototypeOf_default()(PathEditorView.prototype), "initialize", this).call(this);

      this.pathParser = new PathParser["a" /* default */]();
      this.pathGenerator = new PathGenerator_PathGenerator(this);
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        changeEvent: 'updatePathItem',
        isShow: false,
        points: [],
        mode: 'path',
        clickCount: 0,
        isSegment: false,
        isFirstSegment: false,
        screenX: unit_Length["a" /* Length */].z(),
        screenY: unit_Length["a" /* Length */].z(),
        screenWidth: unit_Length["a" /* Length */].z(),
        screenHeight: unit_Length["a" /* Length */].z()
      };
    }
  }, {
    key: "scale",
    get: function get() {
      return this.$viewport.scale;
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='path-editor-view' tabIndex=\"-1\">\n            <div class='path-container' ref='$view'></div>\n            <div class='path-container split-panel'>\n                <svg width=\"100%\" height=\"100%\">\n                    <circle ref='$splitCircle' class='split-circle' />\n                </svg>\n            </div>\n            <div class='segment-box' ref='$segmentBox'></div>\n        </div>"
      );
    }
  }, {
    key: "isShow",
    value: function isShow() {
      return this.state.isShow;
    }
  }, {
    key: "initRect",
    value: function initRect() {
      var isForce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!this.state.rect || isForce) {
        this.state.rect = this.parent.refs.$body.rect();
      }
    }
  }, {
    key: Object(Event["KEYUP"])('document') + Object(Event["IF"])('isShow') + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      if (this.state.current) {
        this.refreshPathLayer();
        this.trigger('hidePathEditor');
      } else {
        this.addPathLayer();
      }

      if (!this.state.current && this.state.points.length) {
        this.trigger('initPathEditorView');
      } else {
        this.trigger('hidePathEditor');
      }
    }
  }, {
    key: Object(Event["KEYUP"])('document') + Object(Event["IF"])('isShow') + Event["ESCAPE"] + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      if (this.state.current) {
        this.refreshPathLayer();
      } else {
        this.addPathLayer();
      }

      this.trigger('hidePathEditor');
    }
  }, {
    key: "totalPathLength",
    get: function get() {
      if (!this.refs.$view) return 0;
      var $obj = this.refs.$view.$('path.object');
      if (!$obj) return 0;
      return $obj.totalLength;
    }
  }, {
    key: "makePathLayer",
    value: function makePathLayer() {
      var _this = this;

      var project = this.$selection.currentProject;
      var layer;

      if (project) {
        var newPath = new PathParser["a" /* default */](this.pathGenerator.toPath().d);
        newPath.transformMat4(this.$viewport.matrixInverse);
        var bbox = newPath.getBBox();
        var newWidth = esm["d" /* vec3 */].distance(bbox[1], bbox[0]);
        var newHeight = esm["d" /* vec3 */].distance(bbox[3], bbox[0]);
        newPath.translate(-bbox[0][0], -bbox[0][1]);
        var pathItem = {
          x: unit_Length["a" /* Length */].px(bbox[0][0]),
          y: unit_Length["a" /* Length */].px(bbox[0][1]),
          width: unit_Length["a" /* Length */].px(newWidth),
          height: unit_Length["a" /* Length */].px(newHeight),
          d: newPath.d,
          totalLength: this.totalPathLength,
          fill: "#C4C4C4"
        };
        FIELDS.forEach(function (key) {
          if (_this.state[key]) {
            pathItem[key] = _this.state[key];
          }
        });
        var containerItem = this.$selection.getArtboardByPoint(bbox[0]) || project;
        layer = containerItem.appendChildItem(new SVGPathItem["a" /* SVGPathItem */](pathItem));
      }

      return layer;
    }
  }, {
    key: "isBoxMode",
    get: function get() {
      return this.state.box === 'box';
    }
  }, {
    key: "updatePathLayer",
    value: function updatePathLayer() {
      var _this$pathGenerator$t2 = this.pathGenerator.toPath(),
          d = _this$pathGenerator$t2.d;

      var parser = new PathParser["a" /* default */](d);
      parser.transformMat4(this.$viewport.matrixInverse);
      this.emit(this.state.changeEvent, {
        d: parser.d,
        box: this.state.box,
        totalLength: this.totalPathLength
      });
    }
    /**
     * ArtBoard 에 path layer 추가하기 
     * 
     * @param {number} dx 
     * @param {number} dy 
     */

  }, {
    key: "addPathLayer",
    value: function addPathLayer() {
      this.changeMode('modify');
      var layer = this.makePathLayer();

      if (layer && layer.totalLength) {
        this.$selection.select(layer);
        this.trigger('hidePathEditor');
        this.emit('refreshAll');
      }
    }
  }, {
    key: "changeMode",
    value: function changeMode(mode, obj) {
      this.setState(PathEditorView_objectSpread({
        mode: mode,
        clickCount: 0,
        moveXY: null
      }, obj), false);
      this.emit('changePathManager', this.state.mode);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePathManager'),
    value: function value(obj) {
      this.setState(PathEditorView_objectSpread(PathEditorView_objectSpread({}, obj), {}, {
        clickCount: 0
      }), false);
      this.renderPath();
    }
  }, {
    key: "isMode",
    value: function isMode(mode) {
      return this.state.mode === mode;
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value(newScale, oldScale) {
      if (this.$el.isShow()) {
        // 이전 scale 로 복구 한 다음 새로운 path 를 설정한다. 
        var _this$pathGenerator$t3 = this.pathGenerator.toPath(),
            d = _this$pathGenerator$t3.d;

        var pathParser = new PathParser["a" /* default */](d);
        pathParser.transformMat4(this.state.cachedMatrixInverse);
        this.refresh({
          d: pathParser.d
        });
      }
    }
  }, {
    key: "refresh",
    value: function refresh(obj) {
      if (obj && obj.d) {
        this.pathParser.reset(obj.d);
        this.pathParser.transformMat4(this.$viewport.matrix);
        this.state.cachedMatrixInverse = this.$viewport.matrixInverse;
        this.state.points = this.pathParser.convertGenerator();
      }

      this.pathGenerator.initializeSelect();
      this.renderPath();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showPathEditor'),
    value: function value() {
      var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'path';
      var obj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (mode === 'move') {
        obj.current = null;
        obj.points = [];
      }

      obj.box = obj.box || 'canvas';
      this.changeMode(mode, obj);
      this.refresh(obj);
      this.state.isShow = true;
      this.$el.show();
      this.$el.focus();
      this.emit('showPathManager', {
        mode: this.state.mode
      });
      this.emit('hidePathDrawEditor');
      this.emit('change.mode.view', 'PathEditorView');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hidePathEditor'),
    value: function value() {
      if (this.$el.isShow()) {
        this.pathParser.reset('');
        this.setState(this.initState(), false);
        this.refs.$view.empty();
        this.$el.hide();
        this.emit('finishPathEdit');
        this.emit('hidePathManager');
        this.emit('change.mode.view');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hideAddViewLayer'),
    value: function value() {
      this.state.isShow = false;
      this.pathParser.reset('');
      this.setState(this.initState(), false);
      this.refs.$view.empty();
      this.$el.hide();
      this.emit('hidePathManager');
    }
  }, {
    key: Object(Event["BIND"])('$view'),
    value: function value() {
      return {
        "class": {
          'path': this.state.mode === 'path',
          'modify': this.state.mode === 'modify',
          'box': this.state.box === 'box',
          'segment-move': this.state.mode === 'segment-move'
        },
        innerHTML: this.pathGenerator.makeSVGPath()
      };
    }
  }, {
    key: Object(Event["BIND"])('$splitCircle'),
    value: function value() {
      if (this.state.splitXY) {
        return {
          cx: this.state.splitXY.x,
          cy: this.state.splitXY.y,
          r: 5
        };
      } else {
        return {
          r: 0
        };
      }
    }
  }, {
    key: "refreshPathLayer",
    value: function refreshPathLayer() {
      this.updatePathLayer();
    }
  }, {
    key: "renderPath",
    value: function renderPath() {
      this.bindData('$view');
    }
  }, {
    key: "getPathRect",
    value: function getPathRect() {
      this.initRect(true);
      var $obj = this.refs.$view.$('path.object');
      var pathRect = {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      };

      if ($obj) {
        pathRect = $obj.rect();
        pathRect.x -= this.state.rect.x;
        pathRect.y -= this.state.rect.y;
      }

      return pathRect;
    }
  }, {
    key: "resetTransformZone",
    value: function resetTransformZone() {
      var rect = this.getPathRect();
      this.state.transformZoneRect = rect;
    }
  }, {
    key: Object(Event["POINTERMOVE"])('$view') + Event["PREVENT"],
    value: function value(e) {
      this.initRect();

      if (this.isMode('path') && this.state.rect) {
        this.state.moveXY = {
          x: e.xy.x - this.state.rect.x,
          y: e.xy.y - this.state.rect.y
        };
        this.state.altKey = e.altKey;
        this.renderPath();
      } else {
        var $target = Dom["a" /* default */].create(e.target);
        var isSplitPath = $target.hasClass('split-path');

        if (isSplitPath) {
          this.state.splitXY = this.calculatePointOnLine($target.attr('d'), {
            x: e.xy.x - this.state.rect.x,
            y: e.xy.y - this.state.rect.y
          });
        } else {
          this.state.splitXY = null;
        }

        this.bindData('$splitCircle');
        this.state.altKey = false;
      }
    }
  }, {
    key: Object(Event["POINTERSTART"])('$view :not(.split-path)') + Event["PREVENT"] + Event["STOP"] + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.initRect();
      this.state.altKey = false;
      var isPathMode = this.isMode('path');
      this.state.dragXY = {
        x: e.xy.x - this.state.rect.x,
        y: e.xy.y - this.state.rect.y
      };
      this.state.isOnCanvas = false;
      var $target = Dom["a" /* default */].create(e.target);

      if ($target.hasClass('svg-editor-canvas') && !isPathMode) {
        this.state.isOnCanvas = true; // return false; 
      } else {
        this.pathGenerator.reselect();
        this.state.isSegment = $target.attr('data-segment') === 'true';
        this.state.isFirstSegment = this.state.isSegment && $target.attr('data-is-first') === 'true';
      }

      if (isPathMode) {
        if (this.state.isFirstSegment) {
          // 마지막 지점을 연결할 예정이기 때문에 
          // startPoint 는  M 이었던 startPoint 로 정리된다. 
          var index = +$target.attr('data-index');
          this.state.startPoint = this.state.points[index].startPoint;
        } else {
          this.state.startPoint = this.state.dragXY;
        }

        this.state.dragPoints = false;
        this.state.endPoint = null;
      } else {
        if (this.isOnCanvas) {
          this.renderSelectBox(this.state.dragXY);
        } else if (this.state.isSegment) {
          this.changeMode('segment-move');

          var _$target$attrs = $target.attrs('data-index', 'data-segment-point'),
              _$target$attrs2 = slicedToArray_default()(_$target$attrs, 2),
              index = _$target$attrs2[0],
              segmentKey = _$target$attrs2[1];

          this.pathGenerator.setCachePoint(+index, segmentKey, this.$viewport.applyVerties(this.$snapManager.getSnapPoints()));
          this.pathGenerator.selectKeyIndex(segmentKey, index);
        }
      }
    }
  }, {
    key: "hideSelectBox",
    value: function hideSelectBox() {
      this.refs.$segmentBox.css({
        left: unit_Length["a" /* Length */].px(-100000)
      });
    }
  }, {
    key: "renderSelectBox",
    value: function renderSelectBox() {
      var startXY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var dx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var dy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var obj = {
        left: unit_Length["a" /* Length */].px(startXY.x + (dx < 0 ? dx : 0)),
        top: unit_Length["a" /* Length */].px(startXY.y + (dy < 0 ? dy : 0)),
        width: unit_Length["a" /* Length */].px(Math.abs(dx)),
        height: unit_Length["a" /* Length */].px(Math.abs(dy))
      };
      this.refs.$segmentBox.css(obj);
    }
  }, {
    key: "getSelectBox",
    value: function getSelectBox() {
      var _this$refs$$segmentBo = this.refs.$segmentBox.styles('left', 'top', 'width', 'height').map(function (it) {
        return unit_Length["a" /* Length */].parse(it);
      }),
          _this$refs$$segmentBo2 = slicedToArray_default()(_this$refs$$segmentBo, 4),
          x = _this$refs$$segmentBo2[0],
          y = _this$refs$$segmentBo2[1],
          width = _this$refs$$segmentBo2[2],
          height = _this$refs$$segmentBo2[3];

      var rect = {
        x: x,
        y: y,
        width: width,
        height: height
      };
      rect.x2 = unit_Length["a" /* Length */].px(rect.x.value + rect.width.value);
      rect.y2 = unit_Length["a" /* Length */].px(rect.y.value + rect.height.value);
      return rect;
    }
  }, {
    key: "move",
    value: function move(dx, dy) {
      if (this.state.isOnCanvas) {
        // 드래그 상자 만들기 
        this.renderSelectBox(this.state.dragXY, dx, dy);
      } else if (this.isMode('segment-move')) {
        var e = this.$config.get('bodyEvent');
        this.pathGenerator.move(dx, dy, e);
        this.renderPath();
        this.updatePathLayer();
      } else if (this.isMode('path')) {
        var dist = Object(math["getDist"])(dx, dy, 0, 0);

        if (dist >= 2) {
          var e = this.$config.get('bodyEvent');
          this.state.dragPoints = e.altKey ? false : true;
        }
      }
    }
  }, {
    key: "renderSegment",
    value: function renderSegment(callback) {
      if (this.pathGenerator.selectedLength) {
        // reselect 로 이전 점들의 위치를 초기화 해줘야 한다. 꼭 
        this.pathGenerator.reselect(); // reselect 로 이전 점들의 위치를 초기화 해줘야 한다. 꼭 

        if (Object(func["isFunction"])(callback)) callback();
        this.renderPath();
        this.updatePathLayer();
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('deleteSegment'),
    value: function value() {
      var _this2 = this;

      // 특정 세그먼트만 삭제하기 
      this.renderSegment(function () {
        _this2.pathGenerator.removeSelectedSegment();
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('moveSegment'),
    value: function value(dx, dy) {
      var _this3 = this;

      // segment 만 움직이기 
      this.renderSegment(function () {
        _this3.pathGenerator.moveSelectedSegment(dx, dy);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('initPathEditorView'),
    value: function value() {
      this.pathParser.reset('');
      this.setState(this.initState(), false);
      this.state.isShow = true;
      this.refs.$view.empty();
      this.$el.focus();
    }
  }, {
    key: "end",
    value: function end(dx, dy) {
      if (this.state.isOnCanvas) {
        if (dx === 0 && dy === 0) {
          // 아무것도 움직인게 없으면 편집 종료 
          this.changeMode('modify');
          this.trigger('hidePathEditor');
        } else {
          // 움직였으면 drag 상자를 기준으로 좌표를 검색해서 선택한다. 
          // this.renderSelectBox(this.state.dragXY, dx, dy);
          this.changeMode('segment-move');
          this.pathGenerator.selectInBox(this.getSelectBox());
          this.renderPath(); // 여기에 무엇을 할까? 

          this.hideSelectBox();
        }
      } else if (this.isMode('modify')) {// NOOP 
      } else if (this.isMode('segment-move')) {
        this.changeMode('modify'); // 마지막 지점에서 다시 renderpath 를 하게 되면 element 가 없어서 double 클릭을 인식 할 수가 없음. 
        // 그래서 삭제하니 이코드는 주석으로 그대로 나두자.      
        // this.renderPath()        
      } else if (this.isMode('path')) {
        if (this.state.isFirstSegment) {
          this.changeMode('modify');
          this.pathGenerator.setConnectedPoint(dx, dy);
          this.renderPath();

          if (this.state.current) {
            this.refreshPathLayer();
          } else {
            this.addPathLayer();
            this.trigger('initPathEditorView');
          }
        } else {
          if (this.state.isSplitPath) {// NOOP 
          } else {
            this.pathGenerator.moveEnd(dx, dy);
            this.state.clickCount++;
            this.renderPath();
          }
        }

        this.state.isSplitPath = false;
      }
    }
  }]);

  return PathEditorView;
}(PathEditorView_PathTransformEditor);


Object(registElement["a" /* registElement */])({
  PathEditorView: PathEditorView_PathEditorView
});
// EXTERNAL MODULE: ./src/el/editor/property-parser/SVGFill.js + 3 modules
var SVGFill = __webpack_require__(42);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/PathDrawView.js








function PathDrawView_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function PathDrawView_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { PathDrawView_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { PathDrawView_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function PathDrawView_createSuper(Derived) { var hasNativeReflectConstruct = PathDrawView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PathDrawView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var PathDrawView_FIELDS = ['fill', 'fill-opacity', 'stroke', 'stroke-width', 'stroke-linecap', 'stroke-linejoin'];

var PathDrawView_PathDrawView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PathDrawView, _EditorElement);

  var _super = PathDrawView_createSuper(PathDrawView);

  function PathDrawView() {
    classCallCheck_default()(this, PathDrawView);

    return _super.apply(this, arguments);
  }

  createClass_default()(PathDrawView, [{
    key: "initialize",
    value: function initialize() {
      get_default()(getPrototypeOf_default()(PathDrawView.prototype), "initialize", this).call(this);

      this.pathParser = new PathParser["a" /* default */]();
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        points: [],
        $target: null,
        fill: 'transparent',
        stroke: 'black',
        'fill-opacity': null,
        'stroke-width': 2,
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        tolerance: 1,
        screenX: unit_Length["a" /* Length */].z(),
        screenY: unit_Length["a" /* Length */].z(),
        screenWidth: unit_Length["a" /* Length */].z(),
        screenHeight: unit_Length["a" /* Length */].z()
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeDrawManager'),
    value: function value(obj) {
      this.setState(PathDrawView_objectSpread({}, obj), false);
    }
  }, {
    key: "scale",
    get: function get() {
      return this.$viewport.scale;
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='path-draw-view' tabIndex=\"-1\">\n            <div class='path-draw-container' ref='$view'></div>\n        </div>"
      );
    }
  }, {
    key: "initRect",
    value: function initRect() {
      var isForce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (!this.state.rect || isForce) {
        this.state.rect = this.parent.refs.$body.rect();
      }
    }
  }, {
    key: Object(Event["KEYUP"])('document') + Object(Event["IF"])('isShow') + Event["ESCAPE"] + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      this.trigger('hidePathDrawEditor');
    }
  }, {
    key: "totalPathLength",
    get: function get() {
      if (!this.refs.$view) return 0;
      var $obj = this.refs.$view.$('path.object');
      if (!$obj) return 0;
      return $obj.totalLength;
    }
  }, {
    key: "makePathLayer",
    value: function makePathLayer(pathRect) {
      var _this = this;

      var project = this.$selection.currentProject;
      var layer;

      if (project) {
        // rect 기준으로 상대 좌표로 다시 변환 
        var simplyPoints = Point["a" /* default */].simply(this.state.points, this.state.tolerance);
        var drawParser = new PathParser["a" /* default */](PathStringManager["a" /* default */].makePathByPoints(simplyPoints));
        var newPath = new PathParser["a" /* default */](PathGenerator_PathGenerator.generatorPathString(drawParser.convertGenerator()));
        newPath.transformMat4(this.$viewport.matrixInverse);
        var bbox = newPath.getBBox();
        var newWidth = esm["d" /* vec3 */].distance(bbox[1], bbox[0]);
        var newHeight = esm["d" /* vec3 */].distance(bbox[3], bbox[0]);
        newPath.translate(-bbox[0][0], -bbox[0][1]);
        var pathItem = {
          x: unit_Length["a" /* Length */].px(bbox[0][0]),
          y: unit_Length["a" /* Length */].px(bbox[0][1]),
          width: unit_Length["a" /* Length */].px(newWidth),
          height: unit_Length["a" /* Length */].px(newHeight),
          d: newPath.d,
          totalLength: this.totalPathLength
        };
        PathDrawView_FIELDS.forEach(function (key) {
          if (_this.state[key]) Object.assign(pathItem, defineProperty_default()({}, key, _this.state[key]));
        });
        layer = project.appendChildItem(new SVGPathItem["a" /* SVGPathItem */](pathItem));
      }

      return layer;
    }
  }, {
    key: "addPathLayer",
    value: function addPathLayer() {
      var pathRect = this.getPathRect();

      if (pathRect.width !== 0 && pathRect.height !== 0) {
        var layer = this.makePathLayer(pathRect);

        if (layer) {
          this.$selection.select(layer);
          this.trigger('hidePathDrawEditor');
          this.emit('refreshAll');
        }
      }
    }
  }, {
    key: "changeMode",
    value: function changeMode(obj) {
      this.setState(PathDrawView_objectSpread(PathDrawView_objectSpread({}, this.initState()), obj), false);
    }
  }, {
    key: "getCurrentObject",
    value: function getCurrentObject() {
      var current = this.state.current;

      if (!current) {
        return null;
      }

      return {
        current: current,
        d: current.d,
        screenX: current.screenX,
        screenY: current.screenY,
        screenWidth: current.screenWidth,
        screenHeight: current.screenHeight
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showPathDrawEditor'),
    value: function value() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.changeMode(obj);
      this.$el.show();
      this.$el.focus();
      this.emit('showDrawManager', {
        instance: this,
        fill: this.state.fill,
        stroke: this.state.stroke,
        'fill-opacity': this.state['fill-opacity'],
        'stroke-width': this.state['stroke-width'],
        'stroke-linecap': this.state['stroke-linecap'],
        'stroke-linejoin': this.state['stroke-linejoin']
      });
      this.emit('hidePathEditor');
      this.emit('change.mode.view', 'PathDrawView');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('initPathDrawEditor'),
    value: function value() {
      this.pathParser.reset('');
      this.refs.$view.empty();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hidePathDrawEditor'),
    value: function value() {
      if (this.$el.isShow()) {
        this.trigger('initPathDrawEditor');
        this.$el.hide();
        this.emit('finishPathEdit');
        this.emit('hideDrawManager');
        this.emit('change.mode.view');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hideAddViewLayer'),
    value: function value() {
      this.$el.hide();
      this.emit('hideDrawManager');
    }
  }, {
    key: "getInnerId",
    value: function getInnerId() {
      var postfix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return 'draw-manager-' + postfix;
    }
  }, {
    key: "toFillSVG",
    get: function get() {
      return SVGFill["a" /* SVGFill */].parseImage(this.state.fill || 'transparent').toSVGString(this.fillId);
    }
  }, {
    key: "toStrokeSVG",
    get: function get() {
      return SVGFill["a" /* SVGFill */].parseImage(this.state.stroke || 'black').toSVGString(this.strokeId);
    }
  }, {
    key: "toDefInnerString",
    get: function get() {
      return (
        /*html*/
        "\n            ".concat(this.toFillSVG, "\n            ").concat(this.toStrokeSVG, "\n        ")
      );
    }
  }, {
    key: "toDefString",
    get: function get() {
      var str = this.toDefInnerString.trim(); // if (!str) return ''; 

      return (
        /*html*/
        "\n            <defs>\n            ".concat(str, "\n            </defs>\n        ")
      );
    }
  }, {
    key: "fillId",
    get: function get() {
      return this.getInnerId('fill');
    }
  }, {
    key: "strokeId",
    get: function get() {
      return this.getInnerId('stroke');
    }
  }, {
    key: "toFillValue",
    get: function get() {
      return SVGFill["a" /* SVGFill */].parseImage(this.state.fill || 'transparent').toFillValue(this.fillId);
    }
  }, {
    key: "toStrokeValue",
    get: function get() {
      return SVGFill["a" /* SVGFill */].parseImage(this.state.stroke || 'black').toFillValue(this.strokeId);
    }
  }, {
    key: Object(Event["BIND"])('$view'),
    value: function value() {
      return {
        innerHTML:
        /*html*/
        "\n            <svg width=\"100%\" height=\"100%\" class='svg-editor-canvas'>\n                ".concat(this.toDefString, "\n                <path \n                    class='object' \n                    fill=\"").concat(this.toFillValue, "\"\n                    stroke=\"").concat(this.toStrokeValue, "\"\n                    fill-opacity=\"").concat(this.state['fill-opacity'], "\"\n                    stroke-width=\"").concat(this.state['stroke-width'], "\"\n                    stroke-linecap=\"").concat(this.state['stroke-linecap'], "\"\n                    stroke-linejoin=\"").concat(this.state['stroke-linejoin'], "\"\n                    d=\"").concat(PathStringManager["a" /* default */].makePathByPoints(this.state.points), "\" \n                />\n            </svg>\n            ")
      };
    }
  }, {
    key: "renderPath",
    value: function renderPath() {
      this.bindData('$view');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resizeEditor'),
    value: function value() {
      this.initRect(true);
    }
  }, {
    key: "getPathRect",
    value: function getPathRect() {
      this.initRect(true);
      var $obj = this.refs.$view.$('path.object');
      var pathRect = {
        x: unit_Length["a" /* Length */].z(),
        y: unit_Length["a" /* Length */].z(),
        width: unit_Length["a" /* Length */].z(),
        height: unit_Length["a" /* Length */].z()
      };

      if ($obj) {
        pathRect = $obj.rect();
        pathRect.x -= this.state.rect.x;
        pathRect.y -= this.state.rect.y;
      }

      return pathRect;
    }
  }, {
    key: Object(Event["POINTERSTART"])('$view') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.initRect();
      this.state.altKey = false;
      this.state.startXY = {
        x: e.xy.x - this.state.rect.x,
        y: e.xy.y - this.state.rect.y
      };
      this.state.points = [this.state.startXY];
    }
  }, {
    key: "move",
    value: function move(dx, dy, eventType, pressure) {
      this.state.points.push({
        x: this.state.startXY.x + dx,
        y: this.state.startXY.y + dy,
        pressure: pressure
      });
      this.renderPath();
    }
  }, {
    key: "end",
    value: function end(dx, dy) {
      this.addPathLayer();
      this.trigger('initPathDrawEditor');
    }
  }]);

  return PathDrawView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PathDrawView: PathDrawView_PathDrawView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/LayerAppendView.js








function LayerAppendView_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function LayerAppendView_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { LayerAppendView_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { LayerAppendView_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function LayerAppendView_createSuper(Derived) { var hasNativeReflectConstruct = LayerAppendView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayerAppendView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var LayerAppendView_LayerAppendView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LayerAppendView, _EditorElement);

  var _super = LayerAppendView_createSuper(LayerAppendView);

  function LayerAppendView() {
    classCallCheck_default()(this, LayerAppendView);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayerAppendView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <div class='layer-add-view'>\n            <div class='area' ref='$area'></div>\n            <div class='area-rect' ref='$areaRect'></div>\n            <div class='area-pointer' ref='$mousePointer'></div>\n            <input type='file' accept='image/*' multiple=\"true\" ref='$file' class='embed-file-input'/>\n            <input type='file' accept='video/*' multiple=\"true\" ref='$video' class='embed-video-input'/>            \n        </div>\n        "
      );
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        dragStart: false,
        width: 0,
        height: 0,
        color: Color["a" /* default */].random(),
        fontSize: 30,
        showRectInfo: false,
        areaVerties: Object(collision["e" /* rectToVerties */])(0, 0, 0, 0),
        content: 'Insert a text',
        pathManager: new PathStringManager["a" /* default */](),
        rect: {},
        options: {},
        containerItem: undefined
      };
    }
  }, {
    key: "scale",
    get: function get() {
      return this.$viewport.scale;
    }
  }, {
    key: "checkNotDragStart",
    value: function checkNotDragStart() {
      return Boolean(this.state.dragStart) === false;
    }
  }, {
    key: Object(Event["POINTERMOVE"])('$el') + Object(Event["IF"])('checkNotDragStart'),
    value: function value(e) {
      var vertex = this.$viewport.createWorldPosition(e.clientX, e.clientY); // 영역 드래그 하면서 snap 하기 

      var newVertex = this.$snapManager.checkPoint(vertex);

      if (esm["d" /* vec3 */].equals(newVertex, vertex) === false) {
        this.state.target = newVertex;
        this.state.targetVertex = this.$viewport.applyVertex(this.state.target);
        this.state.targetPositionVertext = esm["d" /* vec3 */].clone(this.state.target);
        this.state.targetGuides = this.$snapManager.findGuideOne([this.state.target]);
      } else {
        this.state.target = null;
        this.state.targetGuides = [];
        this.state.targetPositionVertext = null;
      }

      this.bindData('$mousePointer');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$el') + Object(Event["MOVE"])() + Object(Event["END"])(),
    value: function value(e) {
      this.initMousePoint = this.state.targetPositionVertext ? this.state.targetPositionVertext : this.$viewport.createWorldPosition(e.clientX, e.clientY);
      this.state.dragStart = true;
      this.state.color = '#C4C4C4'; //Color.random()

      this.state.text = '';
      var minX = this.initMousePoint[0];
      var minY = this.initMousePoint[1];
      var verties = Object(collision["e" /* rectToVerties */])(minX, minY, 0, 0);
      this.state.areaVerties = this.$viewport.applyVerties(verties);
      this.bindData('$area');
      this.bindData('$areaRect');
    }
  }, {
    key: "createLayerTemplate",
    value: function createLayerTemplate(width, height) {
      var _this$state = this.state,
          type = _this$state.type,
          text = _this$state.text,
          color = _this$state.color;

      switch (type) {
        case 'artboard':
          return (
            /*html*/
            "<div class='draw-item' style='background-color: white;'></div>"
          );

        case 'rect':
          return (
            /*html*/
            "<div class='draw-item' style='background-color: ".concat(color, ";'></div>")
          );

        case 'circle':
          return (
            /*html*/
            "<div class='draw-item' style='background-color: ".concat(color, "; border-radius: 100%;'></div>")
          );

        case 'text':
        case 'svg-text':
          return (
            /*html*/
            "\n                <div \n                    class='draw-item' \n                    \n                    style='font-size: 30px;outline: 1px solid blue;white-space:nowrap'\n                >\n                    <p contenteditable=\"true\" style=\"margin:0px;display: inline-block;outline:none;\" ></p>\n                </div>"
          );

        case 'svg-rect':
          return (
            /*html*/
            "\n            <div class='draw-item'>\n                <svg width=\"".concat(width, "\" height=\"").concat(height, "\" style=\"width:100%; height:100%;\" overflow=\"visible\">\n                    <path d=\"").concat(PathStringManager["a" /* default */].makeRect(0, 0, width, height), "\" stroke-width=\"1\" stroke=\"black\" fill=\"transparent\" />\n                </svg>\n            </div>\n            ")
          );

        case 'svg-circle':
          return (
            /*html*/
            "\n            <div class='draw-item'>\n                <svg width=\"".concat(width, "\" height=\"").concat(height, "\" style=\"width:100%; height:100%;\" overflow=\"visible\">\n                    <path d=\"").concat(PathStringManager["a" /* default */].makeCircle(0, 0, width, height), "\" stroke-width=\"1\" stroke=\"black\" fill=\"transparent\" />\n                </svg>\n            </div>\n            ")
          );

        case 'svg-textpath':
          return (
            /*html*/
            "\n            <div class='draw-item' style='outline: 1px solid blue;'>\n                <svg width=\"".concat(width, "\" height=\"").concat(height, "\" style=\"width:100%; height:100%;font-size: ").concat(height, "px;\" overflow=\"visible\">\n                    <defs>\n                        <path id='layer-add-path' d=\"").concat(PathStringManager["a" /* default */].makeLine(0, height, width, height), "\" />\n                    </defs>\n                    <text>\n                        <textPath \n                          xlink:href=\"#layer-add-path\"\n                          textLength=\"100%\"\n                          lengthAdjust=\"spacingAndGlyphs\"\n                          startOffset=\"0em\"\n                        >").concat(text, "</textPath>\n                    </text>\n                </svg>\n            </div>\n            ")
          );

        default:
          return (
            /*html*/
            "<div class='draw-item' style='outline: 1px solid blue;'></div>"
          );
      }
    }
  }, {
    key: Object(Event["BIND"])('$area'),
    value: function value() {
      var areaVerties = this.state.areaVerties;

      var _vertiesToRectangle = Object(collision["g" /* vertiesToRectangle */])(areaVerties),
          left = _vertiesToRectangle.left,
          top = _vertiesToRectangle.top,
          width = _vertiesToRectangle.width,
          height = _vertiesToRectangle.height;

      return {
        style: {
          left: left,
          top: top,
          width: width,
          height: height
        },
        innerHTML: this.createLayerTemplate(width.value, height.value)
      };
    }
  }, {
    key: Object(Event["BIND"])('$areaRect'),
    value: function value() {
      var _this$state2 = this.state,
          areaVerties = _this$state2.areaVerties,
          showRectInfo = _this$state2.showRectInfo;
      var newVerties = this.$viewport.applyVertiesInverse(areaVerties);

      var _vertiesToRectangle2 = Object(collision["g" /* vertiesToRectangle */])(newVerties),
          width = _vertiesToRectangle2.width,
          height = _vertiesToRectangle2.height;

      return {
        style: {
          display: showRectInfo ? 'inline-block' : 'none',
          left: unit_Length["a" /* Length */].px(areaVerties[2][0]),
          top: unit_Length["a" /* Length */].px(areaVerties[2][1])
        },
        innerHTML: "".concat(width.value, " x ").concat(height.value)
      };
    }
  }, {
    key: "makeMousePointer",
    value: function makeMousePointer() {
      var _this = this;

      var target = this.state.target;
      if (!target) return '';
      var guides = this.state.targetGuides || [];
      return (
        /*html*/
        "\n        <svg width=\"100%\" height=\"100%\">\n            ".concat(guides.map(function (guide) {
          _this.state.pathManager.reset();

          guide = _this.$viewport.applyVerties([guide[0], guide[1]]);
          return _this.state.pathManager.M({
            x: guide[0][0],
            y: guide[0][1]
          }).L({
            x: guide[1][0],
            y: guide[1][1]
          }).X({
            x: guide[0][0],
            y: guide[0][1]
          }).X({
            x: guide[1][0],
            y: guide[1][1]
          }).toString('layer-add-snap-pointer');
        }).join('\n'), "\n        </svg>\n    ")
      );
    }
  }, {
    key: Object(Event["BIND"])('$mousePointer'),
    value: function value() {
      var html = this.makeMousePointer(); // if (html === '') return;

      return {
        innerHTML: html
      };
    }
  }, {
    key: "move",
    value: function move() {
      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var newMousePoint = this.$snapManager.checkPoint(targetMousePoint);

      if (esm["d" /* vec3 */].equals(newMousePoint, targetMousePoint) === false) {
        this.state.target = newMousePoint;
        this.state.targetVertex = this.$viewport.applyVertex(newMousePoint);
        this.state.targetGuides = this.$snapManager.findGuideOne([newMousePoint]);
      } else {
        this.state.target = null;
        this.state.targetGuides = [];
      }

      var isShiftKey = e.shiftKey;
      var minX = Math.min(newMousePoint[0], this.initMousePoint[0]);
      var minY = Math.min(newMousePoint[1], this.initMousePoint[1]);
      var maxX = Math.max(newMousePoint[0], this.initMousePoint[0]);
      var maxY = Math.max(newMousePoint[1], this.initMousePoint[1]);
      var dx = maxX - minX;
      var dy = maxY - minY;

      if (isShiftKey) {
        dy = dx;
      } // 영역 드래그 하면서 snap 하기 


      var verties = Object(collision["e" /* rectToVerties */])(minX, minY, dx, dy);
      this.state.areaVerties = this.$viewport.applyVerties(verties);
      this.state.showRectInfo = true;
      this.bindData('$area');
      this.bindData('$areaRect');
      this.bindData('$mousePointer');
    }
  }, {
    key: "end",
    value: function end(dx, dy) {
      var isAltKey = this.$config.get('bodyEvent').altKey;
      var _this$state3 = this.state,
          color = _this$state3.color,
          content = _this$state3.content,
          fontSize = _this$state3.fontSize,
          areaVerties = _this$state3.areaVerties; // viewport 좌표를 world 좌표로 변환 

      var rectVerties = this.$viewport.applyVertiesInverse(areaVerties); // artboard 가 아닐 때만 parentArtBoard 가 존재 

      var parentArtBoard = this.$selection.getArtboardByPoint(rectVerties[0]);

      var _vertiesToRectangle3 = Object(collision["g" /* vertiesToRectangle */])(rectVerties),
          x = _vertiesToRectangle3.x,
          y = _vertiesToRectangle3.y,
          width = _vertiesToRectangle3.width,
          height = _vertiesToRectangle3.height;

      var hasArea = true;

      if (width.value === 0 && height.value === 0) {
        switch (this.state.type) {
          case "text":
            content = '';
            height.set(this.state.fontSize);
            hasArea = false;
            break;

          default:
            width.set(100);
            height.set(100);
            break;
        }
      }

      var rect = LayerAppendView_objectSpread({
        x: x,
        y: y,
        width: width,
        height: height,
        'background-color': color,
        'content': content,
        'font-size': fontSize
      }, this.state.options);

      switch (this.state.type) {
        case 'text':
        case 'svg-text':
        case 'svg-textpath':
          delete rect['background-color'];
          break;

        default:
          delete rect['content'];
          break;
      }

      switch (this.state.type) {
        case 'image':
          this.trigger('openImage', rect, parentArtBoard);
          break;

        case 'video':
          this.trigger('openVideo', rect, parentArtBoard);
          break;

        case 'audio':
          this.trigger('openAudio', rect, parentArtBoard);
          break;

        case 'text':
          if (hasArea) {
            // NOOP
            // newComponent 를 그대로 실행한다. 
            rect['font-size'] = unit_Length["a" /* Length */].px(this.state.fontSize / this.$viewport.scale);
          } else {
            var scaledFontSize = this.state.fontSize / this.$viewport.scale;
            var $drawItem = this.refs.$area.$(".draw-item > p");
            $drawItem.parent().css('height', "".concat(scaledFontSize, "px"));
            $drawItem.parent().css('font-size', "".concat(scaledFontSize, "px"));
            $drawItem.select();
            $drawItem.focus();
            return;
          }

        default:
          this.emit('newComponent', this.state.type, rect,
          /* isSelected */
          true, parentArtBoard);
          break;
      }

      if (!isAltKey) {
        this.trigger('hideLayerAppendView');
      }

      this.state.dragStart = false;
      this.state.showRectInfo = false;
      this.state.target = null;
      this.bindData('$areaRect');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showLayerAppendView'),
    value: function value(type) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      this.state.type = type;
      this.state.options = options;
      this.state.isShow = true;
      this.refs.$area.empty();
      this.$el.show();
      this.$el.focus();
      this.$snapManager.clear();
      this.emit('change.mode.view', 'CanvasView');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hideLayerAppendView'),
    value: function value() {
      if (this.$el.isShow()) {
        this.state.isShow = false; // this.refs.$area.empty()

        this.$el.hide();
        this.emit('change.mode.view');
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hideAddViewLayer'),
    value: function value() {
      this.state.isShow = false;
      this.$el.hide();
    }
  }, {
    key: "isShow",
    value: function isShow() {
      return this.state.isShow;
    }
  }, {
    key: Object(Event["KEYDOWN"])('document') + Object(Event["IF"])('isShow') + Event["ESCAPE"] + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {// NOOP
    }
  }, {
    key: Object(Event["KEYUP"])('document') + Object(Event["IF"])('isShow') + Event["ESCAPE"] + Event["ENTER"] + Event["PREVENT"] + Event["STOP"],
    value: function value(e) {
      switch (this.state.type) {
        case "text":
          var $t = Dom["a" /* default */].create(e.target);
          var _this$state4 = this.state,
              fontSize = _this$state4.fontSize,
              areaVerties = _this$state4.areaVerties; // viewport 좌표를 world 좌표로 변환 

          var rectVerties = this.$viewport.applyVertiesInverse(areaVerties);

          var _vertiesToRectangle4 = Object(collision["g" /* vertiesToRectangle */])(rectVerties),
              x = _vertiesToRectangle4.x,
              y = _vertiesToRectangle4.y;

          var _$t$rect = $t.rect(),
              width = _$t$rect.width,
              height = _$t$rect.height;

          var text = $t.text();
          console.log(text, height);

          if (text.length === 0) {
            break;
          }

          var _this$$viewport$apply = this.$viewport.applyScaleVertiesInverse([[width, height, fontSize]]),
              _this$$viewport$apply2 = slicedToArray_default()(_this$$viewport$apply, 1),
              _this$$viewport$apply3 = slicedToArray_default()(_this$$viewport$apply2[0], 3),
              newWidth = _this$$viewport$apply3[0],
              newHeight = _this$$viewport$apply3[1],
              newFontSize = _this$$viewport$apply3[2];

          var rect = {
            x: x,
            y: y,
            width: unit_Length["a" /* Length */].px(newWidth),
            height: unit_Length["a" /* Length */].px(newHeight),
            'content': text.trim(),
            'font-size': unit_Length["a" /* Length */].px(newFontSize)
          }; // artboard 가 아닐 때만 parentArtBoard 가 존재 

          var parentArtBoard = this.$selection.getArtboardByPoint(rectVerties[0]);
          this.emit('newComponent', this.state.type, rect,
          /* isSelected */
          true, parentArtBoard);
          break;
      }

      this.state.dragStart = false;
      this.state.showRectInfo = false;
      this.state.target = null;
      this.bindData('$areaRect');
      this.trigger('hideLayerAppendView');
    }
  }, {
    key: Object(Event["KEYUP"])('$el') + Object(Event["IF"])('isShow'),
    value: function value(e) {
      switch (this.state.type) {
        case "text":
          var $t = Dom["a" /* default */].create(e.target);

          var _$t$rect2 = $t.rect(),
              width = _$t$rect2.width,
              height = _$t$rect2.height;

          break;
      }
    }
  }, {
    key: Object(Event["CHANGE"])('$file'),
    value: function value(e) {
      var _this2 = this;

      this.refs.$file.files.forEach(function (item) {
        _this2.emit('updateImage', item, _this2.state.rect, _this2.state.containerItem);
      });
    }
  }, {
    key: Object(Event["CHANGE"])('$video'),
    value: function value(e) {
      var _this3 = this;

      this.refs.$video.files.forEach(function (item) {
        _this3.emit('updateVideo', item, _this3.state.rect, _this3.state.containerItem);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('openImage'),
    value: function value(rect, containerItem) {
      this.state.rect = rect;
      this.state.containerItem = containerItem;
      this.refs.$file.click();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('openVideo'),
    value: function value(rect, containerItem) {
      this.state.rect = rect;
      this.state.containerItem = containerItem;
      this.refs.$video.click();
    }
  }]);

  return LayerAppendView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LayerAppendView: LayerAppendView_LayerAppendView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/GridLayoutLineView.js







function GridLayoutLineView_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function GridLayoutLineView_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { GridLayoutLineView_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { GridLayoutLineView_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function GridLayoutLineView_createSuper(Derived) { var hasNativeReflectConstruct = GridLayoutLineView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function GridLayoutLineView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






/**
 * 객체와의 거리의 가이드 라인을 그려주는 컴포넌트
 */

var GridLayoutLineView_GridLayoutLineView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(GridLayoutLineView, _EditorElement);

  var _super = GridLayoutLineView_createSuper(GridLayoutLineView);

  function GridLayoutLineView() {
    classCallCheck_default()(this, GridLayoutLineView);

    return _super.apply(this, arguments);
  }

  createClass_default()(GridLayoutLineView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='grid-layout-line-view' style='width:100%;height:100%;pointer-events:none;'></div>"
      );
    }
  }, {
    key: Object(Event["LOAD"])('$el'),
    value: function value() {
      var len = this.$selection.length;

      if (len !== 1) {
        return (
          /*html*/
          ''
        );
      }

      var current = this.$selection.current;

      if (current.isInGrid()) {
        var layoutContainer = current.parent;
        var left = layoutContainer.screenX;
        var top = layoutContainer.screenY;
        var width = layoutContainer.width;
        var height = layoutContainer.height;
        var grid = HTMLRenderer["a" /* default */].toGridLayoutCSS(layoutContainer);
        return (
          /*html*/
          "<div style='".concat(Object(func["CSS_TO_STRING"])(GridLayoutLineView_objectSpread({
            position: 'absolute',
            left: left,
            top: top,
            width: width,
            height: height,
            border: '1px solid black'
          }, grid)), "'>\n                ").concat(layoutContainer.layers.map(function (it) {
            var layoutItemCSS = HTMLRenderer["a" /* default */].toLayoutItemCSS(it);
            return (
              /*html*/
              "<div style='".concat(Object(func["CSS_TO_STRING"])(GridLayoutLineView_objectSpread(GridLayoutLineView_objectSpread({}, layoutItemCSS), {}, {
                'border': '1px solid dashed'
              })), "'></div>")
            );
          }).join(''), "\n            </div>")
        );
      }

      return (
        /*html*/
        "<div></div>"
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshGridLayoutLine', 'refreshSelectionTool', 'refreshSelection'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.refresh();
    }
  }]);

  return GridLayoutLineView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  GridLayoutLineView: GridLayoutLineView_GridLayoutLineView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/HoverView.js






function HoverView_createSuper(Derived) { var hasNativeReflectConstruct = HoverView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HoverView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var HoverView_HoverView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(HoverView, _EditorElement);

  var _super = HoverView_createSuper(HoverView);

  function HoverView() {
    classCallCheck_default()(this, HoverView);

    return _super.apply(this, arguments);
  }

  createClass_default()(HoverView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='hover-view'>\n                <div class='hover-rect' ref='$hoverRect'></div>            \n            </div>\n        "
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('config:bodyEvent'),
    value: function value() {
      var $dom = Dom["a" /* default */].create(this.$config.get('bodyEvent').target);
      var id = $dom.data('id');

      if (this.$editor.isPointerUp) {
        this.$selection.setHoverId('');
        this.renderHoverLayer();
      } else {
        if (this.$selection.setHoverId(id)) {
          this.renderHoverLayer();
        }
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.$selection.setHoverId('');
      this.renderHoverLayer();
    }
  }, {
    key: "renderHoverLayer",
    value: function renderHoverLayer() {
      var items = this.$selection.hoverItems;

      if (items.length === 0) {
        this.refs.$hoverRect.updateDiff('');
      } else {
        var verties = items[0].verties();
        var line = this.createPointerLine(this.$viewport.applyVerties(verties));
        this.refs.$hoverRect.updateDiff(line);
      }
    }
  }, {
    key: "createPointerLine",
    value: function createPointerLine(pointers) {
      if (pointers.length === 0) return '';
      return (
        /*html*/
        "\n        <svg class='line' overflow=\"visible\">\n            <path \n                d=\"\n                    M ".concat(pointers[0][0], ", ").concat(pointers[0][1], " \n                    L ").concat(pointers[1][0], ", ").concat(pointers[1][1], " \n                    L ").concat(pointers[2][0], ", ").concat(pointers[2][1], " \n                    L ").concat(pointers[3][0], ", ").concat(pointers[3][1], " \n                    L ").concat(pointers[0][0], ", ").concat(pointers[0][1], "\n                    Z\n                \" \n                />\n        </svg>")
      );
    }
  }]);

  return HoverView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  HoverView: HoverView_HoverView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/SelectionInfoView.js







function SelectionInfoView_createSuper(Derived) { var hasNativeReflectConstruct = SelectionInfoView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SelectionInfoView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var SelectionInfoView_SelectionInfoView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SelectionInfoView, _EditorElement);

  var _super = SelectionInfoView_createSuper(SelectionInfoView);

  function SelectionInfoView() {
    classCallCheck_default()(this, SelectionInfoView);

    return _super.apply(this, arguments);
  }

  createClass_default()(SelectionInfoView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "<div class='selection-info-view'></div>"
      );
    }
  }, {
    key: "checkMouseButton",
    value: function checkMouseButton(e) {
      // 오른쪽 버튼(context menu)는 실행하지 않는다. 
      if (e.buttons === 2) return false;
      return true;
    }
    /**
     * 드래그 해서 객체 옮기기 
     *
     * ctrl + pointerstart 하는  시점에 카피해보자.  
     * 
     * @param {PointerEvent} e 
     */

  }, {
    key: Object(Event["POINTERSTART"])('$el [data-artboard-title-id]') + Object(Event["IF"])('checkMouseButton') + Object(Event["MOVE"])('calculateMovedElement') + Object(Event["END"])('calculateEndedElement'),
    value: function value(e) {
      this.startXY = e.xy;
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var id = e.$dt.attr('data-artboard-title-id');
      this.$selection.selectById(id); // alt(option) + pointerstart 시점에 Layer 카피하기         

      if (e.altKey) {
        // 선택된 모든 객체 카피하기 
        this.$selection.selectAfterCopy();
        this.emit('refreshAllCanvas');
        this.emit('refreshLayerTreeView');
      }

      this.initializeDragSelection();
      this.emit('history.refreshSelection');
    }
  }, {
    key: "initializeDragSelection",
    value: function initializeDragSelection() {
      this.$selection.reselect();
      this.$snapManager.clear();
      this.emit('refreshSelectionTool');
    }
  }, {
    key: "calculateMovedElement",
    value: function calculateMovedElement() {
      var _this = this;

      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var newDist = esm["d" /* vec3 */].floor([], esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint));
      this.emit('selectionToolView.moveTo', newDist);
      this.nextTick(function () {
        _this.emit('refreshSelectionStyleView');

        _this.emit('refreshSelectionTool', false);

        _this.emit('refreshRect');

        _this.refresh();
      });
    }
    /**
     * ArtBoard title 변경하기 
     * @param {string} id 
     * @param {string} title 
     */

  }, {
    key: Object(Event["SUBSCRIBE"])('refreshItemName'),
    value: function value(id, title) {
      this.emit('setAttributeForMulti', defineProperty_default()({}, id, {
        name: title
      }));
      this.$el.$("[data-artboard-title-id='".concat(id, "']")).text(title);
    }
  }, {
    key: "calculateEndedElement",
    value: function calculateEndedElement(dx, dy) {
      this.command('setAttributeForMulti', "move item", this.$selection.cloneValue('x', 'y', 'width', 'height'));
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionStyleView'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["LOAD"])('$el') + Event["DOMDIFF"],
    value: function value() {
      var _this2 = this;

      var artboards = this.$selection.currentProject.artboards.map(function (it) {
        return {
          artboard: it,
          matrix: it.matrix
        };
      });
      return artboards.map(function (it) {
        return {
          title: it.artboard.name,
          id: it.artboard.id,
          rect: [_this2.$viewport.applyVertex(it.matrix.rectVerties[0]), _this2.$viewport.applyVertex(it.matrix.rectVerties[1])]
        };
      }).map(function (it) {
        return _this2.makeArtboardTitleArea(it);
      });
    }
  }, {
    key: "makeArtboardTitleArea",
    value: function makeArtboardTitleArea(it) {
      return (
        /*html*/
        "\n            <div class=\"artboard-title is-not-drag-area\" \n                 data-artboard-title-id=\"".concat(it.id, "\" \n                 style=\"left: ").concat(it.rect[0][0], "px;top:").concat(it.rect[0][1], "px;\"\n            >").concat(it.title, "</div>")
      );
    }
  }]);

  return SelectionInfoView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SelectionInfoView: SelectionInfoView_SelectionInfoView
});
// EXTERNAL MODULE: ./src/el/editor/ui/view/render-view/StyleView.js
var StyleView = __webpack_require__(159);

// CONCATENATED MODULE: ./src/el/editor/ui/view/render-view/HTMLRenderView.js








function HTMLRenderView_createSuper(Derived) { var hasNativeReflectConstruct = HTMLRenderView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HTMLRenderView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





















var HTMLRenderView_HTMLRenderView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(HTMLRenderView, _EditorElement);

  var _super = HTMLRenderView_createSuper(HTMLRenderView);

  function HTMLRenderView() {
    classCallCheck_default()(this, HTMLRenderView);

    return _super.apply(this, arguments);
  }

  createClass_default()(HTMLRenderView, [{
    key: "initState",
    value: function initState() {
      return {
        mode: 'selection',
        x: unit_Length["a" /* Length */].z(),
        y: unit_Length["a" /* Length */].z(),
        width: unit_Length["a" /* Length */].px(10000),
        height: unit_Length["a" /* Length */].px(10000),
        cachedCurrentElement: {},
        html: ''
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='element-view' ref='$body'>\n                <div class='canvas-view' ref='$view'></div>\n                <div class='drag-area-rect' ref='$dragAreaRect'></div>\n                <object refClass='StyleView' ref='$styleView' />\n                <object refClass='GuideLineView' ref='$guideLineView' />\n                <object refClass='HoverView' ref='$hoverView' />                \n                <object refClass='SelectionInfoView' ref='$selectionInfoView' />                                \n                <object refClass='GridLayoutLineView' ref='$gridLayoutLineView' />\n                <object refClass='SelectionToolView' ref='$selectionTool' />\n                <object refClass='GroupSelectionToolView' ref='$groupSelectionTool' />\n                <object refClass='LayerAppendView' ref='$objectAddView' />\n                <object refClass='PathEditorView' ref='$pathEditorView' />\n                <object refClass='PathDrawView' ref='$pathDrawView' />\n          \n            </div>\n        "
      );
    }
  }, {
    key: "getScrollXY",
    value: function getScrollXY() {
      return {
        width: this.refs.$body.scrollWidth(),
        height: this.refs.$body.scrollHeight(),
        left: this.refs.$body.scrollLeft(),
        top: this.refs.$body.scrollTop()
      };
    }
  }, {
    key: "selectionToolView",
    get: function get() {
      return this.$selection.isMany ? this.children.$groupSelectionTool : this.children.$selectionTool;
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('afterChangeMode'),
    value: function value() {
      this.$el.attr('data-mode', this.$editor.mode);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refElement'),
    value: function value(id, callback) {
      Object(func["isFunction"])(callback) && callback(this.getElement(id));
    }
  }, {
    key: "getElement",
    value: function getElement(id) {
      if (!this.state.cachedCurrentElement[id]) {
        this.state.cachedCurrentElement[id] = this.refs.$view.$("[data-id=\"".concat(id, "\"]"));
      }

      return this.state.cachedCurrentElement[id];
    }
  }, {
    key: "checkEmptyElement",
    value: function checkEmptyElement(e) {
      var $el = Dom["a" /* default */].create(e.target);
      var mousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var code = this.$shortcuts.getGeneratedKeyCode(types_key["a" /* KEY_CODE */].space);

      if (this.$keyboardManager.check(code)) {
        // space 키가 눌러져있을 때는 실행하지 않는다. 
        return false;
      }

      if (this.state.mode !== 'selection') {
        return false;
      } // altKey 를 누르고 있으면 동작하지 않음 
      // altKey 는 복제용도로 사용함 


      if (e.altKey) {
        return false;
      } // artboard 에서 드래그 할 수 있도록 예외 처리 


      if ($el.hasClass('artboard')) {
        if (this.$selection.check({
          id: $el.attr('data-id')
        })) {
          // selection 이 이미 되어 있는 상태면 선택 영역을 그리지 않는다. 
          return false;
        } // select된 객체에 포지션이 있으면  움직일 수 있도록 한다. 


        if (this.$selection.hasPoint(mousePoint)) {
          return false;
        }

        return true;
      } // select된 객체에 포지션이 있으면  움직일 수 있도록 한다. 


      if (this.$selection.hasPoint(mousePoint)) {
        return false;
      }

      if ($el.hasClass('is-not-drag-area')) {
        return false;
      }

      return $el.hasClass('element-item') === false && $el.hasClass('selection-tool-item') === false && $el.hasClass('pointer') === false && $el.hasClass('rotate-pointer') === false && $el.hasClass('layer-add-view') === false && $el.hasClass('handle') === false && $el.hasClass('path-draw-container') === false && $el.isTag('svg') === false && $el.isTag('path') === false && $el.isTag('textPath') === false && $el.isTag('polygon') === false && $el.isTag('text') === false && $el.isTag('img') === false && $el.attr('data-segment') !== 'true';
    }
  }, {
    key: Object(Event["POINTERSTART"])('$body') + Object(Event["IF"])('checkEmptyElement') + Object(Event["MOVE"])('movePointer') + Object(Event["END"])('moveEndPointer'),
    value: function value(e) {
      this.$target = Dom["a" /* default */].create(e.target);
      this.dragXY = {
        x: e.xy.x,
        y: e.xy.y
      };
      this.rect = this.refs.$body.rect();
      this.canvasOffset = this.refs.$view.rect();
      this.canvasPosition = {
        x: this.canvasOffset.left,
        y: this.canvasOffset.top
      };
      this.dragXY.x -= this.rect.x;
      this.dragXY.y -= this.rect.y;

      if (this.$editor.isSelectionMode()) {
        var obj = {
          left: unit_Length["a" /* Length */].px(this.dragXY.x),
          top: unit_Length["a" /* Length */].px(this.dragXY.y),
          width: unit_Length["a" /* Length */].z(),
          height: unit_Length["a" /* Length */].z()
        };
        this.refs.$dragAreaRect.css(obj);
        this.state.cachedCurrentElement = {};
      }
    }
  }, {
    key: "getSelectedItems",
    value: function getSelectedItems(rect, areaVerties) {
      var project = this.$selection.currentProject;
      var items = [];
      var selectedArtboard = [];

      if (project) {
        if (rect.width === 0 && rect.height === 0) {
          items = [];
        } else {
          // 프로젝트 내에 있는 모든 객체 검색 
          project.layers.forEach(function (layer) {
            if (layer.is('artboard') && layer.isIncludeByArea(areaVerties)) {
              selectedArtboard.push(layer);
            } else if (layer.is('artboard') && layer.checkInArea(areaVerties) && layer.hasChildren() === false) {
              items.push(layer);
            } else {
              items.push.apply(items, layer.checkInAreaForAll(areaVerties));
            }
          });

          if (items.length > 1) {
            items = items.filter(function (it) {
              return it.is('artboard') === false;
            });
          }
        }
      }

      var selectedItems = selectedArtboard.length ? selectedArtboard : items;
      return selectedItems;
    }
  }, {
    key: "movePointer",
    value: function movePointer(dx, dy) {
      var isShiftKey = this.$config.get('bodyEvent').shiftKey;

      if (isShiftKey) {
        dy = dx;
      }

      var obj = {
        left: unit_Length["a" /* Length */].px(this.dragXY.x + (dx < 0 ? dx : 0)),
        top: unit_Length["a" /* Length */].px(this.dragXY.y + (dy < 0 ? dy : 0)),
        width: unit_Length["a" /* Length */].px(Math.abs(dx)),
        height: unit_Length["a" /* Length */].px(Math.abs(dy))
      };
      this.refs.$dragAreaRect.css(obj);

      if (this.$editor.isSelectionMode()) {
        var x = obj.left,
            y = obj.top,
            width = obj.width,
            height = obj.height;
        var rect = {
          x: x.value,
          y: y.value,
          width: width.value,
          height: height.value
        };
        var areaVerties = this.$viewport.createAreaVerties(rect.x, rect.y, rect.width, rect.height);
        var project = this.$selection.currentProject;

        if (project) {
          var _this$$selection;

          var selectedItems = this.getSelectedItems(rect, areaVerties);

          if ((_this$$selection = this.$selection).select.apply(_this$$selection, toConsumableArray_default()(selectedItems))) {
            this.selectCurrent.apply(this, toConsumableArray_default()(selectedItems));
            this.emit('refreshSelectionTool', true);
          }
        }
      }
    }
  }, {
    key: "moveEndPointer",
    value: function moveEndPointer(dx, dy) {
      var _this$refs$$dragAreaR = this.refs.$dragAreaRect.styles('left', 'top', 'width', 'height').map(function (it) {
        return unit_Length["a" /* Length */].parse(it);
      }),
          _this$refs$$dragAreaR2 = slicedToArray_default()(_this$refs$$dragAreaR, 4),
          x = _this$refs$$dragAreaR2[0],
          y = _this$refs$$dragAreaR2[1],
          width = _this$refs$$dragAreaR2[2],
          height = _this$refs$$dragAreaR2[3];

      var rect = {
        x: x.value,
        y: y.value,
        width: width.value,
        height: height.value
      };
      var areaVerties = this.$viewport.createAreaVerties(rect.x, rect.y, rect.width, rect.height);
      this.refs.$dragAreaRect.css({
        left: unit_Length["a" /* Length */].px(-10000),
        top: unit_Length["a" /* Length */].z(),
        width: unit_Length["a" /* Length */].z(),
        height: unit_Length["a" /* Length */].z()
      });
      var project = this.$selection.currentProject;

      if (project) {
        var _this$$selection2;

        var selectedItems = this.getSelectedItems(rect, areaVerties);

        if ((_this$$selection2 = this.$selection).select.apply(_this$$selection2, toConsumableArray_default()(selectedItems))) {
          this.selectCurrent.apply(this, toConsumableArray_default()(selectedItems));
        }
      } else {
        this.$selection.select();
      }

      this.emit('history.refreshSelection');
      this.emit('refreshSelectionTool', true);
      this.sendHelpMessage();
      this.emit('removeGuideLine');
    }
  }, {
    key: "sendHelpMessage",
    value: function sendHelpMessage() {
      if (this.$selection.length === 1) {
        var current = this.$selection.current;

        if (current.is('svg-path', 'svg-brush', 'svg-polygon', 'svg-textpath')) {
          this.emit('addStatusBarMessage', 'Please click if you want to edit to path ');
        }
      }
    } // text 의 경우 doubleclick 을 해야 포커스를 줄 수 있고 
    // 그 이후에 편집이 가능하다. 

  }, {
    key: Object(Event["DOUBLECLICK"])('$view .element-item.text .text-content'),
    value: function value(e) {
      e.$dt.addClass('focused');
      e.$dt.attr('contenteditable', 'true');
      e.$dt.focus();
      e.$dt.select();
    }
  }, {
    key: Object(Event["FOCUSOUT"])('$view .element-item.text .text-content'),
    value: function value(e) {
      e.$dt.removeAttr('contenteditable');
      e.$dt.removeClass('focused');
    }
  }, {
    key: Object(Event["KEYUP"])('$view .element-item.text .text-content'),
    value: function value(e) {
      var content = e.$dt.html();
      var text = e.$dt.text();
      var id = e.$dt.parent().attr('data-id'); //FIXME: matrix에 기반한 좌표 연산이 필요하다. 

      var arr = [];
      this.$selection.items.filter(function (it) {
        return it.id === id;
      }).forEach(function (it) {
        it.reset({
          content: content,
          text: text
        });
        arr.push({
          id: it.id,
          content: content,
          text: text
        });
      });
      this.emit('refreshContent', arr);
      this.emit('refreshSelectionTool', false);
    }
    /**
     * 레이어를 움직이기 위한 이벤트 실행 여부 체크 
     * 
     * @param {PointerEvent} e 
     */

  }, {
    key: "checkEditMode",
    value: function checkEditMode(e) {
      var mousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);

      if (this.$selection.hasPoint(mousePoint)) {
        return true;
      }

      var code = this.$shortcuts.getGeneratedKeyCode(types_key["a" /* KEY_CODE */].space);

      if (this.$keyboardManager.check(code)) {
        // space 키가 눌러져있을 때는 실행하지 않는다. 
        return false;
      }

      var $target = Dom["a" /* default */].create(e.target);
      var $element = $target.closest('element-item');

      if ($element) {
        // text 에 focus 가 가있는 경우는 움직이지 않는다. 
        if ($element.hasClass('focused')) {
          return false;
        }

        var id = $element.attr('data-id'); // altKey 눌러서 copy 하지 않고 드랙그만 하게 되면  

        if (e.altKey === false) {
          if ($element.hasClass('artboard')) {
            var artboard = this.$selection.currentProject.searchById(id);

            if (artboard && artboard.hasChildren()) {
              return false;
            }
          }
        }
      } else {
        // 움직일 수 있는 영역이 아니기 때문에 false 리턴해서 드래그를 막는다. 
        return false;
      }

      return this.$editor.isSelectionMode();
    }
    /**
     * 드래그 해서 객체 옮기기 
     *
     * ctrl + pointerstart 하는  시점에 카피해보자.  
     * 
     * @param {PointerEvent} e 
     */

  }, {
    key: Object(Event["POINTERSTART"])('$view') + Object(Event["IF"])('checkEditMode') + Object(Event["MOVE"])('calculateMovedElement') + Object(Event["END"])('calculateEndedElement'),
    value: function value(e) {
      this.startXY = e.xy;
      this.initMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var isInSelectedArea = this.$selection.hasPoint(this.initMousePoint);
      var $target = Dom["a" /* default */].create(e.target);
      var $element = $target.closest('element-item');
      var id = $element && $element.attr('data-id'); // 선택한 영역이 있지만 artboard 가 아닌 경우 객체 선택으로 한다. 

      if (isInSelectedArea && $element && $element.hasClass('artboard') === false) {
        isInSelectedArea = false;
      } // alt(option) + pointerstart 시점에 Layer 카피하기         


      if (e.altKey) {
        if (isInSelectedArea) {// 이미 selection 영역안에 있으면 그대로 드래그 할 수 있도록 맞춘다. 
        } else {
          if (this.$selection.check({
            id: id
          }) === false) {
            // 선택된게 없으면 id 로 선택 
            this.$selection.selectById(id);
          }
        }

        if (this.$selection.isEmpty === false) {
          // 선택된 모든 객체 카피하기 
          this.$selection.selectAfterCopy();
          this.trigger('refreshAllCanvas');
          this.emit('refreshLayerTreeView');
          this.selectCurrent.apply(this, toConsumableArray_default()(this.$selection.items));
          this.initializeDragSelection();
          this.emit('history.refreshSelection');
        }
      } else {
        if (isInSelectedArea) {// 이미 selection 영역안에 있으면 그대로 드래그 할 수 있도록 맞춘다. 
        } else {
          // shift key 는 selection 을 토글한다. 
          if (e.shiftKey) {
            this.$selection.toggleById(id);
          } else {
            // 선택이 안되어 있으면 선택 
            if (this.$selection.check({
              id: id
            }) === false) {
              var current = this.$selection.currentProject.searchById(id);

              if (current && current.is('artboard') && current.hasChildren()) {// NOOP
              } else {
                this.$selection.selectById(id);
              }
            }
          }
        }

        this.selectCurrent.apply(this, toConsumableArray_default()(this.$selection.items));
        this.initializeDragSelection();
        this.emit('history.refreshSelection');
      }
    }
  }, {
    key: "initializeDragSelection",
    value: function initializeDragSelection() {
      this.$selection.reselect();
      this.$snapManager.clear();
      this.emit('refreshSelectionTool');
    }
  }, {
    key: "calculateMovedElement",
    value: function calculateMovedElement() {
      var _this = this;

      // layout item 은 움직이지 않고 layout 이 좌표를 그리도록 한다. 
      if (this.$selection.isLayoutItem) {
        return;
      }

      var e = this.$config.get('bodyEvent');
      var targetMousePoint = this.$viewport.createWorldPosition(e.clientX, e.clientY);
      var newDist = esm["d" /* vec3 */].floor([], esm["d" /* vec3 */].subtract([], targetMousePoint, this.initMousePoint));
      this.selectionToolView.moveTo(newDist); // 최종 위치에서 ArtBoard 변경하기 

      if (this.$selection.changeArtBoard()) {
        this.initMousePoint = targetMousePoint;
        this.$selection.reselect();
        this.$snapManager.clear();
        this.trigger('refreshAllCanvas'); // ArtBoard 변경 이후에 LayerTreeView 업데이트

        this.emit('refreshLayerTreeView');
        this.emit('refreshSelectionTool', true);
      }

      this.nextTick(function () {
        _this.emit('refreshSelectionStyleView');

        _this.emit('refreshSelectionTool', false);

        _this.emit('refreshRect');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('selectionToolView.moveTo'),
    value: function value(newDist) {
      this.selectionToolView.moveTo(newDist);
    }
  }, {
    key: "calculateEndedElement",
    value: function calculateEndedElement(dx, dy) {
      var _this2 = this;

      var targetXY = this.$config.get('bodyEvent').xy;
      var realDx = targetXY.x - this.startXY.x;
      var realDy = targetXY.y - this.startXY.y;

      if (realDx === 0 && realDy === 0) {
        if (this.$selection.current.isSVG()) {
          this.emit('openPathEditor');
          return;
        }
      } else {
        // this.emit('removeGuideLine');
        this.nextTick(function () {
          _this2.command('setAttributeForMulti', "move item", _this2.$selection.cloneValue('x', 'y', 'width', 'height'));
        });
      }
    }
  }, {
    key: Object(Event["BIND"])('$body'),
    value: function value() {
      var _this$$editor = this.$editor,
          canvasWidth = _this$$editor.canvasWidth,
          canvasHeight = _this$$editor.canvasHeight,
          mode = _this$$editor.mode;
      var width = unit_Length["a" /* Length */].px(canvasWidth);
      var height = unit_Length["a" /* Length */].px(canvasHeight);
      return {
        'data-mode': mode,
        'tabIndex': -1,
        style: {
          width: width,
          height: height
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$view'),
    value: function value() {
      var _this$$viewport = this.$viewport,
          translate = _this$$viewport.translate,
          origin = _this$$viewport.transformOrigin,
          scale = _this$$viewport.scale;
      var transform = "translate(".concat(translate[0], "px, ").concat(translate[1], "px) scale(").concat(scale || 1, ")");
      var transformOrigin = "".concat(origin[0], "px ").concat(origin[1], "px");
      this.refs.$view.$$('.artboard-title').forEach(function ($title) {
        $title.css('transform-origin', "bottom left");
        $title.css('transform', "scale(".concat(1 / scale, ")"));
      });
      return {
        style: {
          'transform-origin': transformOrigin,
          transform: transform
        }
      };
    }
  }, {
    key: "selectCurrent",
    value: function selectCurrent() {
      var _this3 = this;

      this.state.cachedCurrentElement = {};

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      if (args.length) {
        var selector = args.map(function (it) {
          return "[data-id='".concat(it.id, "']");
        }).join(',');
        var list = this.$el.$$(selector);

        if (list.length) {
          list.forEach(function (it) {
            _this3.state.cachedCurrentElement[it.attr('data-id')] = it;
          });
        }
      }
    } // 객체를 부분 업데이트 하기 위한 메소드 

  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelectionStyleView'),
    value: function value(obj) {
      var _this4 = this;

      var items = obj ? [obj] : this.$selection.items;
      items.forEach(function (current) {
        _this4.updateElement(current);
      });
      this.selectCurrent.apply(this, toConsumableArray_default()(items));
    }
  }, {
    key: "updateElement",
    value: function updateElement(item) {
      if (item) {
        HTMLRenderer["a" /* default */].update(item, this.getElement(item.id), this.$editor);
      }
    } // 타임라인에서 객체를 업데이트 할 때 발생함. 

  }, {
    key: "updateTimelineElement",
    value: function updateTimelineElement(item) {
      if (item) {
        HTMLRenderer["a" /* default */].update(item, this.getElement(item.id));
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('playTimeline', 'moveTimeline'),
    value: function value() {
      var _this5 = this;

      var project = this.$selection.currentProject;
      var timeline = project.getSelectedTimeline();

      if (timeline) {
        timeline.animations.map(function (it) {
          return project.searchById(it.id);
        }).forEach(function (current) {
          _this5.updateTimelineElement(current, true, false);
        });
      }
    }
    /**
     * canvas 전체 다시 그리기 
     */

  }, {
    key: Object(Event["SUBSCRIBE"])('refreshAllCanvas'),
    value: function value() {
      var project = this.$selection.currentProject;
      var html = HTMLRenderer["a" /* default */].render(project) || '';
      this.setState({
        html: html
      }, false);
      this.refs.$view.updateDiff(html);
      this.bindData('$view'); // 최초 전체 객체를 돌면서 update 함수를 실행해줄 트리거가 필요하다. 

      this.trigger('updateAllCanvas', project);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateAllCanvas'),
    value: function value(parentLayer) {
      var _this6 = this;

      parentLayer.layers.forEach(function (item) {
        _this6.updateElement(item, _this6.getElement(item.id));

        _this6.trigger('updateAllCanvas', item);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshAllElementBoundSize'),
    value: function value() {
      var _this7 = this;

      var selectionList = this.$selection.items.map(function (it) {
        return it.is('artboard') ? it : it.parent;
      });

      var list = toConsumableArray_default()(new Set(selectionList));

      list.forEach(function (it) {
        _this7.trigger('refreshElementBoundSize', it);
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshElementBoundSize'),
    value: function value(parentObj) {
      var _this8 = this;

      if (parentObj) {
        parentObj.layers.forEach(function (it) {
          if (it.isLayoutItem()) {
            var $el = _this8.getElement(it.id);

            if ($el) {
              var _$el$offsetRect = $el.offsetRect(),
                  x = _$el$offsetRect.x,
                  y = _$el$offsetRect.y,
                  width = _$el$offsetRect.width,
                  height = _$el$offsetRect.height;

              it.reset({
                x: unit_Length["a" /* Length */].px(x),
                y: unit_Length["a" /* Length */].px(y),
                width: unit_Length["a" /* Length */].px(width),
                height: unit_Length["a" /* Length */].px(height)
              }); // if (it.is('component')) {
              //     this.emit('refreshStyleView', it, true);
              // }
              // svg 객체  path, polygon 은  크기가 바뀌면 내부 path도 같이 scale up/down  이 되어야 하는데 
              // 이건 어떻게 적용하나 ....                     

              _this8.trigger('refreshSelectionStyleView', it, true);
            }
          }

          _this8.trigger('refreshElementBoundSize', it);
        });
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.bindData('$view');
    }
  }]);

  return HTMLRenderView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  HTMLRenderView: HTMLRenderView_HTMLRenderView
});
// EXTERNAL MODULE: ./src/el/editor/ui/property-editor/NumberInputEditor.js
var NumberInputEditor = __webpack_require__(93);

// CONCATENATED MODULE: ./src/el/editor/ui/view-items/PageTools.js






function PageTools_createSuper(Derived) { var hasNativeReflectConstruct = PageTools_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PageTools_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PageTools_PageTools = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PageTools, _EditorElement);

  var _super = PageTools_createSuper(PageTools);

  function PageTools() {
    classCallCheck_default()(this, PageTools);

    return _super.apply(this, arguments);
  }

  createClass_default()(PageTools, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "     \n      <div class='page-tools'>\n        <button type='button' ref='$minus'>".concat(icon["a" /* default */].remove2, "</button>\n        <div class='select'>\n          <object refClass=\"NumberInputEditor\"  ref='$scale' min='10' max='240' step=\"1\" key=\"scale\" value=\"").concat(this.$viewport.scale * 100, "\" onchange=\"changeRangeEditor\" />\n        </div>\n        <label>%</label>\n        <button type='button' ref='$plus'>").concat(icon["a" /* default */].add, "</button>        \n        <button type='button' ref='$center' data-tooltip=\"Move to Center\" data-direction=\"top\">").concat(icon["a" /* default */].gps_fixed, "</button>    \n        <button type='button' ref='$ruler' data-tooltip=\"Toggle Ruler\" data-direction=\"top\">").concat(icon["a" /* default */].straighten, "</button>    \n        <button type='button' ref='$fullscreen' data-tooltip=\"FullScreen Canvas\" data-direction=\"top\">").concat(icon["a" /* default */].fullscreen, "</button>                        \n      </div>\n\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      var scale = Math.floor(this.$viewport.scale * 100);

      if (this.children.$scale) {
        this.children.$scale.setValue(scale);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeRangeEditor') + Object(Event["DEBOUNCE"])(1000),
    value: function value(key, scale) {
      this.$viewport.setScale(scale / 100);
      this.emit('updateViewport');
      this.trigger('updateViewport');
    }
  }, {
    key: Object(Event["CLICK"])('$plus') + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      var oldScale = this.$viewport.scale;
      this.$viewport.setScale(oldScale + 0.01);
      this.emit('updateViewport');
      this.trigger('updateViewport');
    }
  }, {
    key: Object(Event["CLICK"])('$minus') + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      var oldScale = this.$viewport.scale;
      this.$viewport.setScale(oldScale - 0.01);
      this.emit('updateViewport');
      this.trigger('updateViewport');
    }
  }, {
    key: Object(Event["CLICK"])('$center') + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      this.emit('moveSelectionToCenter');
    }
  }, {
    key: Object(Event["CLICK"])('$ruler') + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      this.$config.toggle('ruler.show');
    }
  }, {
    key: Object(Event["CLICK"])('$fullscreen') + Event["PREVENT"] + Event["STOP"],
    value: function value() {
      this.emit('bodypanel.toggle.fullscreen');
    }
  }]);

  return PageTools;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PageTools: PageTools_PageTools
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/PathManager.js







function PathManager_createSuper(Derived) { var hasNativeReflectConstruct = PathManager_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PathManager_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var MODES = {
  'segment-move': 'modify',
  'modify': 'modify',
  'path': 'path'
};

var PathManager_PathManager = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PathManager, _EditorElement);

  var _super = PathManager_createSuper(PathManager);

  function PathManager() {
    classCallCheck_default()(this, PathManager);

    return _super.apply(this, arguments);
  }

  createClass_default()(PathManager, [{
    key: "initState",
    value: function initState() {
      return {
        mode: 'move',
        fill: null,
        stroke: null,
        'fill-opacity': null,
        'stroke-width': null,
        msg: this.$i18n('path.manager.msg')
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      var current = this.$selection.current;

      if (current) {
        this.children.$fill.setValue(current['fill'] || 'rgba(0, 0, 0, 0)');
        this.children.$stroke.setValue(current['stroke'] || 'rgba(0, 0, 0, 1)');
        this.children.$fillOpacity.setValue(current['fill-opacity'] || unit_Length["a" /* Length */].number(1));
        this.children.$strokeWidth.setValue(current['stroke-width'] || unit_Length["a" /* Length */].number(1));
      }
    }
  }, {
    key: "template",
    value: function template() {
      var current = this.$selection.current || {};
      return (
        /*html*/
        "\n      <div class='path-manager'>\n        <div class='tools' ref='$mode' data-selected-value='".concat(this.state.mode, "'>\n            <button type=\"button\" data-value='modify' title='").concat(this.$i18n('path.manager.mode.modify'), "' > ").concat(icon["a" /* default */].device_hub, "</button>\n            <button type=\"button\" data-value='path' title='").concat(this.$i18n('path.manager.mode.path'), "' > ").concat(icon["a" /* default */].control_point, "</button>\n        </div>\n        <div class='tools' ref='$flip'>\n            <button type=\"button\" data-value='flipX' title='").concat(this.$i18n('path.manager.mode.flipX'), "'>").concat(icon["a" /* default */].flip, "</button>\n            <button type=\"button\" data-value='flipY' title='").concat(this.$i18n('path.manager.mode.flipY'), "'>").concat(icon["a" /* default */].flip, "</button>\n            <button type=\"button\" data-value='flip' title='").concat(this.$i18n('path.manager.mode.flipOrigin'), "'>").concat(icon["a" /* default */].flip, "</button>\n        </div>\n\n        <div class='tools' ref='$util'>\n            <button type=\"button\" data-value='reverse' title='").concat(this.$i18n('path.manager.mode.transform'), "' >").concat(icon["a" /* default */].swap_horiz, "</button>\n        </div>        \n        <div class='tools'>      \n          <div>\n            <object refClass=\"FillSingleEditor\" ref=\"$fill\" simple=\"true\" label=\"").concat(this.$i18n('svg.item.property.fill'), "\" key=\"fill\" onchange=\"changeValue\" />\n          </div>\n          <div>\n            <object refClass=\"FillSingleEditor\" ref=\"$stroke\" simple=\"true\" label=\"").concat(this.$i18n('svg.item.property.stroke'), "\" key=\"stroke\" onchange=\"changeValue\" />\n          </div>      \n          <div >\n            <span \n              refClass=\"NumberInputEditor\" \n              ref=\"$fillOpacity\" \n              label=\"").concat(this.$i18n('svg.item.property.fillOpacity'), "\" \n              key=\"fill-opacity\" \n              value=\"1\"\n              min=\"0\"\n              max=\"1\"\n              step=\"0.01\"\n              calc=\"false\"\n              unit=\"number\"\n              onchange=\"changeValue\"\n            />\n          </div>   \n\n          <div>\n            <span \n              refClass=\"NumberInputEditor\" \n              ref=\"$strokeWidth\" \n              label=\"").concat(this.$i18n('svg.item.property.strokeWidth'), "\" \n              key=\"stroke-width\" \n              onchange=\"changeValue\"\n            />\n          </div>\n        </div>\n      </div>    \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('setColorAsset'),
    value: function value(_ref) {
      var color = _ref.color;

      if (this.$el.isShow()) {
        this.setState({
          stroke: color
        }, false);
        this.children.$stroke.setValue(color);
        this.updateData({
          stroke: color
        });
        this.command('setAttribute', 'change color assets', {
          stroke: color
        }, null, true);
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeValue'),
    value: function value(key, _value, params) {
      this.command('setAttribute', 'change path', defineProperty_default()({}, key, _value), null, true);
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: Object(Event["BIND"])('$mode'),
    value: function value() {
      return {
        'data-selected-value': MODES[this.state.mode]
      };
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.bindData('$mode');
    }
  }, {
    key: Object(Event["CLICK"])('$flip button'),
    value: function value(e) {
      var transformType = e.$dt.attr('data-value');
      this.emit('changePathTransform', transformType);
    }
  }, {
    key: Object(Event["CLICK"])('$util button'),
    value: function value(e) {
      var utilType = e.$dt.attr('data-value');
      this.emit('changePathUtil', utilType);
    }
  }, {
    key: Object(Event["CLICK"])('$mode button'),
    value: function value(e) {
      var mode = e.$dt.attr('data-value');
      this.updateData({
        mode: mode
      });
      this.refresh();
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(obj, false);
      this.emit(this.state.changeEvent, obj);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePathManager'),
    value: function value(mode) {
      this.setState({
        mode: mode
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showPathManager'),
    value: function value() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      obj.changeEvent = obj.changeEvent || 'changePathManager';
      this.setState(obj);
      this.$el.show();
      this.emit('addStatusBarMessage', this.state.msg);
      this.emit('change.mode.view', 'PathEditorView');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hidePathManager'),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return PathManager;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PathManager: PathManager_PathManager
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/DrawManager.js







function DrawManager_createSuper(Derived) { var hasNativeReflectConstruct = DrawManager_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DrawManager_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var DrawManager_DrawManager = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(DrawManager, _EditorElement);

  var _super = DrawManager_createSuper(DrawManager);

  function DrawManager() {
    classCallCheck_default()(this, DrawManager);

    return _super.apply(this, arguments);
  }

  createClass_default()(DrawManager, [{
    key: "initState",
    value: function initState() {
      return {
        tolerance: 1,
        stroke: 'black',
        'stroke-width': 2,
        'stroke-linecap': 'round',
        'stroke-linejoin': 'round',
        msg: this.$i18n('path.manager.msg')
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection'),
    value: function value() {
      var current = this.$selection.current;

      if (current) {
        this.children.$stroke.setValue(current['stroke'] || 'rgba(0, 0, 0, 1)');
        this.children.$strokeWidth.setValue(current['stroke-width'] || unit_Length["a" /* Length */].number(1));
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('setColorAsset'),
    value: function value(_ref) {
      var color = _ref.color;

      if (this.$el.isShow()) {
        this.setState({
          stroke: color
        }, false);
        this.children.$stroke.setValue(color);
        this.updateData({
          stroke: color
        });
      }
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='draw-manager'>\n        <div class='tools'>   \n          <div >        \n            <label>".concat(this.$i18n('draw.manager.tolerance'), "</label>            \n            <object refClass=\"NumberInputEditor\"  \n              ref='$tolerance' \n              key='tolerance' \n              value=\"1\" \n              min=\"0\"\n              max=\"100\"\n              step=\"0.01\"\n              unit=\"number\" \n              onchange=\"changeValue\" \n            />\n          </div>              \n          <div >\n            <label>").concat(this.$i18n('svg.item.property.stroke'), "</label>          \n            <object refClass=\"FillSingleEditor\" ref='$stroke' simple=\"true\" value=\"").concat(this.state.stroke, "\" key='stroke' onchange=\"changeValue\" />\n          </div>\n\n          <div >\n            <label>").concat(this.$i18n('svg.item.property.strokeWidth'), "</label>          \n            <object refClass=\"NumberInputEditor\"  \n              ref='$strokeWidth' \n              key=\"stroke-width\" \n              value=\"").concat(this.state['stroke-width'], "\"              \n              onchange=\"changeValue\" />\n          </div>      \n          \n\n          <div>\n            <label>").concat(this.$i18n('svg.item.property.lineCap'), "</label>          \n            <object refClass=\"SelectEditor\" \n              ref='$strokeLineCap' \n              key=\"stroke-linecap\" \n              value=\"").concat(this.state['stroke-linecap'], "\"                   \n              options=\"butt,round,square\" \n              onchange=\"changeValue\" \n            />\n          </div> \n          <div>\n            <label>").concat(this.$i18n('svg.item.property.lineJoin'), "</label>          \n            <object refClass=\"SelectEditor\"  \n              ref='$strokeLineJoin' \n              key=\"stroke-linejoin\" \n              value=\"").concat(this.state['stroke-linejoin'], "\"                                 \n              options=\"miter,bevel,round\" \n              onchange=\"changeValue\" \n            />\n          </div>\n        </div>\n      </div>    \n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeValue'),
    value: function value(key, _value, params) {
      this.updateData(defineProperty_default()({}, key, _value));
    }
  }, {
    key: "updateData",
    value: function updateData() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.setState(obj, false);
      this.state.instance.trigger(this.state.changeEvent, obj);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changePathManager'),
    value: function value(mode) {
      this.setState({
        mode: mode
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('showDrawManager'),
    value: function value() {
      var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      obj.changeEvent = obj.changeEvent || 'changeDrawManager';
      this.setState(obj);
      this.$el.show();
      this.emit('addStatusBarMessage', this.state.msg);
      this.emit('hidePathManager');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('hideDrawManager'),
    value: function value() {
      this.$el.hide();
    }
  }]);

  return DrawManager;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  DrawManager: DrawManager_DrawManager
});
// CONCATENATED MODULE: ./src/el/editor/ui/view-items/PageSubEditor.js






function PageSubEditor_createSuper(Derived) { var hasNativeReflectConstruct = PageSubEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PageSubEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var PageSubEditor_PageSubEditor = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PageSubEditor, _EditorElement);

  var _super = PageSubEditor_createSuper(PageSubEditor);

  function PageSubEditor() {
    classCallCheck_default()(this, PageSubEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(PageSubEditor, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='page-subeditor'>\n        <object refClass='PathManager' />\n        <object refClass='DrawManager' />\n        <object refClass='SelectionManager' />\n      </div>\n    "
      );
    }
  }]);

  return PageSubEditor;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PageSubEditor: PageSubEditor_PageSubEditor
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/CanvasView.js










function CanvasView_createSuper(Derived) { var hasNativeReflectConstruct = CanvasView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function CanvasView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }












var CanvasView_CanvasView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(CanvasView, _EditorElement);

  var _super = CanvasView_createSuper(CanvasView);

  function CanvasView() {
    classCallCheck_default()(this, CanvasView);

    return _super.apply(this, arguments);
  }

  createClass_default()(CanvasView, [{
    key: "initState",
    value: function initState() {
      return {
        cursor: 'auto',
        cursorArgs: []
      };
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      var _this = this;

      // this.emit('load.json');
      this.nextTick(function () {
        _this.trigger('resizeCanvas');

        _this.emit('moveSelectionToCenter', false);
      });
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='page-container' tabIndex=\"-1\" ref='$container'>\n        <div class='page-view'>\n          <div class='page-lock scrollbar' ref='$lock'>\n            <object refClass='HTMLRenderView' ref='$elementView' />\n            <div ref='$viewport'></div>\n          </div>\n        </div>\n        <!--<PageSubEditor /> -->\n        <object refClass='PageTools' />\n      </div>\n    "
      );
    }
  }, {
    key: "makeViewportConsole",
    value: function makeViewportConsole() {
      if (!this.$viewport.verties) return '';
      var mouse = this.$viewport.pos;
      return (
        /*html*/
        "\n      <div style='background-color: rgba(0, 0, 0, 0.5); color: white;position:absolute;left:0px;top:0px;bottom:0px;right:0px;pointer-events:none;'>\n        <div style='position:absolute;width:1px;height:100%;top:0px;left:50%;transform:translateX(-50%);background-color:black;'></div>  \n        <div style='position:absolute;height:1px;width:100%;top:50%;transform:translateY(-50%);background-color:black;'></div>                \n        <div style='position:absolute;display:inline-block;left:0px;top:50%;transform:translateY(-50%);'>".concat(Math.floor(this.$viewport.minX), "</div>\n        <div style='position:absolute;display:inline-block;right:0px;top:50%;transform:translateY(-50%);'>").concat(Math.floor(this.$viewport.maxX), "</div>\n        <div style='position:absolute;display:inline-block;left:50%;top:0px;transform:translateX(-50%)'>").concat(Math.floor(this.$viewport.minY), "</div>\n        <div style='position:absolute;display:inline-block;left:50%;bottom:0px;transform:translateX(-50%)'>").concat(Math.floor(this.$viewport.maxY), "</div>\n        <div style='position:absolute;top:50%;left:50%;display:inline-block;'>").concat(this.$viewport.transformOrigin.map(function (it) {
          return Math.floor(it);
        }).join(', '), "</div>\n        <div style='position:absolute;left:").concat(mouse[0], "%;top:").concat(mouse[1], "%;display:inline-block;'>\n          mouse: ").concat(this.$viewport.mouse.map(function (it) {
          return Math.floor(it);
        }).join(', '), " <br />\n          translate: ").concat(this.$viewport.translate.join(', '), " <br />          \n          zoom : ").concat(this.$viewport.zoomFactor, " <br />\n        </div>                  \n\n      </div>\n    ")
      );
    } // space 키가 눌러져 있을 때만 실행한다. 

  }, {
    key: "checkSpace",
    value: function checkSpace() {
      return this.$keyboardManager.check(this.$shortcuts.getGeneratedKeyCode(types_key["a" /* KEY_CODE */].space));
    }
  }, {
    key: Object(Event["POINTERSTART"])('$lock') + Object(Event["IF"])('checkSpace') + Object(Event["MOVE"])('movePan'),
    value: function value(e) {
      this.lastDist = esm["d" /* vec3 */].create();
      this.emit('addStatusBarMessage', this.$i18n('viewport.panning.enable'));
    }
  }, {
    key: "movePan",
    value: function movePan(dx, dy) {
      var _this$$viewport;

      var currentDist = esm["d" /* vec3 */].fromValues(dx, dy, 0);

      (_this$$viewport = this.$viewport).pan.apply(_this$$viewport, toConsumableArray_default()(esm["d" /* vec3 */].transformMat4([], esm["d" /* vec3 */].subtract([], this.lastDist, currentDist), this.$viewport.scaleMatrixInverse)));

      this.lastDist = currentDist;
    }
    /** viewport 디버그 용  */

  }, {
    key: Object(Event["BIND"])('$viewport'),
    value: function value() {
      return '';
      return {
        style: {
          position: 'absolute',
          left: '0px',
          top: '0px',
          right: '0px',
          bottom: '0px',
          'pointer-events': 'none'
        },
        innerHTML: this.makeViewportConsole()
      };
    }
  }, {
    key: Object(Event["BIND"])('$container'),
    value: function () {
      var _value = asyncToGenerator_default()( /*#__PURE__*/regenerator_default.a.mark(function _callee() {
        var _this$$editor$cursorM;

        var cursor;
        return regenerator_default.a.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return (_this$$editor$cursorM = this.$editor.cursorManager).load.apply(_this$$editor$cursorM, [this.state.cursor].concat(toConsumableArray_default()(this.state.cursorArgs || [])));

              case 2:
                cursor = _context.sent;
                return _context.abrupt("return", {
                  style: {
                    cursor: cursor
                  }
                });

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function value() {
        return _value.apply(this, arguments);
      }

      return value;
    }()
  }, {
    key: Object(Event["DRAGOVER"])('$lock') + Event["PREVENT"],
    value: function value() {}
  }, {
    key: Object(Event["DROP"])('$lock') + Event["PREVENT"],
    value: function value(e) {
      if (e.dataTransfer.getData('text/artboard')) {
        var newCenter = this.$viewport.createWorldPosition(e.clientX, e.clientY);
        this.emit('drop.asset', {
          artboard: {
            id: e.dataTransfer.getData('text/artboard'),
            center: newCenter
          }
        });
      } else if (e.dataTransfer.getData('text/custom-component')) {
        var _newCenter = this.$viewport.createWorldPosition(e.clientX, e.clientY);

        this.emit('drop.asset', {
          customComponent: {
            id: e.dataTransfer.getData('text/custom-component'),
            center: _newCenter
          }
        });
      } else {
        var files = Resource["b" /* default */].getAllDropItems(e);
        var id = Dom["a" /* default */].create(e.target).attr('data-id');

        if (id) {
          this.emit('drop.asset', {
            gradient: e.dataTransfer.getData('text/gradient'),
            pattern: e.dataTransfer.getData('text/pattern'),
            color: e.dataTransfer.getData('text/color'),
            imageUrl: e.dataTransfer.getData('image/info')
          }, id);
        } else {
          var imageUrl = e.dataTransfer.getData('image/info');
          this.emit('dropImageUrl', imageUrl);
        }
      }
    }
    /**
     * wheel 은 제어 할 수 있다. 
     *  내 위치를 나타낼려면 wheel 로 제어해야한다. 
     * transform-origin 을 현재 보고 있는 시점의 좌표로 맞출 수 있어야 한다. 
     * 그런 다음 scale 을 한다. 
     * // 내 마우스 위치를 
     * 
     * @param {*} e 
     */

  }, {
    key: Object(Event["WHEEL"])('$lock') + Event["PREVENT"],
    value: function value(e) {
      var _this2 = this;

      var _normalizeWheelEvent = Object(Event["normalizeWheelEvent"])(e),
          _normalizeWheelEvent2 = slicedToArray_default()(_normalizeWheelEvent, 2),
          dx = _normalizeWheelEvent2[0],
          dy = _normalizeWheelEvent2[1];

      if (!this.state.gesture) {
        if (e.ctrlKey) {
          this.$viewport.setMousePoint(e.clientX, e.clientY);
        }

        this.emit('startGesture');
        this.state.gesture = true;
      } else {
        if (e.ctrlKey) {
          var zoomFactor = 1 - 2.5 * dy / 100;
          this.$viewport.zoom(zoomFactor);
        } else {
          var newDx = -2.5 * dx;
          var newDy = -2.5 * dy;
          this.$viewport.pan(-newDx / this.$viewport.scale, -newDy / this.$viewport.scale, 0);
        }
      }

      clearTimeout(this.state.timer);
      this.state.timer = setTimeout(function () {
        _this2.state.gesture = undefined;

        _this2.emit('endGesture');
      }, 200);
    }
  }, {
    key: "refreshCanvasSize",
    value: function refreshCanvasSize() {
      this.$viewport.refreshCanvasSize(this.refs.$lock.rect());
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window', 'resizeCanvas'),
    value: function value() {
      this.refreshCanvasSize();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.bindData('$viewport');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeIconView'),
    value: function value(cursor) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if ("".concat(this.state.cursor, " ").concat(this.state.cursorArgs) === "".concat(cursor, " ").concat(args)) {
        return;
      }

      this.state.cursor = cursor;
      this.state.cursorArgs = args;
      this.bindData('$container');
    }
  }]);

  return CanvasView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  CanvasView: CanvasView_CanvasView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/ToolMenu.js






function ToolMenu_createSuper(Derived) { var hasNativeReflectConstruct = ToolMenu_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ToolMenu_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var ToolMenu_ToolMenu = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ToolMenu, _EditorElement);

  var _super = ToolMenu_createSuper(ToolMenu);

  function ToolMenu() {
    classCallCheck_default()(this, ToolMenu);

    return _super.apply(this, arguments);
  }

  createClass_default()(ToolMenu, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='tool-menu center'>\n        <div class='items'>\n          <div class='draw-items' ref='$items' data-selected-value=\"".concat(this.$editor.layout, "\">\n\n            <object refClass='SelectTool' />\n            <object refClass='AddArtboard' />\n            <span data-item='css'>\n              <object refClass='AddRect' />\n              <object refClass='AddCircle' />         \n              <object refClass='AddText' />\n              <object refClass='AddImage' />\n              <object refClass='AddVideo' />\n              <object refClass='AddIFrame' />\n            </span>            \n            <span data-item='svg'>\n              <div class='divider'></div>\n              <object refClass='AddDrawPath' />\n              <object refClass='AddPath' />\n              <object refClass='AddSVGRect' />\n              <object refClass='AddSVGCircle' />            \n              <!-- <AddSVGText /> -->\n              <object refClass='AddSVGTextPath' />\n              <object refClass='AddPolygon' />\n            </span>\n          </div>\n        </div>\n\n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changedEditorlayout'),
    value: function value() {
      this.refs.$items.attr('data-selected-value', this.$editor.layout);
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('noneSelectMenu'),
    value: function value() {
      var $selected = this.refs.$items.$('.selected');

      if ($selected) {
        $selected.removeClass('selected');
      }
    }
  }, {
    key: Object(Event["CLICK"])('$items button'),
    value: function value(e) {
      e.$dt.onlyOneClass('selected');
    }
  }]);

  return ToolMenu;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ToolMenu: ToolMenu_ToolMenu
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/LogoView.js






function LogoView_createSuper(Derived) { var hasNativeReflectConstruct = LogoView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LogoView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var LogoView_LogoView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LogoView, _EditorElement);

  var _super = LogoView_createSuper(LogoView);

  function LogoView() {
    classCallCheck_default()(this, LogoView);

    return _super.apply(this, arguments);
  }

  createClass_default()(LogoView, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='logo'>\n        <div class='text'>EASY</div>\n        <div class='extra-text'>LOGIC</div>\n        <div class='image'></div>\n      </div>    \n    "
      );
    }
  }]);

  return LogoView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LogoView: LogoView_LogoView
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/ExternalToolMenu.js






function ExternalToolMenu_createSuper(Derived) { var hasNativeReflectConstruct = ExternalToolMenu_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ExternalToolMenu_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var ExternalToolMenu_ExternalToolMenu = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ExternalToolMenu, _EditorElement);

  var _super = ExternalToolMenu_createSuper(ExternalToolMenu);

  function ExternalToolMenu() {
    classCallCheck_default()(this, ExternalToolMenu);

    return _super.apply(this, arguments);
  }

  createClass_default()(ExternalToolMenu, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class='external-tool-menu  right'>\n        <div class='items'>\n          <object refClass=\"Download\" />\n          <object refClass=\"Save\" />\n          <object refClass=\"Github\" />\n          <object refClass=\"Manual\" />\n          <!-- LoginButton /-->\n          <!-- SignButton /-->\n        </div>                \n      </div>\n    "
      );
    }
  }]);

  return ExternalToolMenu;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ExternalToolMenu: ExternalToolMenu_ExternalToolMenu
});
// EXTERNAL MODULE: ./src/el/i18n/locales/index.js + 3 modules
var locales = __webpack_require__(78);

// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/LanguageSelector.js






function LanguageSelector_createSuper(Derived) { var hasNativeReflectConstruct = LanguageSelector_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LanguageSelector_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var langs = Object.keys(locales["a" /* default */]);

var LanguageSelector_LanguageSelector = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LanguageSelector, _EditorElement);

  var _super = LanguageSelector_createSuper(LanguageSelector);

  function LanguageSelector() {
    classCallCheck_default()(this, LanguageSelector);

    return _super.apply(this, arguments);
  }

  createClass_default()(LanguageSelector, [{
    key: "template",
    value: function template() {
      var _this = this;

      var languages = langs.map(function (lang) {
        var label = _this.$i18n("app.lang.".concat(lang));

        return "".concat(lang, ":").concat(label);
      });
      return (
        /*html*/
        "\n            <div class='status-selector'>\n                <label>".concat(this.$i18n('app.label.lang'), "</label>\n                <div class='item'>\n                    <object refClass=\"SelectEditor\"  \n                        ref='$locale' \n                        options=\"").concat(languages.join(','), "\" \n                        value=\"").concat(this.$editor.locale, "\" \n                        onchange=\"changeLocale\"\n                    /> \n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeLocale'),
    value: function value(key, locale) {
      this.emit('setLocale', locale);
    }
  }]);

  return LanguageSelector;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LanguageSelector: LanguageSelector_LanguageSelector
});
// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/ThemeSwitcher.js






function ThemeSwitcher_createSuper(Derived) { var hasNativeReflectConstruct = ThemeSwitcher_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ThemeSwitcher_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var theme_list = ['dark', 'light', 'toon'
/*, 'gray' */
];

var ThemeSwitcher_ThemeSwitcher = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ThemeSwitcher, _EditorElement);

  var _super = ThemeSwitcher_createSuper(ThemeSwitcher);

  function ThemeSwitcher() {
    classCallCheck_default()(this, ThemeSwitcher);

    return _super.apply(this, arguments);
  }

  createClass_default()(ThemeSwitcher, [{
    key: "template",
    value: function template() {
      var _this = this;

      var themes = theme_list.map(function (theme) {
        var label = _this.$i18n("app.theme.".concat(theme));

        return "".concat(theme, ":").concat(label);
      });
      return (
        /*html*/
        "\n            <div class='status-selector'>\n                <label>".concat(this.$i18n('app.label.theme'), "</label>\n                <div class='item'>\n                    <object refClass=\"SelectEditor\"  \n                        ref='$locale' \n                        options=\"").concat(themes.join(','), "\" \n                        value=\"").concat(this.$editor.theme, "\" \n                        onchange=\"changeItem\"\n                    /> \n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeItem'),
    value: function value(key, theme) {
      this.emit('switchTheme', theme);
    }
  }]);

  return ThemeSwitcher;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ThemeSwitcher: ThemeSwitcher_ThemeSwitcher
});
// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/LayoutSelector.js






function LayoutSelector_createSuper(Derived) { var hasNativeReflectConstruct = LayoutSelector_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function LayoutSelector_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var LayoutSelector_LayoutSelector = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(LayoutSelector, _EditorElement);

  var _super = LayoutSelector_createSuper(LayoutSelector);

  function LayoutSelector() {
    classCallCheck_default()(this, LayoutSelector);

    return _super.apply(this, arguments);
  }

  createClass_default()(LayoutSelector, [{
    key: "template",
    value: function template() {
      var _this = this;

      var layouts = ['all', 'css', 'svg'].map(function (layout) {
        var label = _this.$i18n("app.layout.".concat(layout));

        return "".concat(layout, ":").concat(label);
      });
      return (
        /*html*/
        "\n            <div class='status-selector'>\n                <label>".concat(this.$i18n('app.label.layout'), "</label>\n                <div class='item'>\n                    <object refClass=\"SelectEditor\"  \n                        ref='$locale' \n                        options=\"").concat(layouts, "\" \n                        value=\"").concat(this.$editor.layout, "\" \n                        onchange=\"changeEditorLayoutValue\"\n                    /> \n                </div>\n            </div>\n        ")
      );
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeEditorLayoutValue'),
    value: function value(key, layout) {
      this.emit('setEditorLayout', layout);
    }
  }]);

  return LayoutSelector;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  LayoutSelector: LayoutSelector_LayoutSelector
});
// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/VersionView.js






function VersionView_createSuper(Derived) { var hasNativeReflectConstruct = VersionView_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VersionView_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var VersionView_VersionView = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(VersionView, _EditorElement);

  var _super = VersionView_createSuper(VersionView);

  function VersionView() {
    classCallCheck_default()(this, VersionView);

    return _super.apply(this, arguments);
  }

  createClass_default()(VersionView, [{
    key: "initState",
    value: function initState() {
      return {
        version: "0.10.51"
      };
    }
  }, {
    key: "template",
    value: function template() {
      return "<div class=\"version-view\">v".concat(this.state.version, "</div>");
    }
  }]);

  return VersionView;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  VersionView: VersionView_VersionView
});
// EXTERNAL MODULE: ./node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js
var taggedTemplateLiteral = __webpack_require__(85);
var taggedTemplateLiteral_default = /*#__PURE__*/__webpack_require__.n(taggedTemplateLiteral);

// CONCATENATED MODULE: ./node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
/*

Based off glamor's StyleSheet, thanks Sunil ❤️

high performance StyleSheet for css-in-js systems

- uses multiple style tags behind the scenes for millions of rules
- uses `insertRule` for appending in production for *much* faster performance

// usage

import { StyleSheet } from '@emotion/sheet'

let styleSheet = new StyleSheet({ key: '', container: document.head })

styleSheet.insert('#box { border: 1px solid red; }')
- appends a css rule into the stylesheet

styleSheet.flush()
- empties the stylesheet of all its contents

*/
// $FlowFixMe
function sheetForTag(tag) {
  if (tag.sheet) {
    // $FlowFixMe
    return tag.sheet;
  } // this weirdness brought to you by firefox

  /* istanbul ignore next */


  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      // $FlowFixMe
      return document.styleSheets[i];
    }
  }
}

function createStyleElement(options) {
  var tag = document.createElement('style');
  tag.setAttribute('data-emotion', options.key);

  if (options.nonce !== undefined) {
    tag.setAttribute('nonce', options.nonce);
  }

  tag.appendChild(document.createTextNode(''));
  tag.setAttribute('data-s', '');
  return tag;
}

var StyleSheet = /*#__PURE__*/function () {
  function StyleSheet(options) {
    var _this = this;

    this._insertTag = function (tag) {
      var before;

      if (_this.tags.length === 0) {
        before = _this.prepend ? _this.container.firstChild : _this.before;
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }

      _this.container.insertBefore(tag, before);

      _this.tags.push(tag);
    };

    this.isSpeedy = options.speedy === undefined ? "production" === 'production' : options.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets

    this.key = options.key;
    this.container = options.container;
    this.prepend = options.prepend;
    this.before = null;
  }

  var _proto = StyleSheet.prototype;

  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };

  _proto.insert = function insert(rule) {
    // the max length is how many rules we have per style tag, it's 65000 in speedy mode
    // it's 1 in dev because we insert source maps that map a single rule to a location
    // and you can only have one source map per style tag
    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }

    var tag = this.tags[this.tags.length - 1];

    if (false) { var isImportRule; }

    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);

      try {
        // this is the ultrafast version, works across browsers
        // the big drawback is that the css won't be editable in devtools
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (false) {}
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }

    this.ctr++;
  };

  _proto.flush = function flush() {
    // $FlowFixMe
    this.tags.forEach(function (tag) {
      return tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;

    if (false) {}
  };

  return StyleSheet;
}();



// CONCATENATED MODULE: ./node_modules/stylis/dist/stylis.mjs
var stylis_e="-ms-";var r="-moz-";var a="-webkit-";var c="comm";var n="rule";var stylis_t="decl";var s="@page";var u="@media";var stylis_i="@import";var f="@charset";var o="@viewport";var l="@supports";var stylis_v="@document";var h="@namespace";var stylis_p="@keyframes";var b="@font-face";var w="@counter-style";var $="@font-feature-values";var k=Math.abs;var stylis_d=String.fromCharCode;function m(e,r){return(((r<<2^stylis_z(e,0))<<2^stylis_z(e,1))<<2^stylis_z(e,2))<<2^stylis_z(e,3)}function g(e){return e.trim()}function stylis_x(e,r){return(e=r.exec(e))?e[0]:e}function stylis_y(e,r,a){return e.replace(r,a)}function j(e,r){return e.indexOf(r)}function stylis_z(e,r){return e.charCodeAt(r)|0}function C(e,r,a){return e.slice(r,a)}function A(e){return e.length}function M(e){return e.length}function O(e,r){return r.push(e),e}function S(e,r){return e.map(r).join("")}var q=1;var B=1;var D=0;var E=0;var F=0;var G="";function H(e,r,a,c,n,t,s){return{value:e,root:r,parent:a,type:c,props:n,children:t,line:q,column:B,length:s,return:""}}function I(e,r,a){return H(e,r.root,r.parent,a,r.props,r.children,0)}function J(){return F}function K(){F=E>0?stylis_z(G,--E):0;if(B--,F===10)B=1,q--;return F}function L(){F=E<D?stylis_z(G,E++):0;if(B++,F===10)B=1,q++;return F}function N(){return stylis_z(G,E)}function P(){return E}function Q(e,r){return C(G,e,r)}function R(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function T(e){return q=B=1,D=A(G=e),E=0,[]}function U(e){return G="",e}function V(e){return g(Q(E-1,_(e===91?e+2:e===40?e+1:e)))}function W(e){return U(Y(T(e)))}function X(e){while(F=N())if(F<33)L();else break;return R(e)>2||R(F)>3?"":" "}function Y(e){while(L())switch(R(F)){case 0:O(re(E-1),e);break;case 2:O(V(F),e);break;default:O(stylis_d(F),e)}return e}function Z(e,r){while(--r&&L())if(F<48||F>102||F>57&&F<65||F>70&&F<97)break;return Q(e,P()+(r<6&&N()==32&&L()==32))}function _(e){while(L())switch(F){case e:return E;case 34:case 39:return _(e===34||e===39?e:F);case 40:if(e===41)_(e);break;case 92:L();break}return E}function ee(e,r){while(L())if(e+F===47+10)break;else if(e+F===42+42&&N()===47)break;return"/*"+Q(r,E-1)+"*"+stylis_d(e===47?e:L())}function re(e){while(!R(N()))L();return Q(e,E)}function ae(e){return U(ce("",null,null,null,[""],e=T(e),0,[0],e))}function ce(e,r,a,c,n,t,s,u,i){var f=0;var o=0;var l=s;var v=0;var h=0;var p=0;var b=1;var w=1;var $=1;var k=0;var m="";var g=n;var x=t;var j=c;var z=m;while(w)switch(p=k,k=L()){case 34:case 39:case 91:case 40:z+=V(k);break;case 9:case 10:case 13:case 32:z+=X(p);break;case 92:z+=Z(P()-1,7);continue;case 47:switch(N()){case 42:case 47:O(te(ee(L(),P()),r,a),i);break;default:z+="/"}break;case 123*b:u[f++]=A(z)*$;case 125*b:case 59:case 0:switch(k){case 0:case 125:w=0;case 59+o:if(h>0&&A(z)-l)O(h>32?se(z+";",c,a,l-1):se(stylis_y(z," ","")+";",c,a,l-2),i);break;case 59:z+=";";default:O(j=ne(z,r,a,f,o,n,u,m,g=[],x=[],l),t);if(k===123)if(o===0)ce(z,r,j,j,g,t,l,u,x);else switch(v){case 100:case 109:case 115:ce(e,j,j,c&&O(ne(e,j,j,0,0,n,u,m,n,g=[],l),x),n,x,l,u,c?g:x);break;default:ce(z,j,j,j,[""],x,l,u,x)}}f=o=h=0,b=$=1,m=z="",l=s;break;case 58:l=1+A(z),h=p;default:if(b<1)if(k==123)--b;else if(k==125&&b++==0&&K()==125)continue;switch(z+=stylis_d(k),k*b){case 38:$=o>0?1:(z+="\f",-1);break;case 44:u[f++]=(A(z)-1)*$,$=1;break;case 64:if(N()===45)z+=V(L());v=N(),o=A(m=z+=re(P())),k++;break;case 45:if(p===45&&A(z)==2)b=0}}return t}function ne(e,r,a,c,t,s,u,i,f,o,l){var v=t-1;var h=t===0?s:[""];var p=M(h);for(var b=0,w=0,$=0;b<c;++b)for(var d=0,m=C(e,v+1,v=k(w=u[b])),x=e;d<p;++d)if(x=g(w>0?h[d]+" "+m:stylis_y(m,/&\f/g,h[d])))f[$++]=x;return H(e,r,a,t===0?n:i,f,o,l)}function te(e,r,a){return H(e,r,a,c,stylis_d(J()),C(e,2,-2),0)}function se(e,r,a,c){return H(e,r,a,stylis_t,C(e,0,c),C(e,c+1,-1),c)}function ue(c,n){switch(m(c,n)){case 5103:return a+"print-"+c+c;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return a+c+c;case 5349:case 4246:case 4810:case 6968:case 2756:return a+c+r+c+stylis_e+c+c;case 6828:case 4268:return a+c+stylis_e+c+c;case 6165:return a+c+stylis_e+"flex-"+c+c;case 5187:return a+c+stylis_y(c,/(\w+).+(:[^]+)/,a+"box-$1$2"+stylis_e+"flex-$1$2")+c;case 5443:return a+c+stylis_e+"flex-item-"+stylis_y(c,/flex-|-self/,"")+c;case 4675:return a+c+stylis_e+"flex-line-pack"+stylis_y(c,/align-content|flex-|-self/,"")+c;case 5548:return a+c+stylis_e+stylis_y(c,"shrink","negative")+c;case 5292:return a+c+stylis_e+stylis_y(c,"basis","preferred-size")+c;case 6060:return a+"box-"+stylis_y(c,"-grow","")+a+c+stylis_e+stylis_y(c,"grow","positive")+c;case 4554:return a+stylis_y(c,/([^-])(transform)/g,"$1"+a+"$2")+c;case 6187:return stylis_y(stylis_y(stylis_y(c,/(zoom-|grab)/,a+"$1"),/(image-set)/,a+"$1"),c,"")+c;case 5495:case 3959:return stylis_y(c,/(image-set\([^]*)/,a+"$1"+"$`$1");case 4968:return stylis_y(stylis_y(c,/(.+:)(flex-)?(.*)/,a+"box-pack:$3"+stylis_e+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+a+c+c;case 4095:case 3583:case 4068:case 2532:return stylis_y(c,/(.+)-inline(.+)/,a+"$1$2")+c;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(A(c)-1-n>6)switch(stylis_z(c,n+1)){case 109:if(stylis_z(c,n+4)!==45)break;case 102:return stylis_y(c,/(.+:)(.+)-([^]+)/,"$1"+a+"$2-$3"+"$1"+r+(stylis_z(c,n+3)==108?"$3":"$2-$3"))+c;case 115:return~j(c,"stretch")?ue(stylis_y(c,"stretch","fill-available"),n)+c:c}break;case 4949:if(stylis_z(c,n+1)!==115)break;case 6444:switch(stylis_z(c,A(c)-3-(~j(c,"!important")&&10))){case 107:return stylis_y(c,":",":"+a)+c;case 101:return stylis_y(c,/(.+:)([^;!]+)(;|!.+)?/,"$1"+a+(stylis_z(c,14)===45?"inline-":"")+"box$3"+"$1"+a+"$2$3"+"$1"+stylis_e+"$2box$3")+c}break;case 5936:switch(stylis_z(c,n+11)){case 114:return a+c+stylis_e+stylis_y(c,/[svh]\w+-[tblr]{2}/,"tb")+c;case 108:return a+c+stylis_e+stylis_y(c,/[svh]\w+-[tblr]{2}/,"tb-rl")+c;case 45:return a+c+stylis_e+stylis_y(c,/[svh]\w+-[tblr]{2}/,"lr")+c}return a+c+stylis_e+c+c}return c}function ie(e,r){var a="";var c=M(e);for(var n=0;n<c;n++)a+=r(e[n],n,e,r)||"";return a}function fe(e,r,a,s){switch(e.type){case stylis_i:case stylis_t:return e.return=e.return||e.value;case c:return"";case n:e.value=e.props.join(",")}return A(a=ie(e.children,s))?e.return=e.value+"{"+a+"}":""}function oe(e){var r=M(e);return function(a,c,n,t){var s="";for(var u=0;u<r;u++)s+=e[u](a,c,n,t)||"";return s}}function le(e){return function(r){if(!r.root)if(r=r.return)e(r)}}function ve(c,s,u,i){if(!c.return)switch(c.type){case stylis_t:c.return=ue(c.value,c.length);break;case stylis_p:return ie([I(stylis_y(c.value,"@","@"+a),c,"")],i);case n:if(c.length)return S(c.props,(function(n){switch(stylis_x(n,/(::plac\w+|:read-\w+)/)){case":read-only":case":read-write":return ie([I(stylis_y(n,/:(read-\w+)/,":"+r+"$1"),c,"")],i);case"::placeholder":return ie([I(stylis_y(n,/:(plac\w+)/,":"+a+"input-$1"),c,""),I(stylis_y(n,/:(plac\w+)/,":"+r+"$1"),c,""),I(stylis_y(n,/:(plac\w+)/,stylis_e+"input-$1"),c,"")],i)}return""}))}}function he(e){switch(e.type){case n:e.props=e.props.map((function(r){return S(W(r),(function(r,a,c){switch(stylis_z(r,0)){case 12:return C(r,1,A(r));case 0:case 40:case 43:case 62:case 126:return r;case 58:if(c[++a]==="global")c[a]="",c[++a]="\f"+C(c[a],a=1,-1);case 32:return a===1?"":r;default:switch(a){case 0:e=r;return M(c)>1?"":r;case a=M(c)-1:case 2:return a===2?r+e+e:r+e;default:return r}}}))}))}}
//# sourceMappingURL=stylis.mjs.map

// CONCATENATED MODULE: ./node_modules/@emotion/weak-memoize/dist/weak-memoize.browser.esm.js
var weakMemoize = function weakMemoize(func) {
  // $FlowFixMe flow doesn't include all non-primitive types as allowed for weakmaps
  var cache = new WeakMap();
  return function (arg) {
    if (cache.has(arg)) {
      // $FlowFixMe
      return cache.get(arg);
    }

    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

/* harmony default export */ var weak_memoize_browser_esm = (weakMemoize);

// CONCATENATED MODULE: ./node_modules/@emotion/memoize/dist/emotion-memoize.browser.esm.js
function memoize(fn) {
  var cache = Object.create(null);
  return function (arg) {
    if (cache[arg] === undefined) cache[arg] = fn(arg);
    return cache[arg];
  };
}

/* harmony default export */ var emotion_memoize_browser_esm = (memoize);

// CONCATENATED MODULE: ./node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js





var emotion_cache_browser_esm_last = function last(arr) {
  return arr.length ? arr[arr.length - 1] : null;
};

var emotion_cache_browser_esm_toRules = function toRules(parsed, points) {
  // pretend we've started with a comma
  var index = -1;
  var character = 44;

  do {
    switch (R(character)) {
      case 0:
        // &\f
        if (character === 38 && N() === 12) {
          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings
          // stylis inserts \f after & to know when & where it should replace this sequence with the context selector
          // and when it should just concatenate the outer and inner selectors
          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here
          points[index] = 1;
        }

        parsed[index] += re(E - 1);
        break;

      case 2:
        parsed[index] += V(character);
        break;

      case 4:
        // comma
        if (character === 44) {
          // colon
          parsed[++index] = N() === 58 ? '&\f' : '';
          points[index] = parsed[index].length;
          break;
        }

      // fallthrough

      default:
        parsed[index] += stylis_d(character);
    }
  } while (character = L());

  return parsed;
};

var emotion_cache_browser_esm_getRules = function getRules(value, points) {
  return U(emotion_cache_browser_esm_toRules(T(value), points));
}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11


var fixedElements = /* #__PURE__ */new WeakMap();
var compat = function compat(element) {
  if (element.type !== 'rule' || !element.parent || // .length indicates if this rule contains pseudo or not
  !element.length) {
    return;
  }

  var value = element.value,
      parent = element.parent;
  var isImplicitRule = element.column === parent.column && element.line === parent.line;

  while (parent.type !== 'rule') {
    parent = parent.parent;
    if (!parent) return;
  } // short-circuit for the simplest case


  if (element.props.length === 1 && value.charCodeAt(0) !== 58
  /* colon */
  && !fixedElements.get(parent)) {
    return;
  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)
  // then the props has already been manipulated beforehand as they that array is shared between it and its "rule parent"


  if (isImplicitRule) {
    return;
  }

  fixedElements.set(element, true);
  var points = [];
  var rules = emotion_cache_browser_esm_getRules(value, points);
  var parentRules = parent.props;

  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel(element) {
  if (element.type === 'decl') {
    var value = element.value;

    if ( // charcode for l
    value.charCodeAt(0) === 108 && // charcode for b
    value.charCodeAt(2) === 98) {
      // this ignores label
      element["return"] = '';
      element.value = '';
    }
  }
};
var ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';

var isIgnoringComment = function isIgnoringComment(element) {
  return !!element && element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;
};

var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {
  return function (element, index, children) {
    if (element.type !== 'rule') return;
    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);

    if (unsafePseudoClasses && cache.compat !== true) {
      var prevElement = index > 0 ? children[index - 1] : null;

      if (prevElement && isIgnoringComment(emotion_cache_browser_esm_last(prevElement.children))) {
        return;
      }

      unsafePseudoClasses.forEach(function (unsafePseudoClass) {
        console.error("The pseudo class \"" + unsafePseudoClass + "\" is potentially unsafe when doing server-side rendering. Try changing it to \"" + unsafePseudoClass.split('-child')[0] + "-of-type\".");
      });
    }
  };
};

var isImportRule = function isImportRule(element) {
  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
};

var isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {
  for (var i = index - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }

  return false;
}; // use this to remove incorrect elements from further processing
// so they don't get handed to the `sheet` (or anything else)
// as that could potentially lead to additional logs which in turn could be overhelming to the user


var nullifyElement = function nullifyElement(element) {
  element.type = '';
  element.value = '';
  element["return"] = '';
  element.children = '';
  element.props = '';
};

var incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {
  if (!isImportRule(element)) {
    return;
  }

  if (element.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element);
  } else if (isPrependedWithRegularRules(index, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element);
  }
};

var defaultStylisPlugins = [ve];

var emotion_cache_browser_esm_createCache = function createCache(options) {
  var key = options.key;

  if (false) {}

  if ( key === 'css') {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])"); // get SSRed styles out of the way of React's hydration
    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)
    // note this very very intentionally targets all style elements regardless of the key to ensure
    // that creating a cache works inside of render of a React component

    Array.prototype.forEach.call(ssrStyles, function (node) {
      // we want to only move elements which have a space in the data-emotion attribute value
      // because that indicates that it is an Emotion 11 server-side rendered style elements
      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector
      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)
      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles
      // will not result in the Emotion 10 styles being destroyed
      var dataEmotionAttribute = node.getAttribute('data-emotion');

      if (dataEmotionAttribute.indexOf(' ') === -1) {
        return;
      }
      document.head.appendChild(node);
      node.setAttribute('data-s', '');
    });
  }

  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;

  if (false) {}

  var inserted = {}; // $FlowFixMe

  var container;
  var nodesToHydrate = [];

  {
    container = options.container || document.head;
    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll("style[data-emotion^=\"" + key + " \"]"), function (node) {
      var attrib = node.getAttribute("data-emotion").split(' '); // $FlowFixMe

      for (var i = 1; i < attrib.length; i++) {
        inserted[attrib[i]] = true;
      }

      nodesToHydrate.push(node);
    });
  }

  var _insert;

  var omnipresentPlugins = [compat, removeLabel];

  if (false) {}

  {
    var currentSheet;
    var finalizingPlugins = [fe,  false ? undefined : le(function (rule) {
      currentSheet.insert(rule);
    })];
    var serializer = oe(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));

    var stylis = function stylis(styles) {
      return ie(ae(styles), serializer);
    };

    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;

      if (false) {}

      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);

      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }

  var cache = {
    key: key,
    sheet: new StyleSheet({
      key: key,
      container: container,
      nonce: options.nonce,
      speedy: options.speedy,
      prepend: options.prepend
    }),
    nonce: options.nonce,
    inserted: inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

/* harmony default export */ var emotion_cache_browser_esm = (emotion_cache_browser_esm_createCache);

// CONCATENATED MODULE: ./node_modules/@emotion/hash/dist/hash.browser.esm.js
/* eslint-disable */
// Inspired by https://github.com/garycourt/murmurhash-js
// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86
function murmur2(str) {
  // 'm' and 'r' are mixing constants generated offline.
  // They're not really 'magic', they just happen to work well.
  // const m = 0x5bd1e995;
  // const r = 24;
  // Initialize the hash
  var h = 0; // Mix 4 bytes at a time into the hash

  var k,
      i = 0,
      len = str.length;

  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;
    k =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);
    k ^=
    /* k >>> r: */
    k >>> 24;
    h =
    /* Math.imul(k, m): */
    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^
    /* Math.imul(h, m): */
    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Handle the last few bytes of the input array


  switch (len) {
    case 3:
      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;

    case 2:
      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;

    case 1:
      h ^= str.charCodeAt(i) & 0xff;
      h =
      /* Math.imul(h, m): */
      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  } // Do a few final mixes of the hash to ensure the last few
  // bytes are well-incorporated.


  h ^= h >>> 13;
  h =
  /* Math.imul(h, m): */
  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);
  return ((h ^ h >>> 15) >>> 0).toString(36);
}

/* harmony default export */ var hash_browser_esm = (murmur2);

// CONCATENATED MODULE: ./node_modules/@emotion/unitless/dist/unitless.browser.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

/* harmony default export */ var unitless_browser_esm = (unitlessKeys);

// CONCATENATED MODULE: ./node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js




var ILLEGAL_ESCAPE_SEQUENCE_ERROR = "You have illegal escape sequence in your template literal, most likely inside content's property value.\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \"content: '\\00d7';\" should become \"content: '\\\\00d7';\".\nYou can read more about this here:\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences";
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;

var isCustomProperty = function isCustomProperty(property) {
  return property.charCodeAt(1) === 45;
};

var isProcessableValue = function isProcessableValue(value) {
  return value != null && typeof value !== 'boolean';
};

var processStyleName = /* #__PURE__ */emotion_memoize_browser_esm(function (styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();
});

var emotion_serialize_browser_esm_processStyleValue = function processStyleValue(key, value) {
  switch (key) {
    case 'animation':
    case 'animationName':
      {
        if (typeof value === 'string') {
          return value.replace(animationRegex, function (match, p1, p2) {
            emotion_serialize_browser_esm_cursor = {
              name: p1,
              styles: p2,
              next: emotion_serialize_browser_esm_cursor
            };
            return p1;
          });
        }
      }
  }

  if (unitless_browser_esm[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {
    return value + 'px';
  }

  return value;
};

if (false) { var hyphenatedCache, hyphenPattern, msPattern, oldProcessStyleValue, contentValues, contentValuePattern; }

function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return '';
  }

  if (interpolation.__emotion_styles !== undefined) {
    if (false) {}

    return interpolation;
  }

  switch (typeof interpolation) {
    case 'boolean':
      {
        return '';
      }

    case 'object':
      {
        if (interpolation.anim === 1) {
          emotion_serialize_browser_esm_cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: emotion_serialize_browser_esm_cursor
          };
          return interpolation.name;
        }

        if (interpolation.styles !== undefined) {
          var next = interpolation.next;

          if (next !== undefined) {
            // not the most efficient thing ever but this is a pretty rare case
            // and there will be very few iterations of this generally
            while (next !== undefined) {
              emotion_serialize_browser_esm_cursor = {
                name: next.name,
                styles: next.styles,
                next: emotion_serialize_browser_esm_cursor
              };
              next = next.next;
            }
          }

          var styles = interpolation.styles + ";";

          if (false) {}

          return styles;
        }

        return createStringFromObject(mergedProps, registered, interpolation);
      }

    case 'function':
      {
        if (mergedProps !== undefined) {
          var previousCursor = emotion_serialize_browser_esm_cursor;
          var result = interpolation(mergedProps);
          emotion_serialize_browser_esm_cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (false) {}

        break;
      }

    case 'string':
      if (false) { var replaced, matched; }

      break;
  } // finalize string values (regular strings and functions interpolated into css calls)


  if (registered == null) {
    return interpolation;
  }

  var cached = registered[interpolation];
  return cached !== undefined ? cached : interpolation;
}

function createStringFromObject(mergedProps, registered, obj) {
  var string = '';

  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];

      if (typeof value !== 'object') {
        if (registered != null && registered[value] !== undefined) {
          string += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string += processStyleName(_key) + ":" + emotion_serialize_browser_esm_processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === 'NO_COMPONENT_SELECTOR' && "production" !== 'production') {
          throw new Error('Component selectors can only be used in conjunction with @emotion/babel-plugin.');
        }

        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string += processStyleName(_key) + ":" + emotion_serialize_browser_esm_processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);

          switch (_key) {
            case 'animation':
            case 'animationName':
              {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }

            default:
              {
                if (false) {}

                string += _key + "{" + interpolated + "}";
              }
          }
        }
      }
    }
  }

  return string;
}

var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;

if (false) {} // this is the cursor for keyframes
// keyframes are stored on the SerializedStyles object as a linked list


var emotion_serialize_browser_esm_cursor;
var emotion_serialize_browser_esm_serializeStyles = function serializeStyles(args, registered, mergedProps) {
  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {
    return args[0];
  }

  var stringMode = true;
  var styles = '';
  emotion_serialize_browser_esm_cursor = undefined;
  var strings = args[0];

  if (strings == null || strings.raw === undefined) {
    stringMode = false;
    styles += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (false) {}

    styles += strings[0];
  } // we start at 1 since we've already handled the first arg


  for (var i = 1; i < args.length; i++) {
    styles += handleInterpolation(mergedProps, registered, args[i]);

    if (stringMode) {
      if (false) {}

      styles += strings[i];
    }
  }

  var sourceMap;

  if (false) {} // using a global regex with .exec is stateful so lastIndex has to be reset each time


  labelPattern.lastIndex = 0;
  var identifierName = '';
  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5

  while ((match = labelPattern.exec(styles)) !== null) {
    identifierName += '-' + // $FlowFixMe we know it's not null
    match[1];
  }

  var name = hash_browser_esm(styles) + identifierName;

  if (false) {}

  return {
    name: name,
    styles: styles,
    next: emotion_serialize_browser_esm_cursor
  };
};



// CONCATENATED MODULE: ./node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
var isBrowser = "object" !== 'undefined';
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = '';
  classNames.split(' ').forEach(function (className) {
    if (registered[className] !== undefined) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var insertStyles = function insertStyles(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;

  if ( // we only need to add the styles to the registered cache if the
  // class name could be used further down
  // the tree but if it's a string tag, we know it won't
  // so we don't have to add it to registered cache.
  // this improves memory usage since we can avoid storing the whole style string
  (isStringTag === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  isBrowser === false ) && cache.registered[className] === undefined) {
    cache.registered[className] = serialized.styles;
  }

  if (cache.inserted[serialized.name] === undefined) {
    var current = serialized;

    do {
      var maybeStyles = cache.insert(serialized === current ? "." + className : '', current, cache.sheet, true);

      current = current.next;
    } while (current !== undefined);
  }
};



// CONCATENATED MODULE: ./node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js




function insertWithoutScoping(cache, serialized) {
  if (cache.inserted[serialized.name] === undefined) {
    return cache.insert('', serialized, cache.sheet, true);
  }
}

function merge(registered, css, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);

  if (registeredStyles.length < 2) {
    return className;
  }

  return rawClassName + css(registeredStyles);
}

var emotion_css_create_instance_esm_createEmotion = function createEmotion(options) {
  var cache = emotion_cache_browser_esm(options); // $FlowFixMe

  cache.sheet.speedy = function (value) {
    if (false) {}

    this.isSpeedy = value;
  };

  cache.compat = true;

  var css = function css() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    var serialized = emotion_serialize_browser_esm_serializeStyles(args, cache.registered, undefined);
    insertStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };

  var keyframes = function keyframes() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var serialized = emotion_serialize_browser_esm_serializeStyles(args, cache.registered);
    var animation = "animation-" + serialized.name;
    insertWithoutScoping(cache, {
      name: serialized.name,
      styles: "@keyframes " + animation + "{" + serialized.styles + "}"
    });
    return animation;
  };

  var injectGlobal = function injectGlobal() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    var serialized = emotion_serialize_browser_esm_serializeStyles(args, cache.registered);
    insertWithoutScoping(cache, serialized);
  };

  var cx = function cx() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    return merge(cache.registered, css, classnames(args));
  };

  return {
    css: css,
    cx: cx,
    injectGlobal: injectGlobal,
    keyframes: keyframes,
    hydrate: function hydrate(ids) {
      ids.forEach(function (key) {
        cache.inserted[key] = true;
      });
    },
    flush: function flush() {
      cache.registered = {};
      cache.inserted = {};
      cache.sheet.flush();
    },
    // $FlowFixMe
    sheet: cache.sheet,
    cache: cache,
    getRegisteredStyles: getRegisteredStyles.bind(null, cache.registered),
    merge: merge.bind(null, cache.registered, css)
  };
};

var classnames = function classnames(args) {
  var cls = '';

  for (var i = 0; i < args.length; i++) {
    var arg = args[i];
    if (arg == null) continue;
    var toAdd = void 0;

    switch (typeof arg) {
      case 'boolean':
        break;

      case 'object':
        {
          if (Array.isArray(arg)) {
            toAdd = classnames(arg);
          } else {
            toAdd = '';

            for (var k in arg) {
              if (arg[k] && k) {
                toAdd && (toAdd += ' ');
                toAdd += k;
              }
            }
          }

          break;
        }

      default:
        {
          toAdd = arg;
        }
    }

    if (toAdd) {
      cls && (cls += ' ');
      cls += toAdd;
    }
  }

  return cls;
};

/* harmony default export */ var emotion_css_create_instance_esm = (emotion_css_create_instance_esm_createEmotion);

// CONCATENATED MODULE: ./node_modules/@emotion/css/dist/emotion-css.esm.js





var _createEmotion = emotion_css_create_instance_esm({
  key: 'css'
}),
    flush = _createEmotion.flush,
    hydrate = _createEmotion.hydrate,
    emotion_css_esm_cx = _createEmotion.cx,
    emotion_css_esm_merge = _createEmotion.merge,
    emotion_css_esm_getRegisteredStyles = _createEmotion.getRegisteredStyles,
    emotion_css_esm_injectGlobal = _createEmotion.injectGlobal,
    emotion_css_esm_keyframes = _createEmotion.keyframes,
    emotion_css_esm_css = _createEmotion.css,
    sheet = _createEmotion.sheet,
    emotion_css_esm_cache = _createEmotion.cache;



// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/SwitchLeftPanel.js







var _templateObject;

function SwitchLeftPanel_createSuper(Derived) { var hasNativeReflectConstruct = SwitchLeftPanel_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SwitchLeftPanel_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SwitchLeftPanel_SwitchLeftPanel = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SwitchLeftPanel, _EditorElement);

  var _super = SwitchLeftPanel_createSuper(SwitchLeftPanel);

  function SwitchLeftPanel() {
    classCallCheck_default()(this, SwitchLeftPanel);

    return _super.apply(this, arguments);
  }

  createClass_default()(SwitchLeftPanel, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <button class=\"".concat(emotion_css_esm_css(_templateObject || (_templateObject = taggedTemplateLiteral_default()(["\n            display: inline-block;\n            position: relative;\n        "]))), "\" data-tooltip=\"Toggle left panel\" data-direction=\"top left\">").concat(icon["a" /* default */].left_hide, "</button>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])(),
    value: function value() {
      this.$config.toggle('show.left.panel');
    }
  }]);

  return SwitchLeftPanel;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SwitchLeftPanel: SwitchLeftPanel_SwitchLeftPanel
});
// CONCATENATED MODULE: ./src/el/editor/ui/status-bar-items/SwitchRightPanel.js







var SwitchRightPanel_templateObject;

function SwitchRightPanel_createSuper(Derived) { var hasNativeReflectConstruct = SwitchRightPanel_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function SwitchRightPanel_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var SwitchRightPanel_SwitchRightPanel = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(SwitchRightPanel, _EditorElement);

  var _super = SwitchRightPanel_createSuper(SwitchRightPanel);

  function SwitchRightPanel() {
    classCallCheck_default()(this, SwitchRightPanel);

    return _super.apply(this, arguments);
  }

  createClass_default()(SwitchRightPanel, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n        <button class=\"".concat(emotion_css_esm_css(SwitchRightPanel_templateObject || (SwitchRightPanel_templateObject = taggedTemplateLiteral_default()(["\n            display: inline-block;\n            position: relative;\n        "]))), "\" data-tooltip=\"Toggle right panel\" data-direction=\"top right\">").concat(icon["a" /* default */].right_hide, "</button>\n        ")
      );
    }
  }, {
    key: Object(Event["CLICK"])(),
    value: function value() {
      this.$config.toggle('show.right.panel');
    }
  }]);

  return SwitchRightPanel;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  SwitchRightPanel: SwitchRightPanel_SwitchRightPanel
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/StatusBar.js






function StatusBar_createSuper(Derived) { var hasNativeReflectConstruct = StatusBar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function StatusBar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }











var StatusBar_StatusBar = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(StatusBar, _EditorElement);

  var _super = StatusBar_createSuper(StatusBar);

  function StatusBar() {
    classCallCheck_default()(this, StatusBar);

    return _super.apply(this, arguments);
  }

  createClass_default()(StatusBar, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='status-bar'>\n                <div class='tool-view left' ref='$leftTool'>\n                    <object refClass=\"SwitchLeftPanel\" />\n                </div>            \n                <div class='message-view' ref='$msg'></div>\n                <div class='tool-view' ref='$rightTool'>\n                    <object refClass=\"LayoutSelector\" />\n                    <object refClass=\"ThemeSwitcher\" />\n                    <object refClass=\"LanguageSelector\" />\n                    <object refClass=\"VersionView\" />\n                    <object refClass=\"SwitchRightPanel\" />                    \n                </div>\n            </div>\n        "
      );
    }
  }, {
    key: "initState",
    value: function initState() {
      return {
        msg: ''
      };
    }
  }, {
    key: Object(Event["BIND"])('$msg'),
    value: function value() {
      return {
        text: this.state.msg
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('addStatusBarMessage'),
    value: function value(msg) {
      this.setState({
        msg: msg
      });
    }
  }]);

  return StatusBar;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  StatusBar: StatusBar_StatusBar
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/ToolBar.js






function ToolBar_createSuper(Derived) { var hasNativeReflectConstruct = ToolBar_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function ToolBar_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var ToolBar_ToolBar = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(ToolBar, _EditorElement);

  var _super = ToolBar_createSuper(ToolBar);

  function ToolBar() {
    classCallCheck_default()(this, ToolBar);

    return _super.apply(this, arguments);
  }

  createClass_default()(ToolBar, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class='tool-bar'>\n                <div class='logo-item'>\n                    <label class='logo'></label>\n                </div>                 \n                <div class='left'>\n                    <div class='tool-menu'>\n                        <div class='items'>\n                            <div class='draw-items'>\n                                <object refClass=\"Projects\" />\n                                <object refClass=\"Fullscreen\" />      \n                            </div>\n                        </div>\n                    </div>                    \n                </div>\n                <div class='center'>\n                    <object refClass=\"ToolMenu\" />\n                    <object refClass='PageSubEditor' />  \n                </div>\n                <div class='right'>\n                    <div class='tool-menu'>\n                        <div class='items'>\n                            <div class='draw-items'>\n                                <object refClass=\"KeyBoard\" />        \n                                <object refClass=\"ExportView\" />\n                                <object refClass=\"Download\" />\n                                <object refClass=\"Save\" />                                \n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        "
      );
    }
  }]);

  return ToolBar;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  ToolBar: ToolBar_ToolBar
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/HorizontalRuler.js







function HorizontalRuler_createSuper(Derived) { var hasNativeReflectConstruct = HorizontalRuler_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function HorizontalRuler_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var pathString = [];

var HorizontalRuler_HorizontalRuler = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(HorizontalRuler, _EditorElement);

  var _super = HorizontalRuler_createSuper(HorizontalRuler);

  function HorizontalRuler() {
    classCallCheck_default()(this, HorizontalRuler);

    return _super.apply(this, arguments);
  }

  createClass_default()(HorizontalRuler, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class=\"horizontal-ruler\">\n                <div class='horizontal-ruler-container' ref='$layerRuler'></div>                            \n                <div class='horizontal-ruler-container' ref='$ruler'></div>\n            </div>\n        "
      );
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.refreshCanvasSize();
    }
  }, {
    key: "refreshCanvasSize",
    value: function refreshCanvasSize() {
      this.state.rect = this.$el.rect();
    }
  }, {
    key: "makeLine",
    value: function makeLine(pathString, baseNumber, minX, maxX, realWidth, width) {
      var epsilon = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;
      var lineWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 30;
      var expect = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 10;
      var startX = minX - minX % baseNumber;
      var endX = maxX + maxX % baseNumber; // if (width / realWidth < 1) return;

      var firstX = (startX - minX) / realWidth * width;
      var secondX = (startX + baseNumber - minX) / realWidth * width;
      if (Math.abs(secondX - firstX) < epsilon) return;

      for (var i = startX; i < endX; i += baseNumber) {
        if (i != 0 && i % expect === 0) continue;
        var x = Math.floor((i - minX) / realWidth * width);
        pathString.push("M ".concat(x, " ").concat(30 - lineWidth, " L ").concat(x, " 30 "));
      }
    }
  }, {
    key: "makeLineText",
    value: function makeLineText(baseNumber, minX, maxX, realWidth, width) {
      var epsilon = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;
      var text = [];
      var startX = minX - minX % baseNumber;
      var endX = maxX + maxX % baseNumber; // if (width / realWidth < 1) return;

      var firstX = (startX - minX) / realWidth * width;
      var secondX = (startX + baseNumber - minX) / realWidth * width;
      if (Math.abs(secondX - firstX) < epsilon) return;

      for (var i = startX; i < endX; i += baseNumber) {
        var x = Math.floor((i - minX) / realWidth * width);
        text.push("<text x=\"".concat(x, "\" y=\"", 0, "\" dx=\"0\" dy=\"8\" text-anchor=\"middle\" alignment-baseline=\"bottom\" >").concat(i, "</text>"));
      }

      return text.join('');
    }
  }, {
    key: "makeRulerForCurrentArtboard",
    value: function makeRulerForCurrentArtboard() {
      var current = this.$selection.current;
      if (!current) return '';
      var currentArtboard = current.artboard;
      if (!currentArtboard) return '';
      var verties = currentArtboard.verties();
      var _this$$viewport = this.$viewport,
          minX = _this$$viewport.minX,
          maxX = _this$$viewport.maxX,
          realWidth = _this$$viewport.width;
      var width = this.state.rect.width;
      var firstX = (verties[0][0] - minX) / realWidth * width;
      var secondX = (verties[2][0] - minX) / realWidth * width;
      return "\n            M ".concat(firstX, " 20 \n            L ").concat(firstX, " 30 \n            L ").concat(secondX, " 30 \n            L ").concat(secondX, " 20 \n            Z\n        ");
    }
  }, {
    key: "makeRulerForCurrent",
    value: function makeRulerForCurrent() {
      var current = this.$selection.current;
      if (!current) return ''; // current

      var verties = this.$selection.verties;
      var xList = verties.map(function (it) {
        return it[0];
      });
      var currentMinX = Math.min.apply(Math, toConsumableArray_default()(xList));
      var currentMaxX = Math.max.apply(Math, toConsumableArray_default()(xList)); // viewport 

      var _this$$viewport2 = this.$viewport,
          minX = _this$$viewport2.minX,
          realWidth = _this$$viewport2.width;
      var width = this.state.rect.width;
      var firstX = (currentMinX - minX) / realWidth * width;
      var secondX = (currentMaxX - minX) / realWidth * width;
      return "\n            M ".concat(firstX, " 15 \n            L ").concat(firstX, " 20 \n            L ").concat(secondX, " 20 \n            L ").concat(secondX, " 15 \n            Z\n        ");
    }
  }, {
    key: "makeRuler",
    value: function makeRuler() {
      var _this$$viewport3 = this.$viewport,
          minX = _this$$viewport3.minX,
          maxX = _this$$viewport3.maxX,
          realWidth = _this$$viewport3.width;
      var width = this.state.rect.width;
      pathString = [];
      this.makeLine(pathString, 200, minX, maxX, realWidth, width, 10, 20, 10000);
      this.makeLine(pathString, 100, minX, maxX, realWidth, width, 10, 20, 200);
      this.makeLine(pathString, 50, minX, maxX, realWidth, width, 10, 20, 100);
      this.makeLine(pathString, 10, minX, maxX, realWidth, width, 10, 18, 50);
      this.makeLine(pathString, 5, minX, maxX, realWidth, width, 10, 15, 10);
      this.makeLine(pathString, 1, minX, maxX, realWidth, width, 10, 13, 5);
      return pathString.join('');
    }
  }, {
    key: "makeRulerText",
    value: function makeRulerText() {
      var _this$$viewport4 = this.$viewport,
          minX = _this$$viewport4.minX,
          maxX = _this$$viewport4.maxX,
          realWidth = _this$$viewport4.width;
      var width = this.state.rect.width;
      var dist = Math.abs(maxX - minX);
      return [dist > 3000 ? this.makeLineText(500, minX, maxX, realWidth, width, 20) : '', 1000 < dist && dist < 3000 ? this.makeLineText(100, minX, maxX, realWidth, width, 20) : '', 800 < dist && dist < 1000 ? this.makeLineText(100, minX, maxX, realWidth, width, 20) : '', 500 < dist && dist < 800 ? this.makeLineText(100, minX, maxX, realWidth, width, 20) : '', 500 < dist && dist < 800 ? this.makeLineText(50, minX, maxX, realWidth, width, 20) : '', 200 < dist && dist < 500 ? this.makeLineText(50, minX, maxX, realWidth, width, 20) : '', 50 < dist && dist < 200 ? this.makeLineText(10, minX, maxX, realWidth, width, 20) : '', 15 < dist && dist < 50 ? this.makeLineText(5, minX, maxX, realWidth, width, 20) : '', 0 < dist && dist < 15 ? this.makeLineText(1, minX, maxX, realWidth, width, 20) : ''].join('');
    }
  }, {
    key: Object(Event["LOAD"])('$ruler') + Event["DOMDIFF"],
    value: function value() {
      if (!this.state.rect || this.state.rect.width == 0) {
        this.state.rect = this.$el.rect();
      }

      return (
        /*html*/
        "\n            <svg width=\"100%\" width=\"100%\" overflow=\"hidden\">\n                <path d=\"".concat(this.makeRuler(), "\" fill=\"transparent\" stroke-width=\"0.5\" stroke=\"white\" transform=\"translate(0.5, 0)\" />\n                ").concat(this.makeRulerText(), "                \n            </svg>\n        ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$layerRuler') + Event["DOMDIFF"],
    value: function value() {
      if (!this.state.rect || this.state.rect.width == 0) {
        this.state.rect = this.$el.rect();
      }

      return (
        /*html*/
        "\n            <svg width=\"100%\" width=\"100%\" overflow=\"hidden\">\n                <path d=\"".concat(this.makeRulerForCurrent(), "\" fill=\"rgba(100, 255, 255, 0.5)\" />\n            </svg>\n        ")
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      if (this.$config.get('ruler.show')) {
        this.load();
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshRect'),
    value: function value() {
      this.load('$layerRuler');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window', 'resizeCanvas'),
    value: function value() {
      this.refreshCanvasSize();
    }
  }]);

  return HorizontalRuler;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  HorizontalRuler: HorizontalRuler_HorizontalRuler
});
// CONCATENATED MODULE: ./src/el/editor/ui/view/VerticalRuler.js






function VerticalRuler_createSuper(Derived) { var hasNativeReflectConstruct = VerticalRuler_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function VerticalRuler_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }




var VerticalRuler_pathString = [];

var VerticalRuler_VerticalRuler = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(VerticalRuler, _EditorElement);

  var _super = VerticalRuler_createSuper(VerticalRuler);

  function VerticalRuler() {
    classCallCheck_default()(this, VerticalRuler);

    return _super.apply(this, arguments);
  }

  createClass_default()(VerticalRuler, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n            <div class=\"vertical-ruler\">\n                <div class='vertical-ruler-container' ref='$layerRuler'></div>                                        \n                <div class='vertical-ruler-container' ref='$body'></div>\n            </div>\n        "
      );
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      this.refreshCanvasSize();
    }
  }, {
    key: "refreshCanvasSize",
    value: function refreshCanvasSize() {
      this.state.rect = this.$el.rect();
    }
  }, {
    key: "makeLine",
    value: function makeLine(pathString, baseNumber, minY, maxY, realHeight, height) {
      var epsilon = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 3;
      var lineWidth = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 30;
      var expect = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 10;
      var startY = minY - minY % baseNumber;
      var endY = maxY + maxY % baseNumber; // if (height / realHeight < 1) return;

      var firstY = (startY - minY) / realHeight * height;
      var secondY = (startY + baseNumber - minY) / realHeight * height;
      if (Math.abs(secondY - firstY) < epsilon) return;

      for (var i = startY; i < endY; i += baseNumber) {
        if (i != 0 && i % expect === 0) continue;
        var y = Math.floor((i - minY) / realHeight * height);
        pathString.push("M ".concat(30 - lineWidth, " ").concat(y, " L 30 ").concat(y));
      }
    }
  }, {
    key: "makeLineText",
    value: function makeLineText(baseNumber, minY, maxY, realHeight, height) {
      var epsilon = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 3;
      var text = [];
      var startY = minY - minY % baseNumber;
      var endY = maxY + maxY % baseNumber; // if (height / realHeight < 1) return;

      var firstY = (startY - minY) / realHeight * height;
      var secondY = (startY + baseNumber - minY) / realHeight * height;
      if (Math.abs(secondY - firstY) < epsilon) return;

      for (var i = startY; i < endY; i += baseNumber) {
        var y = Math.floor((i - minY) / realHeight * height);
        text.push("<text x=\"".concat(1, "\" y=\"", y, "\" dy=\"6\" dominant-baseline=\"central\" transform=\"rotate(-90, 1, ").concat(y, ")\">").concat(i, "</text>"));
      }

      return text.join('');
    }
  }, {
    key: "makeRulerForCurrentArtboard",
    value: function makeRulerForCurrentArtboard() {
      var current = this.$selection.current;
      if (!current) return '';
      var currentArtboard = current.artboard;
      if (!currentArtboard) return '';
      var verties = currentArtboard.verties();
      var _this$$viewport = this.$viewport,
          minY = _this$$viewport.minY,
          maxY = _this$$viewport.maxY,
          realHeight = _this$$viewport.height;
      var height = this.state.rect.height;
      var firstY = (verties[0][1] - minY) / realHeight * height;
      var secondY = (verties[2][1] - minY) / realHeight * height;
      return "\n            M 20 ".concat(firstY, "\n            L 30 ").concat(firstY, "\n            L 30 ").concat(secondY, "\n            L 20 ").concat(secondY, "\n            Z\n        ");
    }
  }, {
    key: "makeRulerForCurrent",
    value: function makeRulerForCurrent() {
      var current = this.$selection.current;
      if (!current) return ''; // viewport 

      var _this$$viewport2 = this.$viewport,
          minY = _this$$viewport2.minY,
          realHeight = _this$$viewport2.height;
      var height = this.state.rect.height; // current

      var verties = this.$selection.verties;
      var yList = verties.map(function (it) {
        return it[1];
      });
      var currentMinY = Math.min.apply(Math, yList);
      var currentMaxY = Math.max.apply(Math, yList);
      var firstY = (currentMinY - minY) / realHeight * height;
      var secondY = (currentMaxY - minY) / realHeight * height;
      return "\n            M 15 ".concat(firstY, "\n            L 20 ").concat(firstY, "\n            L 20 ").concat(secondY, "\n            L 15 ").concat(secondY, "\n            Z\n        ");
    }
  }, {
    key: "makeRuler",
    value: function makeRuler() {
      var _this$$viewport3 = this.$viewport,
          minY = _this$$viewport3.minY,
          maxY = _this$$viewport3.maxY,
          realHeight = _this$$viewport3.height;
      var height = this.state.rect.height;
      VerticalRuler_pathString = [];
      this.makeLine(VerticalRuler_pathString, 200, minY, maxY, realHeight, height, 10, 18, 10000);
      this.makeLine(VerticalRuler_pathString, 100, minY, maxY, realHeight, height, 10, 18, 200);
      this.makeLine(VerticalRuler_pathString, 50, minY, maxY, realHeight, height, 10, 18, 100);
      this.makeLine(VerticalRuler_pathString, 10, minY, maxY, realHeight, height, 10, 18, 50);
      this.makeLine(VerticalRuler_pathString, 5, minY, maxY, realHeight, height, 10, 15, 10);
      this.makeLine(VerticalRuler_pathString, 1, minY, maxY, realHeight, height, 10, 14, 5);
      return VerticalRuler_pathString.join('');
    }
  }, {
    key: "makeRulerText",
    value: function makeRulerText() {
      var _this$$viewport4 = this.$viewport,
          minY = _this$$viewport4.minY,
          maxY = _this$$viewport4.maxY,
          realHeight = _this$$viewport4.height;
      var height = this.state.rect.height;
      var dist = Math.abs(maxY - minY);
      return [dist > 3000 ? this.makeLineText(500, minY, maxY, realHeight, height, 20) : '', 1000 < dist && dist < 3000 ? this.makeLineText(100, minY, maxY, realHeight, height, 20) : '', 800 < dist && dist < 1000 ? this.makeLineText(100, minY, maxY, realHeight, height, 20) : '', 500 < dist && dist < 800 ? this.makeLineText(100, minY, maxY, realHeight, height, 20) : '', 500 < dist && dist < 800 ? this.makeLineText(50, minY, maxY, realHeight, height, 20) : '', 200 < dist && dist < 500 ? this.makeLineText(50, minY, maxY, realHeight, height, 20) : '', 50 < dist && dist < 200 ? this.makeLineText(10, minY, maxY, realHeight, height, 20) : '', 15 < dist && dist < 50 ? this.makeLineText(5, minY, maxY, realHeight, height, 20) : '', 0 < dist && dist < 15 ? this.makeLineText(1, minY, maxY, realHeight, height, 20) : ''].join('');
    }
  }, {
    key: Object(Event["LOAD"])('$body') + Event["DOMDIFF"],
    value: function value() {
      if (!this.state.rect || this.state.rect.width == 0) {
        this.state.rect = this.$el.rect();
      }

      return (
        /*html*/
        "\n            <svg width=\"100%\" height=\"100%\" overflow=\"hidden\">\n                <path d=\"".concat(this.makeRuler(), "\" fill=\"transparent\" stroke-width=\"0.5\" stroke=\"white\" transform=\"translate(0, 0.5)\" />\n                ").concat(this.makeRulerText(), "\n            </svg>\n        ")
      );
    }
  }, {
    key: Object(Event["LOAD"])('$layerRuler') + Event["DOMDIFF"],
    value: function value() {
      if (!this.state.rect || this.state.rect.width == 0) {
        this.state.rect = this.$el.rect();
      }

      return (
        /*html*/
        "\n            <svg width=\"100%\" height=\"100%\" overflow=\"hidden\">\n                <path d=\"".concat(this.makeRulerForCurrent(), "\" fill=\"rgba(100, 255, 255, 0.5)\" />\n            </svg>\n        ")
      );
    }
  }, {
    key: "refresh",
    value: function refresh() {
      if (this.$config.get('ruler.show')) {
        this.load();
      }
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('updateViewport'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('refreshSelection', 'refreshRect'),
    value: function value() {
      this.load('$layerRuler');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('resize.window', 'resizeCanvas'),
    value: function value() {
      this.refreshCanvasSize();
    }
  }]);

  return VerticalRuler;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  VerticalRuler: VerticalRuler_VerticalRuler
});
// CONCATENATED MODULE: ./src/editor-layouts/designeditor/BodyPanel.js







var BodyPanel_templateObject;

function BodyPanel_createSuper(Derived) { var hasNativeReflectConstruct = BodyPanel_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function BodyPanel_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var elClass = emotion_css_esm_css(BodyPanel_templateObject || (BodyPanel_templateObject = taggedTemplateLiteral_default()(["\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  bottom: 0px;\n  right: 0px;\n\n  &:not(.ruler) {\n    > .page-container {\n      left: 0px !important;\n      top: 0px !important;\n    }\n  }\n"])));

var BodyPanel_BodyPanel = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(BodyPanel, _EditorElement);

  var _super = BodyPanel_createSuper(BodyPanel);

  function BodyPanel() {
    classCallCheck_default()(this, BodyPanel);

    return _super.apply(this, arguments);
  }

  createClass_default()(BodyPanel, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"body-panel\">\n        <object refClass='HorizontalRuler' />\n        <object refClass='VerticalRuler' />\n        <object refClass='CanvasView' />        \n      </div>\n    "
      );
    }
  }, {
    key: Object(Event["BIND"])('$el'),
    value: function value() {
      return {
        "class": "".concat(elClass, " ").concat(this.$config.get('ruler.show') ? 'ruler' : '')
      };
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('config:ruler.show'),
    value: function value() {
      this.refresh();
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('bodypanel.toggle.fullscreen'),
    value: function value() {
      this.refs.$el.toggleFullscreen();
    }
  }]);

  return BodyPanel;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  BodyPanel: BodyPanel_BodyPanel
});
// EXTERNAL MODULE: ./src/el/editor/ui/popup/index.js + 51 modules
var popup = __webpack_require__(161);

// EXTERNAL MODULE: ./src/el/editor/ui/window-list/index.js + 6 modules
var window_list = __webpack_require__(163);

// EXTERNAL MODULE: ./src/el/editor/ui/view/NotificationView.js
var NotificationView = __webpack_require__(160);

// CONCATENATED MODULE: ./src/editor-layouts/designeditor/PopupManager.js






function PopupManager_createSuper(Derived) { var hasNativeReflectConstruct = PopupManager_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function PopupManager_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }







var PopupManager_PopupManager = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(PopupManager, _EditorElement);

  var _super = PopupManager_createSuper(PopupManager);

  function PopupManager() {
    classCallCheck_default()(this, PopupManager);

    return _super.apply(this, arguments);
  }

  createClass_default()(PopupManager, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"popup-manger\">\n        <object refClass='ColorPickerPopup' />\n        <object refClass='BoxShadowPropertyPopup' />\n        <object refClass='BackgroundImagePositionPopup' />\n        <object refClass='TextShadowPropertyPopup' />\n        <object refClass='AnimationPropertyPopup' />\n        <object refClass='TransitionPropertyPopup' />\n        <object refClass='KeyframePopup' />\n        <object refClass='ClipPathPopup' />\n        <object refClass='SVGPropertyPopup' />\n        <object refClass='SelectorPopup' />\n        <object refClass='ImageSelectPopup' />\n        <object refClass='GradientPickerPopup' />\n        <object refClass='FillPickerPopup' />\n        <object refClass='PatternInfoPopup' />\n        <object refClass='SVGFilterPopup' />\n        <object refClass='ExportWindow' />\n        <object refClass='ProjectWindow' />\n        <object refClass='ShortcutWindow' />\n        <!-- LoginWindow / -->\n        <!-- SignWindow / -->\n        <!-- ImageFileView / -->\n        <object refClass='NotificationView' />\n      </div>\n    "
      );
    }
  }]);

  return PopupManager;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  PopupManager: PopupManager_PopupManager
});
// CONCATENATED MODULE: ./src/editor-layouts/designeditor/KeyboardManager.js






function KeyboardManager_createSuper(Derived) { var hasNativeReflectConstruct = KeyboardManager_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function KeyboardManager_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var formElements = ['TEXTAREA', 'INPUT', 'SELECT'];

var KeyboardManager_KeyboardManager = /*#__PURE__*/function (_EditorElement) {
  inherits_default()(KeyboardManager, _EditorElement);

  var _super = KeyboardManager_createSuper(KeyboardManager);

  function KeyboardManager() {
    classCallCheck_default()(this, KeyboardManager);

    return _super.apply(this, arguments);
  }

  createClass_default()(KeyboardManager, [{
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"keyboard-manager\"></div>\n    "
      );
    }
  }, {
    key: "isNotFormElement",
    value: function isNotFormElement(e) {
      var tagName = e.target.tagName;
      if (formElements.includes(tagName)) return false;else if (Dom["a" /* default */].create(e.target).attr('contenteditable') === 'true') return false;
      return true;
    }
  }, {
    key: Object(Event["KEYDOWN"])('document') + Object(Event["IF"])('isNotFormElement'),
    value: function value(e) {
      this.emit('keymap.keydown', e);
    }
  }, {
    key: Object(Event["KEYUP"])('document') + Object(Event["IF"])('isNotFormElement'),
    value: function value(e) {
      this.emit('keymap.keyup', e);
    }
  }]);

  return KeyboardManager;
}(EditorElement["a" /* EditorElement */]);


Object(registElement["a" /* registElement */])({
  KeyboardManager: KeyboardManager_KeyboardManager
});
// EXTERNAL MODULE: ./src/editor-layouts/BaseLayout.js
var BaseLayout = __webpack_require__(145);

// CONCATENATED MODULE: ./src/editor-layouts/designeditor/DesignEditor.js






function DesignEditor_createSuper(Derived) { var hasNativeReflectConstruct = DesignEditor_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = getPrototypeOf_default()(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = getPrototypeOf_default()(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return possibleConstructorReturn_default()(this, result); }; }

function DesignEditor_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





















var DesignEditor_DesignEditor = /*#__PURE__*/function (_BaseLayout) {
  inherits_default()(DesignEditor, _BaseLayout);

  var _super = DesignEditor_createSuper(DesignEditor);

  function DesignEditor() {
    classCallCheck_default()(this, DesignEditor);

    return _super.apply(this, arguments);
  }

  createClass_default()(DesignEditor, [{
    key: "initState",
    value: function initState() {
      return {
        leftSize: 340,
        rightSize: 260,
        bottomSize: 0,
        lastBottomSize: 150
      };
    }
  }, {
    key: "template",
    value: function template() {
      return (
        /*html*/
        "\n      <div class=\"designeditor\">\n        <div class=\"layout-main\">\n          <div class='layout-top' ref='$top'>\n            <object refClass=\"ToolBar\" />\n          </div>\n          <div class=\"layout-middle\" ref='$middle'>      \n            <div class=\"layout-body\" ref='$bodyPanel'>\n              <object refClass=\"BodyPanel\" ref=\"$bodyPanelView\" />\n            </div>                           \n            <div class='layout-left' ref='$leftPanel'>\n              <object refClass='ObjectList' />\n            </div>\n            <div class=\"layout-right\" ref='$rightPanel'>\n              <object refClass='Inspector' />\n            </div>\n\n            <div class='layout-footer' ref='$footerPanel'>\n              <div class='footer-splitter' ref='$footerSplitter' title=\"".concat(this.$i18n('timeline.property.resize'), "\"></div>\n              <object refClass='TimelineProperty' />\n            </div>   \n            <div class='splitter' ref='$splitter'></div>\n          </div>\n          <object refClass='StatusBar' />\n          <object refClass=\"KeyboardManager\" />                \n        </div>\n        <object refClass=\"PopupManager\" />                      \n      </div>\n    ")
      );
    }
  }, {
    key: Object(Event["BIND"])('$splitter'),
    value: function value() {
      var left = "".concat(this.state.leftSize, "px");

      if (this.$config["false"]('show.left.panel')) {
        left = "0px";
      }

      return {
        style: {
          left: left
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$leftPanel'),
    value: function value() {
      var left = "0px";
      var width = unit_Length["a" /* Length */].px(this.state.leftSize);
      var bottom = unit_Length["a" /* Length */].px(this.state.bottomSize);

      if (this.$config["false"]('show.left.panel')) {
        left = "-".concat(this.state.leftSize, "px");
      }

      return {
        style: {
          left: left,
          width: width,
          bottom: bottom
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$rightPanel'),
    value: function value() {
      var right = "0px";
      var bottom = unit_Length["a" /* Length */].px(this.state.bottomSize);

      if (this.$config["false"]('show.right.panel')) {
        right = "-".concat(this.state.rightSize, "px");
      }

      return {
        style: {
          right: right,
          bottom: bottom
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$bodyPanel'),
    value: function value() {
      var left = "".concat(this.state.leftSize, "px");
      var right = "".concat(this.state.rightSize, "px");
      var bottom = "".concat(this.state.bottomSize, "px");

      if (this.$config["false"]('show.left.panel')) {
        left = "0px";
      }

      if (this.$config["false"]('show.right.panel')) {
        right = "0px";
      }

      return {
        style: {
          left: left,
          right: right,
          bottom: bottom
        }
      };
    }
  }, {
    key: Object(Event["BIND"])('$footerPanel'),
    value: function value() {
      var height = unit_Length["a" /* Length */].px(this.state.bottomSize);
      return {
        style: {
          height: height
        }
      };
    }
  }, {
    key: Object(Event["POINTERSTART"])('$splitter') + Object(Event["MOVE"])('moveSplitter') + Object(Event["END"])('moveEndSplitter'),
    value: function value() {
      this.minSize = this.$theme('left_size');
      this.maxSize = this.$theme('left_max_size');
      this.leftSize = unit_Length["a" /* Length */].parse(this.refs.$splitter.css('left')).value;
      this.refs.$splitter.addClass('selected');
    }
  }, {
    key: "moveSplitter",
    value: function moveSplitter(dx) {
      this.setState({
        leftSize: Math.max(Math.min(this.leftSize + dx, this.maxSize), this.minSize)
      });
    }
  }, {
    key: "moveEndSplitter",
    value: function moveEndSplitter() {
      this.refs.$splitter.removeClass('selected');
    }
  }, {
    key: Object(Event["POINTERSTART"])('$footerSplitter') + Object(Event["MOVE"])('moveFooterSplitter'),
    value: function value() {
      this.minFooterSize = this.$theme('bottom_size');
      this.maxFooterSize = this.$theme('bottom_max_size');
      this.bottomSize = unit_Length["a" /* Length */].parse(this.refs.$footerPanel.css('height')).value;
    }
  }, {
    key: "moveFooterSplitter",
    value: function moveFooterSplitter(_, dy) {
      var bottomSize = Math.max(Math.min(this.bottomSize - dy, this.maxFooterSize), this.minFooterSize);
      this.setState({
        bottomSize: bottomSize,
        lastBottomSize: bottomSize
      });
      this.trigger('changeTimelineHeight');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('changeTimelineHeight') + Object(Event["THROTTLE"])(100),
    value: function value() {
      this.emit('refreshTimeline');
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.bindData('$splitter');
      this.bindData('$headerPanel');
      this.bindData('$leftPanel');
      this.bindData('$rightPanel');
      this.bindData('$toggleRightButton');
      this.bindData('$toggleLeftButton');
      this.bindData('$bodyPanel');
      this.bindData('$footerPanel');
      this.emit('resizeEditor');
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('config:show.left.panel'),
    value: function value() {
      var _this = this;

      this.refresh();
      this.nextTick(function () {
        _this.emit('resizeCanvas');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('config:show.right.panel'),
    value: function value() {
      var _this2 = this;

      this.refresh();
      this.nextTick(function () {
        _this2.emit('resizeCanvas');
      });
    }
  }, {
    key: Object(Event["SUBSCRIBE"])('toggleFooter'),
    value: function value(isShow) {
      this.$el.toggleClass('show-footer', isShow);

      if (this.$el.hasClass('show-footer')) {
        if (this.state.bottomSize === 30) {
          this.state.bottomSize = this.state.lastBottomSize || this.$theme('bottom_size');
        }
      } else {
        this.state.bottomSize = 30;
      }

      this.refresh();
    }
  }, {
    key: Object(Event["TRANSITIONEND"])('$el .layout-footer'),
    value: function value(e) {
      this.emit('toggleFooterEnd');
    }
    /** 드랍존 설정을 위해서 남겨놔야함 */

  }, {
    key: Object(Event["DRAGOVER"])('$middle') + Event["PREVENT"],
    value: function value(e) {}
  }, {
    key: Object(Event["DROP"])('$middle') + Event["PREVENT"],
    value: function value(e) {}
    /** 드랍존 설정을 위해서 남겨놔야함 */

  }, {
    key: Object(Event["SUBSCRIBE"])('toggle.fullscreen'),
    value: function value() {
      this.$el.toggleFullscreen();
    }
  }]);

  return DesignEditor;
}(BaseLayout["a" /* default */]);


// EXTERNAL MODULE: ./src/el/base/App.js
var App = __webpack_require__(146);

// EXTERNAL MODULE: ./src/export-library/index.js
var export_library = __webpack_require__(147);

// CONCATENATED MODULE: ./src/editor-layouts/designeditor/index.js


function designeditor_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function designeditor_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { designeditor_ownKeys(Object(source), true).forEach(function (key) { defineProperty_default()(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { designeditor_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }





/* harmony default export */ var designeditor = __webpack_exports__["default"] = (designeditor_objectSpread({
  createDesignEditor: function createDesignEditor() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      type: "white"
    };
    return App["a" /* start */](DesignEditor_DesignEditor, designeditor_objectSpread({}, opts));
  }
}, export_library["a" /* default */]));

/***/ })
/******/ ]);
//# sourceMappingURL=editor.js.map